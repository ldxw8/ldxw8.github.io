[{"title":"回顾 2021，启航 2022","url":"/2022/01/2021-Reviews-2022-Plans.html","content":"<p>不管走得多远、多快，都要回头望一望走过的路。复盘过去，深刻反思，总结经验，探索未来。</p>\n<a id=\"more\"></a>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><ul>\n<li>已阅<ul>\n<li>[技术]《深入浅出区块链》</li>\n<li>[设计]《设计入门教室：设计的基本规则》</li>\n<li>[财务]《富爸爸穷爸爸》</li>\n<li>[心理] 《活出心花怒放的人生》</li>\n</ul>\n</li>\n<li>精读：费曼学习法<ul>\n<li>[技术]《软件设计师》</li>\n<li>[效率]《子弹笔记》</li>\n</ul>\n</li>\n<li>未达成目标<ul>\n<li>[财务]《肖星的财务思维课》[20%]</li>\n<li>[技术]《大型网站技术架构》[60%]</li>\n<li>[物理]《上帝掷骰子吗》[15%]</li>\n<li>[心理]《被讨厌的勇气》[20%]</li>\n<li>[效率]《OKR工作法》[20%]</li>\n<li>[社科]《去依附》[0%]</li>\n</ul>\n</li>\n<li>计划<ul>\n<li>[心理]《放弃的艺术》</li>\n<li>[心理]《别独自用餐》</li>\n<li>[生理]《大脑帝国》</li>\n</ul>\n</li>\n<li>总结<ul>\n<li>涉猎类型窄，以兴趣为点拓宽自身阅读面。</li>\n<li>阅读量太少，充分利用好碎片时间多读书。</li>\n<li>阅读先通读，再通过费曼学习法记录读书笔记（精读）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"课堂\"><a href=\"#课堂\" class=\"headerlink\" title=\"课堂\"></a>课堂</h2><ul>\n<li>[通识] 所长林超《<a href=\"https://www.bilibili.com/cheese/play/ss298\" target=\"_blank\" rel=\"noopener\">跨学科的思维课</a>》：跨学科思维模式训练</li>\n<li>[经济] 珍大户《<a href=\"http://zhendahu.duanshu.com/#/course/c1cb5f2585fa4f68a7f34b5bcb23fb9a\" target=\"_blank\" rel=\"noopener\">认识世界的经济课</a>》：强逻辑思维的微观经济学课程 + 接地气的生活案例课</li>\n<li>[财务] 肖星《<a href=\"https://book.douban.com/subject/35033236/\" target=\"_blank\" rel=\"noopener\">肖星的财务思维课</a>》：财务小白的入门书籍</li>\n<li>[技能] 张策《<a href=\"https://www.bilibili.com/cheese/play/ep5662\" target=\"_blank\" rel=\"noopener\">张策的短视频创作课</a>》：新时代斜杆青年，纵观市场千篇一律具备专业技能的 “人力资源”，习得稀缺性能力，比如拍好小视频的能力或许会获得独特的生态位，毕竟眼睛看得到、耳朵听得到的是最直观的。</li>\n</ul>\n<h2 id=\"启发\"><a href=\"#启发\" class=\"headerlink\" title=\"启发\"></a>启发</h2><ul>\n<li><p>《富爸爸穷爸爸》：财商理财启蒙</p>\n<ul>\n<li>目标：平衡生活开支，竭尽全力购入能带来收入的资产。</li>\n<li>目标：降低负债支出，延迟消费，争取更多钱投入资产。</li>\n<li>起步：尽力兼顾兴趣工作带来收入。</li>\n<li>提升：投入资产接受教育自我增值。</li>\n<li><p>教育：不限投资经验、技能谋生树。</p>\n<blockquote>\n<p>不仅仅财富是资产，知识更像是”元”资产。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>《<a href=\"https://www.bilibili.com/bangumi/play/ep337065\" target=\"_blank\" rel=\"noopener\">隐姓亿万富翁</a>》：街头智慧的最佳诠释</p>\n<ul>\n<li>有需才有供：调研需求，创造销售条件</li>\n<li>情绪化管理：负面对自身或他人毫无意义</li>\n<li>仆人式领导：专业人做专业事，懂得尊重、包容、激励、激发人才</li>\n<li>小目标大局观：不忘初心和使命；两点论和重点论结合</li>\n</ul>\n</li>\n<li><p>《<a href=\"https://movie.douban.com/subject/26303622/\" target=\"_blank\" rel=\"noopener\">大空头</a>》《<a href=\"https://movie.douban.com/subject/4888853/\" target=\"_blank\" rel=\"noopener\">商海通牒</a>》《<a href=\"https://movie.douban.com/subject/6013501/\" target=\"_blank\" rel=\"noopener\">大而不倒</a>》：金融题材电影，更通俗易懂地了解金融危机、次贷危机。</p>\n</li>\n<li><p>《<a href=\"https://www.bilibili.com/video/BV1oJ411K7mR\" target=\"_blank\" rel=\"noopener\">经济机器是怎样运行的</a>》：宏观经济学入门推荐短片。</p>\n</li>\n</ul>\n<h2 id=\"习惯\"><a href=\"#习惯\" class=\"headerlink\" title=\"习惯\"></a>习惯</h2><ul>\n<li><p>个人精气神塑造计划：围绕 <code>运动</code>、<code>睡眠</code>、<code>戒糖</code> 三方面开展的微习惯养成计划，每周对三项指标进行考核，不达成目标将会受到惩罚（锁定灵活取用资金、延迟愿望实现时间等）。</p>\n<ul>\n<li><p>说明</p>\n  <table>\n  <thead>\n  <tr>\n      <th width=\"15%\">项目</th>\n      <th>说明</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n      <td>💪 运动</td>\n      <td>\n      1. 周工作日，争取一次 Keep 简训<br>\n      2. 周五六日，一主一辅 Keep 简训\n      </td>\n  </tr>\n  <tr>\n      <td>😪 睡眠</td>\n      <td>1. 周工作日，23:45 停掉所有强制休息<br>2. 周五六日，01:45 停掉所有强制休息</td>\n  </tr>\n  <tr>\n      <td>🥤 戒糖</td>\n      <td>每周仅允许两次主动摄入</td>\n  </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>规则</p>\n  <table>\n  <thead>\n  <tr>\n      <th width=\"15%\">项目</th>\n      <th>规则</th>\n      <th>备注</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n      <td>💪 运动</td>\n      <td>+ 奖励最高 4 次，- 惩罚最高 3 次</td>\n      <td>周一至周四自由选择，周五六日必须要锻炼</td>\n  </tr>\n  <tr>\n      <td>😪 睡眠</td>\n      <td>+ 奖励最高 7 次，- 惩罚最高 7 次</td>\n      <td>--</td>\n  </tr>\n  <tr>\n      <td>🥤 戒糖</td>\n      <td>+ 奖励最高 2 次，- 惩罚最高 5 次</td>\n      <td>主要指喝奶茶或饮料的次数</td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n<li><p>数据</p>\n  <div id=\"echarts2971\" style=\"width: 100%;height: 400px;margin: 0 auto\"></div>\n<script src=\"https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js\"></script>\n<script type=\"text/javascript\">\n        // 基于准备好的dom，初始化echarts实例\n        var myChart = echarts.init(document.getElementById('echarts2971'));\n        // 指定图表的配置项和数据\n        var option = {\n\ntooltip: {\n\ttrigger: 'axis',\n\taxisPointer: {\n\t\ttype: 'cross',\n\t\tlabel: {\n\t\t\tbackgroundColor: '#6a7985'\n\t\t}\n\t}\n},\nlegend: {\n\tdata: ['运动奖励', '运动惩罚', '睡眠达标','熬夜惩罚', '戒糖达标', '戒糖惩罚']\n},\ntoolbox: {\n\tfeature: {\n\t\tsaveAsImage: {}\n\t}\n},\ngrid: {\n\tleft: '3%', right: '4%', bottom: '3%',\n\tcontainLabel: true\n},\nxAxis: [\n\t{\n\t\ttype: 'category',\n\t\tboundaryGap: false,\n\t\talignWithLabel: true,\n\t\tdata: [\n\t\t'0823-0829', '0830-0905', '0906-0912', '0913-0919', \n\t\t'0920-0926', '0927-1003', '1004-1010', '1011-1017', \n\t\t'1018-1024', '1025-1031', '1101-1107', '1108-1114', \n\t\t'1115-1121', '1122-1128', '1129-1205', '1206-1212', \n\t\t'1213-1219', '1220-1226'\n\t\t]\n\t}\n],\nyAxis: [\n\t{\n\t\ttype: 'value',\n\t\tname: '奖励',\n\t\tmin: -7, max: 7,\n\t\tposition: 'left',\n\t\tsplitNumber: 14,\n\t\taxisLabel: {\n\t\t\tformatter: '{value} 次'\n\t\t}\n\t}\n],\nseries: [\n\t{\n\t\tname: '运动奖励',\n\t\ttype: 'line',\n\t\tsmooth:true,   // 为 true 是不支持虚线的，实线就用true\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{\n\t\t\t\t\twidth:2,\n\t\t\t\t\ttype:'solid'\n\t\t\t\t},\n\t\t\t\tcolor: '#f87466'\n\t\t\t}\n\t\t},\n\t\tdata: ['4', '3', '3', '2', '3', '3', '3', '1', '1', '2', '1', '3', '2', '3', '2', '2', '1', '2']\n\t},\n\t{\n\t\tname: '运动惩罚',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{\n\t\t\t\t\twidth:2,\n\t\t\t\t\ttype:'dotted'  // 'dotted'虚线 'solid'实线\n\t\t\t\t},\n\t\t\t\tcolor: '#f87466'\n\t\t\t}\n\t\t},\n\t\tdata: ['-1', '-2', '-1', '-3', '0', '-1', '-1', '0', '-3', '-2', '-2', '-1',  '-1', '-2', '-2', '-1', '-1', '-2']\n\t},\n\t{\n\t\tname: '睡眠达标',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{\n\t\t\t\t\twidth:2,\n\t\t\t\t\ttype:'solid'\n\t\t\t\t},\n\t\t\t\tcolor: '#3f5d95'\n\t\t\t}\n\t\t},\n\t\tdata: ['4', '4', '6', '4', '3', '2', '0', '4', '5', '3', '2', '6', '2', '2', '3', '3', '2', '2']\n\t},\n\t{\n\t\tname: '熬夜惩罚',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\t\titemStyle:{\n\t\t\t\tnormal:{\n\t\t\t\t\tlineStyle:{\n\t\t\t\t\t\twidth:2,\n\t\t\t\t\t\ttype:'dotted'  // 'dotted'虚线 'solid'实线\n\t\t\t\t\t},\n\t\t\t\tcolor: '#3f5d95'\n\t\t\t}\n\t\t},\n\t\tdata: ['-3', '-3', '-1', '-3', '-4', '-5', '-7', '-2', '-2', '-4', '-5', '-1', '-5', '-5', '-4', '-4', '-6', '-5']\n\t},\n\t{\n\t\tname: '戒糖达标',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{\n\t\t\t\t\twidth:2,\n\t\t\t\t\ttype:'solid'\n\t\t\t\t},\n\t\t\t\tcolor: '#ffca3a'\n\t\t\t}\n\t\t},\n\t\tdata: ['0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '0']\n\t},\n\t{\n\t\tname: '戒糖惩罚',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{\n\t\t\t\t\twidth:2,\n\t\t\t\t\ttype:'dotted'  // 'dotted'虚线 'solid'实线\n\t\t\t\t},\n\t\t\t\tcolor: '#ffca3a'\n\t\t\t}\n\t\t},\n\t\tdata: ['-3', '-2', '-1', '-2',  '-1', '-2', '-2', '0', '0', '0', '-1', '-1', '-1', '0', '-2', '-3',  '0', '-1']\n\t}\n]\n};\n        // 使用刚指定的配置项和数据显示图表。\n        myChart.setOption(option);\n</script>\n</li>\n<li><p>总结：精气神塑造计划是从 202106 开始的，省略前期比较杂乱的数据统计，为此统计区间筛选为 202108 ~ 202112。</p>\n<ul>\n<li><code>总评价</code>：运动指标 $\\color{green}{优秀}$，戒糖指标 $\\color{blue}{良好}$，睡眠指标 $\\color{red}{不合格}$。</li>\n<li><code>运动指标</code>：外在雕塑身材，爱美之心驱使健身上瘾；内在自强自律，适当地挑战极限锻炼自身意志力。2021 年度整体运动表现不错，寄望 2022 年度每周运动的习惯要继续保持下去，与其同时，要主动更多地学习健身知识。</li>\n<li><code>睡眠指标</code>：下半年每天入睡时间都比较晚，主要因素是焦虑，下班后忙于学习各种课程。但万事万物讲究平衡，操之过急伴随着不可预知的风险，今年的主题尽可能往 <code>慢节奏</code> 中偏移，适当地慢或许有更佳成效。</li>\n<li><code>戒糖指标</code>：中规中矩，主要外出聚餐的频率有些偏高，聚餐少不了喝酒或者饮料。更值得反思的是，买奶茶的频率似乎很高，既使知道喝多伤身但就不听使唤，真的道理都懂执行很难。这次尝试把喝奶茶跟痛苦的事情绑在一起，一次不要太狠有成效即可。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"消费\"><a href=\"#消费\" class=\"headerlink\" title=\"消费\"></a>消费</h2><ul>\n<li><p>纵观年度消费清单，一句话总结即深陷消费主义泥潭，但愿早日脱离上岸。</p>\n  <table>\n      <thead>\n      <tr>\n          <th width=\"15%\">消费类型\n          </th><th>消费清单\n      </th></tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>音乐发烧</td>\n          <td>\n              B&O H95<br>AirPods 3<br>SONY M9 + DUNA 瑾<br>\n              Fiio M11 Plus<br>Oriolus BA20 + BD20\n          </td>\n      </tr>\n      <tr>\n          <td>电脑发烧</td>\n          <td>PVE（AllinOne Server）</td>\n      </tr>\n      <tr>\n          <td>手机发烧</td>\n          <td>iPhone 13 Pro</td>\n      </tr>\n      <tr>\n          <td>消费升级</td>\n          <td>iPad Case + iPhone Case + iPhone Wallet</td>\n      </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>Q1：2021 年度购买过多的数码消费品，大部分算不上“利器”（生产力）而是负债，理性的消费理念是“功能大于意义，简洁替代节约”。但是，我们总会刻意地去创造需求让消费合理化，冠上提升效率、释放压力、享受生活、追求美感等理由，创造“积极需求” 不断消费，更甚消费升级。</p>\n<ul>\n<li><p>启示：<code>4WHY分析法</code>，凡事多问几个为什么。两个层面要做消费决策：</p>\n<ul>\n<li>要不要买：购买前先问自己没有必要买？没有它就不能达成目的 / 没有它结果会和预期差很远 / 没有它完成目标时效差很多？</li>\n<li>怎么样买：是否有更低成本的替代方案？是否可延迟满足，等待历史最低价再购买？是否考虑二手商品？</li>\n</ul>\n</li>\n<li><p>启示：<code>评分卡模型</code>，应对消费者渣型心理， 以辅助我们走出 “决定买时什么都想买” 的窘境。模型中，每一项指标不同人心中的权重都不一样，购买前给产品打分，再按照权重求得模型总得分。</p>\n<blockquote>\n<p>方法启发于 <a href=\"https://www.bilibili.com/video/BV1cF411h7aT\" target=\"_blank\" rel=\"noopener\">半佛仙人.科学的刀打断消费主义的骚.Bilibili.com</a></p>\n</blockquote>\n<ul>\n<li>资金占比程度：利用分红资金（奖励金）购买商品，预算占分红资金的比例。</li>\n<li>产品附加效应：功能大于意义。</li>\n<li>紧急等级：等等党永不为奴。</li>\n<li>需求满足递减效应：是否已拥有替代品。</li>\n<li>残值利用可行性：二手回血。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Q2：经济增速下滑大环境之下，现今的心理焦虑问题不容小觑，有时候在学业、工作上得不到的，或者生活上不如意的，总会想方设法在不同方面寻求满足感，加上消费主义当行、商家不断洗脑需求，似乎 ”买买买“ 带来的多巴胺快乐暂且能掩盖所有不愉快的事物。但始终不闭环的过程，只会在消费主义的陷阱中越陷越深。</p>\n<ul>\n<li>启示：寻找合适的杠杆解，学业、工作、生活方面的不理想，请按照不同的课题来分析问题、解决问题。比如：<ul>\n<li>学业：学习不同学科知识，横向扩宽知识面，纵向提高认知力。焦虑感更多是自身局限的认知导致的。</li>\n<li>工作：差异化建设自身能力圈，并深耕一项专业技能做到不可取代，这也是打破内卷的良方。</li>\n<li>生活：饮食、睡眠、运动、心情。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Journal"],"tags":["总结","消费","书单"]},{"title":"论文 | 降维分类方法：以改进质谱流式细胞识别技术","url":"/2018/06/Automatic-classification-of-cellular-expression-by-nonlinear-stochastic-embedding.html","content":"<div class=\"note default\"><p>原文：Automatic classification of cellular expression by nonlinear stochastic embedding (ACCENSE)<br>作者：Karthik Shekhar, Petter Brodin, Mark M.Davis and Arup K.Chakraborty.<br>来源：Proceedings of the National Academy of Sciences (PNAS), 2014, 111(1): 202-207.  </p></div>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>质谱流式细胞技术（Mass cytometry）能够在单细胞水平上识别到近 40 种不同的蛋白质，即提供前所未有的多维信息。由于各式各样的细胞种群数据集的复杂性，要收集有用的生物学知识对计算工具也有新的要求。回顾之前的聚类方法，聚类需要特征（维度），而每一种蛋白质（细胞表征由不同蛋白质表示）可当作一种特征，聚类算法就会自动识别不同类型的簇群，即对于不同功能的细胞识别是基于细胞表征相似性来实现区分的。当然，经典方法存在一定局限性，例如单细胞分辨率的损失（特征或维度的减少）；经典方法需要预知簇中的对象数量（本文中指细胞亚群的规模数量）。</p>\n<a id=\"more\"></a>\n<p>而该论文引入 <code>ACCENSE</code> ( Automatic classification of cellular expression by nonlinear stochastic embedding ) 高维单细胞数据分析工具：</p>\n<ul>\n<li>基于密度划分的非线性降维方法，降维方法采用 <code>t-Distributed Stochastic Neighbor Embedding (t-SNE)</code> 算法 $^{[1]}$。</li>\n<li>该算法非常适合于探索性数据分析，同时避免任何手动 <code>阀门（阈值）</code> 的需要，即有别于基于距离的方法（离群点判定）、基于密度的方法） 密度阈值设定）。</li>\n<li>化繁为简，在二维或三维图上展示不同功能的多元细胞群。</li>\n</ul>\n<p>再有，本论文将 ACCENSE 应用于 35 参数的质谱流式细胞技术，检测 CD8+ T 细胞的数量（数据来自于特定的无病原和无菌小鼠），并将细胞分层到表型亚群中。</p>\n<blockquote>\n<p>注意：对于具体的聚类算法、降维算法中，<strong>特定的符号名称会以具体的对象名称替代</strong>。</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h3><ul>\n<li><p>免疫系统包含了许多类型的细胞，它们在免疫应答过程中表现出多样化的功能和复杂方式的相互作用，即通过不同蛋白质的表征所定义，故个体细胞的功能与其细胞表型密切相关。这里启示我们，对于不同功能的细胞可通过细胞表型相似性进行聚类区分。</p>\n</li>\n<li><p>传统流式细胞技术和质谱流式细胞技术的区别：</p>\n<ul>\n<li><p>传统流式细胞技术 ( Flow Cytometry ) $^{[2]}$ 中，用 <code>荧光基因</code> 标记的抗体染色，其通过单细胞分辨率的光发射信号对靶标蛋白进行量化。且由于有限的光谱和重叠的发射信号，每个细胞限制为 12-16 个参数进行量化。</p>\n</li>\n<li><p>质谱流式细胞技术 ( Mass Cytometry ) $^{[3]}$ ，使用 <code>金属螯合探针</code> 可对单个细胞多达 42 个参数的进行量化。</p>\n</li>\n<li><p>传统流式细胞技术和质谱流式细胞技术相比，主要有两点不同：  </p>\n<ul>\n<li>标签系统的不同，前者主要使用各种荧光基团作为抗体的标签，后者则使用各种金属元素作为标签；  </li>\n<li>检测系统的不同，前者使用激光器和光电倍增管，而后者使用 ICP 质谱技术。 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"聚类算法\"><a href=\"#聚类算法\" class=\"headerlink\" title=\"聚类算法\"></a>聚类算法</h3><ul>\n<li>由 <code>质谱流式细胞技术产生的高维数据</code>，以生物学的方式解释是具有挑战性的。然而，很多聚类工具是基于细胞的蛋白表达相似性进行细胞分类的，</li>\n<li>例如，<code>SPADE 算法</code> $^{[4,5]}$ 使用多元信息定义细胞簇，并在树状结构中显示潜在的表型层次结构。但尚有不足之处：<ul>\n<li>一是单细胞分辨率的损失；</li>\n<li>二是对目标集群数量的需要预知。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"降维算法\"><a href=\"#降维算法\" class=\"headerlink\" title=\"降维算法\"></a>降维算法</h3><blockquote>\n<p>关于 <code>降维算法</code> 在另外一篇博文也有提及，不妨参考学习：<a href=\"https://www.kofes.cn/2018/11/The-Best-Way-to-Visualize-a-Dataset-Easily.html\">利用 t-SNE 降维并可视化数据</a>。</p>\n</blockquote>\n<ul>\n<li>同样，降维算法以细胞表征 ( 由不同蛋白质表示 ) 的相似性为依据，把空间组织的细胞群在低维空间上聚类成不同的细胞亚群。以下罗列一些常见的降维算法。</li>\n<li><code>PCA 算法</code>：PCA 降维的大致思想就是，挑选特征明显的、显得比较重要的信息保留下来。在本论文中，Newell 等人将主成分分析 ( Principal component analysis，PCA ) 应用于 25 参数的质谱流式细胞技术，检测人的 CD8+ T 细胞的数量，且使用前三种主成分 ( 3D-PCA ) 分离细胞亚群。3D-PCA 以三个汇总变量表示数据，每个汇总变量都是原始维度的 <code>线性组合</code>，并去捕获投影后数据的方差，直至其取值为最大值。然而，PCA 能在数据中所有的可能线性组合中找到最优表达，但也存在限制条件：线性投影可能太严格而不能产生精确的表示 $^{[6]}$，故作者引入 t-SNE 算法继续展开研究。</li>\n<li><p><code>t-SNE 算法</code> $^{[7]}$：t-Distributed Stochastic Neighbor Embedding，数据降维与可视化的方法，具体的算法细节如下：</p>\n<ul>\n<li>让 ${x^{(i)}}$ 表示归一化的 N 维蛋白质表达向量编码的细胞表型 i ( i=1, 2, …, M )。</li>\n<li>若在 2D 平面图下，${y^{(i)}}$ 向量是高维向量 ${x^{(i)}}$ 对应于低维的映射，它使得具有相似表型的 T 细胞彼此靠近嵌入，表型不相似的则嵌入相对较远的距离。</li>\n<li>采用细胞 i 和 j 之间的成对概率 ${p_{i,j}}$ 表示 ${x^{(i)}}$ 与 ${x^{(j)}}$ 之间的相似性。</li>\n<li>若在 2D 平面图下，成对概率 ${q_{i,j}}$ 表示 ${y^{(i)}}$ 与 ${y^{(j)}}$ 之间的相似性。</li>\n<li><p>通过最小化 ${p<em>{i,j}}$ 与 ${q</em>{i,j}}$ 的 KL 散度 ( 可理解为代价函数 )，然后找出 “最佳” 嵌入向量 ${y^{(i)}}$，即它表示的意义是，高维转低维的表示信息能最大程度被保存下来。</p>\n<blockquote>\n<p>K-L 散度 ( <a href=\"#1-t-SNE-中的概率\">详细见附录 1</a> )，Kullback-Leibler Divergence，又称相对熵，即描述两概率分布 P 和 Q 的差异。KL 散度公式 (1) 如下：</p>\n</blockquote>\n<script type=\"math/tex; mode=display\">D_{KL}(\\{p_{i,j}\\}|\\{q_{i,j}\\}) = \\sum_{i,j} p_{i,j} log \\frac{p_{i,j}}{q_{i,j}} \\tag{1}</script></li>\n<li><p>${y^{(i)}}$ 可以编码非线性关系，不像 PCA 中被约束为 ${x^{(i)}}$ 的线性组合。</p>\n</li>\n<li><code>最佳嵌入</code> 是通过数值梯度下降法来确定的，即所有数据点的 KL 散度总和减小到最小 ( <a href=\"#2-数值梯度下降法\">详细见附录 2</a> )。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"识别细胞亚群\"><a href=\"#识别细胞亚群\" class=\"headerlink\" title=\"识别细胞亚群\"></a>识别细胞亚群</h3><ul>\n<li><p>使用一个高斯核函数，把 t-SNE 的二维细胞散点图加工成 <code>复合图像</code>，如图 1-1 (D) 所示。其中，$K_\\gamma(y)$ 通过计算低维空间中所有细胞的位置总和，以表示 t-SNE 二维映射图中细胞的局部密度：</p>\n<script type=\"math/tex; mode=display\">K_\\gamma(y) = (2 \\pi \\gamma^2)^{-1}\n  \\sum_{y' \\in Y}exp( -\\frac{||y - y'||^{2}}{2\\gamma^2})\n  \\tag{2}</script></li>\n<li><p>在本论文中，$K_\\gamma(y)$ 的 <code>局部最大值</code> 表示具有共同表型的 CD8+ T 细胞亚群，且使用了 Matlab 的峰值检测算法识别这些局部最大值。</p>\n<blockquote>\n<p>当然，也可以在嵌入点上使用 K-Means 聚类算法来识别 T 细胞子集，但其要求事先指定簇的数量。</p>\n</blockquote>\n</li>\n<li><p>如何求得 <code>局部最大值</code>，关键是对于公式 (2) 中 $\\gamma$ 的参数设定多少有关。即通过比较不同的核-带宽 $\\gamma$ ( 核函数的方差，也可理解为窗口、邻域 ) 产生的结果，则存在一个 $\\gamma$ 值为表型空间中的局部和全局特征提供了准确的粗粒度表示。从图 1-2 中可得，即启示我们可以以数据驱动的方式，求得较合适的 $\\gamma$ 值，以近似地识别 CD8+ T 细胞的细胞亚群。</p>\n</li>\n</ul>\n<h3 id=\"相关图表\"><a href=\"#相关图表\" class=\"headerlink\" title=\"相关图表\"></a>相关图表</h3><ul>\n<li>如图 1-1 所示，ACCENSE 应用于质谱高维数据。</li>\n</ul>\n<p><img src=\"/images/illustration/Paper/2018/06/Automatic-classification-of-cellular-expression-by-nonlinear-stochastic-embedding_1-1.jpg\" alt=\"图1-1ACCENSE ACCENSE 应用于质谱高维数据\"></p>\n<center>图 1-1 ACCENSE 应用于质谱高维数据</center>\n\n<p>(A) 质谱细胞计数数据集样本的图示。行对应于不同的细胞，而列对应于测量其表达 (细胞表面抗原和细胞内蛋白) 的不同标记的金属螯合抗体。每一元组对应于指示每个标记的表达水平的质荷比变换值 (反双曲函数)。(C) 来自SPF B6 小鼠的 CD8+ T 细胞的 2D t-SNE 图谱。每个点代表来自训练集的一个细胞 (M = 18304)，且数据点是通过对原始数据集进行下采样得到。(D) 通过使用基于 <a href=\"https://sklearn.apachecn.org/docs/0.21.3/27.html\" target=\"_blank\" rel=\"noopener\">高斯核密度变换</a> ($K_{\\gamma}(y)\\,{,}\\,\\gamma = 7$)，将细胞的局部概率密度嵌入 (C) 的复合图像。并使用标准的峰值检测算法进行识别局部最大值，在二维密度图表示表型亚群的中心。</p>\n<ul>\n<li>如图 1-2 所示，展示了峰值随着 $\\gamma$ 的增加而变化。</li>\n</ul>\n<p><img src=\"/images/illustration/Paper/2018/06/Automatic-classification-of-cellular-expression-by-nonlinear-stochastic-embedding_1-2.png\" alt=\"图1-2展示了峰值随着γ的增加而变化\"></p>\n<center>图 1-2 展示了峰值随着 $\\gamma$ 的增加而变化</center>\n\n\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"1-t-SNE-中的概率\"><a href=\"#1-t-SNE-中的概率\" class=\"headerlink\" title=\"1 t-SNE 中的概率\"></a>1 t-SNE 中的概率</h3><h4 id=\"p-i-j-概率\"><a href=\"#p-i-j-概率\" class=\"headerlink\" title=\"$p_{i,j}$ 概率\"></a>$p_{i,j}$ 概率</h4><ul>\n<li>基于蛋白质相似性，设 $p<em>{j|i}$ (i,j = 1, 2, …, M) 表示细胞 i 将选择细胞 j 作为其最近邻的概率 ( $p</em>{j|i}$ 越大，$x^{(i)} 和 x^{(j)}$ 越近 )：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\np_{j|i} = \\frac{\n    exp({-||x^{(i)} - x^{(j)}||^2} / {\n    2\\sigma_i^2})\n}{ \n    \\sum_{k \\neq i} exp({-||x^{(i)} - x^{(k)}||^2} / {\n    2\\sigma_i^2})\n}, d_{i,j} = ||x^{(i)} - x^{(j)}||_2\n\\tag{3}</script><ul>\n<li><p>对于概率 $p_{j|i}$ 的几点说明：</p>\n<ul>\n<li>$d_{i,j}$ 可以使用其他距离范式替代欧式距离范式；</li>\n<li><p>原始的 SNE 算法是不对称的，为简化梯度公式，t-SNE 中让公式 (3) 的条件概率是对称的。即初始化 $p<em>{i|i} = 0$ ( 只考虑不同点两两之间的相似度 )，对于任意的 $p</em>{i|j} = p_{j|i}$，可得：</p>\n<script type=\"math/tex; mode=display\">\np_{i,j} = \\frac{\n  p_{j|i} + p_{i|j} \n}{2M} = \\frac{\n  exp({-d_{i,j}^2} / {\n  2\\sigma_i^2})\n}{ \n  \\sum_{k \\neq i} exp({-d_{i,k}^2} / {\n  2\\sigma_i^2})\n}\np_{i,j} = \\frac{\n  p_{j|i} + p_{i|j} \n}{2N} \\\\\n( p_{j|i} = \\frac{p_{i,j}}{p_i}, \\,\np_{i|j} = \\frac{p_{i,j}}{p_j}, \\,\np_i = p_j = \\frac1M )\n\\tag{4}</script></li>\n</ul>\n</li>\n<li><p>不同的点 $x_i$，方差 $\\sigma_i$ 的取值也是不同的。</p>\n<ul>\n<li>公式 (3) 中的方差 $\\sigma_i$ 是确保对于每一个细胞都有相同的困惑度 ( Complexity )。复杂度可理解为一个点附近的 <code>有效近邻点个数</code>。</li>\n<li>定义复杂度为 $P<em>i = 2^{H</em>{j|i}}$，其近似地解释为细胞 i 的最近邻点的数量。</li>\n<li><p>定义 $p<em>{j|i}$ 的香农熵 (信息熵) 为 $H</em>{j|i} = - \\sum<em>j p</em>{j|i} \\log<em>2 p</em>{j|i}$，且 $H_{j|i}$ 随着 $\\sigma_i$ 的增加而增加。</p>\n<blockquote>\n<p>在本论文中，t-SNE 图谱的复杂度被设定为 30，即 10-50 范围内的复杂度对最终结果的影响不大 (较好的鲁棒性)。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"q-i-j-概率\"><a href=\"#q-i-j-概率\" class=\"headerlink\" title=\"$q_{i,j}$ 概率\"></a>$q_{i,j}$ 概率</h4><ul>\n<li><p>对于低维度下的 ${y<em>i}$，在原始的 SNE 算法 $^{[7]}$ 中 Hinton 和 Rowers 引用高斯分布函数定义 $q</em>{i,j}$，但在低维表达中发现了 <code>拥挤问题</code>。</p>\n<blockquote>\n<p><code>拥挤问题</code>：就是说各个簇聚集在一起，无法区分。譬如，有一高维度数据在降维到 10 维下可以有很好的表达，但是降维到两维后无法得到可信映射。具体情况是，10 维中有数个点之间两两等距离的，在二维下就无法得到可信的映射结果。  </p>\n<p>进一步说明，假设一个以数据点 $x^i$ 为中心，半径为 r 的 m 维球(三维空间就是球)，其体积是按 $r^m$ 增长的，假设数据点是在 m 维球中均匀分布的，我们来看看其他数据点与 $x^i$ 的距离随维度增大而产生的变化。</p>\n</blockquote>\n</li>\n<li><p>t-SNE 减轻了拥挤问题，即使用更加偏重长尾分布的方式来将距离转换为概率分布 $^{[8]}$，故有 $q_{i,j}$：</p>\n<script type=\"math/tex; mode=display\">\n  q_{i,j} = \\frac{\n      (1 + ||y^{(i)} - y^{(j)}||^2)^{-1}\n  }{ \n      \\sum_{k \\neq i} (1 + ||y^{(i)} - y^{(k)}||^2)^{-1}\n  }, \\Delta_{i,j} = ||y^{(i)} - y^{(j)}||^2\n  \\tag{5}</script></li>\n<li><p>同样地，对于概率 $q_{i,j}$ 的几点说明：</p>\n<ul>\n<li>$\\Delta_{i,j}$ 可以使用其他距离范式替代欧式距离范式；</li>\n<li>原始的 SNE 算法是不对称的，为简化梯度公式，t-SNE 中让公式 (5) 的条件概率是对称的。即初始化 $q<em>{i|i}=0$，对于任意的 $q</em>{i|j} = q_{j|i}$。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-数值梯度下降法\"><a href=\"#2-数值梯度下降法\" class=\"headerlink\" title=\"2 数值梯度下降法\"></a>2 数值梯度下降法</h3><ul>\n<li><p>在 [7] 中的概述过程，获得优化的梯度公式，如下所示:</p>\n<script type=\"math/tex; mode=display\">\n  \\frac{\n      \\partial D_{KL}(\\{p_{i,j}\\} | \\{q_{i,j}\\})\n  }{\n      \\partial_{y_t}^{(i)}\n  } = 4 \\sum_j \\frac{\n      (p_{i,j} - q_{i,j})\n  }{\n      (1 + ||y_t^{(i)} - y_t^{(j)}||^2)\n  }\n  (y_t^{(i)} - y_t^{(j)})\n  \\tag{6}</script></li>\n<li><p>通过梯度下降法迭代计算局部最大值：</p>\n<script type=\"math/tex; mode=display\">\n  y_{t+1}^{(i)} = y_{t}^{(i)} + \\eta(t) \\frac{\n      \\partial D_{KL}(\\{p_{i,j}\\} | \\{q_{i,j}\\})\n  }{\n      \\partial_{y_t}^{(i)}\n  } + \\alpha(t)(y_{t}^{(i)} - y_{t-1}^{(i)})\n  \\tag{7}</script><ul>\n<li>$y_t^{(i)}$ 表示迭代 t 次的解，$\\eta(t)$ 表示学习速率，$\\alpha(t)$ 表示迭代 t 次的动量。</li>\n<li><p>学习速率初始值为 $\\eta(t) = 100\\,^{[9]}$，且动能量 $\\alpha(t)$ 设定为：</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t) = \\begin{cases} 0.8, & t < 300 \\\\\n0.5, & t \\geq 300 \\end{cases}</script></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>t-SNE 主要用于可视化，很难用于其他目的。譬如测试集合降维，因为他没有显式的预估部分，不能在测试集合直接降维。</li>\n<li>关于核-带宽 $\\gamma$ 参数设定问题：文中展示了 $\\gamma$ 参数的大小与识别细胞亚群能力的数量关系。然而，数据驱动方式虽能实现自动聚类，但缺乏对于 $\\gamma$ 参数设定范围该如何控制的说明。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>[1] Maaten L, Hinton G. Visualizing data using t-SNE [J]. Journal of machine learning research, 2008, 9(Nov): 2579-2605.  </li>\n<li>[2] Cantor H, Simpson E, Sato V L, et al. And functional studies of peripheral t-cells binding different amounts of fluorescent anti-thy 1.2 (theta) Antibody using a fluorescence—activated cell sorter (FACS) [J]. 1975. </li>\n<li>[3] Bendall S C, Nolan G P, Roederer M, et al. A deep profiler’s guide to cytometry [J]. Trends in immunology, 2012, 33(7): 323-332. </li>\n<li>[4] Qiu P, Simonds E F, Bendall S C, et al. Extracting a cellular hierarchy from high-dimensional cytometry data with SPADE [J]. Nature biotechnology, 2011, 29(10): 886.  </li>\n<li>[5] Bendall S C, Simonds E F, Qiu P, et al. Single-cell mass cytometry of differential immune and drug responses across a human hematopoietic continuum [J]. Science, 2011, 332(6030): 687-696.  </li>\n<li>[6] Van Der Maaten L, Postma E, Van den Herik J. Dimensionality reduction: a comparative [J]. J Mach Learn Res, 2009, 10: 66-71.  </li>\n<li>[7] Maaten L, Hinton G. Visualizing data using t-SNE [J]. Journal of machine learning research, 2008, 9(Nov): 2579-2605.</li>\n<li><a href=\"http://www.datakit.cn/blog/2017/02/05/t_sne_full.html\" target=\"_blank\" rel=\"noopener\">[8] Chrispher. t-SNE 完整笔记 [OL]. www.datakit.cn. 2017.</a>  </li>\n<li>[9] Jacobs R A. Increased rates of convergence through learning rate adaptation[J]. Neural networks, 1988, 1(4): 295-307.</li>\n</ul>\n","categories":["Paper"],"tags":["数据挖掘","聚类","降维","免疫表型","机器学习"]},{"title":"回顾 2022，启航 2023","url":"/2022/12/2022-Reviews-2023-Plans.html","content":"<p>不管走得多快多远，都要回望走过的路。给过去一年复盘，用过往经验武装自己，以最佳状态迎战 2023！</p>\n<a id=\"more\"></a>\n<h2 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h2><ul>\n<li>追求质量再求数量：按照年初书单计划推进，但平时忙于工作，读书速度会有所放缓，所以进度低于预期值。但也只能一点一滴积累基础通识，以后遇到类似内容才能略过，以提升阅读速度。</li>\n<li>涉猎广但要有聚焦：阅读类型可以广泛，但阶段性要有所聚焦。与其同时，学科知识跨度也可大一些（同一时间只学习同类型的知识很容易疲倦），以此充分利用大脑高效学习。</li>\n<li><p><code>已读</code>：14本</p>\n<ul>\n<li>[技术]《<a href=\"https://book.douban.com/subject/35228141/\" target=\"_blank\" rel=\"noopener\">华为数据之道</a>》</li>\n<li>[心理]《<a href=\"https://book.douban.com/subject/26369699/\" target=\"_blank\" rel=\"noopener\">被讨厌的勇气</a>》</li>\n<li>[其他]《<a href=\"https://book.douban.com/subject/35873836/\" target=\"_blank\" rel=\"noopener\">人间修炼指南</a>》</li>\n<li>[感情]《<a href=\"https://book.douban.com/subject/25809012/\" target=\"_blank\" rel=\"noopener\">爱的博弈</a>》</li>\n<li>[传记]《<a href=\"https://book.douban.com/subject/30377678/\" target=\"_blank\" rel=\"noopener\">曾国藩传</a>》</li>\n<li>[社科]《<a href=\"https://book.douban.com/subject/26335271/\" target=\"_blank\" rel=\"noopener\">马克思主义、毛泽东主义与乌托邦主义</a>》</li>\n<li>[启发]《<a href=\"https://book.douban.com/subject/36044253/\" target=\"_blank\" rel=\"noopener\">软技能：代码之外的生存指南</a>》</li>\n<li>[传记]《<a href=\"https://book.douban.com/subject/36057097/\" target=\"_blank\" rel=\"noopener\">小米创业思考</a>》</li>\n<li>[社交]《<a href=\"https://book.douban.com/subject/27074753/\" target=\"_blank\" rel=\"noopener\">别独自用餐</a>》| <a href=\"https://www.kofes.cn/2022/10/never-eat-alone.html\">读书笔记</a></li>\n<li>[启发]《<a href=\"https://book.douban.com/subject/35876121/\" target=\"_blank\" rel=\"noopener\">纳瓦尔宝典</a>》</li>\n<li>[社科]《<a href=\"https://book.douban.com/subject/35593780/\" target=\"_blank\" rel=\"noopener\">工作、消费主义和新穷人</a>》</li>\n<li><p>[设计]《<a href=\"https://book.douban.com/subject/30442146/\" target=\"_blank\" rel=\"noopener\">事理学方法论</a>》</p>\n<blockquote>\n<p>事理学，类似以第一性原理去研究事物本质。以人为本，循环再生，去设计、创造、表现我们的产品、体验或服务。</p>\n</blockquote>\n</li>\n<li><p>[启发]《<a href=\"https://book.douban.com/subject/35548280/\" target=\"_blank\" rel=\"noopener\">认知驱动</a>》</p>\n</li>\n<li>[投资]《<a href=\"https://book.douban.com/subject/35898229/\" target=\"_blank\" rel=\"noopener\">价值投资实战手册第二辑</a>》</li>\n</ul>\n</li>\n<li><code>精读</code>：3本<ul>\n<li>[技术]《<a href=\"https://book.douban.com/subject/25723064/\" target=\"_blank\" rel=\"noopener\">大型网站技术架构</a>》| <a href=\"https://www.kofes.cn/2022/02/mega-web-site-architecture.html\">读书笔记</a></li>\n<li>[佛法]《<a href=\"https://book.douban.com/subject/5450660/\" target=\"_blank\" rel=\"noopener\">次第花开</a>》| <a href=\"https://www.kofes.cn/2022/10/blooming-flowers-in-turn.html\">读书笔记</a></li>\n<li>[设计]《<a href=\"https://book.douban.com/subject/35643201/\" target=\"_blank\" rel=\"noopener\">任天堂的体验设计</a>》| <a href=\"https://www.kofes.cn/2022/10/nintendo-experience-design.html\">读书笔记</a></li>\n<li>[技术]《<a href=\"https://book.douban.com/subject/33425123/\" target=\"_blank\" rel=\"noopener\">微服务架构设计模式</a>》</li>\n</ul>\n</li>\n<li><p><code>在读</code>：精读 + 视频课程，需要掌握的知识密度比较高</p>\n<ul>\n<li>[财务]《<a href=\"https://book.douban.com/subject/35033236/\" target=\"_blank\" rel=\"noopener\">肖星的财务思维课</a>》50%</li>\n<li>[经济]《<a href=\"https://book.douban.com/subject/35779459/\" target=\"_blank\" rel=\"noopener\">认知世界的经济学</a>》25%</li>\n<li>[心理]《<a href=\"https://book.douban.com/subject/7067149/\" target=\"_blank\" rel=\"noopener\">认知心理学及其启示</a>》35%</li>\n<li>[社科]《<a href=\"https://book.douban.com/subject/1382324/\" target=\"_blank\" rel=\"noopener\">毛澤東的中國及其後</a>》10%</li>\n<li>[心理]《<a href=\"https://book.douban.com/subject/35711062/\" target=\"_blank\" rel=\"noopener\">社会工程</a>》25%</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"课堂\"><a href=\"#课堂\" class=\"headerlink\" title=\"课堂\"></a>课堂</h2><ul>\n<li><p>[经济] 马红漫：行为经济学通识课</p>\n<blockquote>\n<p>行为经济学，启示我们如何面对不确定性，得从了解自己的行为开始。本课程以股票投资中的非理性行为为例，讲解了一些现象背后的行为经济学原理以及应对之策。</p>\n</blockquote>\n</li>\n<li><p>[通识] 洪兰：脑科学课堂</p>\n<blockquote>\n<p>改变大脑的三要素：学习、运动、情绪。我们可利用这种机制训练大脑，以更高效沉迷于学习、更有效调控情绪、更从容应付压力等。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"启示\"><a href=\"#启示\" class=\"headerlink\" title=\"启示\"></a>启示</h2><ul>\n<li><p>[纪录]《<a href=\"https://www.bilibili.com/bangumi/play/ep468598?from_spmid=666.25.episode.0&amp;from_outer_spmid=333.337.0.0\" target=\"_blank\" rel=\"noopener\">富豪谷底求翻身第二季</a>》：学习大佬们的街头智慧</p>\n<ul>\n<li>有需才有供：调研需求，创造销售条件</li>\n<li>情绪化管理：负面对自身或他人毫无意义</li>\n<li>仆人式领导：专业人做专业事，懂得尊重、包容、激励、激发人才</li>\n<li>小目标大局观：不忘初心和使命；两点论和重点论结合</li>\n<li>先他人后个人：自己想赚钱，先给别人先赚钱</li>\n<li>多开口大胆问：争取优惠、折扣、福利，可以利用自身行头/优势去获取资源，比如身份、美貌、人缘等，特别是线下交易场景会有明显效果。</li>\n<li><p>同理共情示弱：不管是表演还是真情流露，要懂得主动示弱承认自身不足、主动理解对方立场及体会、诚意做出承诺并且达成诺言。</p>\n<blockquote>\n<p>观察很多成功博主，他们会主动示弱、激发观众同理心，拉近观众距离。另一方面，也会让观众产生“优越感” 和欢乐感。正如张国荣先生讲的“我们的快乐建筑在观众的快乐之上，只有观众快乐我们才可能拥有”。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>[纪录]《<a href=\"https://www.bilibili.com/bangumi/play/ep256277\" target=\"_blank\" rel=\"noopener\">暴富人生</a>》</p>\n<ul>\n<li>与其说“暴富”人生，更准确说是主人公们借助意外财力帮助自己过渡了艰难的人生阶段，往后以一种积极态度去生活。</li>\n<li>提高认知水平除了防止被骗外，也可以让你在富足时也懂得节制，或是有能力利用这笔钱开启“钱生钱”事业。</li>\n</ul>\n</li>\n<li><p>[书籍]《<a href=\"https://book.douban.com/subject/36044253/\" target=\"_blank\" rel=\"noopener\">软技能</a>》    </p>\n<ul>\n<li>番茄工作法：聚焦于任务，间歇性休息，大任务要分包成小任务执行。通过提升效率节省出超额时间，而这部分时间是奖励给我们的，请不要耗尽它继续学新知识、完成新任务，而是利用它给当日复盘，让碎片化内容联络起来，巩固记忆形成经验。</li>\n<li>定位并认识到自己的短板，把任务分解到自己愿意付诸行动的小任务，落实于行动。</li>\n<li>训练我们的并发、并行能力，但不要让自己长期处于并发工作状态，这是非常耗费精神力的行为，毕竟我们的大脑就一个。</li>\n<li>教学相长可能是最有效果的学习方法（参详费曼学习法）。</li>\n</ul>\n</li>\n<li><p>[书籍]《<a href=\"https://book.douban.com/subject/35989414/\" target=\"_blank\" rel=\"noopener\">肥尾效应</a>》    </p>\n<ul>\n<li>大数定律固然好，但是活在时间长河里，普通人不一定能触达收敛结果。况且还有数据样本不足、收敛速度慢等现实问题。</li>\n<li>薄尾关注概率事件，肥尾注重事件的影响结果。既然后者是小概率发生事件，发生过后不要沉迷于概率游戏，好的方面那就享受结果，坏的方面尽量控制影响。</li>\n</ul>\n</li>\n<li><p>[书籍]《<a href=\"https://book.douban.com/subject/36057097/\" target=\"_blank\" rel=\"noopener\">小米创业思考</a>》    </p>\n<ul>\n<li>创业精髓在于专注，特别是高速发展期，要有意识地进行收敛性思考。不然对公司品牌资产是一种稀释和浪费。</li>\n<li>创业要精确定位、瞄准目标客群，少即是多，单独突破，迭代发展。别老想着第一款产品就要惊天动地、全面胜出，找尽可能发挥自身能力的最小执行单元行动出击。</li>\n<li>“加号改乘号”战略，首突出核心业务，其他业务围绕核心业务添枝散叶，发挥乘法效应。思考是“互联网+”模式，还是“互联网x”模式，比如 “手机xAIoT”。</li>\n<li>运营公司不要忘根，发展过程有没积淀，有没有强化根形成的优势或壁垒。再有，发展有没有给用户带来真实价值，或是对自身有没有提效或增益。</li>\n<li>经济学思维理解，企业的目标是实现利润最大化；财务学思维理解，效率与效益决定了投资回报；无论溢价模式还是性价比模式，都可以赚取“消费者剩余/生产者剩余”。</li>\n<li>第一性原理：透过现象看本质，从事物基本原理出发推理，不依照已有认知和经验进行研究、解决问题。</li>\n<li>逆向性拷问：做决策，相较于必要性论证，不如多找找不去做的理由，从而反证不得不去做的原因。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"习惯\"><a href=\"#习惯\" class=\"headerlink\" title=\"习惯\"></a>习惯</h2><ul>\n<li><p>个人精气神塑造计划：围绕 <code>运动</code>、<code>睡眠</code>、<code>戒糖</code> 三方面开展的微习惯养成计划，每周对三项指标进行考核，不达成 <code>周目标</code> 将会受到惩罚（锁定灵活取用资金、延迟愿望实现时间等）。当然，累计达成 <code>月目标</code> 后也要给自己奖励（老友相聚大吃一顿、刷一整天的电影等），张弛有度才会长久持续。</p>\n<ul>\n<li><p>说明</p>\n  <table>\n  <thead>\n  <tr>\n      <th width=\"15%\">项目</th>\n      <th>说明</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n      <td>💪 运动</td>\n      <td>\n      1. 周工作日，争取一次 Keep 简训<br>\n      2. 周五六日，一主一辅 Keep 简训\n      </td>\n  </tr>\n  <tr>\n      <td>😪 睡眠</td>\n      <td>1. 周工作日，23:30 停掉所有强制休息<br>2. 周五六日，01:30 停掉所有强制休息</td>\n  </tr>\n  <tr>\n      <td>🥤 戒糖</td>\n      <td>每周仅允许两次主动摄入</td>\n  </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>规则</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th width=\"15%\">项目</th>\n      <th>规则</th>\n      <th>备注</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>💪 运动</td>\n      <td>+ 奖励最高 4 次，- 惩罚最高 3 次</td>\n      <td>周一至周四自由，周五六日必须锻炼<br>（提示：<b>一周至少运动三天）</b></td>\n  </tr>\n  <tr>\n      <td>😪 睡眠</td>\n      <td>+ 奖励最高 7 次</td>\n      <td>严格遵守作息规律，不能自我放纵！</td>\n  </tr>\n  <tr>\n      <td>🥤 戒糖</td>\n      <td>+ 奖励最高 2 次，- 惩罚不设限</td>\n      <td>指喝奶茶/饮料的次数，惩罚无上限！</td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n</ul>\n</li>\n<li><p>各项计划执行状况：</p>\n  <div id=\"echarts1928\" style=\"width: 100%;height: 400px;margin: 0 auto\"></div>\n<script src=\"https://cdn.bootcss.com/echarts/3.8.0/echarts.common.min.js\"></script>\n<script type=\"text/javascript\">\n        // 基于准备好的dom，初始化echarts实例\n        var myChart = echarts.init(document.getElementById('echarts1928'));\n        // 指定图表的配置项和数据\n        var option = {\ntooltip: {\n\ttrigger: 'axis',\n\taxisPointer: {\n\t\ttype: 'cross',\n\t\tlabel: {\n\t\t\tbackgroundColor: '#6a7985'\n\t\t}\n\t}\n},\nlegend: {\n\tdata: ['运动指标', '睡眠指标', '戒糖指标']\n},\ntoolbox: {\n\tfeature: {\n\t\tsaveAsImage: {}\n\t}\n},\ngrid: {\n\tleft: '3%', right: '4%', bottom: '3%',\n\tcontainLabel: true\n},\nxAxis: [\n\t{\n\t\ttype: 'category',\n\t\tboundaryGap: false,\n\t\talignWithLabel: true,\n\t\taxisLabel: {\n\t\t\tinterval: 2,\n\t\t\trotate: 45\n\t\t},\n\t\tdata: [\n\t\t\t'0103-0109','0110-0116','0117-0123',\n\t\t\t'0124-0130','0201-0206','0207-0213',\n\t\t\t'0214-0220','0221-0227','0228-0306',\n\t\t\t'0307-0313','0314-0320','0321-0327',\n\t\t\t'0328-0403','0404-0410','0411-0417',\n\t\t\t'0418-0424','0425-0501','0502-0508',\n\t\t\t'0509-0515','0516-0522','0523-0529',\n\t\t\t'0530-0605','0606-0612','0613-0619',\n\t\t\t'0620-0626','0627-0703','0704-0710',\n\t\t\t'0711-0717','0718-0724','0725-0731',\n\t\t\t'0801-0807','0808-0814','0815-0821',\n\t\t\t'0822-0828','0829-0904','0905-0911',\n\t\t\t'0912-0918','0919-0925','0926-1001',\n\t\t\t'1003-1009','1010-1016','1017-1023',\n\t\t\t'1024-1030','1031-1106','1107-1113',\n\t\t\t'1114-1120','1121-1127','1128-1204',\n\t\t\t'1205-1211','1212-1218','1219-1225'\n\t\t]\n\t}\n],\nyAxis: [\n\t{\n\t\ttype: 'value',\n\t\tname: '达标',\n\t\tmin: -3, max: 7,\n\t\tposition: 'left',\n\t\tsplitNumber: 14,\n\t\taxisLabel: {\n\t\t\tformatter: '{value} 次'\n\t\t}\n\t}\n],\nseries: [\n\t{\n\t\tname: '运动指标',\n\t\ttype: 'line',\n\t\tsmooth:true,   // 为 true 是不支持虚线的，实线就用true\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{width:2, type:'solid'},\n\t\t\t\tcolor: '#F1485B'\n\t\t\t}\n\t\t},\n\t\tdata: [\n\t\t\t'1','1','0','0','-1','0','2','0','0','-2',\n\t\t\t'-1','-2','0','1','-1','0','0','1','2','0',\n\t\t\t'0','0','0','-1','-1','0','3','1','2','1',\n\t\t\t'1','1','1','-1','0','-1','1','0','0','3',\n\t\t\t'1','0','-1','1','0','2','0','0','1','-1',\n\t\t\t'2'\n\t\t]\n\t},\n\t{\n\t\tname: '睡眠指标',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{width:2,type:'solid'},\n\t\t\t\tcolor: '#6795A0'\n\t\t\t}\n\t\t},\n\t\tdata: [\n\t\t\t'2','3','4','1','4','3','3','2','1','0',\n\t\t\t'2','2','2','1','4','3','3','4','1','3',\n\t\t\t'3','3','1','3','1','4','1','2','3','3',\n\t\t\t'2','2','1','5','1','0','4','3','2','5',\n\t\t\t'3','3','5','4','1','4','5','3','4','5',\n\t\t\t'7'\n\t\t]\n\t},\n\t{\n\t\tname: '戒糖指标',\n\t\ttype: 'line',\n\t\tsmooth:true,\n\t\titemStyle:{\n\t\t\tnormal:{\n\t\t\t\tlineStyle:{width:2,type:'solid'},\n\t\t\t\tcolor: '#ECB172'\n\t\t\t}\n\t\t},\n\t\tdata: [\n\t\t\t'2','-1','0','-1','-1','0','0','0','-1','-1',\n\t\t\t'-1','-1','0','0','0','0','-1','-1','-1','-2',\n\t\t\t'-1','-1','-1','0','-1','-1','-1','-1','-1','-1',\n\t\t\t'-1','2','-2','-1','1','-1','-1','0','0','-2',\n\t\t\t'0','0','-1','0','0','0','-2','-2','0','0',\n\t\t\t'0'\n\t\t]\n\t}\n]\n};\n        // 使用刚指定的配置项和数据显示图表。\n        myChart.setOption(option);\n</script>\n</li>\n<li><p>精气神计划复盘：纵观全年度，运动、睡眠、戒糖三项指标执行到位，自我感觉个人精气神改造效果不错。但是，个别指标在某阶段会有明显下滑趋势，其中缘由是值得深究反思的。</p>\n<ul>\n<li><code>总评价</code>：运动指标 $\\color{green}{优秀}$，戒糖指标 $\\color{blue}{良好}$，睡眠指标 $\\color{red}{不合格}$。</li>\n<li><p><code>运动指标</code>：享受内啡肽带来的愉悦感，2022年度每周运动量基本达标。但是，第一季度末、第三季度初迎来了两波低谷（结合睡眠指标更明显）。这两段时间印象很深刻，主要是工作方面压力加上职业规划焦虑影响，两度陷入迷惘期，经常睡不着、人整体很疲惫。</p>\n<blockquote>\n<p>当今社会形势，很容易把人整得焦燥急，但冷静想想这些情绪并不会给你带来任何好处。仔细想想，我所拥有的特长能力还没发挥呢，只是资产（财富+知识）积累过程是需要时间的，把达成某些目标的战线拉长，该来的还是会来的，继续以积极心态工作、生活、学习。</p>\n</blockquote>\n</li>\n<li><p><code>睡眠指标</code>：整一个年度一半时间的睡眠都是不及格的，然而，我给自己安的理由是工作忙碌，没时间学习新知识，只能下班发奋图强。</p>\n<blockquote>\n<p>一直以来，我只停留在睡眠对身体不好层面的认知，而总是主观性地忽略了睡眠这件事能带给我们的恶性影响（推荐阅读马修·沃克《<a href=\"https://book.douban.com/subject/35332778/\" target=\"_blank\" rel=\"noopener\">我们为什么要睡觉</a>》| 所长林超《<a href=\"https://www.kofes.cn/2022/01/Interdisciplinary-Thinking.html#生理学重要模型\">生理学重要模型</a>》）。明年开始，不妨给自己做一个实验，坚持一个月早睡早起，但读书、写代码等投入时间还是相等的，一个月后自我验收效果，并观察精神面貌变化如何？大道理一定要身体力行才能领悟呀…</p>\n</blockquote>\n</li>\n<li><p><code>戒糖指标</code>：中规中矩，外出聚餐频率有些偏高，然而聚餐少不了喝酒或者饮料。但是每周都刻意去控制糖分摄入，下半年体验指标还不错。</p>\n<ul>\n<li>不戒糖的后果会比较严重，比如内脏脂肪堆积、神态显老、皮肤变差等，想想这些是不是自己想要的，贪图一时的多巴胺快感，带来后悔莫及的后果呀！</li>\n<li>今年年底尝试了一些新办法来改变坏习惯，其一是增加坏习惯的执行成本，比如没有大额优惠券绝不喝奶茶（不喝便宜奶茶）、平时清淡饮食以减轻想喝柠檬茶的欲望等；其二是坏习惯冲动涌上心头时，通过冥想让自己先冷静下来。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"消费\"><a href=\"#消费\" class=\"headerlink\" title=\"消费\"></a>消费</h2><ul>\n<li>效果：对比 2021 年度，2022 消费降级后的消费支出情况如图（b）所示。以前可谓数码狂热爱好者，既浪费钱也浪费精力！</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/project/2022-Reviews-2023-Plans/2021-Consumer-spending.jpg\" alt></th>\n<th style=\"text-align:center\"><img src=\"/images/project/2022-Reviews-2023-Plans/2022-Consumer-spending.jpg\" alt></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">(a) 2021 年消费支出情况</td>\n<td style=\"text-align:center\">(b) 2022 年消费支出情况</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>剖析原因：</p>\n<ul>\n<li>轻易给自己创造需求，如果花钱确实能节省时间、提高生产力确实是值得的，只是现实需求并没有实际那么强烈。</li>\n<li>经常看科技博主评测，毕竟吸引消费者注意力、提升消费者购买欲就是他们的工作本分，需警惕这样的消费陷阱。</li>\n<li><p>除工作生活之外，空闲时光一定要有精神寄托，比如读书、绘画、练琴、跳舞、发展副业等。回忆起上学时光，总是会闲不住找事折腾，与其随机游走还不如提早计划、刻意为之。</p>\n<blockquote>\n<p>工作忙碌不是好理由，如果一直持有这种信念，那永远发生不了改变。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>尝试改变：提升认知水平，提升财务理念水平，让沉溺于迷幻消费主义的你赶紧清醒过来！</p>\n<ul>\n<li>要改变自己的消费习惯，首先要改变自己的财务理念。</li>\n<li><p>认识什么是资产，什么是负债？买物之前多想想它的价值，不能为你带来财富、知识增殖的少买。</p>\n<blockquote>\n<p>我们恋物不是因为物有价值，而是物辅助我们达成某件事，事情结果赋予经历意义。</p>\n</blockquote>\n</li>\n<li><p>要避免用隐形负债，主动获取了劣质的、无法产生被动收入的资产。比如随着升职加薪而消费升级，表面上光鲜亮丽，实际负债累累。</p>\n</li>\n<li><p>努力学习、拼命工作也是为了过上自由人生活，努力储蓄，活用储蓄投资获取更多收益的工具，成为高产低债者！</p>\n<blockquote>\n<p>收益工具包括金融资产、固定资产、无形资产。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Journal"],"tags":["总结","读书","心理"]},{"title":"论文 | 通过密度峰值进行聚类分析的方法","url":"/2018/05/Clustering-by-fast-search-and-find-of-density-peaks.html","content":"<div class=\"note default\"><p>原文：Clustering by fast search and find of density peaks<br>作者：Alex Rodriguez and Alessandro Laio<br>来源：Science 344.6191(2014), 1492-1496.</p></div>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>聚类分析的目的在于根据元素的相似性将元素分类。而该论文基于这样一种观点的提出新的方法，即聚类中心的密度高于其邻居，而密度高的点相对较远。这个想法构成了聚类过程的基础，其中簇的数量直观地产生，异常值被自动地发现并从分析中排除，并且聚类被识别，而不管它们的形状和嵌入它们的空间的维度如何。</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"不同的聚类策略\"><a href=\"#不同的聚类策略\" class=\"headerlink\" title=\"不同的聚类策略\"></a>不同的聚类策略</h3><h4 id=\"基于距离的方法\"><a href=\"#基于距离的方法\" class=\"headerlink\" title=\"基于距离的方法\"></a>基于距离的方法</h4><p>在 <code>K-means</code> 和 <code>K-medoids</code>，聚类是以距离聚类中心很小的距离为特征的数据集合。</p>\n<p>然而，因为数据点总是被分配到最近的中心，所以该类算法只能发现球形的簇，而在发现任意形状的簇时会遇到困难。</p>\n<blockquote>\n<p>提示：<code>K-均值 (K-Means)</code> 的方法仅当簇中均值有定义时才有意义，而当涉及具有标称属性的数据时，K-均值的方法失效。而这里可采用 <code>K-众数 (K-Modes)</code> 的变体，即采用 <code>基于频率</code> 的方法来更新簇的众数，对具有标称属性的数据进行聚类。当然，还有 <code>K-Prototype</code> $^{[1,2]}$、<code>K-Means++</code> $^{[3]}$ 等优化版本的算法。</p>\n</blockquote>\n<h4 id=\"基于密度的方法\"><a href=\"#基于密度的方法\" class=\"headerlink\" title=\"基于密度的方法\"></a>基于密度的方法</h4><p>通过基于数据点局部密度的方法很容易检测具有任意形状的簇。其主要思想是：在某领域 (对象或数据点的数目) 内，给定密度阈值，将密度低于该阈值的数据点视为噪声丢弃，并将其分配给不连续的高密度领域的其他簇。这样的方法可用来过滤噪声或离群点，发现任意形状的簇。</p>\n<p><code>DBSCAN</code> (Density-Based Spatial Clustering of Applications with Noise) 是一个基于密度的聚类算法，它将簇定义为密度相连的点的最大集合，能够把具有足够高密度的领域划分为簇。在噪声的空间数据库中可发现任意形状的聚类。</p>\n<p>然而，从上述当中可知，除了要选择合适的阈值，且它缺少均值漂移的聚类方法。虽然这种方法允许发现非球形簇，但仅适用于由一组坐标定义的数据。</p>\n<h4 id=\"本文改进的方法\"><a href=\"#本文改进的方法\" class=\"headerlink\" title=\"本文改进的方法\"></a>本文改进的方法</h4><p>首先，该算法提出假设：类簇中心被具有较低局部密度的 <code>邻居点</code> 包围，且与具有较高密度的 <code>任何点</code> 有相对较大的距离。对于每一个数据点 i，要计算 <code>两个量</code>：点的局部密度 $\\rho<em>i$ 和该点到具有更高局部密度的点的距离 $\\delta_i$。而这两个值都取决于数据点间的距离 ${d}</em>{ij}$ (欧几里得距离，也称 <code>欧式距离</code>)。数据点的局部密度定义为：</p>\n<script type=\"math/tex; mode=display\">\\rho_i = \\sum_j \\chi(d_{ij} - d_c)</script><p>其中 $\\chi(x)$ 为 0-1 函数，如果 x &lt; 0，那么 $\\chi(x) = 1$；否则 $\\chi(x) = 0$，$d<em>{c}$ 是一个 <code>截断距离</code>。基本上，$\\rho_i$ 等于与点 i 的距离小于 $d</em>{c}$ 的点的个数。算法只对不同点 $\\rho<em>i$ 的相对大小敏感，这意味着对于大数据集，分析结果在 $d</em>{c}$ 的选择方面具有很好 <code>鲁棒性</code>。</p>\n<ul>\n<li><p>$\\delta_i$ 是通过计算点之间的 <code>最小距离</code> 来测量的，即数据点 i 与距离它最近的、密度更高的点 j 的距离最小值式：</p>\n<blockquote>\n<p>提示：在图 1-1.(A) 中可知，数据点是按照密度降序排列。</p>\n</blockquote>\n</li>\n</ul>\n<script type=\"math/tex; mode=display\">\\delta_i = min_{j:\\rho_j>\\rho_i}(d_{ij})</script><ul>\n<li>若数据点 i 是密度最大的点，$\\delta_i$ 为所有节点中到数据点 i 的最大距离：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\\delta_i = max_j(d_{ij})</script><p>如图 1-1 所示，其展示了算法的核心思想。图 1-1.(A) 展示了二维空间中的 28 个点，<code>且 A 中数据点是按照密度降序排列</code>。图 1-1.(B) 中以 $\\rho_i$ 作为横坐标，$\\delta_i$ 作为纵坐标，画二维图，并称其为决策图。可以发现点 1 和点 10 的  $\\rho_i$ 和 $\\delta_i$ 最大，故将其作为类簇中心。</p>\n<blockquote>\n<p>点 9 和点 10 的 $\\rho_i$ 相似，但 $\\delta_i$ 值却有很大差别：点 9 属于点 1 的类簇，且有其它几个更高 $\\rho_i$ 的点距其很近，然而点 10 拥有更高密度的最近邻属于其它的类簇。  </p>\n<p>所以，正如预期的那样，只有具有高 $\\delta_i$ 和相对较高 $\\rho_i$ 的的点才是 <code>类簇中心</code>。因为点 26、27、28 是孤立的，所以有相对较高的 $\\delta_i$ 值和低 $\\rho_i$ 值，它们可以被看作是由单个点做成的类簇，也就是 <code>异常点</code>。</p>\n</blockquote>\n<p><img src=\"/images/illustration/Paper/2018/05/Clustering-by-fast-search-and-find-of-density-peaks_1-1.jpg\" alt=\"图1-1算法在二维空间的展示\"></p>\n<center>图 1-1 算法在二维空间的展示</center>\n\n<p>类簇中心找到后，剩余的每个点被归属到它的有更高密度的最近邻所属类簇。类簇分配只需 <code>一步即可完成</code>，不像其它算法要对目标函数进行 <code>迭代优化</code>。</p>\n<p>在聚类分析中，定量的衡量分配的可信度是很重要的。在该算法中，首先为每个类簇定义一个 <code>边界区域</code> (即分配到该类簇的点集合，且与其它类簇的点的距离小于 $d_c$)，然后为每个类簇的找到其边界区域中密度最高的点 $\\rho_b$，并以来表示该点的密度。若类簇中局部密度值比 $\\rho_b$ 大的点被看作是类簇的核心部分 (即分配到该类簇的可靠性较高)，其他点 (类簇中局部密度值比 $\\rho_b$ 小的点) 被看作是类簇的 <code>光晕部分</code> (亦可被看作是噪声)。</p>\n<p><img src=\"/images/illustration/Paper/2018/05/Clustering-by-fast-search-and-find-of-density-peaks_1-2.jpg\" alt=\"图1-2合成点分布的结果\"></p>\n<center>图 1-2 合成点分布的结果</center>\n\n<p>(A) 为绘制点分布的概率分布。(B和C) 分分别为 4000 和 1000 样本点的点分布。且每个点以其颜色表示所属类簇，黑色点属于光晕类簇 (噪声点)。(D和E) 为 (B和C) 相应的决策图，其中心由相应簇来着色。(F) 作为样本维度的函数，分配给不正确聚类的点的分数。误差线表示平均值的标准误差。</p>\n<p>从图 1-2.(F) 中可以看到，错分点的比例即使在只有 1000 个点的小样本中仍保持在 1% 以下，说明算法有很好的鲁棒性。</p>\n<p>从图 1-3 中可以看到，该算法对于各种数据级都能达到很好的聚类效果 (图中为引用文献中的测试用例结果)。</p>\n<p><img src=\"/images/illustration/Paper/2018/05/Clustering-by-fast-search-and-find-of-density-peaks_1-3.jpg\" alt=\"图1-3引用文献中的测试用例结果\"></p>\n<center>图 1-3 引用文献中的测试用例结果</center>\n\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><ol>\n<li>摘要部分提到的，异常点能 <code>自动地</code> 被分析出来，但从它的 Matlab 源码可知，还是需要人为判断异常点 (与问题三结合思考)？</li>\n<li>文中提到的截断距离 $d_c$，该设定多少才算较合理？</li>\n<li>文中判断簇中心的两个参数量 $\\delta_i$ 和 $\\rho_i$，即同时具有相对较高的距离和局部密度可选为簇中心，那么如何定义相对较高的具体值？</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] Huang Z. Clustering large data sets with mixed numeric and categorical values [C]. 1997: 21-34.<br>[2] Huang Z. Extensions to the k-means algorithm for clustering large data sets with categorical values [J]. Data mining and knowledge discovery, 1998, 2(3): 283-304.<br>[3] San O M, Huynh V N, Nakamori Y. A clustering algorithm for mixed numeric and categorical data [J]. Journal of Systems Science and Complexity, 2003, 16(4): 562-571.  </p>\n","categories":["Paper"],"tags":["数据挖掘","聚类","机器学习"]},{"title":"Django：Web 框架从入门到应用","url":"/2019/02/Django.html","content":"<p>Django 是基于 MVC 模式，由 Python 写成的开源 Web 应用框架。在 Django 中，控制器接受用户输入的部分由框架自行处理，而 Django 里更关注的是模型 ( Model )、模板 ( Template ) 和视图 ( Views )，为此也称其为 MTV 模式的 Web 框架。</p>\n<p>事实上，基于 Python 的 Web 框架不仅这一家，如  flask、tornado、web2py 等。对于任何一款框架都有它自身的亮点和缺陷 $^{[2, 3]}$，综合需求、性能要求等诸多因素考量，选择合适的框架即可。比如，我们要开发一款数据库驱动的内容发布与管理系统，借助 Django 的中间件 <a href=\"https://baike.baidu.com/item/对象关系映射\" target=\"_blank\" rel=\"noopener\">ORM</a> 设计优点，使得在操作业务对象时，不需要和复杂的 SQL 语句打交道，只要像平时一样操作对象即可，以高效率完成轻量级后端系统的开发工作。</p>\n<a id=\"more\"></a>\n<h2 id=\"教学资源\"><a href=\"#教学资源\" class=\"headerlink\" title=\"教学资源\"></a>教学资源</h2><ul>\n<li>📺 | 视频 | <a href=\"https://www.bilibili.com/video/av22606568/?p=3\" target=\"_blank\" rel=\"noopener\">老男孩.Python 全栈: Django 框架入门到应用. 2018. bilibili.com</a></li>\n<li>📄 | 文章 | <a href=\"https://docs.djangoproject.com/zh-hans/2.1/\" target=\"_blank\" rel=\"noopener\">Django.Django 快速入门&amp;中文使用文档. djangoproject.com</a></li>\n</ul>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><h3 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h3><ul>\n<li><p>安装：命令行模式安装 ( Mac / Linux 用户注意管理员权限 )</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install django</span><br><span class=\"line\">pip install django == x.xx.xx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置：配置 Django 项目并初次启动它。</p>\n<ul>\n<li><p>创建项目：可通过命令模式启动项目 ( 多用于部署环境 )，也可通过 PyCharm 启动、运行项目。</p>\n<ul>\n<li>命令模式：<code>django-admin startproject mysite</code></li>\n<li><p>PyCharm：通过 PyCharm 一步到位，即 <code>新建工程 &gt; Django &gt; ( 建立单独的 Venv ) &gt; mysite</code>。</p>\n<blockquote>\n<p>Virtualenv：为一个应用创建一套“隔离”的 Python 运行环境，具体配置方法可参考 [1]。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>项目目录结构说明</p>\n<ul>\n<li><code>mysite</code>：同名目录，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名，比如 mysite.urls。</li>\n<li><code>__init__.py</code>：空文件，标识这个目录应识别为 Python 包。</li>\n<li><code>settings.py</code>：Django 的项目配置文件。</li>\n<li><code>urls.py</code>：Django 项目的 URL 声明。</li>\n<li><code>wsgi.py</code>：Web 服务网关接口 ( Socket )。</li>\n<li><p><code>manage.py</code>：对网络所有管理是通过其来实现的。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysite</span><br><span class=\"line\">  ├─── mysite</span><br><span class=\"line\">  │ ├── init__.py</span><br><span class=\"line\">  │ ├── settings.py</span><br><span class=\"line\">  │ ├── urls.py</span><br><span class=\"line\">  │ ├── wsgi.gy</span><br><span class=\"line\">  └─── manage.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>使用：以命令模式启动本地服务器为例，当然可以使用 Pycharm 一键运行。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py runserver 127.0.0.1:8000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h3><h4 id=\"返回内容至页面\"><a href=\"#返回内容至页面\" class=\"headerlink\" title=\"返回内容至页面\"></a>返回内容至页面</h4><p>返回内容 ( Html 元素或对象 ) 至页面，代码应包含在 <code>urls.py</code> 文件中。</p>\n<ul>\n<li><p>下述是返回字符串或 Html 元素的示例代码：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">arguments:</span></span><br><span class=\"line\"><span class=\"string\">\t@param request 放置用户请求相关的所有信息</span></span><br><span class=\"line\"><span class=\"string\">@return 响应与返回处理结果</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 1. 可返回字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 2. 可返回 Html 元素 (对象)</span></span><br><span class=\"line\">\t<span class=\"comment\"># return HttpResponse(\"&lt;input type='text' /&gt;\")</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 访问 Site 根目录</span></span><br><span class=\"line\">urlpatterns = [ url(<span class=\"string\">''</span>, info), ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"返回独立-Html-页面\"><a href=\"#返回独立-Html-页面\" class=\"headerlink\" title=\"返回独立 Html 页面\"></a>返回独立 Html 页面</h4><p>返回独立 Html 页面，且尝试把数据返回到页面中。</p>\n<ul>\n<li>Html 页面放置 <code>tempates</code> 目录下；</li>\n<li><p><code>settings.py</code> 中配置模板的路径 ( 告诉程序网页模板在哪个目录下 )；</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEMPLATES = [</span><br><span class=\"line\">\t<span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>urs.py</code> 中加入调用代码，绑定请求地址与处理函数；</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># render 能抓取页面全部信息 ( 它也调用了 HttpResponse )</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'info.html'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>若要引用资源目录，如存放 images、css 等，则需要在 <code>settings.py</code> 中加入声明语句。</p>\n<p>  引用资源时，需要加入 <code>static</code>。例如 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;static/style.css&quot;&gt;</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIRS = (</span><br><span class=\"line\">    <span class=\"comment\"># '文件名' 是自由命名的，这里取 'static' 是为了统一命名</span></span><br><span class=\"line\">    os.path.join(BASE_DIR, <span class=\"string\">'static'</span>), </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"简单登录功能\"><a href=\"#简单登录功能\" class=\"headerlink\" title=\"简单登录功能\"></a>简单登录功能</h3><blockquote>\n<p>本实例主要展示的是，在 Django 框架下 Web 前后端的交互过程。</p>\n</blockquote>\n<ul>\n<li><p>首先，我们在 <code>urls.py</code> 中配置路由关系，并绑定路由触发的函数以实现功能。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse, render, redirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首次加载页面调用的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># GET 可通过请求的链接地址传参，如 url?page=1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">'GET'</span> == request.method):</span><br><span class=\"line\">\t\t<span class=\"comment\">## render() 是抓取页面全部信息 ( 它也调用了 HttpResponse )</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> render(request, <span class=\"string\">'login.html'</span>)</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\"># 登录成功后把数据回传到目标页面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\tuser = request.POST</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render(request, <span class=\"string\">'index.html'</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'username'</span>: str(user.get(<span class=\"string\">'username'</span>)),</span><br><span class=\"line\">\t\t<span class=\"string\">'password'</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'origin'</span>: user.get(<span class=\"string\">'password'</span>),</span><br><span class=\"line\">\t\t\t<span class=\"string\">'encode'</span>: base64.b64encode( (user.get(<span class=\"string\">'password'</span>) + user.get(<span class=\"string\">'password'</span>)).encode(<span class=\"string\">'utf-8'</span>) )</span><br><span class=\"line\">\t\t&#125;&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># path(相对地址, 调用函数)，如请求地址为根目录，故这里填写 '' </span></span><br><span class=\"line\">urlpatterns = [ </span><br><span class=\"line\">    path(<span class=\"string\">''</span>, login), </span><br><span class=\"line\">    path(<span class=\"string\">'index'</span>, index), </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>最后附上相关联的 <code>login.html</code> 和 <code>index.html</code>。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- login.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Information Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"static/css/style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Welcome to use the exhibation page.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"index\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Home Index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"static/css/style.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 1. 模板中接受函数体返回的属性 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- &#123;&#123;&#125;&#125; 特殊占位符: Django render() 会自动解析它 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>username<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span> &#123;&#123; username &#125;&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>password<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span> &#123;&#123; password.origin &#125;&#125; =&gt; &#123;&#123; password.encode &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"comment\">&lt;!-- 换行 --&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 2. 模板中调用对象的方法和属性，例如循环体 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t&#123;% for key, value in password.items %&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Password:&#123;&#123; key &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t&#123;% endfor %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"增删改查系统\"><a href=\"#增删改查系统\" class=\"headerlink\" title=\"增删改查系统\"></a>增删改查系统</h3><blockquote>\n<p>本实例主要展示的是 Python 与数据库的交互过程。</p>\n</blockquote>\n<h4 id=\"建立数据表\"><a href=\"#建立数据表\" class=\"headerlink\" title=\"建立数据表\"></a>建立数据表</h4><p>数据关系：这里以学生 ( Student )、任教老师 ( Teacher ) 和课程 ( Course ) 三个实体为例，构建数据表。</p>\n<ul>\n<li>ER 图，如图 4-1 所示：<ul>\n<li>学生可以选修多门课程，一门课程可以多个学生参与，即多对多关系。</li>\n<li>老师只能任教一门课程，但是一门课程有多个老师开课，即一对多关系。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Programme/2019/02/django_1-1.jpg\" alt=\"django_1-1\"></p>\n<center>图 1-1 演示数据库的数据关系</center>\n\n<ul>\n<li>关系模式：<ul>\n<li>学生实体(学生序号, 学生姓名) == t<em>student(_sid</em>, name)</li>\n<li>课程实体(课程序号, 课堂名称) == t<em>course(_cid</em>, name)</li>\n<li>老师实体(老师序号, 老师姓名) == t<em>teacher(_tid</em>, name, cid)</li>\n<li>选课关系(学生序号, 课程序号, 成绩) == Student2Course(<em>sid</em>, <em>cid</em>, score)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"前-后端交互原理\"><a href=\"#前-后端交互原理\" class=\"headerlink\" title=\"前 / 后端交互原理\"></a>前 / 后端交互原理</h4><ul>\n<li>Web 程序的前后端交互原理如图 4-2 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Programme/2019/02/django_1-2.jpg\" alt=\"django_1-2\"></p>\n<center>图 1-2 Web 程序的前后端交互原理</center>\n\n<h4 id=\"原生代码操作数据\"><a href=\"#原生代码操作数据\" class=\"headerlink\" title=\"原生代码操作数据\"></a>原生代码操作数据</h4><ul>\n<li>Python 的 MySQL 驱动有 <code>MySQLdb</code>、<code>PyMySQL</code> 以及 <code>MySQLClient</code>。</li>\n<li><p>在 Python 2.7 版本，主要是用 MySQLdb，而 Python 3.x 版本多数使用 PyMySQL 以及 MySQLClient。两者操作风格类似，本文则以 PyMySQL 展开探讨。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 封装连接数据库的信息</span></span><br><span class=\"line\">db_infos = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'host'</span>: <span class=\"string\">\"IP 地址\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">'port'</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">\t<span class=\"string\">'user'</span>: <span class=\"string\">\"数据库账户\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">'password'</span>: <span class=\"string\">\"数据库密码\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">'db'</span>: <span class=\"string\">\"数据库名称\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">'charset'</span>: <span class=\"string\">\"utf8\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">'cursorclass'</span>: pymysql.cursors.DictCursor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">db = pymysql.connect(db_infos)</span><br><span class=\"line\"></span><br><span class=\"line\">SQL = <span class=\"string\">\"SELECT * FROM t_student\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> db.cursor() <span class=\"keyword\">as</span> cursor:</span><br><span class=\"line\">\t\tcursor.excute(SQL) <span class=\"comment\"># 执行 SQL 语句</span></span><br><span class=\"line\">\t\tdb.commit() <span class=\"comment\"># 提交修改数据请求</span></span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">\tdb.rollback() <span class=\"comment\"># 回滚</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">\tdb.close() <span class=\"comment\"># 关闭数据库连接</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Ajax-方式交互数据\"><a href=\"#Ajax-方式交互数据\" class=\"headerlink\" title=\"Ajax 方式交互数据\"></a>Ajax 方式交互数据</h4><ul>\n<li><p>借助 Ajax，实现数据的本地刷新，而不需要重新加载、渲染网页。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">'提交地址'</span>,</span><br><span class=\"line\">    type: <span class=\"string\">'POST'</span> <span class=\"comment\">// POST / GET</span></span><br><span class=\"line\">    data: &#123;<span class=\"string\">'key_1'</span>: <span class=\"string\">'value_1'</span>, ..., <span class=\"string\">'key_n'</span>: <span class=\"string\">'value_n'</span> &#125;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前服务端处理数据，自动执行回调函数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"框架正文\"><a href=\"#框架正文\" class=\"headerlink\" title=\"框架正文\"></a>框架正文</h2><p>本章节的内容参考 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/\" target=\"_blank\" rel=\"noopener\">Django 官方文档 v2.1</a> 整理所得，即把模型、模板和视图的概念更加细化，通过一个投票应用的实例以讲述如何搭建一个 <code>MTV模式</code> 的 Web 框架，如图 3-1 所示。</p>\n<p><img src=\"/images/illustration/Programme/2019/02/django_2-1.jpg\" alt=\"django_2-1\"></p>\n<center>图 2-1 MTV 模式的 Web 框架</center>\n\n<h3 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h3><ul>\n<li><p>编辑 <code>mysite/settings.py</code> 文件前，先设置 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/ref/settings/#std:setting-TIME_ZONE\" target=\"_blank\" rel=\"noopener\">TIME_ZONE</a> 为你自己时区，可参考 Wikipedia 的 <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"_blank\" rel=\"noopener\">List of time zones</a>。</p>\n<blockquote>\n<p>新建立的项目，默认时区为 <code>UTC</code>。</p>\n</blockquote>\n</li>\n<li><p>打开 <code>mysite/settings.py</code>，通常这个配置文件使用 SQLite 作为默认数据库。</p>\n<ul>\n<li><code>ENGINE</code>：选值 <code>django.db.backends.sqlite3</code>。</li>\n<li><p><code>NAME</code>：数据库的名称。若使用 <a href=\"https://baike.baidu.com/item/SQLite/375020?fr=aladdin\" target=\"_blank\" rel=\"noopener\">SQLite</a>，数据库将是你电脑上的一个文件，NAME 应该是此文件的绝对路径 + 文件名，默认值 <code>os.path.join(BASE_DIR, &#39;db.sqlite3&#39;)</code> 将会把数据库文件储存在项目的根目录。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: os.path.join(BASE_DIR, <span class=\"string\">'db.sqlite3'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若使用了 SQLite 以外的数据库，请确认在使用前已经 <code>创建了数据库</code>。连接到其他数据库时 ( MySQL，Oracle 或 PostgreSQL )，参考 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/ref/settings/#std:setting-DATABASE-ENGINE\" target=\"_blank\" rel=\"noopener\">ENGINE</a> 的设置来连接其他数据库。例如连接 MySQL 的配置如下所示：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'mydatabase'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'mydatabaseuser'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'mypassword'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'3306'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>此外，关注一下文件头部的 <code>INSTALLED_APPS</code> 设置项。这里包括了项目中启用的所有 Django 应用。应用能在多个项目中使用，也可以打包并且发布应用，让别人使用它们。通常 INSTALLED_APPS 默认包括了以下 Django 的自带应用：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"comment\"># 因为 ApplicationConfig 类写在文件 polls/apps.py 中，</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以它的点式路径是 'polls.apps.ApplicationConfig'</span></span><br><span class=\"line\">    <span class=\"string\">'polls.apps.ApplicationConfig'</span>,\t<span class=\"comment\"># 激活模型</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,\t\t<span class=\"comment\"># 管理员站点</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,\t\t<span class=\"comment\"># 认证授权系统</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,\t<span class=\"comment\"># 内容类型框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,\t\t<span class=\"comment\"># 会话框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,\t\t<span class=\"comment\"># 消息框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,\t<span class=\"comment\"># 管理静态文件的框架</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>默认开启的某些应用需要至少一个数据表，故在使用他们前需要在数据库中创建一些表。请执行命令：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> MacOS / Linux</span></span><br><span class=\"line\">python manage.py migrate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Windows ( 下述代码同理，基本上 <span class=\"string\">\"py\"</span> 对应于 <span class=\"string\">\"python\"</span> )</span></span><br><span class=\"line\">py manage.py migrate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"模型和站点管理\"><a href=\"#模型和站点管理\" class=\"headerlink\" title=\"模型和站点管理\"></a>模型和站点管理</h3><h4 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h4><ul>\n<li><p>定义模型 ( Model )，即数据库结构设计和附加的其它元数据。在 Django 中，你只需要定义数据模型，其中的实现代码不用理会，它们会自动从模型生成。</p>\n<blockquote>\n<p>模型是真实数据的简单明确的描述，它包含了储存的数据所必要的字段和行为。</p>\n</blockquote>\n</li>\n<li><p>例如，在本案例中 ( 投票应用 )，需要创建两个模型：问题 Question 和选项 Choice。</p>\n<ul>\n<li>Question 模型：包括问题描述和发布时间。</li>\n<li>Choice 模型：包括选项描述和当前得票数。每个选项属于一个问题 ( 一对一关系 )。</li>\n</ul>\n</li>\n<li><p>这些概念可通过 Python 类来描述。按照下面的例子来编辑 <code>polls/models.py</code> 文件：</p>\n<ul>\n<li>每个模型被表示为 <code>django.db.models.Model</code> 类的子类。每个模型有一些类变量，它们都表示模型里的一个数据库字段。</li>\n<li>每个字段都是 <code>Field</code> 类的实例，这将告诉 Django 每个字段要处理的数据类型。比如，字符字段被表示为 <code>CharField</code>，日期时间字段被表示为 <code>DateTimeField</code>。</li>\n<li><p>定义某些 Field 类实例需要参数，例如 CharField 需要一个 max_length 参数。</p>\n<blockquote>\n<p>这个参数的用处不止于用来定义数据库结构，也用于验证数据。</p>\n</blockquote>\n</li>\n<li><p>Django 支持所有常用的数据库关系：一对一、一对多和多对多，我们使用外键 <code>ForeignKey</code> 定义了一个关系。例如，每个 Choice 对象都关联到一个 Question 对象。</p>\n</li>\n<li><p>数据表最重要的 <code>主键</code> 会被自动创建，当然也可以自定义。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Question</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question_text = models.CharField(max_ length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    pub_date = models.DateTimeField(<span class=\"string\">'date published'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Question.objects.all() 返回信息对我们用处不大，如下所示：</span></span><br><span class=\"line\">    <span class=\"comment\"># &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># 可尝试通过 __str__() 方法返回一些字段信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> self.question_text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Choice</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class=\"line\">    choice_text = models.CharField(max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    votes = models.IntegerField(default=<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> self.choice_text</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"激活模型\"><a href=\"#激活模型\" class=\"headerlink\" title=\"激活模型\"></a>激活模型</h4><ul>\n<li><p>从上述用于创建模型的代码可知，Django 可实现：</p>\n<ul>\n<li>为这个应用创建数据库 <code>schema</code> ( 生成 CREATE TABLE 语句 )。</li>\n<li>创建与 Question 和 Choice 对象与数据库进行交互的 <code>API</code> ( Python 版本 )。</li>\n</ul>\n</li>\n<li><p>但是首先得把 polls 应用安装到我们的项目里。具体地， 在文件 <code>mysite/settings.py</code> 中 <code>INSTALLED_APPS</code> 子项添加点式路径：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    <span class=\"comment\"># 因为 ApplicationConfig 类写在文件 polls/apps.py 中，</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以它的点式路径是 'polls.apps.ApplicationConfig'</span></span><br><span class=\"line\">    <span class=\"string\">'polls.apps.ApplicationConfig'</span>,\t<span class=\"comment\"># 激活模型</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,\t\t\t<span class=\"comment\"># 管理员站点</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,\t\t\t<span class=\"comment\"># 认证授权系统</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,\t<span class=\"comment\"># 内容类型框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,\t\t<span class=\"comment\"># 会话框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,\t\t<span class=\"comment\"># 消息框架</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,\t<span class=\"comment\"># 管理静态文件的框架</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>现在你的 Django 项目会包含 polls 应用。接着通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改 ( 在这种情况下刚创建的可理解为最新修改的  )，并且把修改的部分储存为一次 <code>迁移</code>。</p>\n<blockquote>\n<p>迁移：Django 对于模型定义，也就是你的数据库结构的变化的储存形式。它们其实也只是一些你磁盘上的文件。</p>\n</blockquote>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Django 有一个自动执行 <code>数据库迁移</code> 并同步管理你的数据库结构的命令：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>当然，你是否会好奇，迁移是怎样的过程，迁移命令会执行哪些 SQL 语句？那么，<code>sqlmigrate</code> 命令接收一个迁移的名称，然后返回对应的 SQL。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sqlmigrate 命令</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 并没有真正在数据库中的执行迁移，它只是把命令输出到屏幕上</span></span><br><span class=\"line\">python manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>输入以上命令，你将看到如下结果 ( 格式化输出 SQL )：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 输出示例使用的是 PostgreSQL / MySQL --</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"comment\">-- Create model Choice</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">\"polls_choice\"</span> (</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"string\">\"choice_text\"</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"string\">\"votes\"</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- Create model Question</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">\"polls_question\"</span> (</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">    <span class=\"string\">\"question_text\"</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">200</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pub_date\"</span> <span class=\"built_in\">timestamp</span> <span class=\"keyword\">with</span> <span class=\"built_in\">time</span> zone <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 省略剩余语句，具体可自行测试 --</span></span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从格式化的 SQL 语句可注意到：</p>\n<ul>\n<li><p>数据库的表名是由应用名 ( polls ) 和模型名的小写形式 ( question 和 choice ) 连接而来。</p>\n</li>\n<li><p>主键 ( id ) 会被自动创建，当然你也可以自定义。</p>\n</li>\n<li><p>默认 Django 会在外键字段名后追加字符串 “_id” ，同样也可以自定义。</p>\n</li>\n<li><p>生成的 SQL 语句是为你所用的数据库定制的，所以那些和数据库有关的字段类型，比如 auto_increment ( MySQL )、 serial ( PostgreSQL ) 和 integer primary key autoincrement ( SQLite )，Django 会帮你自动处理。那些和引号相关的事情，比如使用单引号还是双引号，也一样会被自动处理。</p>\n</li>\n</ul>\n</li>\n<li><p>总结：迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表，即它专注于使数据库平滑升级而不会丢失数据。<strong>现在改变模型只需要记住这三步</strong>：</p>\n<ul>\n<li><p>编辑 <code>models.py</code> 文件，改变模型。</p>\n</li>\n<li><p>运行 <code>python manage.py makemigrations</code> 为模型的改变 <code>生成</code> 迁移文件。</p>\n</li>\n<li><p>运行 <code>python manage.py migrate</code> 来 <code>应用</code> 数据库迁移。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><ul>\n<li>当完成 <code>创建模型</code> ( 定义数据实体和数据关系 ) 与 <code>激活模型</code> ( 模型驱动自动生成 SQL 代码 ) 的工作，即表明数据表已建立起来，紧接着便可操作数据库了。</li>\n<li>关于操作数据库的 Python API 所有细节可在 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/topics/db/queries/\" target=\"_blank\" rel=\"noopener\">Database API For Python</a> 参考文档中找到。</li>\n</ul>\n<h5 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h5><ul>\n<li><p>假设模型存在于文件中 mysite/polls/models.py：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"><span class=\"comment\"># 使用模型类的关键字参数对其实例化，再调用 save() 以将其保存到数据库中</span></span><br><span class=\"line\">q = Question(question_text=<span class=\"string\">\"What's new?\"</span>, pub_date=timezone.now())</span><br><span class=\"line\"><span class=\"comment\"># 创建和保存对象则使用 create() 方法</span></span><br><span class=\"line\">q.save()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"更新对象\"><a href=\"#更新对象\" class=\"headerlink\" title=\"更新对象\"></a>更新对象</h5><ul>\n<li><p>UPDATE 在幕后执行 SQL 语句：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保存对象的更改</span></span><br><span class=\"line\">q.question = <span class=\"string\">\"What do you think about?\"</span></span><br><span class=\"line\">q.save()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>保存 ForeignKey 字段：更新 ForeignKey 字段的工作方式与保存普通字段的方式完全相同，只需将正确类型的对象分配给相关字段即可。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一般情况 pk ( Primary Key ) 和 id 是一样的，只有 id 不是主键时才不一样</span></span><br><span class=\"line\">choice = Choice.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">question = Question.objects.get(<span class=\"string\">'What do you think about?'</span>)</span><br><span class=\"line\">choice.question = question</span><br><span class=\"line\">choice.save()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>更新ManyToManyField 工作的方式略有不同 ：使用 add() 字段上的方法向关系添加记录。</li>\n</ul>\n<h5 id=\"检索对象\"><a href=\"#检索对象\" class=\"headerlink\" title=\"检索对象\"></a>检索对象</h5><ul>\n<li><p>使用 all() 返回所有对象：例如，返回 Question 数据库中所有对象。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">all_question = Question.objects.all()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>使用过滤器检索特定对象</code>：若我们仅需要选择整个对象集的子集，则需要向 QuerySet 添加过滤条件。两种最常见的改进方法：</p>\n<ul>\n<li><code>filter(**kwargs)</code>：返回 QuerySet 包含与给定查找参数匹配的新对象。</li>\n<li><p><code>exclude(**kwargs)</code>：返回 QuerySet 包含与给定查找参数不匹配的新对象。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如：获取 2018 年间所有问题记录</span></span><br><span class=\"line\">Question.objects.filter(pub_date__year=<span class=\"number\">2017</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><code>链接过滤器</code>：QuerySet 检索结果本身也是 QuerySet 对象，故可使用多个过滤器。作用与 <code>多条件查询</code> 类似效果。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如：获取以“What”开头，在 2018 年 1 月 1 日至当天前的所有记录</span></span><br><span class=\"line\">Question.objects.filter(</span><br><span class=\"line\">\theadline__startswith=<span class=\"string\">'What'</span></span><br><span class=\"line\">).exclude(</span><br><span class=\"line\">\tpub_date__gte=datetime.date.today()</span><br><span class=\"line\">).filter(</span><br><span class=\"line\">\tpub_date__gte=datetime.date(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>使用 get() 检索单个对象：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">one_question = Question.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># Question 没有主键为 1 的对象，Django 将引发异常 Entry.DoesNotExist。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>限制 QuerySet 返回集合的大小：使用 Python 的数组切片语法将限制 QuerySet 为一定数量的结果。这相当于 SQL 中 <code>LIMIT</code> 和 <code>OFFSET</code> 子句。</p>\n<ul>\n<li>注意 1：<code>Entry.objects.all()[-1]</code> 不支持负索引。</li>\n<li><p>注意 2：<code>Entry.objects.all()[:10:2]</code> 不支持使用步进 ( Step ) 取值。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如：返回前5个对象（）：LIMIT 5</span></span><br><span class=\"line\">Question.objects.all()[:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\"># 例如：返回第6到第10个对象：OFFSET 5 LIMIT 5</span></span><br><span class=\"line\">Question.objects.all()[<span class=\"number\">5</span>:<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"站点管理\"><a href=\"#站点管理\" class=\"headerlink\" title=\"站点管理\"></a>站点管理</h4><h5 id=\"开篇引言\"><a href=\"#开篇引言\" class=\"headerlink\" title=\"开篇引言\"></a>开篇引言</h5><ul>\n<li>相信你也有过同样的经历，例如为你的员工或客户生成一个用户添加、修改和删除内容的管理后台，即简单的增删改查操作 ( CRUD ) ，但它却是一项缺乏创造性和乏味的工作。因此，Django 全自动地根据模型创建界面化的管理后台。</li>\n<li>管理界面不是为了网站的访问者，而是为管理者准备的。需要客制化的后台管理界面还需自行实现。</li>\n</ul>\n<h5 id=\"创建管理员账号\"><a href=\"#创建管理员账号\" class=\"headerlink\" title=\"创建管理员账号\"></a>创建管理员账号</h5><ul>\n<li><p>首先，我们得创建一个能登录管理页面的用户。请运行下面的命令：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br><span class=\"line\"><span class=\"comment\"># Username: kofe</span></span><br><span class=\"line\"><span class=\"comment\"># Email address: kofe@example.com</span></span><br><span class=\"line\"><span class=\"comment\"># Password: **********</span></span><br><span class=\"line\"><span class=\"comment\"># Password (again): *********</span></span><br><span class=\"line\"><span class=\"comment\"># Superuser created successfully.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"启动开发服务器\"><a href=\"#启动开发服务器\" class=\"headerlink\" title=\"启动开发服务器\"></a>启动开发服务器</h5><ul>\n<li><p>Django 的管理界面默认就是启用的。让我们启动开发服务器。当然，你可以通过 PyCharm 启动服务器，也可以通过命令启动：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开浏览器即可访问：<code>http://127.0.0.1:8000/admin/</code></p>\n</li>\n</ul>\n<h5 id=\"管理页添加应用\"><a href=\"#管理页添加应用\" class=\"headerlink\" title=\"管理页添加应用\"></a>管理页添加应用</h5><ul>\n<li><p>在索引页面中，我们并没有看到应用，如本例中的投票应用 <code>polls</code>。所以我们得告诉管理页面，问题 <code>Question</code> 对象需要被管理。打开 <code>polls/admin.py</code> 文件，把它编辑成下面这样：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\">admin.site.register(Question)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"模板和视图\"><a href=\"#模板和视图\" class=\"headerlink\" title=\"模板和视图\"></a>模板和视图</h3><h4 id=\"开篇引言-1\"><a href=\"#开篇引言-1\" class=\"headerlink\" title=\"开篇引言\"></a>开篇引言</h4><ul>\n<li><p>每个视图必须要做的只有两件事：返回一个包含被请求页面内容的 <code>HttpResponse</code> 对象或者抛出一个 <code>异常</code>，比如 HTTP 404。</p>\n<blockquote>\n<p>Django 只要求返回的是一个 HttpResponse ，或抛出一个异常。</p>\n</blockquote>\n</li>\n<li><p>视图可以从数据库里读取记录，可使用一个模板引擎 ( Django 自带或者其他第三方的 )，生成一个 PDF 文件、输出一个 XML、创建一个 ZIP 文件等，你可以使用任何你想用的 Python 库，实现你想做的事。</p>\n</li>\n<li><p>Django 自带的 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/topics/db/queries/\" target=\"_blank\" rel=\"noopener\">Database API</a> 很方便，与试图结合使用即可实现数据的基本交互操作。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 index() 函数里插入了一些新内容</span></span><br><span class=\"line\"><span class=\"comment\"># 让它能展示数据库里以发布日期排序的最近5个投票问题</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\tlatest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\">\toutput = <span class=\"string\">', '</span>.join([q.question_text <span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> latest_question_list])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> HttpResponse(output)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"模板系统\"><a href=\"#模板系统\" class=\"headerlink\" title=\"模板系统\"></a>模板系统</h4><ul>\n<li><p>这里有个问题：页面的设计写死在视图函数的代码里的。如果你想改变页面的样子，你需要编辑 Python 代码。我们是否能将此过程相互分离，即 <code>视图负责处理、组装数据</code>；<code>模板则负责样式</code>。</p>\n<ul>\n<li>首先，在你的项目根目录里创建一个 <code>templates</code> 目录。Django 将会在这个目录里查找模板文件。</li>\n<li>在 <code>templates</code> 目录里，再创建一个目录 <code>polls</code>，然后在其中新建一个文件 <code>index.html</code>。</li>\n<li><p>换句话说，你的模板文件的路径应该是 <code>mysite/templates/polls/index.html</code>。因为 Django 会寻找到对应的 <code>app_directories</code>，所以你只需要使用 <code>polls/index.html</code> 就可引用到这一模板了。</p>\n<blockquote>\n<p><code>模板命名空间</code>：虽然可将模板文件直接放在 mysite/templates 目录下，但若有一个模板文件正好和另一个应用中的某个模板文件重名，则 Django 没有办法区分它们，从而选择第一个匹配的模板文件，造成不能准确匹配的状况。</p>\n<p>帮助 Django 正确选择模板，最简单的方法是把他们放入各自的 <code>命名空间</code> 中，即把这些模板放入一个和 <code>自身应用重名</code> 的子文件夹里，如本例中的 <code>polls</code>。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h4><ul>\n<li><p>我们将下面的代码输入到刚刚创建的模板文件中：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mysite/templates/polls/index.html --&gt;</span></span><br><span class=\"line\">&#123;% if latest_question_list %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t&#123;% for question in latest_question_list %&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t&#123;&#123; question.question_text &#125;&#125;</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t&#123;% endfor %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% else %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>No polls are available.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>然后，让我们更新一下 polls/views.py 里的 index 视图来使用模板：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\tlatest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">\ttemplate = loader.get_template(<span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\">\tcontext = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'latest_question_list'</span>: latest_question_list,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> HttpResponse(template.render(context, request))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>载入模板，填充上下文，再返回由它生成的 HttpResponse 对象，这里引入一个便捷函数 render() 函数。它已经把此过程封装一起，调用即可使用。</p>\n<p>  render() 函数的第一个参数是 request 对象，第二个参数是模板名，第三个参数是字典。它返回给定上下文呈现的给定模板的 HttpResponse 对象。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">\tlatest_question_list = Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\">\tcontext = &#123;<span class=\"string\">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>用你的浏览器访问 <code>http://127.0.0.1:8000/polls/</code>，你将会看见一个无序列表。</li>\n</ul>\n<h4 id=\"使用模板系统\"><a href=\"#使用模板系统\" class=\"headerlink\" title=\"使用模板系统\"></a>使用模板系统</h4><blockquote>\n<p>使用模板系统的过程，更像是前端与后端信息交互的过程，即前端访问请求地址获取数据的过程。</p>\n</blockquote>\n<ul>\n<li>模板系统统一使用 <code>点符号</code> 来访问变量的属性。在示例 {{ question.question_text }} 中，首先 Django 尝试对 question 对象使用字典查找 ( 也就是使用 obj.get(str) 操作 )，如果失败了就尝试属性查找 ( 也就是 obj.str 操作 )，结果是成功了。如果这一操作也失败的话，将会尝试列表查找 ( 也就是 obj[int] 操作 )。</li>\n<li>在{% for %}循环中发生的函数调用：question.choice_set.all 被解释为 Python 代码 question.choice_set.all()，将会返回一个可迭代的 Choice 对象，这一对象可以在 {% for %} 标签内部使用。</li>\n<li>查看 <a href=\"https://docs.djangoproject.com/zh-hans/2.1/topics/templates/\" target=\"_blank\" rel=\"noopener\">模板指南</a> 可以了解关于模板的更多信息。</li>\n</ul>\n<h4 id=\"去除模板中的硬编码-URL\"><a href=\"#去除模板中的硬编码-URL\" class=\"headerlink\" title=\"去除模板中的硬编码 URL\"></a>去除模板中的硬编码 URL</h4><ul>\n<li><p>硬编码：硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/polls/&#123;&#123; question.id &#125;&#125;/\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123; question.question_text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>软编码：然而，因为你在 polls.urls 的 url() 函数中通过 name 参数为 URL 定义了名字，你可以使用 {% url %} 标签代替它。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> | 具有名字 'detail' 的 URL 在 polls/url.py 中定义为：</span></span><br><span class=\"line\"><span class=\"comment\"> | path('&lt;int:question_id&gt;/', views.detail, name='detail')</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span>\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'detail' question.id %&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123; question.question_text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\"> | 若你想改变投票详情视图的 URL，比如 polls/specifics/12/</span></span><br><span class=\"line\"><span class=\"comment\"> | 不用在模板里修改任何东西 (包括模板)，只在 polls/urls.py 稍微修改就行</span></span><br><span class=\"line\"><span class=\"comment\"> | path('specifics/&lt;int:question_id&gt;/', views.detail, name='detail')</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"为-URL-名称添加命名空间\"><a href=\"#为-URL-名称添加命名空间\" class=\"headerlink\" title=\"为 URL 名称添加命名空间\"></a>为 URL 名称添加命名空间</h4><ul>\n<li>在一个真实的 Django 项目中，可能会有多个应用，Django 如何分辨重名的 URL 呢？具体情况则是，{% url %} 标签到底对应哪一个应用的 URL 呢？</li>\n<li><p>在根 <code>URLconf</code> 中添加命名空间。在 polls/urls.py 文件中稍作修改，加上 <code>app_name</code> 设置命名空间：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">\tpath(<span class=\"string\">''</span>, views.index, name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>修改为指向具有命名空间的详细视图：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123; question.question_text &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"表单和通用视图\"><a href=\"#表单和通用视图\" class=\"headerlink\" title=\"表单和通用视图\"></a>表单和通用视图</h3><h4 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h4><blockquote>\n<p>在此小节中，通过表单接收数据，再通过 Django 视图来处理提交的数据。此过程，更像是前端打包数据通过 GET/POST 请求，把数据传送到后端，交由后端视图处理数据。</p>\n</blockquote>\n<ul>\n<li><p>编写一个简单的表单：让我们更新一下在上一个教程中编写的投票详细页面的模板  <code>polls/detail.html</code>，让它包含一个 HTML <code>&lt;form&gt;</code> 元素：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mystie/templates/polls/detail.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">&#123;% if error_message %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"&#123;% url 'polls:vote' question.id %&#125;\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> | 跨站点请求伪造保护：</span></span><br><span class=\"line\"><span class=\"comment\"> | 在 Django 中，所有针对内部 URL 的 POST 表单，</span></span><br><span class=\"line\"><span class=\"comment\"> | 都应该使用  &#123;% csrf_token %&#125; 模板标签。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">&#123;% csrf_token %&#125;</span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"choice\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; choice.id &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指示 for 标签已经循环多少次 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"choice&#123;&#123; forloop.counter &#125;&#125;\"</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Vote\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://docs.djangoproject.com/zh-hans/2.1/ref/csrf/\" target=\"_blank\" rel=\"noopener\">跨站点请求伪造保护</a>：当恶意网站包含链接，表单按钮或某些旨在在您的网站上执行某些操作的JavaScript时，会发生此类攻击，使用登录用户访问其浏览器中的恶意网站的凭据。一种相关类型的攻击，“登录CSRF”，攻击网站欺骗用户的浏览器以其他人的凭据登录网站也受到保护。</p>\n</blockquote>\n</li>\n<li><p>我们为投票应用创建了一个 URLconf ，即新增一行 <code>path()</code>：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/urls.py</span></span><br><span class=\"line\">path(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建一个 <code>vote()</code> 函数，来处理相关的数据请求：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/views.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">\tquestion = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\tselected_choice = question.choice_set.get(pk=request.POST[<span class=\"string\">'choice'</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class=\"line\">\t\t<span class=\"comment\"># Redisplay the question voting form.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/detail.html'</span>, &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'question'</span>: question,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'error_message'</span>: <span class=\"string\">\"You didn't select a choice.\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tselected_choice.votes += <span class=\"number\">1</span></span><br><span class=\"line\">\t\tselected_choice.save()</span><br><span class=\"line\">\t\t<span class=\"comment\"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># with POST data. This prevents data from being posted twice if a</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># user hits the Back button.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> HttpResponseRedirect(reverse(<span class=\"string\">'polls:results'</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代码返回一个 HttpResponseRedirect 而不是常用的 HttpResponse；</li>\n<li>HttpResponseRedirect 只接收一个参数：用户将要被重定向的 URL；</li>\n<li><p>在 HttpResponseRedirect 的构造函数中使用 reverse() 函数。这个函数避免了我们在视图函数中硬编码 URL。</p>\n<blockquote>\n<p>reverse() 调用将返回一个这样的字符串 <code>/polls/3/results/</code>。<br>其中 3 是 question.id 的值。重定向的 URL 将调用 ‘results’ 视图来显示最终的页面。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>当对 Question 进行投票后，vote() 视图将请求重定向到 Question 的结果界面。让我们来编写这个视图 ( 这和上一章节中的 detail() 视图几乎一模一样，唯一的不同是模板的名字。 我们将在稍后解决这个冗余问题 )：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># polls/views.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">\tquestion = get_object_or_404(Question, pk=question_id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>, &#123;<span class=\"string\">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>再创建一个 <code>polls/results.html</code> 模板：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- polls/templates/polls/results.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in question.choice_set.all %&#125;<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% url 'polls:detail' question.id %&#125;\"</span>&gt;</span>Vote again?<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"通用视图\"><a href=\"#通用视图\" class=\"headerlink\" title=\"通用视图\"></a>通用视图</h4><blockquote>\n<p>猜想：通用视图是否是通用模板的思想，即使用统一的界面展示数据？</p>\n</blockquote>\n<ul>\n<li>detail() 和 results() 视图都很简单。并且，像上面提到的那样，存在冗余问题。</li>\n<li>这些视图反映基本的 Web 开发中的一个常见情况：根据 URL 中的参数从数据库中获取数据、载入模板文件然后返回渲染后的模板。 由于这种情况特别常见，Django 提供一种快捷方式，叫做“通用视图”系统。</li>\n<li><p>通用视图将常见的模式抽象化，可以使你在编写应用时甚至不需要编写 Python 代码。</p>\n<blockquote>\n<p>一般来说，当编写一个 Django 应用时，你应该先评估一下通用视图是否可以解决你的问题，你应该在一开始使用它，而不是进行到一半时重构代码。</p>\n</blockquote>\n</li>\n<li><p>让我们将我们的投票应用转换成使用通用视图系统，这样我们可以删除许多我们的代码。我们仅仅需要做以下几步来完成转换，我们将：</p>\n<ul>\n<li>转换 URLconf。</li>\n<li>删除一些旧的、不再需要的视图。</li>\n<li>基于 Django 的通用视图引入新的视图。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"改良-URLconf\"><a href=\"#改良-URLconf\" class=\"headerlink\" title=\"改良 URLconf\"></a>改良 URLconf</h5><ul>\n<li><p>首先，打开 polls/urls.py 这个 URLconf 并将它修改成：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> path</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = <span class=\"string\">'polls'</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">\tpath(<span class=\"string\">''</span>, views.IndexView.as_view(), name=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">\t<span class=\"comment\"># 路径字符串中匹配模式的名称已经由 &lt;question_id&gt; 改为 &lt;pk&gt;</span></span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class=\"string\">'detail'</span>),</span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">\tpath(<span class=\"string\">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class=\"string\">'vote'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"改良视图\"><a href=\"#改良视图\" class=\"headerlink\" title=\"改良视图\"></a>改良视图</h5><ul>\n<li><p>下一步，我们将删除旧的 index, detail, 和 results 视图，并用 Django 的通用视图代替。打开 polls/views.py 文件，并将它修改成：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponseRedirect</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.views <span class=\"keyword\">import</span> generic</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Choice, Question</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexView</span><span class=\"params\">(generic.ListView)</span>:</span></span><br><span class=\"line\">\ttemplate_name = <span class=\"string\">'polls/index.html'</span></span><br><span class=\"line\">\tcontext_object_name = <span class=\"string\">'latest_question_list'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">       \t\t<span class=\"comment\"># Return the last five published questions.</span></span><br><span class=\"line\">       \t\t<span class=\"keyword\">return</span> Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">\tmodel = Question</span><br><span class=\"line\">\ttemplate_name = <span class=\"string\">'polls/detail.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultsView</span><span class=\"params\">(generic.DetailView)</span>:</span></span><br><span class=\"line\">\tmodel = Question</span><br><span class=\"line\">\ttemplate_name = <span class=\"string\">'polls/results.html'</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">vote</span><span class=\"params\">(request, question_id)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># Same as above, no changes needed.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述代码详细解释：        </p>\n<ul>\n<li>默认情况下，通用视图 DetailView 使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_detail.html</code> 的模板。在我们的例子中，它将使用 <code>polls/question_detail.html</code> 模板。</li>\n<li><code>template_name</code> 属性是用来告诉 Django 使用一个指定的模板名字，而不是自动生成的默认名字。 </li>\n<li>我们也为 results 列表视图和 detail 视图指定了 template_name。即使它们在后台都是同一个 DetailView，results 视图和 detail 视图在渲染时具有不同的访问名称。</li>\n<li>类似地，ListView 使用一个叫做 <code>&lt;app name&gt;/&lt;model name&gt;_list.html</code> 的默认模板；我们使用 template_name 来告诉 ListView 使用我们创建的已经存在的 <code>polls/index.html</code> 模板。</li>\n<li>在之前的教程中，提供模板文件时都带有一个包含 question 和 latest_question_list 变量的 context。<ul>\n<li>对于 DetailView ， question 变量会自动提供—— 因为我们使用 Django 的模型 (Question)， Django 能够为 context 变量决定一个合适的名字。</li>\n<li>对于 ListView， 自动生成的 context 变量是 question_list。为了覆盖这个行为，我们提供 <code>context_object_name</code> 属性，表示我们想使用 <code>latest_question_list</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自动化测试\"><a href=\"#自动化测试\" class=\"headerlink\" title=\"自动化测试\"></a>自动化测试</h3><h4 id=\"为什么你需要写测试\"><a href=\"#为什么你需要写测试\" class=\"headerlink\" title=\"为什么你需要写测试\"></a>为什么你需要写测试</h4><ul>\n<li><code>测试将节约你的时间</code>：在复杂的应用程序中，组件之间可能会有数十个复杂的交互。改变其中某一组件的行为，也有可能会造成意想不到的结果。判断「代码是否正常工作」意味着你需要用大量的数据来完整的测试全部代码的功能，以确保你的小修改没有对应用整体造成破坏，可想而知其中的工作量。</li>\n<li><code>测试不仅能发现错误且能预防错误</code>：测试是开发的对立面，这种思想是不对的，开发其实更像是一个不断试错的过程。</li>\n</ul>\n<h4 id=\"开始写一个测试程序\"><a href=\"#开始写一个测试程序\" class=\"headerlink\" title=\"开始写一个测试程序\"></a>开始写一个测试程序</h4><ul>\n<li>约定俗称，Django 应用的测试应该写在应用的 <code>tests.py</code> 文件里，测试系统会自动的在所有以 tests 开头的文件里寻找并执行测试代码。</li>\n<li><p>制造一个 BUG：继续上述提及的应用 Polls，要求 Question 是在一天之内发布， 则 Question.was_published_recently() 方法将会返回 True 。然而现在这个方法在 Question 的 pub_date 字段比当前时间还晚 ( 未来的时间 ) 时也会返回 True。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils <span class=\"keyword\">import</span> timezone</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"><span class=\"comment\"># create a Question instance with pub_date 30 days in the future</span></span><br><span class=\"line\">time = timezone.now() + datetime.timedelta(days=<span class=\"number\">30</span>)</span><br><span class=\"line\">future_question = Question(pub_date=time)</span><br><span class=\"line\"><span class=\"comment\"># was it published recently? ==&gt; True</span></span><br><span class=\"line\">future_question.was_published_recently()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创造一个测试用例：创建一个 <code>django.test.TestCase</code> 的子类。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils <span class=\"keyword\">import</span> timezone</span><br><span class=\"line\"><span class=\"keyword\">from</span> .models <span class=\"keyword\">import</span> Question</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.test <span class=\"keyword\">import</span> TestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuestionModelTests</span><span class=\"params\">(TestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_was_published_recently_with_future_question</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        was_published_recently() returns False </span></span><br><span class=\"line\"><span class=\"string\">        for questions whose pub_date is in the future.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        time = timezone.now() + datetime.timedelta(days=<span class=\"number\">30</span>)</span><br><span class=\"line\">        future_question = Question(pub_date=time)</span><br><span class=\"line\">        self.assertIs(future_question.was_published_recently(), <span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后，我们可通过 PyCharm 单独运行测试用例，也可以通过终端命令运行自动化测试。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py <span class=\"built_in\">test</span> polls</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发生了什么呢？以下是自动化测试的运行过程：</p>\n<ul>\n<li><code>python manage.py test polls</code> 将会寻找 Polls 应用里的测试代码，它找到了 django.test.TestCase 的一个子类，并创建一个特殊的数据库供测试使用；</li>\n<li>在类中寻找测试方法 ( 以 test 开头的 )，在 <code>test_was_published_recently_with_future_question</code> 方法中，它创建了一个 pub_date 值为 30 天后的 Question 实例。</li>\n<li>接着使用 <code>assertls()</code> 方法，发现 <code>was_published_recently()</code> 返回了 True，而我们期望它返回 False。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000\" target=\"_blank\" rel=\"noopener\">廖雪峰. Python 教程之 virtualenv. 2017. liaoxuefeng.com</a></li>\n<li>[2] <a href=\"https://zhuanlan.zhihu.com/p/31447222\" target=\"_blank\" rel=\"noopener\">地球的外星人君. Python Web 框架大乱斗：哪个框架适合你. 2017. zhihu.com</a></li>\n<li>[3] <a href=\"https://www.zhihu.com/question/20706333\" target=\"_blank\" rel=\"noopener\">知乎问答. Python 有哪些好的 Web 框架. zhihu.com</a></li>\n</ul>\n","categories":["Project"],"tags":["python","web","django"]},{"title":"FastDFS：文件系统从入门到应用","url":"/2019/02/FastDFS.html","content":"<p>余庆老师在他的 Github 上介绍关于 <a href=\"https://github.com/happyfish100/fastdfs\" target=\"_blank\" rel=\"noopener\">FastDFS</a> 开源项目的描述：FastDFS 是一个开源的高性能分布式文件系统 ( DFS )。 它的主要功能包括文件存储，文件同步和文件访问，以及高容量和负载平衡。</p>\n<a id=\"more\"></a>\n<h2 id=\"FastDFS-简单介绍\"><a href=\"#FastDFS-简单介绍\" class=\"headerlink\" title=\"FastDFS 简单介绍\"></a>FastDFS 简单介绍</h2><h3 id=\"FastDFS-核心组件\"><a href=\"#FastDFS-核心组件\" class=\"headerlink\" title=\"FastDFS 核心组件\"></a>FastDFS 核心组件</h3><ul>\n<li><code>Tracker Server</code>：跟踪服务器，负责维持集群的信息；负责管理所有的 Storage Server 和 Group，每个 Storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</li>\n<li><code>Storage server</code>：存储服务器，以 Group 为单位进行组织，任何一个 Storage Server 都应该属于某个 Group；一个 Group 可含多个 Storage server；在同一个 Group 内部，各 Storage Server 的数据自行同步、备份。</li>\n<li><p><code>Client</code>：客户端，上传、下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>\n<blockquote>\n<p>核心组件的介绍参考了 [1]、[2] 的概念叙述。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastDFS-组织架构\"><a href=\"#FastDFS-组织架构\" class=\"headerlink\" title=\"FastDFS 组织架构\"></a>FastDFS 组织架构</h3><ul>\n<li><p>结合组件的功能描述可知，FastDFS 的组织架构 $^{[2]}$ 如图 1-1 所示。</p>\n<p>  <img src=\"/images/illustration/Project/2019/02/fastdfs_1-1.jpg\" alt=\"fastdfs_1-1\"></p>\n  <center>图 1-1 FastDFS 的组织架构</center>\n\n</li>\n</ul>\n<h3 id=\"FastDFS-文件传输\"><a href=\"#FastDFS-文件传输\" class=\"headerlink\" title=\"FastDFS 文件传输\"></a>FastDFS 文件传输</h3><ul>\n<li><p>通过时序图，分析 FastDFS 文件上传、文件下载等操作的流程，如图 1-2 所示。</p>\n<p>  <img src=\"/images/illustration/Project/2019/02/fastdfs_1-2.jpg\" alt=\"fastdfs_1-2\"></p>\n  <center>图 1-2 FastDFS 文件上传、下载的时序图</center>\n</li>\n<li><p>文件上传流程：</p>\n<ul>\n<li>1) Client 询问 Tracker，发送上传文件的请求；</li>\n<li>2) Tracker 返回可调用的 <code>Storage ID: Port</code>；</li>\n<li>3) Client 直接与目标 Storage 通讯，完成文件上传；</li>\n<li>4) Storage 返回 <code>文件ID</code>，文件ID 为 <code>Group ID + FileName</code>。</li>\n</ul>\n</li>\n<li>文件下载流程：<ul>\n<li>1) Client 询问 Tracker  下载文件所在的 Storage ( 参数为 <code>文件ID</code> )；</li>\n<li>2) Tracker 返回可调用的 <code>Storage ID: Port</code>；</li>\n<li>3) Client 直接与目标 Storage 通讯，完成文件下载；</li>\n<li>4) Storage 返回 <code>文件内容</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"FastDFS-客户端\"><a href=\"#FastDFS-客户端\" class=\"headerlink\" title=\"FastDFS 客户端\"></a>FastDFS 客户端</h2><h3 id=\"Java-客户端\"><a href=\"#Java-客户端\" class=\"headerlink\" title=\"Java 客户端\"></a>Java 客户端</h3><ul>\n<li>调用余庆老师封装的 <a href=\"https://github.com/happyfish100/fastdfs-client-java\" target=\"_blank\" rel=\"noopener\">FastDFS Client Java SDK</a>，即可实现客户端访问 FastDFS。</li>\n</ul>\n<h3 id=\"Python-客户端\"><a href=\"#Python-客户端\" class=\"headerlink\" title=\"Python 客户端\"></a>Python 客户端</h3><ul>\n<li><p><code>安装环境</code>：网上教程一般都是指 Python 2.7，在 Python 3.x 版本下跑不了，即使是通过 <code>pip3 install fdfs-client-py</code> 安装也跑不通，这里建议通过源码方式安装 $^{[3, 4]}$。</p>\n<blockquote>\n<p>源码地址：<a href=\"https://github.com/jefforeilly/fdfs_client-py.git\" target=\"_blank\" rel=\"noopener\">Hay86. fdfs_client-py. Last Updated on Sept.9, 2018</a></p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Case.01.通过 pip 安装</span></span><br><span class=\"line\">pip install fdfs_client-py-master.zip</span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Case.02.通过 python 安装</span></span><br><span class=\"line\"><span class=\"string\">解压 fdfs_client-py-master.zip，进入目录 /fdfs_client-py-master</span></span><br><span class=\"line\"><span class=\"string\">python steup.py install</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后，若导入时提示缺少 mutagen、requests，请继续安装依赖包</span></span><br><span class=\"line\">pip install mutagen</span><br><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>安装指南</code>：当然，安装指南和 <a href=\"https://github.com/hay86/fdfs_client-py#api-reference\" target=\"_blank\" rel=\"noopener\">API Reference</a> 请参考源码的官方文档。</p>\n</li>\n<li><p><code>生成配置</code>：在测试代码前夕，我们还需要创建一配置文件 <code>client.conf</code>。注意配置文件名称就是 <strong>client.conf</strong>，更改为其他名称好像行不通。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># connect timeout in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># default value is 30s</span></span><br><span class=\"line\">connect_timeout=<span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># network timeout in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># default value is 30s</span></span><br><span class=\"line\">network_timeout=<span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the base path to store log files</span></span><br><span class=\"line\">base_path=log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tracker_server can ocur more than once, and tracker_server format is</span></span><br><span class=\"line\"><span class=\"comment\"># \"host:port\", host can be hostname or ip address</span></span><br><span class=\"line\">tracker_server=<span class=\"number\">192.168</span><span class=\"number\">.200</span><span class=\"number\">.221</span>:<span class=\"number\">22122</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># standard log level as syslog, case insensitive, value list:</span></span><br><span class=\"line\"><span class=\"comment\">### emerge for emergency</span></span><br><span class=\"line\"><span class=\"comment\">### alert</span></span><br><span class=\"line\"><span class=\"comment\">### crit for critical</span></span><br><span class=\"line\"><span class=\"comment\">### error</span></span><br><span class=\"line\"><span class=\"comment\">### warn for warning</span></span><br><span class=\"line\"><span class=\"comment\">### notice</span></span><br><span class=\"line\"><span class=\"comment\">### info</span></span><br><span class=\"line\"><span class=\"comment\">### debug</span></span><br><span class=\"line\">log_level=info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if use connection pool</span></span><br><span class=\"line\"><span class=\"comment\"># default value is false</span></span><br><span class=\"line\"><span class=\"comment\"># since V4.05</span></span><br><span class=\"line\">use_connection_pool = false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># connections whose the idle time exceeds this time will be closed</span></span><br><span class=\"line\"><span class=\"comment\"># unit: second</span></span><br><span class=\"line\"><span class=\"comment\"># default value is 3600</span></span><br><span class=\"line\"><span class=\"comment\"># since V4.05</span></span><br><span class=\"line\">connection_pool_max_idle_time = <span class=\"number\">3600</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if load FastDFS parameters from tracker server</span></span><br><span class=\"line\"><span class=\"comment\"># since V4.05</span></span><br><span class=\"line\"><span class=\"comment\"># default value is false</span></span><br><span class=\"line\">load_fdfs_parameters_from_tracker=false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if use storage ID instead of IP address</span></span><br><span class=\"line\"><span class=\"comment\"># same as tracker.conf</span></span><br><span class=\"line\"><span class=\"comment\"># valid only when load_fdfs_parameters_from_tracker is false</span></span><br><span class=\"line\"><span class=\"comment\"># default value is false</span></span><br><span class=\"line\"><span class=\"comment\"># since V4.05</span></span><br><span class=\"line\">use_storage_id = false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># specify storage ids filename, can use relative or absolute path</span></span><br><span class=\"line\"><span class=\"comment\"># same as tracker.conf</span></span><br><span class=\"line\"><span class=\"comment\"># valid only when load_fdfs_parameters_from_tracker is false</span></span><br><span class=\"line\"><span class=\"comment\"># since V4.05</span></span><br><span class=\"line\">storage_ids_filename = storage_ids.conf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTP settings</span></span><br><span class=\"line\">http.tracker_server_port=<span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use \"#include\" directive to include HTTP other settings</span></span><br><span class=\"line\"><span class=\"comment\">## include http.conf</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>测试代码</code>：这里假设你已成功安装了 <code>fdfs-client-py</code>，那么以一段测试代码正式开始使用。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Step.01. import fdfs_client.client module</span></span><br><span class=\"line\"><span class=\"comment\"># Step.02. instantiate class Fdfs_client</span></span><br><span class=\"line\"><span class=\"comment\"># Step.03. call memeber functions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> fdfs_client.client <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># client.conf 配置文件放在 .py 文件同目录下</span></span><br><span class=\"line\">client = Fdfs_client(<span class=\"string\">'client.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传文件</span></span><br><span class=\"line\">ret = client.upload_by_filename(<span class=\"string\">'upload.txt'</span>)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\"><span class=\"comment\">## 等待 3 秒，否则下载时会报错文件不存在</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)  </span><br><span class=\"line\"><span class=\"comment\">## 新版本文件存放 Remote file_id 格式变化</span></span><br><span class=\"line\">file_id = ret[<span class=\"string\">'Remote file_id'</span>].replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">'/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载文件</span></span><br><span class=\"line\">ret_download = client.download_to_file(<span class=\"string\">'download.txt'</span>, file_id)</span><br><span class=\"line\">print(ret_download)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>说明文档</code>：关于 <code>Fdfs_client</code> 类的成员函数详细说明请参考 <a href=\"https://github.com/hay86/fdfs_client-py#api-reference\" target=\"_blank\" rel=\"noopener\">API Reference</a>：</p>\n<ul>\n<li>upload_by_filename(self, filename, meta_dict = None)</li>\n<li>upload_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)</li>\n<li>upload_slave_by_filename(self, filename, remote_file_id, prefix_name, meta_dict = None)</li>\n<li>upload_slave_by_buffer(self, filebuffer, remote_file_id, meta_dict = None, file_ext_name = None)</li>\n<li>upload_appender_by_filename(self, local_filename, meta_dict = None)</li>\n<li>upload_appender_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)</li>\n<li>delete_file(self, remote_file_id)</li>\n<li>download_to_file(self, local_filename, remote_file_id, offset = 0, down_bytes = 0)</li>\n<li>download_to_buffer(self, remote_file_id, offset = 0, down_bytes = 0)</li>\n<li>list_one_group(self, group_name)</li>\n<li>list_all_groups(self)</li>\n<li>list_servers(self, group_name, storage_ip = None)</li>\n<li>get_meta_data(self, remote_file_id)</li>\n<li>append_by_filename(self, local_filename, remote_fileid)</li>\n<li>append_by_buffer(self, file_buffer, remote_fileid)</li>\n<li>truncate_file(self, truncated_filesize, appender_fileid)</li>\n<li>modify_by_filename(self, filename, appender_fileid, offset = 0)</li>\n<li>modify_by_buffer(self, filebuffer, appender_fileid, offset = 0)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://www.cnblogs.com/mafly/p/fastdfs.html\" target=\"_blank\" rel=\"noopener\">Mafly. 分布式文件系统 FastDFS 简单了解. 2016. cnblogs.com</a></li>\n<li>[2] <a href=\"https://www.cnblogs.com/shenxm/p/8459292.html\" target=\"_blank\" rel=\"noopener\">shenxm. FastDFS 的介绍. 2018. cnblogs.com</a></li>\n<li>[3] <a href=\"http://zifuchuan.com/me/index.php/python/725-1.html\" target=\"_blank\" rel=\"noopener\">小草. FastDFS 的 Python 客户端. 2017. zifuchuan.com</a></li>\n<li>[4] <a href=\"https://blog.csdn.net/weixin_42149982/article/details/82391218\" target=\"_blank\" rel=\"noopener\">ZbyFt. Django-FDFS 配置. 2018. csdn.net</a></li>\n</ul>\n","categories":["Project"],"tags":["分布式","文件系统","DFS"]},{"title":"零成本：基于 Hexo 在 Github 上搭建博客","url":"/2018/01/Hexo-Installation-Guide.html","content":"<p>Hexo $^{[1]}$，一个快速、简洁且高效的博客框架，若以个人博文为主导需求，它的强大毋庸置疑。    </p>\n<p>Hexo 支持 GitHub Flavored Markdown 的所有功能；且基于 Node.js 所带来的超快生成速度，百页博文秒级渲染；开放性 API 以及丰富的插件等，即功能来得纯粹，不失个性化定制，上手容易且操作便捷。更重要的一点，它是开源的、免费的博客框架，数据保存在本地以及 Github 上，相信在众多博客产品中选择、博弈，相信 Hexo 的表现不会令你失望。</p>\n<p>对于 Hexo 的安装、使用教程尽量遵照官方使用文档的流程操作，而本文则将侧重于 Hexo 的优化体验、实用插件等方面的内容分享。</p>\n<p>若想了解详情可访问「<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo.io</a>」。</p>\n<a id=\"more\"></a>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><ul>\n<li>2018.01.22：完成文章初稿；</li>\n<li>2018.10.25：纠正有纰漏的地方，并重新排版；</li>\n</ul>\n<h2 id=\"壹-搭建环境\"><a href=\"#壹-搭建环境\" class=\"headerlink\" title=\"壹 搭建环境\"></a>壹 搭建环境</h2><ul>\n<li>Mac OS、Windows 环境下的配置流程和步骤大同小异，而搭建环境的大致流程为：  <ul>\n<li>Git 环境配置 ( Windows 平台需要配置 )；</li>\n<li>Node.js 环境配置；</li>\n<li>Github 账号注册和配置；</li>\n<li>Hexo 的安装和配置.</li>\n</ul>\n</li>\n<li>考虑到是流程操作类的文章，为简单起见，则我们以 MacOS 和 Windows 版本分别说明情况：<ul>\n<li><a href=\"#MacOS-版本\">MacOS 版本</a></li>\n<li><a href=\"#Windows-版本\">Windows 版本</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MacOS-版本\"><a href=\"#MacOS-版本\" class=\"headerlink\" title=\"MacOS 版本\"></a>MacOS 版本</h3><h4 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h4><ul>\n<li><p><code>Xcode</code> : Hexo 的编译依赖于 Xcode，故我们得在 Mac 上安装 Xcoce。</p>\n<ul>\n<li>Xcode 可自行到 <code>Apple App Store</code> 下载、安装。</li>\n<li>启动 Xcode 并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</li>\n</ul>\n</li>\n<li><p><code>Node.js</code> : Hexo 是基于 Node.js 开发的，即得配置 Hexo 的运行环境。</p>\n<ul>\n<li>Node.js：<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">官方下载</a>；</li>\n<li>本地安装，文件包为 <code>Node-Vx.x.x.pkg</code></li>\n<li><p>检测是否安装成功，当然返回版本信息即成功安装..</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终端下输入命令:  </span></span><br><span class=\"line\">node -v  </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>Github</code> 账户注册与建立 <code>Repository</code>：</p>\n<blockquote>\n<p>已有账号、项目可忽略此步骤，但注意代码库的配置属性。</p>\n</blockquote>\n<ul>\n<li>注册账号：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub 社区注册入口</a> ；</li>\n<li><p>创建代码库：</p>\n<ul>\n<li>Step.01. <code>Add ( 右上角「+」图标 ) -&gt; New Repository</code>；  </li>\n<li>Step.02. Repository Name，填写 <code>yourname.github.io</code>；        </li>\n<li>Step.03. Repository Description，填写<code>简单描述</code>.</li>\n</ul>\n</li>\n<li><p>配置代码库：</p>\n<ul>\n<li>Step.01. 进入项目 <code>yourname.github.io</code>；  </li>\n<li>Step.02. <code>Settings -&gt; GitHub Pages</code>，开启 <code>GH-Pages</code> 功能；  </li>\n<li><p>Step.03. 点击 <code>Launch Automatic Page Generator</code>.</p>\n<blockquote>\n<p>Github 将会自动替你创建出一个 <code>GH-Pages</code> 的页面。若配置没有问题，约15分钟后，<code>yourname.github.io</code> 就可以正常访问了，配置结束。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"安装-HEXO\"><a href=\"#安装-HEXO\" class=\"headerlink\" title=\"安装 HEXO\"></a>安装 HEXO</h4><h5 id=\"安装-HEXO-1\"><a href=\"#安装-HEXO-1\" class=\"headerlink\" title=\"安装 HEXO\"></a>安装 HEXO</h5><ul>\n<li><p>本地选择安装目录：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your-hexo-site</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在线安装 HEXO ( <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">NPM淘宝源</a> )：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g  </span><br><span class=\"line\">hexo init  </span><br><span class=\"line\">hexo install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>检测是否安装成功，当然返回版本信息即成功安装：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"运作-HEXO\"><a href=\"#运作-HEXO\" class=\"headerlink\" title=\"运作 HEXO\"></a>运作 HEXO</h5><ul>\n<li><p>本地运作 HEXO：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server <span class=\"comment\"># 或简写 hexo s</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当终端提示以下信息，则本地配置工作基本完成：</p>\n<blockquote>\n<p>Hexo is running at <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>. Press Ctrl+C to stop.</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"使用-HEXO\"><a href=\"#使用-HEXO\" class=\"headerlink\" title=\"使用 HEXO\"></a>使用 HEXO</h5><blockquote>\n<p>注意：此项操作，需要确保在 Hexo 安装目录下执行。</p>\n</blockquote>\n<ul>\n<li><p>新建一篇博文 ( 当然，更新过往的文章只需修改 <code>Hexo -&gt; Source -&gt; _Posts</code> 目录下相对应的 MarkDown 文件即可 )</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"Article Title\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>生成博文 ( 生成静态网页 )</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"部署至-GitHub\"><a href=\"#部署至-GitHub\" class=\"headerlink\" title=\"部署至 GitHub\"></a>部署至 GitHub</h5><ul>\n<li><p>部署至 Git 的准备工作：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在部署前，还需要安装「Git部署插件」:  </span></span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若没有安装该插件，会出现情况：</span></span><br><span class=\"line\"><span class=\"comment\"># deloyer not found:git</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再者，与 Github 连接前需要获得授权，不然会出现以下情况 ( 本机没有配置 Public Key ):</p>\n<blockquote>\n<p>Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p>\n</blockquote>\n</li>\n<li><p>配置 <code>SSH KEY / Public KEY</code> ( <a href=\"https://zh.wikipedia.org/wiki/RSA加密演算法\" target=\"_blank\" rel=\"noopener\">RSA 认证</a> )：</p>\n<blockquote>\n<p>[注意] 若之前机器上配置了 Git 的信息，请跳过该步骤。</p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 配置 Git 的 UserName 和 Email </span></span><br><span class=\"line\"><span class=\"comment\"># “YourAnonymousName\"，可以替换成自己的用户名   </span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"YourAnonymousName\"</span>  </span><br><span class=\"line\"><span class=\"comment\"># \"UserName@xxx.com\"，替换成自己的邮箱  </span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"UserName@xxx.com\"</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 检查是否已经有 SSH KEY\t </span></span><br><span class=\"line\"><span class=\"comment\"># Step01. 列出该目录下的文件；</span></span><br><span class=\"line\"><span class=\"comment\"># Step02. 看是否存在「id_isa」和「id_isa.pub」文件；</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\">ls</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Step03. 若存在则跳过，没有则执行此步骤「生成密钥」.</span></span><br><span class=\"line\"><span class=\"comment\"># 邮箱「UserName@xxx.com」替换成自己的邮箱</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"UserName@xxx.com\"</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 3. 登陆 Github, 添加 SSH KEY</span></span><br><span class=\"line\"><span class=\"comment\"># Step01. Avatar(头像) &gt; Settings &gt; Personal Settings &gt; SSH and GPG keys； </span></span><br><span class=\"line\"><span class=\"comment\"># Step02. New SSH KEY，把「id_isa.pub」的密钥粘贴过去即可.  </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 4. 测试是否配置成功\t</span></span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"><span class=\"comment\"># 提示「Hi YourName! You've successfully authenticated, but GitHub does not provide shell. access.」即成功配置。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 <code>_config.yml</code> 文件 ：</p>\n<ul>\n<li><p>在 Hexo 安装目录下找到 <code>_config.yml</code> 文件，如 <code>~/你的安装目录/Hexo/_config.yml</code>。找到 <code>deploy</code> 字段，修改配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\"><span class=\"built_in\">type</span>: git  </span><br><span class=\"line\">repo: https://github.com/yourname/yourname.github.io.git  </span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意: 冒号后面含一个空格；使用 Github 不用 branch 字段；若使用多个 deployer，则有：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo:</span><br><span class=\"line\">- <span class=\"built_in\">type</span>: heroku </span><br><span class=\"line\">  repo:</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>部署至 Git：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo deploy\t  </span><br><span class=\"line\">hexo d -g <span class=\"comment\"># 即在部署之前先生成</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Windows-版本\"><a href=\"#Windows-版本\" class=\"headerlink\" title=\"Windows 版本\"></a>Windows 版本</h3><h4 id=\"配置环境-1\"><a href=\"#配置环境-1\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h4><blockquote>\n<p>Github 账号注册和配置和 Hexo 的安装和配置，在 Windows 与 MacOS 上是通用的。因此，在 Windows 版本中，主要阐述 Node.Js和 Git 的安装和配置即可。</p>\n</blockquote>\n<ul>\n<li><p><code>Node.js</code> 的安装和准备：</p>\n<ul>\n<li>下载并安装：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Node.Js for Windows x86/x64 bit</a>。</li>\n<li><p>检测是否安装成功，当然返回版本信息即成功安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node -v  </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Git 的安装和准备：</p>\n<ul>\n<li>下载并安装：<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Git for Windows x86/x64 bit</a>。</li>\n<li><p>检测是否安装成功，当然返回版本信息即成功安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-优化拓展\"><a href=\"#贰-优化拓展\" class=\"headerlink\" title=\"贰 优化拓展\"></a>贰 优化拓展</h2><p>至此，Hexo 的安装以及 GitHub 的配置工作暂告一段落。能正常运行使用 Hexo 是没问题的，而下面的章节则是对 Hexo 的扩展和个性化定制，根据自己的需求挑选阅读、实践。</p>\n<h3 id=\"套用一款主题\"><a href=\"#套用一款主题\" class=\"headerlink\" title=\"套用一款主题\"></a>套用一款主题</h3><ul>\n<li><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p>\n</li>\n<li><p>在 Hexo 中有 <code>两份</code> 主要的 <code>配置文件</code>，其名称都是 <code>_config.yml</code>。 其中，一份位于 <code>站点根目录</code> 下，主要包含 Hexo 本身的配置；另一份位于 <code>主题目录</code> 下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>  为了描述方便，在以下说明中，将前者称为 <code>站点配置文件</code>， 后者称为 <code>主题配置文件</code>。具体以 NexT $^{[2]}$ 为例说明，安装步骤如下。</p>\n</li>\n</ul>\n<h4 id=\"下载主题\"><a href=\"#下载主题\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h4><ul>\n<li><p>如果你熟悉 Git， 建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆最新版本</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> your-hexo-site  </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next. themes/next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 快速更新</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h4><ul>\n<li><p>与所有 Hexo 主题启用的模式一样。 当 <code>克隆/下载</code> 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h4><h5 id=\"外观设定\"><a href=\"#外观设定\" class=\"headerlink\" title=\"外观设定\"></a>外观设定</h5><ul>\n<li><p>选择 <code>Scheme</code>：Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。目前 NexT 支持三种 Scheme：</p>\n<ul>\n<li><code>Muse</code>：默认 Scheme，黑白主调，大量留白。</li>\n<li><code>Mist</code>：Muse 的紧凑版本，整洁有序的单栏外观。</li>\n<li><p><code>Pisces</code>：双栏 Scheme，小家碧玉似的清新。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Scheme 的切换通过更改 <code>主题配置文件</code>，搜索 <code>scheme</code> 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h5><ul>\n<li>设置语言：编辑<code>站点配置文件</code>， 将 <code>language</code> 设置成你所需要的语言，例如 <code>language: zh-Hans</code>。建议明确设置你所需要的语言，例如选用简体中文，配置如下 ( 更多请语言配置请参考下述表格 )：</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语言</th>\n<th style=\"text-align:left\">代码</th>\n<th style=\"text-align:left\">设定示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">English</td>\n<td style=\"text-align:left\">en</td>\n<td style=\"text-align:left\">language: en</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">简体中文</td>\n<td style=\"text-align:left\">zh-Hans</td>\n<td style=\"text-align:left\">language: zh-Hans</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Français</td>\n<td style=\"text-align:left\">fr-FR</td>\n<td style=\"text-align:left\">language: fr-FR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Português</td>\n<td style=\"text-align:left\">pt</td>\n<td style=\"text-align:left\">language: pt or pt-BR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">繁體中文</td>\n<td style=\"text-align:left\">zh-hk</td>\n<td style=\"text-align:left\">language: zh-hk</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Русский</td>\n<td style=\"text-align:left\">язык    ru</td>\n<td style=\"text-align:left\">language: ru</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Deutsch</td>\n<td style=\"text-align:left\">de</td>\n<td style=\"text-align:left\">language: de</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">日本語</td>\n<td style=\"text-align:left\">ja</td>\n<td style=\"text-align:left\">language: ja</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Indonesian</td>\n<td style=\"text-align:left\">id</td>\n<td style=\"text-align:left\">language: id</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Korean</td>\n<td style=\"text-align:left\">ko</td>\n<td style=\"text-align:left\">language: ko</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"设置菜单\"><a href=\"#设置菜单\" class=\"headerlink\" title=\"设置菜单\"></a>设置菜单</h5><ul>\n<li><p>菜单配置包括三个部分，第一是菜单项 ( <code>名称和链接</code> )，第二是菜单项的 <code>显示文本</code>，第三是菜单项对应的 <code>图标</code>。</p>\n</li>\n<li><p>NexT 使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> $^{[3]}$ 提供的图标，600+ 的图标可满足大部分需求，且适配 Retina 屏幕。</p>\n</li>\n<li><p>编辑 <code>主题配置文件</code>，修改以下内容：</p>\n  <div class=\"note warning\"><p>请注意键值（ 如 <code>home</code> ）的大小写要严格匹配。 </p></div>\n<ul>\n<li><p>设定菜单内容，对应的字段是 <code>menu</code>，菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code> 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">home: /</span><br><span class=\"line\">archives: /archives</span><br><span class=\"line\"><span class=\"comment\">#about: /about</span></span><br><span class=\"line\"><span class=\"comment\">#categories: /categories</span></span><br><span class=\"line\">tags: /tags</span><br><span class=\"line\"><span class=\"comment\">#commonweal: /404.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若你的站点运行在子目录中，请将链接前缀的/去掉</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>NexT 默认的菜单项有 ( 标注 <code>*</code> 的项表示需要手动创建这个页面 )：</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">键值</th>\n<th style=\"text-align:left\">设定值</th>\n<th style=\"text-align:left\">显示文本(简体中文)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">home</td>\n<td style=\"text-align:left\">home: /</td>\n<td style=\"text-align:left\">主页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">archives</td>\n<td style=\"text-align:left\">archives: /archives</td>\n<td style=\"text-align:left\">归档页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">categories</td>\n<td style=\"text-align:left\">categories: /categories</td>\n<td style=\"text-align:left\">分类页 <code>*</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tags</td>\n<td style=\"text-align:left\">tags: /tags</td>\n<td style=\"text-align:left\">标签页 <code>*</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">about</td>\n<td style=\"text-align:left\">about: /about</td>\n<td style=\"text-align:left\">关于页面 <code>*</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">commonweal</td>\n<td style=\"text-align:left\">commonweal: /404.html</td>\n<td style=\"text-align:left\">公益 404 <code>*</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>设置菜单项的显示文本，在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用这个名称查找对应的语言翻译，并提取显示文本。</p>\n<p>   这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （ {language} 为你所使用的语言 )。以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在<code>menu</code>字段下添加一项：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">home: 首页</span><br><span class=\"line\">archives: 归档</span><br><span class=\"line\">categories: 分类</span><br><span class=\"line\">tags: 标签</span><br><span class=\"line\">about: 关于</span><br><span class=\"line\">search: 搜索</span><br><span class=\"line\">commonweal: 404</span><br><span class=\"line\">something: 有料</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu_icons:</span><br><span class=\"line\"><span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># Icon Mapping.</span></span><br><span class=\"line\">home: home</span><br><span class=\"line\">about: user</span><br><span class=\"line\">categories: th</span><br><span class=\"line\">tags: tags</span><br><span class=\"line\">archives: archive</span><br><span class=\"line\">commonweal: heartbeat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  此设定格式是「item name: icon name」</span></span><br><span class=\"line\"><span class=\"comment\"># 「item name」与上一步所配置的菜单名字对应</span></span><br><span class=\"line\"><span class=\"comment\"># 「icon name」是 Font Awesome 图标的名字</span></span><br><span class=\"line\"><span class=\"comment\"># 「enable」用于控制是否显示图标，你可以设置成「false」来去掉图标</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"设置侧栏\"><a href=\"#设置侧栏\" class=\"headerlink\" title=\"设置侧栏\"></a>设置侧栏</h4><ul>\n<li><p>可以通过修改 <code>主题配置文件</code> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是 <code>侧栏的位置</code>， 其二是 <code>侧栏显示的时机</code>。</p>\n</li>\n<li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>\n<blockquote>\n<p>left - 靠左放置<br>right - 靠右放置  </p>\n</blockquote>\n<p>  目前仅 Pisces Scheme 支持 position 配置。影响版本 <code>5.0.0</code> 及更低版本。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sidebar:  </span><br><span class=\"line\">position: left</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>\n<blockquote>\n<p>post - 默认行为，在文章页面（ 拥有目录列表 ）时显示<br>always - 在所有页面中都显示<br>hide - 在所有页面中都隐藏（ 可以手动展开 ）<br>remove - 完全移除  </p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">display: post</span><br></pre></td></tr></table></figure>\n<p>   已知侧栏在 <code>use motion: false</code> 的情况下不会展示。影响版本 <code>5.0.0</code> 及更低版本。</p>\n</li>\n</ul>\n<h4 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h4><ul>\n<li><p>编辑 <code>主题配置文件</code>， 修改字段 <code>avatar</code>，值设置成头像的链接地址。其中，头像的链接地址可以是：</p>\n<ul>\n<li>站外链接：<code>avatar: http://example.com/avatar.png</code></li>\n<li>站内资源：放置在 <code>source/images/</code> 目录下，images 为自建目录，字段配置为 <code>avatar: /images/avatar.png</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"揽收实用插件\"><a href=\"#揽收实用插件\" class=\"headerlink\" title=\"揽收实用插件\"></a>揽收实用插件</h3><h2 id=\"叁-参考资料\"><a href=\"#叁-参考资料\" class=\"headerlink\" title=\"叁 参考资料\"></a>叁 参考资料</h2><p><a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">[1] HexoJs. 使用文档. 2018</a><br><a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">[2] NexT. 使用文档. 2018</a><br><a href=\"http://fontawesome.io/accessibility/\" target=\"_blank\" rel=\"noopener\">[3] Dave Gandy. Font Awesome Accessibility</a><br><a href=\"http://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">[4] 徐俊. 手把手教你搭建属于自己的博客. CSDN. 2017</a> </p>\n","categories":["Project"],"tags":["hexo"]},{"title":"C 语言应试复习框架","url":"/2017/04/C-Programming-Design-Learning.html","content":"<p>从标题中得知，本系列文章是围绕 “C语言” 展开学习的笔记总结。且目的很明确，笔记内容偏应试，适用于计算机等级考试、考研专业课 ( C语言 ) 等的复习使用。文章推崇总结性、对比性的学习方法，对于模糊的知识模块需自行查阅参考书目，深化理解以取得理想效果。</p>\n<a id=\"more\"></a>\n<p>针对 C 语言程序，推荐几本辅导复习的书目：</p>\n<blockquote>\n<p>基础篇</p>\n</blockquote>\n<ul>\n<li><code>《谭浩强: C 语言程序设计》</code>: 必不可少的经典教程，权威性的标准答案源 ( 当然仅限于应试范围 )。例如，因讨论条件而异，如编译系统不同，部分题目的答案就具有了争议性。 </li>\n<li><code>《明解 C 语言》</code>: 入门基础教学。值得称赞的是，每个知识模块都附有实例，且实例的源码结构清晰，代码规范及注释到位，适合入门使用。</li>\n</ul>\n<blockquote>\n<p>进阶篇</p>\n</blockquote>\n<ul>\n<li><code>《征服 C 指针》</code>: C 语言的学习过程中，指针的运用是最大的难关。无论是在实际应用、应试中都是不可忽视的。对于作者前桥和弥，其一针见血的文风，在掌握一定基础之后，是深入了解 C 语言的一位不可多得 “良师益友” ( 书中有不少作者交谈式的独白，别有一番阅读风味 )。</li>\n</ul>\n<h2 id=\"内容总览\"><a href=\"#内容总览\" class=\"headerlink\" title=\"内容总览\"></a>内容总览</h2><ul>\n<li><a href=\"#壹-程序设计和-C-语言\">壹 程序设计和 C 语言</a></li>\n<li><a href=\"#贰-程序之魂：算法\">贰 程序之魂：算法</a></li>\n<li><a href=\"#叁-简单的-C-语言程序设计\">叁 简单的 C 语言程序设计</a></li>\n<li><a href=\"#肆-选择结构程序设计\">肆 选择结构程序设计</a></li>\n<li><a href=\"#伍-循环结构程序设计\">伍 循环结构程序设计</a></li>\n<li><a href=\"#陆-数组\">陆 数组</a></li>\n<li><a href=\"#柒-函数\">柒 函数</a></li>\n<li><a href=\"#捌-指针\">捌 指针</a></li>\n<li><a href=\"#玖-构造类型：用户自己建立数据结构\">玖 构造类型：用户自己建立数据结构</a></li>\n<li><a href=\"#拾-文件处理\">拾 文件处理</a></li>\n</ul>\n<h2 id=\"壹-程序设计和-C-语言\"><a href=\"#壹-程序设计和-C-语言\" class=\"headerlink\" title=\"壹 程序设计和 C 语言\"></a>壹 程序设计和 C 语言</h2><h3 id=\"计算机程序与语言\"><a href=\"#计算机程序与语言\" class=\"headerlink\" title=\"计算机程序与语言\"></a>计算机程序与语言</h3><ul>\n<li>程序：计算机能识别和执行的指令。  </li>\n<li>语言：人和计算机交流、人和计算机能识别的语言。</li>\n<li>计算机语言发展阶段：   </li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">机器语言</th>\n<th style=\"text-align:center\">符号语言</th>\n<th style=\"text-align:center\">高级语言 ( 面向过程、面向对象 )</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0和1指针</td>\n<td style=\"text-align:center\">英文、数字表示指令</td>\n<td style=\"text-align:center\">人类自然语言和数字语言</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"C语言\"><a href=\"#C语言\" class=\"headerlink\" title=\"C语言\"></a>C语言</h3><ul>\n<li>特点：<ul>\n<li>语言简洁、紧凑，使用方便、灵活；</li>\n<li>运算符丰富 ( 单目、双目、三目运算符 )；</li>\n<li>数据类型丰富，其中包括：整型、浮点型、字符型、数组类型、指针类型、结构体类型、共用体类型、枚举型 )；</li>\n<li>结构体控制语句；</li>\n<li>直接访问物理地址 ( 对硬件直接操作 )；</li>\n<li>可移植性好.</li>\n</ul>\n</li>\n<li>结构：<ul>\n<li>以程序由一个或着多个 <code>源文件</code> 组成， 源文件中包括：  <ul>\n<li>预处理命令 ( #include、#define、#typedef 等 )；</li>\n<li>全局声明 ( 全局变量、局部变量 )；</li>\n<li>函数定义 ( 参考函数原型 ).</li>\n</ul>\n</li>\n<li>函数是 C 程序的主要组成部分。</li>\n<li>函数包括 <code>函数首部</code> 和 <code>函数体</code>。  函数体包括 <code>声明部分</code> 和 <code>执行部分</code>。</li>\n<li>程序总是从 main() 函数开始执行的。且 main() 函数有且仅有一个。</li>\n<li>C 程序对计算机的操作有 C 语言完成。</li>\n<li>数据声明和语句必须有分号 ( 作为结束 )。</li>\n<li>C 本身不提供输入输出语句。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"程序设计的任务\"><a href=\"#程序设计的任务\" class=\"headerlink\" title=\"程序设计的任务\"></a>程序设计的任务</h3><ul>\n<li>程序设计的任务：<ul>\n<li>问题分析；</li>\n<li>设计算法；</li>\n<li>编写程序；</li>\n<li>对源文件编辑、编译 ( *.obj ) 和连接 ( *.exe )；</li>\n<li>运行程序并分析结果；  </li>\n<li>编写程序文档.</li>\n</ul>\n</li>\n<li>对于编译，预编译和连接的概念及比对： <ul>\n<li>编译：检索语言错误；把源程序转为二进制形式的目标程序。</li>\n<li>预编译：通过预处理得到的信息与程序其他部分一起，组成完整的、可以正式编译的源程序。</li>\n<li>连接：与函数库相连接。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-程序之魂：算法\"><a href=\"#贰-程序之魂：算法\" class=\"headerlink\" title=\"贰 程序之魂：算法\"></a>贰 程序之魂：算法</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><ul>\n<li><p>对数据的描述：所用数据的类型和数据的 <code>组织形式</code>。 </p>\n<blockquote>\n<p><code>组织形式</code>：数据结构，特定关系的数据元素的集合。</p>\n</blockquote>\n</li>\n<li><p>对操作的描述：计算机进行操作的步骤 — <code>算法</code>。</p>\n</li>\n<li>从简理解：<code>数据结构 + 算法 = 程序</code>。</li>\n</ul>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ul>\n<li>概念：对特定问题求解的方法和描述。</li>\n<li>特征：<ul>\n<li>有穷性：<code>有穷时间</code> 执行结束；</li>\n<li>确定性：算法 <code>唯一执行路径</code>，既相同输入执行相同路径；</li>\n<li>可行性：<code>有限次</code>；</li>\n<li>零或一个以上的 <code>输入</code>；</li>\n<li>一个或以上的 <code>输出</code>；</li>\n</ul>\n</li>\n<li>要求：<ul>\n<li>正确性；</li>\n<li>可读性；</li>\n<li>健壮性；</li>\n<li>效率与低存储量需求 ( 时间复杂度和空间复杂度 )  </li>\n</ul>\n</li>\n<li>时间复杂度：<ul>\n<li>时间复杂度：也称渐进时间复杂度，即算法执行时间的增长率和 f(n) 的增长率相同。  </li>\n<li>渐进时间复杂度：$T(n) = O(f(n))$  </li>\n<li>$f(n)$ 为问题规模 n 的某个函数。  </li>\n<li>算法中的基本运算 ( 最深层循环内的语句 ) 的频度与 T(n) 同数量级。  </li>\n</ul>\n</li>\n<li>空间复杂度：<ul>\n<li>空间复杂度：算法所需存储空间的量度。  </li>\n<li>渐进空间复杂度：$S(n) = O(f(n))$  </li>\n<li>原地工作：额外空间相对输入的数据量来说是常数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三种基本结构和改进流程图\"><a href=\"#三种基本结构和改进流程图\" class=\"headerlink\" title=\"三种基本结构和改进流程图\"></a>三种基本结构和改进流程图</h3><ul>\n<li>三种基本结构：<ul>\n<li>顺序结构；</li>\n<li>选择结构；</li>\n<li>循环结构：当型循环结构 / 直到型循环结构；</li>\n</ul>\n</li>\n<li>改进的流程图：N-S 流程图</li>\n</ul>\n<h3 id=\"结构化程序设计方法\"><a href=\"#结构化程序设计方法\" class=\"headerlink\" title=\"结构化程序设计方法\"></a>结构化程序设计方法</h3><ul>\n<li>自顶向下；</li>\n<li>逐步细化；</li>\n<li>模块化设计：<code>分而治之</code>；    <code>注意模块独立性</code></li>\n<li>结构化编码；</li>\n</ul>\n<h2 id=\"叁-简单的-C-语言程序设计\"><a href=\"#叁-简单的-C-语言程序设计\" class=\"headerlink\" title=\"叁 简单的 C 语言程序设计\"></a>叁 简单的 C 语言程序设计</h2><h3 id=\"数据的表现形式及运算\"><a href=\"#数据的表现形式及运算\" class=\"headerlink\" title=\"数据的表现形式及运算\"></a>数据的表现形式及运算</h3><h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><ul>\n<li>概念：程序运行期间，其值不能改变。</li>\n<li><p>类型：</p>\n<ul>\n<li>整型常量  </li>\n<li>字符常量 ( 与常变量作比对 <strong>[ 注释1 ]</strong> )<ul>\n<li>普通字符  </li>\n<li>转移字符：<code>\\n</code>, <code>\\t</code>, <code>\\012</code> ( 8 进制 ), <code>\\x41</code> ( 16 进制 )</li>\n<li>符号常量：<code>#define PI 3.14159</code></li>\n</ul>\n</li>\n<li><p>实型常量</p>\n<ul>\n<li>10 进制小数形式：<code>3.14L</code></li>\n<li><p>指数形式 ( 科学计数法 ):  </p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8.7e-25</span>;  <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"number\">8.7e-2</span><span class=\"number\">.5</span>; <span class=\"comment\">// 错误  </span></span><br><span class=\"line\"><span class=\"number\">87e+25</span>; <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"number\">87e-25</span>; <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>[ 注释1 ] 符号常量与常变量的比较。</p>\n</blockquote>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">符号常量</th>\n<th style=\"text-align:left\">常变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">不占内存单元，预编译后符号不复存在</td>\n<td style=\"text-align:left\">占存储单元</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不能重新赋值</td>\n<td style=\"text-align:left\">不能改变其值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><blockquote>\n<p>先定义，后使用。</p>\n</blockquote>\n<ul>\n<li>概念：程序运行期间，其值可以改变。</li>\n<li>包含属性：<ul>\n<li>数据类型 ( 整型、浮点型、字符型 )</li>\n<li>存储类别 ( 自动变量，静态变量 )</li>\n</ul>\n</li>\n<li><p>类型：</p>\n<ul>\n<li>常变量：变量存在期间其值不能改变。 <code>const int a = 10</code>  </li>\n<li>自动变量与静态变量  </li>\n<li><p>全局变量与局部变量  </p>\n<blockquote>\n<p>从存储位置、生存周期、作用区域讨论差异性。<strong>[ 注释2 ]</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>标识符：一个对象的名称。除关键字外，字符、数字和下划线组成。且要求只能是字母或下划线开头。    </p>\n</li>\n</ul>\n<blockquote>\n<p>[ 注释2 ] 局部变量与全局变量，自动变量与静态变量，内部函数与外部函数的比较。</p>\n</blockquote>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">局部变量</th>\n<th style=\"text-align:left\">全局变量</th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">存放于动态存储区</td>\n<td style=\"text-align:left\">存放于静态存储区</td>\n<td style=\"text-align:left\">位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在定义函数内起作用</td>\n<td style=\"text-align:left\">自定义位置开始，本文件起作用</td>\n<td style=\"text-align:left\">作用域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">函数调用完释放内存</td>\n<td style=\"text-align:left\">程序结束时释放内存</td>\n<td style=\"text-align:left\">生存期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>静态的局部变量，存放于静态存储区，程序结束时释放内存。</li>\n<li>静态的全局变量，不是因声明 static，而误解全局变量才存放于静态存储区。</li>\n<li>局部变量，声明存储类型指变量存储区以及产生的生存期问题。  </li>\n<li>全局变量，声明存储类型指变量作用域的扩展问题。</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">自动变量</th>\n<th style=\"text-align:left\">静态变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1. 声明该变量的语句块被执行结束释放内存(<strong>栈</strong>)</td>\n<td style=\"text-align:left\">1. 程序结束时才释放内存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2. 每次函数调用时赋值</td>\n<td style=\"text-align:left\">2. 保留上一步的赋值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3. 在编时赋予初值0或’\\0’</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>对比 malloc() 函数分配的内存，需调用 free() 函数释放内存 ( <strong>堆</strong> )。</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">内部函数</th>\n<th style=\"text-align:left\">外部函数 (default)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">本文件内使用(不限位置)</td>\n<td style=\"text-align:left\">可供其他文件使用(不限位置)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">定义：static 函数类型 函数名</td>\n<td style=\"text-align:left\">定义：(extern) 函数类型 函数名</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li>基本类型：</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">字节</th>\n<th style=\"text-align:left\">取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">整型</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">2/4</td>\n<td style=\"text-align:left\">$-2^{15}$ ~ $-2^{15}-1$ / $-2^{31}$ ~ $2^{31}-1$</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">unsigned int</td>\n<td style=\"text-align:left\">2/4</td>\n<td style=\"text-align:left\">0 ~ $-2^{16}-1$ / 0 ~ $-2^{32}-1$</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">字符型</td>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">$-2^7$ ~ $2^7-1$</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">unsigned char</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">0 ~ $2^8-1$</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单浮点</td>\n<td style=\"text-align:left\">float (有效小数：6)</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">双浮点</td>\n<td style=\"text-align:left\">double (有效小数：15)</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>关于基本类型的特别说明： <ul>\n<li>字符是按其 ASCII 形式存储的。</li>\n<li>单浮点定义：<code>float a = 3.14f</code></li>\n<li>双浮点定义：<code>double a = 3.14</code></li>\n<li>长浮点定义：<code>long double a = 3.14L</code></li>\n</ul>\n</li>\n<li>派生类型：<ul>\n<li>指针类型：指向函数的指针、多重指针</li>\n<li>数组类型：指针数组</li>\n</ul>\n</li>\n<li>构造类型：<a href=\"#玖-构造类型：用户自己建立数据结构\">详情见第玖章：构造类型</a><ul>\n<li>结构体类型</li>\n<li>共同体类型</li>\n<li>枚举类型      </li>\n</ul>\n</li>\n<li>类型转换：  <ul>\n<li>低精度向高精度转换；  </li>\n<li>强制转换括号加类型；   <code>int a = (int)3.14</code>  </li>\n<li>多类型变量混合运算，取最高精度的类型；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"肆-选择结构程序设计\"><a href=\"#肆-选择结构程序设计\" class=\"headerlink\" title=\"肆 选择结构程序设计\"></a>肆 选择结构程序设计</h2><h3 id=\"关系运算符及其优先次序\"><a href=\"#关系运算符及其优先次序\" class=\"headerlink\" title=\"关系运算符及其优先次序\"></a>关系运算符及其优先次序</h3><ul>\n<li><p>各类运算符的优先级：</p>\n<ul>\n<li>单目运算符 &gt; 双目运算符 (算术、关系、逻辑) &gt; 三目运算符</li>\n<li>优先级由高到低排序：  <ul>\n<li>初等运算符：<code>()，[]，-&gt;，.</code>  </li>\n<li>单目运算符：<code>!，++，--，~</code>  </li>\n<li>算术运算符：<code>*，/，%</code>，<code>+，-</code>  </li>\n<li>关系运算符：<code>&gt;，&lt;，&gt;=，&lt;=</code>，<code>!=，==</code>  </li>\n<li>逻辑运算符：<code>&amp;&amp;，||</code>  </li>\n<li>条件运算符：<code>a &gt; b : a : b</code>  </li>\n<li>赋值运算符：<code>a += 1</code>  </li>\n<li>逗号运算符：<code>(a,b)</code>      </li>\n</ul>\n</li>\n<li><p>结合方式：</p>\n<blockquote>\n<p>同一级的运算符，由结合方式决定优先级。</p>\n</blockquote>\n<ul>\n<li>自左向右：<code>初等、单目、关系、逻辑、逗号运算符</code></li>\n<li>自右向左：<code>条件、赋值运算符</code>  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><ul>\n<li>算术表达式：先乘除模，后加减，再由“自左向右”原则运算。</li>\n<li>混合运算<ul>\n<li>优先级：遵循各运算符的优先次序。</li>\n<li>结合性：算术运算符 (自左向右)；赋值运算符 (自右向左)。</li>\n<li>不同类型的混合运算：结果的类型为 <strong>最高精度</strong> 的数据类型。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h3><ul>\n<li><p>关系运算符和关系表达式 ( a+b&gt;c ) -&gt; True or False?  </p>\n<blockquote>\n<p>0 表示假，!0 表示真。</p>\n</blockquote>\n</li>\n<li><p>逻辑运算符和逻辑表达式</p>\n<ul>\n<li>逻辑运算：5 &amp;&amp; 4 =&gt; 1；5 &amp;&amp; 0 =&gt; 0；  </li>\n<li><p>按位逻辑：5 &amp; 4 =&gt; 4；  </p>\n<blockquote>\n<p>关于逻辑运算与按位逻辑的比较：<br>优先级：按位逻辑运算 &gt; 逻辑运算<br>按位逻辑的巧用：取最大 <code>max = a | b</code>；取最小 <code>min = a &amp; b</code>    </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>条件运算符和条件表达式：<code>a &gt; b ? a : b</code></p>\n</li>\n</ul>\n<h3 id=\"选择结构的嵌套\"><a href=\"#选择结构的嵌套\" class=\"headerlink\" title=\"选择结构的嵌套\"></a>选择结构的嵌套</h3><ul>\n<li><p><code>if</code> 语句只有两个分支可供选择，<code>else</code> 总是与它上面最近的未配对的 <code>if()</code> 配对。</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(express1)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(express2)&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(express3)&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>switch</code> 语句实现多分支选择结构。</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(express1)&#123; <span class=\"comment\">// 整型、字符型</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 常量/常量表达式:</span><br><span class=\"line\">\t\t语句<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// break 为拦截作用</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> 常量/常量表达式:</span><br><span class=\"line\">\t\t语句<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>: 语句<span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"伍-循环结构程序设计\"><a href=\"#伍-循环结构程序设计\" class=\"headerlink\" title=\"伍 循环结构程序设计\"></a>伍 循环结构程序设计</h2><ul>\n<li><p><code>while</code> 语句实现：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">express1;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(express2)&#123;</span><br><span class=\"line\">\texpress3;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>for</code> 语句实现循环：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(express1; express2; express3)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>do...while()</code> 语句实现循环：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">express1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\texpress3;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(express2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>break</code>、<code>continue</code> 与 <code>goto</code> 语句：</p>\n<ul>\n<li>break：从循环体内跳出循环体。多层嵌套循环，跳出相邻一层循环。</li>\n<li>continue：提前结束本次循环。</li>\n<li>goto：跳出多层循环。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"陆-数组\"><a href=\"#陆-数组\" class=\"headerlink\" title=\"陆 数组\"></a>陆 数组</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>一组有序数据的集合。</li>\n<li>数组中每一元素同属一个数据类型。</li>\n<li>sname[0] &lt;=&gt; *(p+0) &lt;=&gt; 第一个数组元素。  </li>\n</ul>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h4 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h4><ul>\n<li><p>定义：</p>\n<ul>\n<li><code>类型符 数组名[常量表达式]</code>：正确的定义方式。</li>\n<li><code>类型符 数组名[变量]</code>： 错误的定义方式，不能为变量。</li>\n</ul>\n</li>\n<li><p>初始化：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;  </span><br><span class=\"line\">in <span class=\"built_in\">array</span>[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 5个元素都为 0。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = &amp;<span class=\"built_in\">array</span>[<span class=\"number\">0</span>];\t<span class=\"comment\">// 等同于 int *p = array</span></span><br><span class=\"line\">p++;\t<span class=\"comment\">// 指针运算</span></span><br><span class=\"line\">*(p+i);\t<span class=\"comment\">// 取第i位元素</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h4><ul>\n<li><p>定义：类型符 数组名[常量表达式][常量表达式]</p>\n</li>\n<li><p>初始化：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = &#123; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[][<span class=\"number\">2</span>] = &#123; &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125; &#125;;\t<span class=\"comment\">// 既只允许最外层元素个数定义时为空</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[][<span class=\"number\">2</span>] = &#123; &#123;<span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125; &#125;;\t<span class=\"comment\">// 正确 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[][<span class=\"number\">2</span>] = &#123; &#123;&#125;, &#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125; &#125;;\t<span class=\"comment\">// 错误</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>引用：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"built_in\">array</span>[<span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"built_in\">array</span>;</span><br><span class=\"line\">*(*(p+j)+j); <span class=\"comment\">// 等同于array[i][j];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"字符数组\"><a href=\"#字符数组\" class=\"headerlink\" title=\"字符数组\"></a>字符数组</h4><ul>\n<li><p>定义：<code>char array[10]; &lt;=&gt; int array[10];</code></p>\n<blockquote>\n<p>字符型数组是以整型形式存放的 ( ASCII )。</p>\n</blockquote>\n</li>\n<li><p>初始化：</p>\n<ul>\n<li>字符串常量不可以数组形式取具体位置进行元素修改。</li>\n<li><p>( array == “Hello” ) =&gt; True or False ? </p>\n<blockquote>\n<p>False，array 与字符串常量比较的是内存地址。</p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[<span class=\"number\">0</span>] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[] = &#123;<span class=\"string\">\"Hello\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 字符数组的存储情况：| H | e | l | l | o | \\0 |</span></span><br><span class=\"line\"><span class=\"comment\">// sizeof() -- 6</span></span><br><span class=\"line\"><span class=\"comment\">// strlen() -- 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[] = &#123;<span class=\"string\">'H'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// sizeof() -- 5</span></span><br><span class=\"line\"><span class=\"comment\">// strlen() -- 5</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[] = &#123;<span class=\"string\">\"Hello\"</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// sizeof() -- 4</span></span><br><span class=\"line\"><span class=\"comment\">// strlen() -- 1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[] = &#123;<span class=\"string\">'H'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// sizeof() -- 20</span></span><br><span class=\"line\"><span class=\"comment\">// strlen() -- 4</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">array</span> = <span class=\"string\">\"Hello\"</span>; <span class=\"comment\">// 字符串常量</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>引用：</p>\n<ul>\n<li>若字符数组中，存在 ‘\\0’ 两个或以上，系统则以第一次出现的位置提前终止字符输出。  </li>\n<li><p>stdin 和 gets() 搭配，可获得换行符、空格等字符。 ( 需结束标记符来终止输入 )</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>, &amp;<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, <span class=\"built_in\">array</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, <span class=\"built_in\">array</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, <span class=\"built_in\">array</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>应用：</p>\n<ul>\n<li>gets(字符数组) — 输入一字符串到字符数组中</li>\n<li>puts(字符数组) — 输出一字符串到终端</li>\n<li>strlen(字符数组) — 测一字符串的实际长度</li>\n<li><p>strcat(char *src1, const char *src2);</p>\n<blockquote>\n<p>数组src2后接于src1，src1中的’\\0’被覆盖。且数组src1必须足够大，以容纳数组src2。</p>\n</blockquote>\n</li>\n<li><p>strcpy(char *src1, const char *src2);</p>\n<blockquote>\n<p>数组src1必须足够大，以容纳数组src2。</p>\n</blockquote>\n</li>\n<li><p>strcmp(const char *src1, const char *src2);</p>\n<blockquote>\n<p>实际为ASCII的比较，其返回值为 <0、==0，>0 的情况。</0、==0，></p>\n</blockquote>\n</li>\n<li><p>strlwr(字符串) — 将字符串中大写字母转为小写字母</p>\n</li>\n<li>strupr(字符串) — 将字符串中小写字母转为大写字母</li>\n<li>atoi(字符串) — 字符串转int型</li>\n<li>atol(字符串) — 字符串转long型</li>\n<li><p>atof(字符串) — 字符串转double型   </p>\n<blockquote>\n<p>有几点需要特别声明：<br>1) 字符串处理函数需加入头文件：<code>#include &lt;string.h&gt;</code>.<br>2) 需掌握字符串函数自定义方法实现。<br>3) 大部份字符串处理函数多数以标记量’\\0’为临界点，若字符数组中含两个或或以上，需注意实际的结果。<br>4) 引用atoi()、atol()、atof()函数需引用<code>#include &lt;stdlib.h&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"柒-函数\"><a href=\"#柒-函数\" class=\"headerlink\" title=\"柒 函数\"></a>柒 函数</h2><h3 id=\"为什么要用函数\"><a href=\"#为什么要用函数\" class=\"headerlink\" title=\"为什么要用函数\"></a>为什么要用函数</h3><ul>\n<li>模块化程序设计：每一函数实现一特定的功能，函数的名称既反映功能。</li>\n<li><p>更好地代码复用：使用库函数；使用自己编写的函数。 </p>\n<blockquote>\n<p><code>代码复用</code>：减少重复编码程序段的工作量。对于所有完成相同功能的组件，应抽象出一个接口，它们都实现该接口。具体在 Java 中，所有完成相同功能的组件都 <code>实现该接口</code> 或 <code>从该抽象类中的继承</code>。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><blockquote>\n<p>建立存储空间的声明。</p>\n</blockquote>\n<ul>\n<li>定义函数：<code>函数返回类型</code> <code>函数名</code> <code>函数参数</code> <code>函数体</code> (变量定义、声明，执行语句)<ul>\n<li>函数返回类型：基本数据类型 / void型；  </li>\n<li>函数名：驼峰式命名法；  </li>\n<li>函数参数：实参、形参.  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h3><blockquote>\n<p>不需要建立存储空间的声明。</p>\n</blockquote>\n<ul>\n<li>函数原型 (Prototype)：函数返回类型、函数名、参数类型、参数个数、参数顺序。</li>\n<li>函数声明的方法：<ul>\n<li>使用函数原型；</li>\n<li>同一源文件，在调用该函数的前面定义 (可打包到自定义头文件中)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><ul>\n<li>嵌套调用、递归调用 ( 直接或间接调用该函数本身 )。</li>\n<li>实参和形参：<ul>\n<li>概念：<ul>\n<li>实参：常量、变量或表达式、函数 (返回值)  </li>\n<li>形参：函数调用期间临时分配内存，值从实参中获得，调用结束后释放内存空间。</li>\n</ul>\n</li>\n<li>实质：值传递、地址传递</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"捌-指针\"><a href=\"#捌-指针\" class=\"headerlink\" title=\"捌 指针\"></a>捌 指针</h2><h3 id=\"指针是什么\"><a href=\"#指针是什么\" class=\"headerlink\" title=\"指针是什么\"></a>指针是什么</h3><ul>\n<li>指针变量：保存变量地址的变量。</li>\n<li><p>指针类型：</p>\n<ul>\n<li>指针类型的变量：存放地址</li>\n<li><p>指针类型的值：对应内存地址存放的值</p>\n<blockquote>\n<p>在 <code>swap(int \\*a, int \\*b);</code> 的案例中可以形象说明两者的区别。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"指针移动-运算：加、减\"><a href=\"#指针移动-运算：加、减\" class=\"headerlink\" title=\"指针移动 (运算：加、减)\"></a>指针移动 (运算：加、减)</h3><ul>\n<li>对指针加一、减一运算，即地址会增加或减少一单位长度。</li>\n<li>单位长度具体指当前指针所指向数据类型的所占空间大小。</li>\n</ul>\n<h3 id=\"指针类型\"><a href=\"#指针类型\" class=\"headerlink\" title=\"指针类型\"></a>指针类型</h3><h4 id=\"空指针\"><a href=\"#空指针\" class=\"headerlink\" title=\"空指针\"></a>空指针</h4><ul>\n<li>确保没有指向任何一个对象的指针，通常以宏定义 NULL(0) 表示空指针的常量值。</li>\n<li><p>关于 <code>NULL</code>、<code>0</code>和 <code>&#39;\\0&#39;</code>，大部分情况都为零。特别地：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"number\">0</span>;\t<span class=\"comment\">// 正确，编译器将指针指向内存地址为 0 处。 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"number\">3</span>;\t<span class=\"comment\">// 错误，赋值的数据类型不相符。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"指针类型的派生\"><a href=\"#指针类型的派生\" class=\"headerlink\" title=\"指针类型的派生\"></a>指针类型的派生</h4><ul>\n<li><p>指向函数的指针：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (*func(<span class=\"keyword\">int</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指向数组的指针 ( <code>多重指针</code> )：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"数组类型的派生\"><a href=\"#数组类型的派生\" class=\"headerlink\" title=\"数组类型的派生\"></a>数组类型的派生</h4><ul>\n<li><p>指针数组：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p[<span class=\"number\">5</span>]; <span class=\"comment\">// 存放5个指向int类型的指针。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用英语解读各种各样的C语言声明：</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">C语言</th>\n<th style=\"text-align:left\">英语表示</th>\n<th style=\"text-align:left\">中文表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">int huge;</td>\n<td style=\"text-align:left\">huge is int</td>\n<td style=\"text-align:left\">hoge是int型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int huge[10];</td>\n<td style=\"text-align:left\">huge is array[10] of int</td>\n<td style=\"text-align:left\">hoge是int型的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int huge[2][4];</td>\n<td style=\"text-align:left\">huge is array[2] of array[4] of int</td>\n<td style=\"text-align:left\">hoge是int型的数组的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int *huge[10];</td>\n<td style=\"text-align:left\">huge is array[10] of point to int</td>\n<td style=\"text-align:left\">hoge是指向int型的指针的数组(存放指针变量)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int (*huge)[10];</td>\n<td style=\"text-align:left\">hoge is pointer to array[10] of int</td>\n<td style=\"text-align:left\">hoge是指向int型的数组的指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int func(int a);</td>\n<td style=\"text-align:left\">func is function(int a) returning int</td>\n<td style=\"text-align:left\">func是返回int型的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int (*func)(int a);</td>\n<td style=\"text-align:left\">func is pointer to function(int a) returning int</td>\n<td style=\"text-align:left\">func是指向返回int型值的函数的指针</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"指针的应用\"><a href=\"#指针的应用\" class=\"headerlink\" title=\"指针的应用\"></a>指针的应用</h3><h4 id=\"指针与数组\"><a href=\"#指针与数组\" class=\"headerlink\" title=\"指针与数组\"></a>指针与数组</h4><ul>\n<li><p>一维：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">p[i]\t<span class=\"comment\">// 等同于 *(p+i)</span></span><br><span class=\"line\">i[p]\t<span class=\"comment\">// 等同于 *(i+p)</span></span><br><span class=\"line\">&amp;p[i]\t<span class=\"comment\">// 等同于 (p+i)，即第i个元素的地址</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二维：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">huge[i]\t\t<span class=\"comment\">// 等同于 *(huge+i)，即第i行的首地址</span></span><br><span class=\"line\">*(huge+i)[j]\t<span class=\"comment\">// 等同于 *(*(p+j)+j)，即 huge[i][j]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"指针与字符串\"><a href=\"#指针与字符串\" class=\"headerlink\" title=\"指针与字符串\"></a>指针与字符串</h4><h5 id=\"字符指针变量\"><a href=\"#字符指针变量\" class=\"headerlink\" title=\"字符指针变量\"></a>字符指针变量</h5><ul>\n<li><p>定义：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">array</span> = <span class=\"string\">\"World\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">array</span> = <span class=\"string\">\"hello\"</span>;\t<span class=\"comment\">// 改变指向</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[] = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">array</span> = <span class=\"string\">\"World\"</span>;\t<span class=\"comment\">// 错误的做法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">array</span> = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">array</span> += <span class=\"number\">6</span>;\t\t<span class=\"comment\">// 改变指向 (首地址改变)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"字符数组-1\"><a href=\"#字符数组-1\" class=\"headerlink\" title=\"字符数组\"></a>字符数组</h5><ul>\n<li><p>定义: <code>int array[] = &quot;Hello&quot;</code></p>\n</li>\n<li><p>使用：<code>printf(&quot;%c&quot;, array[0])</code></p>\n<blockquote>\n<p>字符指针变量的值是不能改变的，即已是字符串常量。</p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">array</span> = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">array</span>[<span class=\"number\">0</span>] = <span class=\"string\">'W'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"指针与函数\"><a href=\"#指针与函数\" class=\"headerlink\" title=\"指针与函数\"></a>指针与函数</h4><h5 id=\"作为参数\"><a href=\"#作为参数\" class=\"headerlink\" title=\"作为参数\"></a>作为参数</h5><p>即传递的是指向初始元素的指针。</p>\n<ul>\n<li>数组名作函数参数：<ul>\n<li><code>int func( int array[] )</code> </li>\n<li><code>int func( int \\*array )</code></li>\n</ul>\n</li>\n<li>多维数组作函数参数：<ul>\n<li><code>int func( int (\\*huge)[10] )</code></li>\n<li><code>int func( int huge[2][4] )</code></li>\n</ul>\n</li>\n<li>指向函数的指针作函数参数：<code>int func( int (\\*p)(int) )</code> </li>\n<li><p>指针数组作main函数形参：<code>int func( int argc, char \\*argv[] )</code></p>\n<blockquote>\n<p>argv: 文件名 + 其他参数</p>\n</blockquote>\n</li>\n<li><p>字符指针作函数参数。</p>\n</li>\n</ul>\n<h5 id=\"作为返回值\"><a href=\"#作为返回值\" class=\"headerlink\" title=\"作为返回值\"></a>作为返回值</h5><p>返回指针值的函数，即返回的是地址。比如，返回的指针指向结构体变量、字符变量等。</p>\n<h2 id=\"玖-构造类型\"><a href=\"#玖-构造类型\" class=\"headerlink\" title=\"玖 构造类型\"></a>玖 构造类型</h2><blockquote>\n<p>构造类型：用户自己建立数据结构</p>\n</blockquote>\n<h3 id=\"结构体类型\"><a href=\"#结构体类型\" class=\"headerlink\" title=\"结构体类型\"></a>结构体类型</h3><ul>\n<li><p>定义：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Name</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> word[<span class=\"number\">59</span>];</span><br><span class=\"line\">&#125; *p, name[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化：所有成员一起赋值。</p>\n</li>\n<li><p>使用：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">name[i].num;</span><br><span class=\"line\">p-&gt;word[i];</span><br><span class=\"line\">(*p).num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Name</span> *<span class=\"title\">tmp</span>;</span></span><br><span class=\"line\">tmp = name;</span><br><span class=\"line\">(tmp++)-&gt;num;\t<span class=\"comment\">// 先'++'操作，后'-&gt;'操作</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>大小：成员变量所占内存长度总和。</li>\n</ul>\n<h3 id=\"共用体类型\"><a href=\"#共用体类型\" class=\"headerlink\" title=\"共用体类型\"></a>共用体类型</h3><ul>\n<li><p>定义：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> Name &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> digital;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> word;</span><br><span class=\"line\">&#125; *p, name[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化：只允许给一个成员变量赋值。</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> Name tmp = &#123;<span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">union</span> Name tmp = &#123;.word = <span class=\"string\">'Y'</span>&#125;;</span><br><span class=\"line\">t.digital = <span class=\"number\">2.0</span>;</span><br><span class=\"line\">t.word = <span class=\"string\">'N'</span>;\t<span class=\"comment\">// 最终的赋值</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">name[i].num;</span><br><span class=\"line\">p-&gt;word[i];</span><br><span class=\"line\">(*p).num;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>大小：成员变量所占内存长度最大者。</p>\n<blockquote>\n<p>关于结构体、共用体类型的内存长度问题，遵循 4 字节倍数的原则进行内存布局对齐。  </p>\n</blockquote>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sizeof</span>(struct Name) <span class=\"comment\">// ==&gt; 64 (63)  </span></span><br><span class=\"line\"><span class=\"keyword\">sizeof</span>(<span class=\"keyword\">union</span> Name) <span class=\"comment\">// ==&gt; 4 (4)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h3><ul>\n<li><p>定义：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tsun, mon, tue, wed, thu, fir, sat <span class=\"comment\">// 默认参数从0开始</span></span><br><span class=\"line\">&#125; week;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>初始化：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tmon = <span class=\"number\">1</span>, tue = <span class=\"number\">2</span>, wed = <span class=\"number\">3</span>, </span><br><span class=\"line\">\tthu = <span class=\"number\">4</span>, fir = <span class=\"number\">5</span>, sat = <span class=\"number\">6</span>，sun = <span class=\"number\">7</span> <span class=\"comment\">// 默认参数从 0 开始</span></span><br><span class=\"line\">&#125; week;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用：<code>week.mon</code>;</p>\n</li>\n</ul>\n<h3 id=\"Typedef-声明新类型名\"><a href=\"#Typedef-声明新类型名\" class=\"headerlink\" title=\"Typedef 声明新类型名\"></a>Typedef 声明新类型名</h3><ul>\n<li>含义：引入变量别名，而不是另外地给变量分配空间。</li>\n<li><p>使用：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> Integer;</span><br><span class=\"line\"><span class=\"comment\">// 若编译器中，int 为 2 字节，满足移值需求可以 long 型替换。</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> Integer;\t</span><br><span class=\"line\">Interger num = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>与 <code>#define</code> 宏定义的区别：</p>\n<ul>\n<li><code>#typedef</code>：编译阶段处理。</li>\n<li><code>#define</code>：预编译阶段处理，实质是字符串替换。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"拾-文件处理\"><a href=\"#拾-文件处理\" class=\"headerlink\" title=\"拾 文件处理\"></a>拾 文件处理</h2><h3 id=\"文件与流\"><a href=\"#文件与流\" class=\"headerlink\" title=\"文件与流\"></a>文件与流</h3><ul>\n<li><code>stdin</code>：标准输入流，用于读取普通输入的流，在大多数环境中为键盘输入。scanf() 与 getchar() 等函数会从这个流中读取字符。</li>\n<li><code>stdout</code>：标准输入流，用于写入普通输入的流，在大多数环境中为输出至显示器界面。printf()、puts() 与 putchar() 等函数会向这个流写入字符。</li>\n<li><code>stderr</code>：标准错误流，用于写出错误的流，在大多数环境中为输出至显示器界面。</li>\n</ul>\n<h3 id=\"文件分类\"><a href=\"#文件分类\" class=\"headerlink\" title=\"文件分类\"></a>文件分类</h3><ul>\n<li>ASCII 文件 ( 文本文件 )：每一字节存放一字符的 ASCII 代码。</li>\n<li><p>二进制文件：</p>\n<ul>\n<li>优：节约存储空间</li>\n<li><p>劣：精度有限</p>\n<blockquote>\n<p>例如：整数 10000，ASCII 形式存储空间为 5 字节，二进制形式存储空间为 4 字节。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件类型指针：FILE-型\"><a href=\"#文件类型指针：FILE-型\" class=\"headerlink\" title=\"文件类型指针：FILE 型\"></a>文件类型指针：FILE 型</h3><ul>\n<li><p>需引用 <code>#include &lt;stdio.h&gt;</code></p>\n<blockquote>\n<p>指向文件的指针变量并不是指向外部介质上的数据文件开头，而是指向内存中的文件信息区的开头。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h3><ul>\n<li>原型：<code>FILE *fopen(const char *filename, const char *mode);</code></li>\n<li>定义：<code>FILE *fp = fopen(&quot;example.txt&quot;, &quot;r&quot;);</code></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">文件类型</th>\n<th style=\"text-align:left\">文本文件</th>\n<th style=\"text-align:left\">二进制文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">模式</td>\n<td style=\"text-align:left\">r   w   a</td>\n<td style=\"text-align:left\">rb   wb   ab</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">只读；只写(文件存在，则长度清零)；追加</td>\n<td style=\"text-align:left\">只读；只写(文件存在，则长度清零)；追加</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">r+   w+   a+</td>\n<td style=\"text-align:left\">rb+   wb+   ab+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">读和写(打开文件)；读和写(建立文件；文件存在，则长度清零)；读和写(打开文件)</td>\n<td style=\"text-align:left\">读和写(打开文件；文件存在，则长度清零)；读和写(建立文件)；读和写(打开文件)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h3><ul>\n<li>原型：<code>int fclose(FILE *stream);</code><ul>\n<li>返回值 ( True：0；False：EOF(-1) )  </li>\n<li>数据存储的过程：数据 —&gt; 缓存区 (充满) —&gt; 文件</li>\n<li>若不关闭文件，将会造成数据丢失。 </li>\n<li>若突然关闭文件，缓存区传输到文件的过程给中断，造成数据丢失。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"顺序读写数据文件\"><a href=\"#顺序读写数据文件\" class=\"headerlink\" title=\"顺序读写数据文件\"></a>顺序读写数据文件</h3><ul>\n<li><p>格式化读取文件：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fscanf</span><span class=\"params\">(FILE *stream, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format, ...)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回值：</span></span><br><span class=\"line\"><span class=\"comment\">// Ture - 返回成功赋值的输入项数</span></span><br><span class=\"line\"><span class=\"comment\">// False - 返回文件结束标记EOF(-1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用实例</span></span><br><span class=\"line\"><span class=\"built_in\">fscanf</span>(fp, <span class=\"string\">\"%s%lf%lf\"</span>, name, &amp;height, &amp;weight);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>格式化写入文件：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fprintf</span><span class=\"params\">(FILE *stream, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format, ...)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回值：</span></span><br><span class=\"line\"><span class=\"comment\">// Ture - 返回发送的字符数</span></span><br><span class=\"line\"><span class=\"comment\">// False - 返回文件结束标记EOF(-1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用实例：获得当前运行时间，并存入文本中</span></span><br><span class=\"line\"><span class=\"keyword\">time_t</span> current = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> *<span class=\"title\">timer</span> = <span class=\"title\">Localtime</span>(&amp;<span class=\"title\">current</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将日历时间time_t型的值转换为分解时间tm结构体类型的值</span></span><br><span class=\"line\"><span class=\"comment\">// 其中，tm结构体为：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_sec;\t<span class=\"comment\">// 秒(0 - 61)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_min;\t<span class=\"comment\">// 分 (0 - 59)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_hour;\t<span class=\"comment\">// 时 (0 - 24)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mday;\t<span class=\"comment\">// 日 (1 - 31)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mon;\t<span class=\"comment\">// 月 (0 - 11)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_year;\t<span class=\"comment\">// 从1900至今，经历了多少年</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_wday;\t<span class=\"comment\">// 星期 (0 - 6)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_yday;\t<span class=\"comment\">// 经历天数 (从1月1日计起)</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_tm_isdst;\t<span class=\"comment\">// 夏时令 (夏季时间将提前1小时)</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">fprintf</span>(fp, <span class=\"string\">\"%d %d %d %d %d\"</span>, </span><br><span class=\"line\">\ttimer-&gt;tm_year + <span class=\"number\">1900</span>, timer-&gt;tm_mon + <span class=\"number\">1</span>,</span><br><span class=\"line\">\ttimer-&gt;tm_day, timer-&gt;tm_hour, </span><br><span class=\"line\">\ttimer-&gt;tm_min, timer-&gt;tm_sec);</span><br><span class=\"line\">fclose(fp);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读入／写入一个字符：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fgetc</span><span class=\"params\">(FILE *stream)</span></span>;\t<span class=\"comment\">// 读入一个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fputc</span><span class=\"params\">(FILE *stream)</span></span>;\t<span class=\"comment\">// 写入一个字符</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值：</span></span><br><span class=\"line\"><span class=\"comment\">// Ture - 返回所读的字符数</span></span><br><span class=\"line\"><span class=\"comment\">// False - 返回文件结束标记EOF(-1)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>用二进制方式向文件读写一组数据：</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">fwrite</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">size_t</span> nmemb, FILE *stream)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 从ptr指向的数组中将最多nmemb个长度为size的元素写入stream指向的流中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">fread</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">szie_t</span> nmemb, FILE *stream)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 从stream流中读取nmemb个长度为size的元素写入到ptr数组。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"随机读写数据文件\"><a href=\"#随机读写数据文件\" class=\"headerlink\" title=\"随机读写数据文件\"></a>随机读写数据文件</h3><h4 id=\"文件位置标记及其定位\"><a href=\"#文件位置标记及其定位\" class=\"headerlink\" title=\"文件位置标记及其定位\"></a>文件位置标记及其定位</h4><ul>\n<li>文件位置标记：文件头、读写当前位置、文件尾。</li>\n<li>文件位置标记的定位：<code>fseek(文件类型指针, 位移量, 起始点);</code>。<ul>\n<li>文件开始位置 -&gt; SEEK_SET -&gt; 0  </li>\n<li>文件当前位置 -&gt; SEEK_CUR -&gt; 1  </li>\n<li>文件末尾位置 -&gt; SEEK_END -&gt; 2  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"随机读写\"><a href=\"#随机读写\" class=\"headerlink\" title=\"随机读写\"></a>随机读写</h4><ul>\n<li><p>结合 <code>fseek()</code> 与 <code>fread()</code> 函数实现。例如，读取第 1，3，5，7，9 个学生数据并输出。</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\tfseek(fp, i*<span class=\"keyword\">sizeof</span>(struct Student), <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfread(&amp;student[i], <span class=\"keyword\">sizeof</span>(struct Student), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Programme"],"tags":["C","考试"]},{"title":"论文 | 扩展 K-means 算法：混合数据类型的聚类方法","url":"/2018/06/Extensions-to-the-k-Means-algorithm-for-custering-large-datasets-with-categorical-values.html","content":"<div class=\"note default\"><p>原文：Extensions to the k-means algorithm for clustering large datasets with categorical values<br>作者：ZHEXUE HUANG.<br>来源：Data mining and knowledge discovery, 1998, 2(3): 283-304.  </p></div>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>在早期，大多数聚类工作主要集中在数值数据上，且它们主要是利用数值数据的固有几何特性，即数据点之间的 <code>距离函数</code> (<a href=\"#1-距离函数\">见附录1</a>)。但是，数据挖掘应用程序通常涉及许多数据集，这些数据集是由混合数值属性和标称属性组成的，仅拥有数值数据的测量方法已无法满足混合数据类型的聚类工作。</p>\n<p>本论文基于经典的 K-Means 算法上，提出了两种聚类算法，分别应对 <code>标称域</code> 和 <code>混合数值与标称域</code> 属性值的聚类操作。首先介绍的是<code>K-Modes (K-众数)</code> 聚类算法，他运作的方式与 K-Means 相仿，只是它利用的是相异性度量处理标称对象，聚类中心以众数替代均值，且众数以基于频率的方法去迭代更新，直至 <code>聚类代价函数</code> 的结果最小化停止迭代。其次，是 <code>K-Prototype</code> 聚类算法，它定义了一组合的相异性度量值，进一步整合 <code>K-Means</code> 和 <code>K-Modes</code> 算法，以实现对混合数值与标称属性的对象进行聚类操作。</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>将数据库中的一组对象划分为同构组或集群是数据挖掘中最基本的操作。而讨论划分操作，自然离不开聚类。聚类是把每一组对象划分为一个簇，且同一簇中对象之间相似，而不同簇之间的对象相异。</p>\n<p>数据挖掘最显著的特征是处理复杂的大型数据集。特别地，数据集包含数以百万计由不同类型属性或变量描述的对象，由此数据挖掘操作和算法应充分考虑可扩展性，以应付处理不同类型的属性。</p>\n<p>在本论文中，提出的两个新聚类算法，即利用 <code>K-Means 范式</code> 对拥有标称属性的数据进行聚类。<code>K-Modes (K-众数)</code> 聚类算法，他运作的方式与 K-Means 相仿，只是它利用的是相异性度量处理标称对象，聚类中心以众数替代均值，且众数以基于频率的方法去迭代更新，直至 <code>聚类代价函数</code> 的结果最小化停止迭代。其次，是 <code>K-Prototype</code> 聚类算法，它定义了一组合的相异性度量值 $s^r + \\gamma s^c$，以实现对混合数值与标称属性的对象进行聚类操作。其中，$s^r$ 是由 <code>平方欧式距离</code> 定义的 <code>数值属性</code> 的相异性度量值，$s^c$ 是由 <code>两个对象间类别不匹配的数量</code> 定义的 <code>标称属性</code> 的相异性度量值，$\\gamma$ 是平衡数值属性和标称属性两部分的的权值，以避免偏向于某一属性。若聚类的效果更青睐于数值属性，则可以设定一个较小的 $\\gamma$ 值；反之，设定一较大的 $\\gamma$ 值。</p>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h3><ul>\n<li>假设需要聚类的对象数据集储存在数据集 D 中。<ul>\n<li>集合的属性 $A_1, A_2, … , A_m$ 分别是值域 $D_1, D_2, … , D_m$ 的描述。</li>\n<li>在 D 中的每个对象由元组 t 表示，$t \\in D_1 \\times D_2 \\times … \\times D_m$。</li>\n</ul>\n</li>\n<li>针对本文讨论的聚类问题，仅考虑两种常见数据类型：数值类型和标称类型。<ul>\n<li>数值域的取值范围是实数域。</li>\n<li>在多维的密度空间中，每一个数值型的数据点都采用诸如欧式或马氏的距离度量方法。</li>\n<li>若值域 $D_i$ 被定义为有限、无序的标称域，则对象的比较操作只允许在 $D_i$ 中执行，即有 $a, b \\in D_i$，either a = b or $a \\neq b$。</li>\n</ul>\n</li>\n<li><p>对于数据集中的每一数据对象 $X$，也可由 <code>属性-属性值</code> 的键值对表示，</p>\n<script type=\"math/tex; mode=display\">[A_1=x_1] \\bigwedge [A_2=x_2] \\bigwedge ... \\bigwedge [A_m=x_m]</script></li>\n<li><p>即当 $x_i \\in D_i$，for i = 1, 2, …, m。为简单起见，这里以 $X$ 表示元组：</p>\n<script type=\"math/tex; mode=display\">[x_1^r, x_2^r, ...,x_p^r, x_{p+1}^c, ..., x_m^c] \\in D_1 \\times D_2 \\times ... \\times D_m</script><blockquote>\n<p>最后一个数值对象为元素 $p$ ，其余的都是标称对象。当然，若元组中仅有一种数据类型，可表示为 $[x_1, x_2, …, x_m]$。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"K-Means-均值-算法\"><a href=\"#K-Means-均值-算法\" class=\"headerlink\" title=\"K-Means (均值) 算法\"></a>K-Means (均值) 算法</h3><ul>\n<li>K-Means，是一种划分或非分层的聚类算法，为进一步阐述细节，需给出如下设定：<ul>\n<li>一组含 $n$ 个数值数据的对象集 $D = {X_1, X_2, …, X_n}$；</li>\n<li>距离度量 $d$；</li>\n<li>自然数 $k (\\leq n)$，并把 $D$ 划分 $k$ 个非空且相分离的簇群：<script type=\"math/tex; mode=display\">\nC_1, C_2, ..., C_k, \\, with \\, C_i \\bigcap C_j = \\emptyset \\, and \\, \\bigcup_{i=1}^k C_i = D</script></li>\n<li>$D$ 中随机选取 $k$ 个对象，每个对象代表一个簇的初始均值或中心。</li>\n</ul>\n</li>\n<li><p>如此一来，使得数据对象与其簇的中心之间的平方误差总和被最小化。然后，根据非线性优化问题，将该问题描述为:</p>\n<script type=\"math/tex; mode=display\">\n  Minimise \\, P(W,Q) = \\sum_{l=1}^k \\sum_{i=1}^n w_{i,l} d(X_i, Q_l)\n  \\tag{1}</script><p>  且服从：</p>\n<script type=\"math/tex; mode=display\">\n  \\begin{cases}\n  \\sum_{l=1}^k w_{i,l} = 1, \\, i = 1, 2, ..., n \n  \\\\ w_{i,l} \\in \\{0,1\\}, \\, i = 1, 2, ..., n; l = 1, 2, ..., k\n  \\end{cases}\n  \\tag{2}</script><ul>\n<li>$w_{i,l}$ 指标变量表示对象 $X_i$ 仅属于哪一个簇。即取值为 1 时，表示对象 $X_i $ 在 簇 $C_l$ 中；反之，取值为 0。</li>\n<li><p>$W = \\left[ w<em>{i,l} \\right]</em>{n \\times k}$ 是分块矩阵 (见公式 3)，$Q = {Q_1, Q_2, …, Q_K}$ 是簇的中心集合，$d(·,·)$ 是两对象间的平方欧式距离 (<a href=\"#1-距离函数\">见附录1</a>)。</p>\n<script type=\"math/tex; mode=display\">W = \\left[ w_{i,l} \\right]_{n \\times k} = \n\\begin{bmatrix} \nw_{11} & \\cdots & w_{1l} & \\cdots & w_{1k} \\\\ \n\\vdots & & \\vdots & & \\vdots \\\\\nw_{i1} & \\cdots & w_{il} & \\cdots & w_{ik} \\\\\n\\vdots & & \\vdots & & \\vdots \\\\\nw_{n1} & \\cdots & w_{nl} & \\cdots & w_{nk} \\\\ \n\\end{bmatrix}\n\\tag{3}</script></li>\n</ul>\n</li>\n<li><p>紧接着，在约束条件 (2) 下对 (1) 中的 P 进行优化，即对 Q 和 W 进行局部优化。首先，我们先固定 Q 并找出必要条件 W 使 P 最小化。然后，根据 Q 去修正 W 并最小化 P。基于上述几点，若为了达到 P 最小化，K-Means 算法通过 <code>三步迭代</code>，直到 P(W, Q) <code>收敛</code> 到某个 <code>局部最小值</code>。</p>\n<ul>\n<li><code>Step.01</code>： 初始化 $Q^{(0)} = {Q_1^{(0)}, Q_2^{(0)}, …, Q_k^{(0)}}$，且设立 $t = 0$。</li>\n<li><code>Step.02</code>：固定 $Q^{(t)}$ 不变，求解 $P(W, Q^{(t)})$ 再去获得 W，即以 Q 作为簇群的中心，将每个对象分配到距离其最近的簇中心的簇群当中。</li>\n<li><p><code>Step.03</code>：固定 $W^{(t)}$  不变，生成 $Q^{(t+1)}$，求解 $P(W^{(t)}, Q^{(t+1)})$。比较 $P(W, Q^{(t)}) \\, and \\, P(W^{(t)}, Q^{(t+1)})$，若后者为最小化，则根据当前的对象部分构造新的簇群中心。</p>\n<ul>\n<li><p>$Q<em>t^{t+1} = {q</em>{l,1}^{(t+1)}, …, q_{l,m}^{(t+1)}}, \\, for \\, l = 1, 2, …, k$，且：</p>\n<script type=\"math/tex; mode=display\">\nq_{l,j}^{(t+1)} = \\frac {\n  \\sum_{i=1}^n w_{i,l}^{(t)} x_{i,j}\n}{\n  \\sum_{i=1}^n w_{i,l}^{(t)}\n}, \\, j = 1, 2, ..., m\n\\tag{4}</script></li>\n</ul>\n</li>\n<li><p><code>Step.04</code>：当满足收敛或给定的停止条件时 ( <code>局部最优化</code> )，输出结果并停止；反之，令 $t = t + 1$，并继续从 <code>Step.02</code> 开始执行。</p>\n</li>\n</ul>\n</li>\n<li>为了解决 <code>簇间边界不明确</code> 的问题，模糊分区的概念成功地应用到聚类问题中，即模糊聚类 $^{[2,3]}$。但是，我们在本论文中不考虑这个问题。</li>\n<li>综上所述，K-Means 算法具有以下特征：<ul>\n<li>局部最优化为算法结束的终止条件；</li>\n<li>仅适用于数值属性数据的聚类；</li>\n<li>簇群的特征为球形簇.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"K-Modes-众数-算法\"><a href=\"#K-Modes-众数-算法\" class=\"headerlink\" title=\"K-Modes (众数) 算法\"></a>K-Modes (众数) 算法</h3><p>原则上，K-Means 算法中问题 P 的公式对于分类和混合类型的对象也是有效的，之所以 K-Means 算法不能对标称属性对象进行聚类的原因是它的相异性度量方法和用于构造新的簇群中心的方法不适用，故通过对 K-Means 算法进行以下修改，可消除不适用问题：</p>\n<ul>\n<li>用于标称属性对象的相异性度量的方法；</li>\n<li>簇群的中心以 <code>众数</code> 替代 <code>均值</code>；</li>\n<li>使用基于频率的方法求的众数，以构造新的簇群中心。</li>\n</ul>\n<h4 id=\"相异性度量\"><a href=\"#相异性度量\" class=\"headerlink\" title=\"相异性度量\"></a>相异性度量</h4><p>相异性度量：设 $X,Y$ 是由 m 个标称属性描述的两个标称属性对象， $X,Y$ 的相异性度量可通过两个对象间相对应属性的不匹配总和来定义，即不匹配的次数越少，两个对象越相似。定义如下：</p>\n<script type=\"math/tex; mode=display\">\nd_1(X,Y) = \\sum_{j=1}^m \\delta (x_j,y_j)\n\\tag{5}</script><p> 且满足条件：</p>\n<script type=\"math/tex; mode=display\">\n\\delta (x_j,y_j) = \\begin{cases}\n0 , \\, (x_j = y_j) \\\\\n1 , \\, (x_j \\neq y_j)\n\\end{cases}\n \\tag{6}</script><h4 id=\"众数集\"><a href=\"#众数集\" class=\"headerlink\" title=\"众数集\"></a>众数集</h4><p>设 $X$ 是由标称属性 $A_1, A_2, …, A_m$ 描述的标称属性对象集。$X= {X_1, X_2, …, X_n}$ 的众数由向量 $Q ={q_1, q_2, …, q_m}$ 表示，并最小化函数：</p>\n<script type=\"math/tex; mode=display\">\nMinimise \\, D(X,Q) = \\sum_{i=1}^n d_1(Xi,Q)\n\\tag{7}</script><blockquote>\n<p> 注意，这里 $Q$ 并不一定是 $X$ 中包含元素 (有别于 K-Medoids 算法 $^{[4]}$，质心从它的样本点中选择 )。    </p>\n</blockquote>\n<h4 id=\"挑选众数\"><a href=\"#挑选众数\" class=\"headerlink\" title=\"挑选众数\"></a>挑选众数</h4><p>设 $n<em>{c</em>{k,j}}$ 为属性 $A<em>j$ 中包含第 k 个标称属性 $c</em>{k,j}$ 的对象数量，且定义 $f(A<em>j = c</em>{k,j} | X) = \\frac{ n<em>{c</em>{k,j}} }{n}$ 为标称属性 $c_{k,j}$ 在 $X$ 中的出现频率。</p>\n<ul>\n<li><p><code>定理 1</code>：若满足下述条件 (8)，即 $D(X,Q)$ 已最小化 ( 证明见<a href=\"#2-定理证明\">附录2</a> )。即定理定义了一种从给定的 $X$ 中找到 $Q$ 的方法，即它允许使用 K-Means 范式来聚类标称数据，且定理 1 暗示了数据集 $X$ 的众数不是唯一的。 </p>\n<script type=\"math/tex; mode=display\">\n  f(A_j = q_j | X) \\geq f(A_j = c_{k,j} | X) \\, for \\, q_j \\neq c_{k,j},j=1, 2, ..., m\n  \\tag{8}</script></li>\n</ul>\n<h4 id=\"算法核心\"><a href=\"#算法核心\" class=\"headerlink\" title=\"算法核心\"></a>算法核心</h4><ul>\n<li>当公式 (5) 用作标称属性对象的相异性度量时，公式 (1) 的代价函数将推导为：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\nP(W,Q) = \\sum_{l=1}^k \\sum_{i=1}^n \\sum_{j=1}^m w_{i,l} \\delta(x_{i,j},q_{l,j})\\\\\\ where \\, w_{i,l}  \\in W \\, and \\, Q_l = [q_{l,1}, q_{l,1}, ..., q_{l,m}] \\in Q\n\\tag{9}</script><ul>\n<li>为了最小化代价函数，则修改经典 K-Means 算法：<ul>\n<li>以相异性度量方法求解 $W$，即上述 <code>Step.02</code> 所描述的，以当前 $Q$ 为簇群中心，将每个对象分配到距离其最近的簇中心的簇当中去；</li>\n<li>用簇的众数代替均值，根据 <code>定理 1</code> 选择众数来求解  $Q$，即上述 <code>Step.03</code> 所描述的，求得新的簇群中心。</li>\n</ul>\n</li>\n<li><p>在经典算法中，我们需要在每次获得一个新的 $Q$ 或 $W$ 时，根据整个数据集计算总代价 P。为了提高计算效率，我们在实践中采用了下面的算法。</p>\n<ul>\n<li><code>Step.01</code>：初始化 k 个众数，且每个众数对应一个簇；</li>\n<li><code>Step.02</code>：根据公式 (5)，将距离众数最近的对象分配该簇当中。再根据 <code>定理 1</code>，在每次分配后更新簇群的众数。</li>\n<li><code>Step.03</code>：当所有对象分配到具体的簇群之后，重新测试对象与当前众数的相异性。如果找到一个对象，距离其最近的众数属于另一个簇群而不是当前的簇群，则将该对象重新分配给该簇群，并更新两个簇群的众数。</li>\n<li><p><code>Step.04</code>：重复执行 <code>Step.03</code>，直到对整个数据集进行完整的循环测试之后，没有对象更改簇群。</p>\n<blockquote>\n<p>目前，虽没有证明该算法的收敛性，但在实际使用过程中，它的表现总是收敛的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>与 K-Means 算法一样，K-Modes 算法也是产生 <code>局部最优解</code>，且依赖于数据集中的 <code>初始的众数</code> 和 <code>对象的顺序</code>。考虑 <code>初始的众数</code> 和 <code>对象的顺序</code> 的因素影响，我们通过两种方法改进算法。</p>\n<ul>\n<li>第一个方法是第一次从数据集中选择 $k$ 个不同的记录作为初始 $k$ 个众数值。</li>\n<li><p>第二个方法通过以下步骤实现：</p>\n<ul>\n<li><code>Step.01</code>：计算所有属性的所有标称值的频率，并按照频率的降序将它们存储在一个标称类型的数组中，如图 2-1 所示，展示了标称类型数组中，分别包含 4、2、5、3 个标称值的 4 个属性。这里 $c<em>{i,j}$ 表示属性 $i$ 的标称值 $j$，$f(c</em>{i,j})$ 为标称值的频率，且 $f(c<em>{i,j}) \\geq f(c</em>{i+1,j})$。</li>\n<li><code>Step.02</code>：将频率最高的标称值作为 $k$ 个众数的初始值。</li>\n<li><p><code>Step.03</code>：从 $Q_1$ 开始，选择相似性最接近其的记录并替换它的初始众数。以此类推，直至 $Q_k$  的初始众数被替换完成。其中，$Q_l \\neq Q_t \\, for \\, l \\neq t$。</p>\n<blockquote>\n<p><code>Step.03</code> 的目的在于避免空簇群的情况，致使初始众数具有多样性，以获得更好的聚类结果。</p>\n</blockquote>\n</li>\n</ul>\n<script type=\"math/tex; mode=display\">\n\\begin{Bmatrix} \nc_{1,1} & c_{1,2} & c_{1,3} & c_{1,4} \\\\ \nc_{2,1} & c_{2,2} & c_{2,3} & c_{2,4} \\\\ \nc_{3,1} & \\, & c_{3,3} & c_{3,4} \\\\ \nc_{4,1} & \\,  & c_{4,3} & \\, \\\\ \n\\,  & \\,  & c_{5,3} & \\, \\\\ \n\\end{Bmatrix}</script><center>图 2-1 标称类型数组 ( 横向表示集合的属性 A，纵向表示簇中心点 Q )</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"K-Prototypes-算法\"><a href=\"#K-Prototypes-算法\" class=\"headerlink\" title=\"K-Prototypes 算法\"></a>K-Prototypes 算法</h3><ul>\n<li><p>将 K-Means 和 K-Modes 算法集成到 K-Prototypes 算法中是很容易的，这种算法用于混合类型对象的簇群聚类。</p>\n</li>\n<li><p>在混合对象 $X$ 和 $Y$ 间的相异性可由属性 $A<em>1^r, A_2^r, …, A_p^r, A</em>{p+1}^c, …, A_m^c$ 描述，并定义其相异性度量为：</p>\n<script type=\"math/tex; mode=display\">\n  d_2(X,Y) = \\sum_{j=1}^p (x_j - y_j)^2 + \\gamma \\sum_{j=p+1}^m \\delta(x_j,y_j)\n  \\tag{10}</script><blockquote>\n<p>其中，第一项是数值属性的平方欧氏距离度量，第二项是标称属性的相异性度量。权重 $\\gamma$ 是用来避免偏袒任何类型的属性，即聚类结果更趋向于数值属性还是标称属性。</p>\n</blockquote>\n</li>\n<li><p>当公式 (10) 用作混合类型属性对象的相异性度量时，公式 (1) 的代价函数将推导为：</p>\n<script type=\"math/tex; mode=display\">\n  P(W,Q) = \\sum_{l=1}^k (\n      \\sum_{i=1}^n w_{i,l} \\sum_{j=1}^p(x_{i,j}-q_{l,j})^2\n      + \\gamma \\sum_{i=1}^n w_{i,l} \\sum_{j=p+1}^m \\delta(x_{i,j}-q_{l,j})\n  )\n  \\tag{11}</script><blockquote>\n<p>$ \\sum<em>{i=1}^n w</em>{i,l}$ 即公式 (2) 所描述的，每个簇对象只对应一个簇中心。</p>\n</blockquote>\n<ul>\n<li><p>为简化公式 (11)，让：</p>\n<script type=\"math/tex; mode=display\">\nP_l^r = \\sum_{i=1}^n w_{i,l} \\sum_{j=1}^p(x_{i,j}-q_{l,j})^2\n\\tag{12}</script><script type=\"math/tex; mode=display\">\nP_l^c =  \\gamma \\sum_{i=1}^n w_{i,l} \\sum_{j=p+1}^m \\delta(x_{i,j}-q_{l,j})\n\\tag{13}</script></li>\n<li><p>重写公式 (11)：</p>\n<script type=\"math/tex; mode=display\">\nP(W,Q) = \\sum_{l=1}^k (P_l^r + P_l^c)\n\\tag{14}</script></li>\n</ul>\n<ul>\n<li>$P_l^r$ 和 $P_l^c$ 都是非负的，最小化 $P(W,Q)$ 等同于最小化 $P_l^r$ 和 $P_l^c$，$1 \\leq l \\leq k$。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"1-距离函数\"><a href=\"#1-距离函数\" class=\"headerlink\" title=\"1 距离函数\"></a>1 距离函数</h3><p><code>距离函数</code>：关于数据点之间的距离函数，即数值属性刻画的对象相异性的距离度量。度量方法 $^{[1]}$ 包括闵可夫斯基距离 (闵氏距离)、欧几里得距离 (欧式距离) 和曼哈顿距离。</p>\n<p>令 $i=(x<em>{i1},x</em>{i2},…,x<em>{ih})$ 和 $j=(x</em>{j1},x<em>{j2},…,x</em>{jh})$ 是两个被 p 个数值属性描述的对象。 </p>\n<p>闵氏距离是欧式距离和曼哈顿距离的推广，定义如下：</p>\n<script type=\"math/tex; mode=display\">\nd(i, j) = \\sqrt[h](\n    \\sum_{f=1}^p |x_{if}-x_{jf}|^{h}\n),h \\geq 1\n\\tag{1}</script><ul>\n<li>当 h = 1 时，它表示 <code>曼哈顿距离</code>，也称 <code>城市块</code> 距离 (城市两点之间的街区距离，如向南 2 个街区，横过 3 个街区，共计五个街区)，其定义如下：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\nd(i, j) = \\sum_{f=1}^p |x_{if}-x_{jf}|,h \\geq 1\n\\tag{2}</script><ul>\n<li>当 h = 2 时，它表示 <code>欧式距离</code>，也称 <code>直线或乌鸦飞行</code> 距离，其定义如下：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\nd(i, j) = \\sqrt(\\sum_{f=1}^p (x_{if}-x_{jf})^2)\n,h \\geq 1\n\\tag{3}</script><ul>\n<li>当 h = $\\infty$ 时，它表示 <code>上确界距离</code>，又称 <code>切比雪夫距离</code>，其定义如下L：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\nd(i, j) = \\lim_{h \\to \\infty} (\n    \\sum_{f=1}^p |x_{if}-x_{jf}|^h\n)^\\frac{1}{h} = \\max^{p}_{f} |x_{if}-x_{jf}|\n\\tag{4}</script><h3 id=\"2-定理证明\"><a href=\"#2-定理证明\" class=\"headerlink\" title=\"2 定理证明\"></a>2 定理证明</h3><p><code>定理 1</code> 的证明如下：</p>\n<ul>\n<li>让 $f<em>r (A_j = c</em>{k,j} | X) = \\frac { n<em>{c</em>{k,j}} }{n}$ 为属性 $A<em>j$ 的第 $k$ 个标称属性 $c</em>{k,j}$ 的相对频率，$n$ 是 $X$ 中对象的总数，$n<em>{C</em>{k,j}}$ 是拥有标称属性 $c_{k,j}$ 的对象的计数。</li>\n<li>则有，相异性度量公式可推导为：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\n\\sum_{i=1}^n d(X_i,Q) = \\sum_{i=1}^n \\sum_{j=1}^m \\delta(x_{i,j},q_j)\n\\\\ = \\sum_{i=1}^n ( \\sum_{j=1}^m \\delta(x_{i,j},q_j) )\n= \\sum_{i=1}^m n(1-\\frac{n_{q_j}}{n})\n= \\sum n( 1-f_r(A_j = q_j | X) )</script><ul>\n<li>因为 $n( 1-f<em>r(A_j = q_j | X) ) \\geq 0 \\, , \\, 1 \\leq j \\leq m$，若让 $\\sum</em>{i=1}^n  d(X_i,Q)$ 最小化，则需让每一个 $n( 1-f_r(A_j = q_j | X) )$ 取最小值，即 $f_r(A_j = q_j | X)$ 必须取最大值。</li>\n</ul>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] Jiewei Han, Micheline Kamber and Jian Pei. 数据挖掘 (第三版) [M]. 机械工业出版社, 2018, 48-49.<br>[2] Bezdek J C. A convergence theorem for the fuzzy ISODATA clustering algorithms [J]. IEEE transactions on pattern analysis and machine intelligence, 1980 (1): 1-8.<br>[3] Ismail M A, Selim S Z. Fuzzy c-means: optimality of solutions and effective termination of the algorithm[J]. Pattern recognition, 1986, 19(6): 481-485.<br>[4] Park H S, Jun C H. A simple and fast algorithm for K-medoids clustering[J]. Expert systems with applications, 2009, 36(2): 3336-3341.  </p>\n","categories":["Paper"],"tags":["数据挖掘","聚类","机器学习","混合类型","K-Means"]},{"title":"别因名字错过一本好书：活出心花怒放的人生","url":"/2022/07/Live-a-happy-life.html","content":"<ul>\n<li>积极心理学，人类的幸福课，让没有疾病的普通人过上更有活力、更有创造力、更加发挥自己潜力的生活。</li>\n<li><p>事实上，我们总会在内心、人际、职场、爱情、家庭等方面遇到闹心事，负面情绪很大程度导致了不开心，甚至内心痛苦。就像《<a href=\"https://book.douban.com/subject/5450660/\" target=\"_blank\" rel=\"noopener\">次第花开</a>》所启示的，我们之所以痛苦，是因为痛苦源自于对痛苦的无知，解脱应该从认识痛苦开始。生活亦是如此，既然阻止不了必然发生的糟心事，那就改变面对不幸的心态。发挥人的主观能动性，敢于承认客观事实，着力解决当下问题，获得短暂安宁以感受幸福快乐。</p>\n<blockquote>\n<p>推荐一部电影《<a href=\"https://movie.douban.com/subject/30471496/\" target=\"_blank\" rel=\"noopener\">祝你好运</a>》：影片对于“积极心态”、“幸运厄运”、“好坏两面性”的诠释挺有意思的，即好/坏事物带给我们的情绪价值都是有意义的，积极心态影响着我们的认知，又反指导着我们改造世界。</p>\n</blockquote>\n</li>\n<li><p>当然，积极心理学并不是 “免死金牌”，未来我们同样会不断遭遇痛苦与不幸。认识痛苦不幸的普遍性，即阻止不了它的显现，也无法预测它的变化，为此我们要积极心态、坦然面对、付诸行动。另外，任何心理问题最终都需自身去顿悟解决，条件允许之下再去影响他人、援助他人，如此循环往复，成为一位内心强大的人。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>方便您阅读，附上思维导图的矢量稿：<a href=\"/pdf/Live_a_happy_life.pdf\">PDF Download</a></p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Live-a-happy-life/Live-a-happy-life.svg\" alt> 《活出心花怒放的人生》思维导图</p>\n</blockquote>\n</li>\n</ul>\n","categories":["Reading"],"tags":["积极心理学","内卷","心流","福流","职场","育儿"]},{"title":"理财启蒙课：富爸爸穷爸爸","url":"/2022/01/Poor-Dad-Rich-Dad.html","content":"<ul>\n<li>作者罗伯特·清崎有两位父亲：穷爸爸，亲生父亲，高学历教育官员；富爸爸，他好朋友的父亲，高中没毕业却善于投资理财的企业家。</li>\n<li>两位父亲事业都很成功，他们一辈子勤奋上进、且有丰厚收入。穷爸爸终其一生困扰于财务问题，然而富爸爸成为夏威夷最富商人之一。</li>\n<li><p>作者遵从“穷爸爸”为他设计的人生道路：上大学，服兵役，参加越战，走过了平凡的人生初期。直到作者亲眼目睹一生辛劳的“穷爸爸”失了业，“富爸爸”则成了夏威夷最富有的人之一。清崎毅然追寻“富爸爸”的脚步，踏入商界，从此登上了致富快车。</p>\n<blockquote>\n<p>启示：辩证思维看待两种人生路径，既要走在“穷爸爸”的原始积累道路（知识财富），终生保持学习，也要走“富爸爸”的致富事业道路（财富自由+时间自由），主动争取更多人生选择权。</p>\n</blockquote>\n</li>\n<li><p>在本书中，作者将以亲身经历的财富故事展示了“穷爸爸”和“富爸爸”截然不同的金钱观和财富观：<strong>穷人为钱工作，富人让钱为自己工作</strong>。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"壹-财务观念\"><a href=\"#壹-财务观念\" class=\"headerlink\" title=\"壹 财务观念\"></a>壹 财务观念</h2><h3 id=\"对待金钱\"><a href=\"#对待金钱\" class=\"headerlink\" title=\"对待金钱\"></a>对待金钱</h3><ul>\n<li>穷爸爸：贪财是万恶之源，人应该懂得节制，不能沉迷于金钱，涉及钱的时候别去冒险。</li>\n<li>富爸爸：贫穷是万恶之本，贫穷会放大人之恶，磨灭人之善。相反，财富可帮助更多的人，才能够消灭掉世界上更多的恶。要学会管理风险，一旦风险在控制之内就大胆地投资。</li>\n</ul>\n<h3 id=\"对待奢侈\"><a href=\"#对待奢侈\" class=\"headerlink\" title=\"对待奢侈\"></a>对待奢侈</h3><ul>\n<li>穷爸爸：我可付不起，浇灭一切不切实际的想法。房子是最大的资产和投资。</li>\n<li>富爸爸：我怎样才能付得起，利用资产生息以利息购买大件 / 奢侈品。自住的房子是负债。</li>\n</ul>\n<h3 id=\"对待纳税\"><a href=\"#对待纳税\" class=\"headerlink\" title=\"对待纳税\"></a>对待纳税</h3><ul>\n<li>穷爸爸：富人应多缴税多为社会做贡献。</li>\n<li>富爸爸：纳税是“惩勤奖懒”。</li>\n</ul>\n<h3 id=\"对待学习\"><a href=\"#对待学习\" class=\"headerlink\" title=\"对待学习\"></a>对待学习</h3><ul>\n<li>穷爸爸：驱动学习的力量是恐惧。好好学习，争取去一家好公司、谋一份好工作好好养活自己。</li>\n<li>富爸爸：驱动学习的力量是爱。努力学习，发现一家好公司并收购它，创造更多的就业机会给别人，以帮助更多的人。</li>\n</ul>\n<h3 id=\"对待养老\"><a href=\"#对待养老\" class=\"headerlink\" title=\"对待养老\"></a>对待养老</h3><ul>\n<li>穷爸爸：依赖政府的养老金政策，把自己老年退休的生活依赖于政府身上。认为这是我为政府辛苦工作，应该享受的待遇。</li>\n<li>富爸爸：信奉完全的经济自立，反对理所当然的心态，认为正是这种理所当然的心理造成了人们的软弱、贫穷。</li>\n</ul>\n<h3 id=\"对待破产\"><a href=\"#对待破产\" class=\"headerlink\" title=\"对待破产\"></a>对待破产</h3><ul>\n<li>穷爸爸：“我对钱不感兴趣”或者“钱对我来说并不重要”来安慰自己，认为自己永远也不会成为富人了，更甚挣扎于破产漩涡之中。</li>\n<li>富爸爸：破产是暂时的，贫穷是永远的。</li>\n</ul>\n<h2 id=\"贰-财务知识\"><a href=\"#贰-财务知识\" class=\"headerlink\" title=\"贰 财务知识\"></a>贰 财务知识</h2><h3 id=\"不为钱工作\"><a href=\"#不为钱工作\" class=\"headerlink\" title=\"不为钱工作\"></a>不为钱工作</h3><ul>\n<li><p>穷人/中产为钱而工作，富人让钱为他工作。</p>\n<blockquote>\n<p>当今社会一种很讽刺的管理理论：工人付出最大努力以免被解雇，而雇主提供最低工资以防止工人辞职。</p>\n</blockquote>\n</li>\n<li><p>关于钱，穷人内心充满恐惧，富人内心充满激情。</p>\n<ul>\n<li><p>希望稳稳当当地挣钱，以获得安全感 。</p>\n<blockquote>\n<p>启示：人们的生活总是被恐惧和贪婪控制。没钱的恐惧，促使努力工作；得到报酬后，欲望和贪婪又让他们用钱购买东西，循环往复、深陷消费主义泥潭。先控制恐惧和欲望，即使获得了高薪，也只不过是金钱的奴隶。</p>\n</blockquote>\n</li>\n<li><p>激情是愤怒（不满）和热爱（投入）的结合体，不满足于现状就得想办法去改变。</p>\n<blockquote>\n<p>启示：应该把时间和精力运用到自己的事业上，珍惜自己的时间和精力，要为自己以后的成长和快乐去工作，而不是为了眼前的生存问题工作。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>学会在工作中成长，不拘谨于眼前有多少报酬，要从工作中解构需求，有需求就有商机。</p>\n</li>\n<li><p>保持学习：要想真正富有，既要不吝付出也要学会索取。</p>\n<ul>\n<li><p>习得管理技能</p>\n<ul>\n<li>现金流的管理</li>\n<li><p>个人时间管理</p>\n<blockquote>\n<p>时间管理不等于精力管理</p>\n</blockquote>\n</li>\n<li><p>人事管理</p>\n</li>\n</ul>\n</li>\n<li><p>学习专业技能</p>\n<ul>\n<li>销售技能</li>\n<li>营销技能</li>\n<li><p>沟通能力</p>\n<blockquote>\n<p>不限于书面表达能力、口头表达能力或者谈判能力。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"资产与负债\"><a href=\"#资产与负债\" class=\"headerlink\" title=\"资产与负债\"></a>资产与负债</h3><ul>\n<li>资产：把钱放进自己口袋的东西，不管我工作与否。</li>\n<li>负债：把钱从自己口袋取走的东西。</li>\n<li><p>资产的现金流 v.s. 负债的现金流</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Poor-Dad-Rich-Dad/CashFlow-Asset-Liabilities.svg\" alt>资产现金流 v.s. 负债的现金流</p>\n</blockquote>\n<ul>\n<li>资产负债表：表示的是一家公司或者一个家庭在某一时刻的体量。</li>\n<li>损益表：又称收益表，即收益等于收入减去成本。</li>\n<li>现金流量表：是一家企业或者一个家庭在财务上生存或死亡的关键“仪表盘”。</li>\n</ul>\n</li>\n<li><p>穷人 / 中产 / 富人的现金流</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Poor-Dad-Rich-Dad/CashFlow-All-Classes.svg\" alt>穷人 / 中产 / 富人的现金流</p>\n</blockquote>\n<ul>\n<li>重要的不是挣了多少钱，而是你能留下多少钱。</li>\n<li>竭尽全力买入带来收入的资产，降低负债和支出，让更多钱投入资产项。</li>\n<li>富人买入资产，穷人只有支出，中产阶级购买了自以为是的资产（实际是负债）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"财商四要素\"><a href=\"#财商四要素\" class=\"headerlink\" title=\"财商四要素\"></a>财商四要素</h3><ul>\n<li>会计：会计就是财务知识或者解读数字的能力。</li>\n<li>投资：投资是钱生钱的科学。</li>\n<li>市场：了解市场是供给与需求的科学。</li>\n<li><p>法律：利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。</p>\n<ul>\n<li><p>减税优惠：公司可以做许多个人无法做的事，比如用税前收入支付开支。</p>\n<blockquote>\n<p>个人挣钱、纳税，并靠剩下的钱为生；企业挣钱、花钱（费用），并为剩下的钱纳税。比如：公司配车、员工伙食、员工健身房等福利都是企业支出。</p>\n</blockquote>\n</li>\n<li><p>在诉讼中获得保护：用公司和信托来隐藏部分财富以免债主发现。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"叁-资产事业\"><a href=\"#叁-资产事业\" class=\"headerlink\" title=\"叁 资产事业\"></a>叁 资产事业</h2><ul>\n<li>尽早起步积累资产，尽早感受到复利的力量。</li>\n<li>把额外的收入用来购买可产生收入的资产，你才能获得真正的财务安全。</li>\n<li>持续工作同时购买一些房产（投资性质），而不要买负债或一旦被你带回家就没有价值的个人用品。</li>\n<li>不需要我到场就可以正常运作的业务，即我拥有它们，但由别人经营和管理。比如：<ul>\n<li>股票</li>\n<li>债券</li>\n<li>票据</li>\n<li>版税：独立 App、音乐、手稿、专利</li>\n<li>房产：能够产生收入的房地产</li>\n<li>其他：任何有价值、可产生收入或者增值潜力且有销路的事物</li>\n</ul>\n</li>\n<li><p>投资者有两类</p>\n<ul>\n<li>第一类：“一揽子”方式投资的投资者 </li>\n<li><p>第二类：自己创造投资机会的投资者</p>\n<blockquote>\n<p>这方面可借鉴街头智慧来自我启发。推荐纪录片《<a href=\"https://www.bilibili.com/bangumi/play/ep337065\" target=\"_blank\" rel=\"noopener\">隐姓亿万富翁</a>》，街头智慧的最佳诠释。</p>\n</blockquote>\n<ul>\n<li>寻找其他人都忽略的机会：寻找被低估的事物，比如海底捞的服务</li>\n<li>筹集资金</li>\n<li>把精明的人（领域专家）组织起来为你工作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"肆-克服困难\"><a href=\"#肆-克服困难\" class=\"headerlink\" title=\"肆 克服困难\"></a>肆 克服困难</h2><ul>\n<li>掌握了财务知识，但仍难以积累现金流的原因：恐惧、懒惰、自负、愤世嫉俗、不良习惯。</li>\n<li>克服恐惧<ul>\n<li>害怕恐惧是本能反应，顺应本能，直面恐惧，从“小剂量到大剂量”刺激自身对某种恐惧的反应。当刺激次数足够多时，就会产生敢于直面恐惧的勇气。</li>\n<li>杏仁核本能训练模式：克服恐惧得刻意训练本能反应。</li>\n</ul>\n</li>\n<li>愤世嫉俗<ul>\n<li>我们需要极大得勇气，不让谣言和杞人忧天的怀疑加剧我们的恐惧和疑虑。</li>\n<li>未经证实的怀疑和恐惧会使人成为愤世嫉俗者。愤世者抱怨现实，成功者分析现实。</li>\n</ul>\n</li>\n<li>克服懒惰：通过忙碌掩饰懒惰，忙碌成为了自己逃避的“挡箭牌”。<ul>\n<li>过分忙于工作而不关心自己财富的人</li>\n<li>过分忙于工作而不照顾自己身体的人</li>\n</ul>\n</li>\n<li>不良习惯</li>\n<li>克服自负<ul>\n<li>许多人用傲慢来掩饰无知。</li>\n<li>寻找领域专家来当老师，从而对自己的无知做出改进。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伍-开始行动\"><a href=\"#伍-开始行动\" class=\"headerlink\" title=\"伍 开始行动\"></a>伍 开始行动</h2><ul>\n<li><p>精神的力量：找一个超越现实的理由，由“不想要”促成“想要”。</p>\n<blockquote>\n<p>比如：我不想一辈子都打工、一生都耗在工作上。但我想自由支配自己的时间和生活，我想要金钱为我工作。</p>\n</blockquote>\n</li>\n<li><p>选择的力量：选择比努力更重要，但原始积累是基础。</p>\n<ul>\n<li>先学习再投资：投资于教育，我们拥有的唯一真正资产是头脑。</li>\n<li>新认知新选择：学习新思想，虽然道路会有险阻，但提供了更多的可能性。</li>\n</ul>\n</li>\n<li>关系的力量：慎重地选择朋友<ul>\n<li>结交经济富裕的朋友，目标不是他们的钱财，而是他们得以致富得知识和经验。</li>\n<li>关注经济困难的朋友，明白什么事情我们避免或不可以去做。</li>\n</ul>\n</li>\n<li>学习的力量：学无止境，当然要习得如何高效学习、快速掌握一门知识的能力。</li>\n<li><p>自律的力量</p>\n<ul>\n<li>开创事业所必备管理技能<ul>\n<li>现金流管理</li>\n<li>人事管理</li>\n<li>时间管理</li>\n</ul>\n</li>\n<li>不要陷于”老鼠赛跑“的游戏<ul>\n<li>不要背上数额过大的债务包袱，保持低支出。利用资产项产生的现金流来购买大房子或豪车。</li>\n<li>资金短缺时，让压力发挥作用，尽量不要动用你的储蓄或资本。想出新办法挣更多钱，以支付账单。</li>\n</ul>\n</li>\n<li><p>首先支付自己</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Poor-Dad-Rich-Dad/CashFlow-Payment-Priority.svg\" alt> 首先支付自己 v.s. 首先支付他人</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>建议的力量</p>\n<ul>\n<li>找一位关系你利益的经纪人，愿意教导你的经纪人，那么他们可能是你得到的最好资产（人力资源）。</li>\n<li>管理某些领域能力比你强的人，并为他们提供优厚的待遇。</li>\n</ul>\n</li>\n<li>专注的力量：从一项资产中获得现金流的过程是容易的，但拥有正确支付金钱的坚强意志确是困难的。争做金钱的主人，越早感悟收益越大。</li>\n<li>给予的力量<ul>\n<li>投资：想要获得，就要先给予。</li>\n<li>人情：索取前先给予适度慷慨。</li>\n</ul>\n</li>\n<li>无私的力量：让你的初始投资快速回本，投资不是做善事不求回报。</li>\n<li>偶像的力量：信仰的力量</li>\n</ul>\n<h2 id=\"陆-启示总结\"><a href=\"#陆-启示总结\" class=\"headerlink\" title=\"陆 启示总结\"></a>陆 启示总结</h2><ul>\n<li>目标：平衡生活开支，竭尽全力购入能带来收入的资产。</li>\n<li>目标：降低负债支出，延迟消费，争取更多钱投入资产。</li>\n<li>起步：尽力兼顾兴趣工作带来收入。</li>\n<li>提升：投入资产接受教育自我增值。</li>\n<li>教育：不限投资经验、技能谋生树。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.douban.com/note/748524341\" target=\"_blank\" rel=\"noopener\">楠悦读.《富爸爸穷爸爸》读书笔记导图分享 [OL]. douban.com. 2020</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ODkub9sqt6SdLSD6VYZl6g\" target=\"_blank\" rel=\"noopener\">王维东. 为什么要记账 [OL]. Pixiu记账. 2021</a></li>\n</ul>\n","categories":["Reading"],"tags":["财务","财商","资产","负债"]},{"title":"Java EE：SSM 框架快速上手教程","url":"/2018/08/J2EE-SSM-1.html","content":"<p>本文章主要围绕 J2EE 中 SSM ( Spring、Spring MVC、MyBatis ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。</p>\n<a id=\"more\"></a>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.08.13：完成初稿，梳理 SSM 框架初识章节；</li>\n<li>2018.08.20：框架内容，梳理 SSM 框架基本内容；</li>\n<li>2018.08.24：框架内容，修正 SSM 框架部分内容；</li>\n<li>2018.08.26：框架内容，整合 Spring 和 MyBatis；</li>\n</ul>\n<h2 id=\"教学资源\"><a href=\"#教学资源\" class=\"headerlink\" title=\"教学资源\"></a>教学资源</h2><ul>\n<li><p>视频 | <a href=\"https://www.bilibili.com/video/av20394903\" target=\"_blank\" rel=\"noopener\">黑马程序员. J2EE 进阶. MyBatis 框架由浅入深. 2017. bilibili.com</a></p>\n<blockquote>\n<p>本框架的学习笔记是基于此系列教学视频所得的。</p>\n</blockquote>\n</li>\n<li><p>文章 | <a href=\"https://blog.csdn.net/noaman_wgs/article/details/79503559\" target=\"_blank\" rel=\"noopener\">吴操. 搭建一个基于 SSM 框架的人力资源管理系统. 2018. csdn.net</a></p>\n<blockquote>\n<p>发现这位博主搭建的例子 ( <a href=\"https://github.com/nomico271/SSM_HRMS\" target=\"_blank\" rel=\"noopener\">nomico271. SSM_HRMS. Github</a> ) 紧凑、简练，适合初入门时来模仿构建自己的项目。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"IDE-搭建\"><a href=\"#IDE-搭建\" class=\"headerlink\" title=\"IDE 搭建\"></a>IDE 搭建</h2><p>IDE 搭建以 <a href=\"https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html#IDE-搭建\">Java EE 之 SSH 框架配置与使用</a> 为参考。</p>\n<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><ul>\n<li>框架版本：<ul>\n<li>Spring MVC：4.3.x</li>\n<li>Spring：4.3.x</li>\n<li>MyBatis：3.4.x</li>\n</ul>\n</li>\n<li>其他组件：<ul>\n<li>MySQL：5.7.x / SQL Server：2008 R2</li>\n<li>Tomcat：9.0.x</li>\n<li>Maven：3.3.9</li>\n<li>JDK：1.8</li>\n</ul>\n</li>\n<li>构建框架，还需要相关依赖库 ( Jar 包 )，为便于你下载 Jar 包或校对依赖是否齐全，具体地，以下列举了 SSM 框架所需要的依赖库。</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Spring</th>\n<th style=\"text-align:left\">MyBatis</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">spring-core</td>\n<td style=\"text-align:left\">mybatis</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-beans</td>\n<td style=\"text-align:left\">mybatis-spring ( Spring 整合 Mybatis )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-context</td>\n<td style=\"text-align:left\">pagehelper ( 分页助手 )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-webmvc</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-web</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-aop ( 整合 Aop )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aopalliance ( 整合 Aop )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-aspect ( 整合 Aop )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectjweaver ( 整合 Aop )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-tx ( 整合事务 )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-jdbc</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">其他依赖库 ( Jar 包 )</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">log4j</td>\n<td style=\"text-align:left\">日志支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">log4j-core、log4j-api</td>\n<td style=\"text-align:left\">日志支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">slf4j-api、slf4j-log4j12</td>\n<td style=\"text-align:left\">日志支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">junit</td>\n<td style=\"text-align:left\">Junit 单元测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c3p0</td>\n<td style=\"text-align:left\">c3p0 数据库连接池</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mysql-connector-java</td>\n<td style=\"text-align:left\">添加 MySQL 数据库支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jackson-databind</td>\n<td style=\"text-align:left\">Json 数据转化为类对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jsp-api</td>\n<td style=\"text-align:left\">JSP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">javax.servlet-api</td>\n<td style=\"text-align:left\">Servlet</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jstl</td>\n<td style=\"text-align:left\">JSTL 标签库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">taglibs-standard-impl</td>\n<td style=\"text-align:left\">JSP 标准标签库</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"框架初识\"><a href=\"#框架初识\" class=\"headerlink\" title=\"框架初识\"></a>框架初识</h2><ul>\n<li><p>SSM 框架集由 Spring、SpringMVC、MyBatis 三个开源框架整合而成，是继 SSH (Spring、Struts2、Hibernate ) 之后，目前比较主流的 Java EE 企业级框架，适用于搭建各种大型的企业级应用系统。 </p>\n<blockquote>\n<p>SSM 与 SSH 都有各自的优缺点，而根据你的项目特点而选择合适的框架即可。关于 SSH 框架的配置与使用，感兴趣的可参考本博客的文章：<a href=\"https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html\">Java EE 之 SSH 框架配置与使用</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"ORM-框架\"><a href=\"#ORM-框架\" class=\"headerlink\" title=\"ORM 框架\"></a>ORM 框架</h3><ul>\n<li>对象关系映射（Object Relational Mapping，O/R Mapping，ORM）是通过使用描述对象和数据库之间映射的 <code>元数据</code>，将面向对象语言程序中的 <code>对象</code> 自动 <code>持久化</code> 到 <code>关系数据库</code> 中。本质上就是将数据从一种形式转换到另外一种形式。 </li>\n<li>让 <code>实体类</code> 和 <code>数据库表</code> 进行一一对应关系 (映射关系)，<code>实体类属性</code> 和 <code>表里面的字段</code> 对应。操作表对应实体类对象，而不需操作数据库表。</li>\n</ul>\n<h3 id=\"SSM-框架\"><a href=\"#SSM-框架\" class=\"headerlink\" title=\"SSM 框架\"></a>SSM 框架</h3><h4 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h4><h5 id=\"原生-Jdbc-操作数据库\"><a href=\"#原生-Jdbc-操作数据库\" class=\"headerlink\" title=\"原生 Jdbc 操作数据库\"></a>原生 Jdbc 操作数据库</h5><p>在引入 MyBatis ( 或 Hibernate ) 前，一般通过原生 Jdbc 来操作数据库，而这种方式存在很多问题 $^{[2]}$：</p>\n<ul>\n<li><p>程序创建数据库连接，即需求时创建，用完后关闭。若频繁的创建、关闭数据库连接，显然存在问题。 ( 可以通过数据库连接池来处理这个问题 )</p>\n</li>\n<li><p>硬编码的地方太多了。例如，数据库连接相关信息，SQL相关信息等。( 可通过使用 XML 配置文件，来避免这个问题 )</p>\n</li>\n<li><p>实质上，我们编写JDBC是有步骤可循的，即先得到数据库连接对象，传入SQL、输入参数、设置参数，再去执行SQL，然后遍历结果集将数据库 SQL 执行的结果对象转化为 JAVA 对象，然后再去业务处理，最后释放资源。</p>\n<p>  那么这个过程，实际上是个 <code>模板方法</code>，能不能抽离出来，更好的去完成这个过程呢？</p>\n</li>\n</ul>\n<h5 id=\"框架比较\"><a href=\"#框架比较\" class=\"headerlink\" title=\"框架比较\"></a>框架比较</h5><ul>\n<li>Hibernate<ul>\n<li>优点：<br>1) Hibernate 这个纯粹的 ORM 框架，以面向对象的方式来完成数据库的操作。<br>2) Hibernate 不需要编写 SQL 即可完全映射，且可通过 HQL (Hibernate Query Language) 语言对 POJO 操作。<br>3) Hibernate 提供了日志、缓存、级联等特性。  </li>\n<li>缺点：<br>1) Hibernate 可自由编写 SQL，但非常繁琐，则优化 SQL 实现高性能数据库操作有限制，在互联网项目快速迭代开发中显得过于笨重。<br>2) Hibernate 的 <code>级联会造成太多性能的丢失</code>。<br>3) Hibernate 不支持存储过程。</li>\n</ul>\n</li>\n<li>MyBatis<ul>\n<li>优点：自由书写 SQL、支持动态 SQL、处理列表、动态生成表名、支持存储过程。</li>\n<li>缺点：需要编写 SQL 和映射规则，工作量相对较大。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h5><ul>\n<li><p>MyBatis 前身是 Apache 的开源项目 <code>iBatis</code>，<code>iBatis</code> 一词源于 internet 和 abatis 的组合，是一个基于 Java 的持久层框架。</p>\n</li>\n<li><p>MyBatis 是一款持久层框架，它支持定制化 SQL (不屏蔽 SQL)、存储过程以及高级映射。</p>\n</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>\n<li><p>MyBatis 可使用 XML配置文件形式或注解形式来配置和映射原生信息，将接口和 POJOs ( Plain Ordinary Java Object，普通 Java 对象 / 实体类 ) 映射成数据库中的记录。</p>\n<blockquote>\n<p>我们把 POJO 对象和数据库表相互映射的框架称为对象关系映射框架 ( Object Relational )。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"架构原理\"><a href=\"#架构原理\" class=\"headerlink\" title=\"架构原理\"></a>架构原理</h5><p><img src=\"/images/illustration/Project/2018/08/J2EE-SSM-1_6-1.png\" alt=\"图6-1SSM架构原理图\"></p>\n<center>图 6-1 SSM架构原理图</center>\n\n<ul>\n<li><p><code>SqlMapConfig.xml</code>：MyBatis 全局配置文件，配置数据源、事务等运行环境相关信息；SQL文件即是 <code>Mapper.xml</code>。</p>\n</li>\n<li><p><code>SqlSessionFactory</code>：会话工厂，用于创建 SqlSession。</p>\n</li>\n<li><p><code>SqlSession</code>：即操作数据库的接口，其内部借助 <code>Executor</code> 执行器完成对数据库的操作。</p>\n</li>\n<li><p><code>MappedStatement</code>：底层封装对象，对操作数据库储存封装，其中包括 SQL 语句 ( Mapper.xml )、输入对象和输出结果类型。</p>\n</li>\n</ul>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><ul>\n<li><p>全局配置文件：在 Src 根目录下建立并配置 <code>SqlMapConfig.xml</code>  </p>\n<p>  与 Spring 整合 Hibernate 一样，后期 Spring 整合 MyBatis 后此配置文件可省略。当然，学习阶段代码还是得提供。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 Java 的配置文件或者声明属性信息 ( 详细见本项目源码 ) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"c3p0.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 全局参数配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;settings&gt;&lt;/settings&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定义别名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 单个别名定义</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;typeAlias type=\"cn.kofes.ssm.pojo.Sample\" alias=\"Sample\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 批量别名定义 ( 推荐 )</span></span><br><span class=\"line\"><span class=\"comment\">         | package：指定包名称来为该包下的 pojo 类声明别名，默认的别名就是类名 ( 首字母大小写都可 )</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.pojo\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置 MyBatis 的环境信息，与 Spring 整合，该信息由spring来管理 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置 Jdbc 事务控制，由 MyBatis 进行管理 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">transactionManager</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置数据源，采用 MyBatis 连接池 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.driverClass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.jdbcUrl&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 单个映射文件添加 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"mapper/SampleMapper.xml\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 批量加载映射文件：mapper.java 与 mapper.xml 同名，且在同一目录下</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;package name=\"cn.kofes.ssm.mapper\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Mapper 映射文件：例如 <code>SampleMapper.xml</code></p>\n<ul>\n<li><p>创建实体类对象 ( POJOs )：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cn.kofes.pojo.Sample.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> id; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123; <span class=\"keyword\">this</span>.id = id; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123; <span class=\"keyword\">this</span>.name = name; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在映射文件中配置 SQL 语句，如建立 <code>SampleMapper.xml</code> ( 便于管理，把映射文件统一放置 mapper 文件夹下 )：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mapper/SampleMapper.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace 用于绑定 Mapper 代理开发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"cn.kofes.mapper.SampleMapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 配置 SQL 语句：例如查找某一元组</span></span><br><span class=\"line\"><span class=\"comment\">     | - id 属性：唯一标识映射文件中的 SQL</span></span><br><span class=\"line\"><span class=\"comment\">     | - parameterType 属性：指定输入参数的类型</span></span><br><span class=\"line\"><span class=\"comment\">     | - resultType 属性：指定输出参数的类型</span></span><br><span class=\"line\"><span class=\"comment\">     |   SQL 语句会封装到 MappedStatement 对象中，故 ID 又称为 Statement 的 ID</span></span><br><span class=\"line\"><span class=\"comment\">     | - #&#123;&#125;：表示一个占位符号</span></span><br><span class=\"line\"><span class=\"comment\">     | - #&#123;id&#125;：id 表示接收输入的参数，参数名称就是 id</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findCertianTupleById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"cn.kofes.bean.Sample\"</span>&gt;</span></span><br><span class=\"line\">        SELECT * FROM t_sample WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 插入元组 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertOneTuple\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.kofes.pojo.Sample\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 用于自增 ID 的情况，在完成插入后将 ID 返回 user 对象中</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"java.lang.Integer\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            SELECT LAST_INSERT_ID()</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/selectKey&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 用于非自增 ID 的情况，先产生 ID 放入 user 对象中，再执行保存</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;selectKey keyProperty=\"id\" order=\"BEFORE\" resultType=\"java.lang.String\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            SELECT UUID()</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/selectKey&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        INSERT INTO t_sample (id, name) VALUES (#&#123;id&#125;, #&#123;name&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        INSERT TO t_sample(id, name) value(#&#123;id&#125;, #&#123;name&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 删除一条元组 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteOneTupleById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.lang.Integer\"</span>&gt;</span></span><br><span class=\"line\">        DELETE FROM t_sample WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 更新一条元组 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateOneTupleById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.kofes.pojo.Sample\"</span>&gt;</span></span><br><span class=\"line\">        UPDATE t_sample SET id = #&#123;id&#125;, name = #&#123;name&#125;</span><br><span class=\"line\">        WHERE id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"案例演示\"><a href=\"#案例演示\" class=\"headerlink\" title=\"案例演示\"></a>案例演示</h5><ul>\n<li><p>单独使用 MyBatis 框架，根据 id 查询指定用户：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 便于检验效果，这里以单元测试类实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBOperatorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDoSomethingInDB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载 MyBatis 配置文件</span></span><br><span class=\"line\">        String resource  = <span class=\"string\">\"SqlMapConfig.xml\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 得到配置文件流</span></span><br><span class=\"line\">        InputStream inputStream = Resource.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"comment\">// 创建会话工厂</span></span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder()</span><br><span class=\"line\">            .build(inputStream);</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// 通过会话工厂，得到 SqlSession 对象</span></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 通过 SqlSession 操作数据库</span></span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数：namespace + statement id</span></span><br><span class=\"line\">        <span class=\"comment\">// 第二个参数：指定和映射文件中所匹配的 parameterType 相同属性类型的参数</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/* 根据 ID 查询元组</span></span><br><span class=\"line\"><span class=\"comment\">        Sample sample = sqlSession.selectOne(</span></span><br><span class=\"line\"><span class=\"comment\">            \"cn.kofes.mapper.SampleMapper.findCertainTupleById\", 1);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 插入一条元组</span></span><br><span class=\"line\"><span class=\"comment\">        Sample sample = new Sample();</span></span><br><span class=\"line\"><span class=\"comment\">        sample.setName(\"邯郸\");</span></span><br><span class=\"line\"><span class=\"comment\">        sqlSession.insert(</span></span><br><span class=\"line\"><span class=\"comment\">            \"cn.kofes.mapper.SampleMapper.insertOneTuple\", sample);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 根据 ID 修改元组</span></span><br><span class=\"line\"><span class=\"comment\">        Sample sample = new Sample();</span></span><br><span class=\"line\"><span class=\"comment\">        sample.setId(14);</span></span><br><span class=\"line\"><span class=\"comment\">        sample.setName(\"阿斗\");</span></span><br><span class=\"line\"><span class=\"comment\">        sqlSession.update(</span></span><br><span class=\"line\"><span class=\"comment\">            \"cn.kofes.mapper.SampleMapper.updateOneTupleById\", sample);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        sqlSession.commit();</span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>案例总结：</p>\n<ul>\n<li><code>namespace</code>：命名空间，作用是隔离 SQL。在 MyBatis 和 Spring 结合使用时具有特殊的意义，这里暂且使用全限定类名。</li>\n<li><code>&lt;select&gt;</code> 等 SQL Command 标签需要一个 ID，还需要输入参数 parameterType，输出参数映射 resultType 等。在 MyBatis 底层封装成了一个 MappedStatement 对象，使用时以 <code>namespace.id</code> 的方式引用即可。</li>\n<li><code>#{}</code> 和 <code>${}</code>：<ul>\n<li><code>#{}</code>：表示一个占位符号，用于接收输入参数，类型可以是简单类型，也可是 POJO、HashMap 等。( 通过 <code>OGNL 表达式</code> 读取对象的属性值 )</li>\n<li><code>${}</code>：表示一个拼接符号，会引入 <code>SQL注入</code>，故不建议使用。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>思考问题：</p>\n<ul>\n<li>我们重点关注的是 SqlSession，它其实是一个 interface，定义了很多操作数据库的接口，其中实现了 Closeable 接口，很明确是使用完毕后需要 <code>close()</code> 的。  </li>\n<li>它的实现类 DefaultSqlSession 中有一些数据域，比如说 autoCommit，在默认情况下是不开启自动提交的；且方法也并不是 Synchronized 的，这说明 SqlSession 并不是线程安全的，因此我们应该是局部使用 SqlSession，且在使用完毕后 <code>close()</code> 关闭 sqlSession。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"MyBatis-原始方法\"><a href=\"#MyBatis-原始方法\" class=\"headerlink\" title=\"MyBatis 原始方法\"></a><del>MyBatis 原始方法</del></h5><blockquote>\n<p>这种方式，重复的代码太多，现阶段基本弃用，目前使用最多的就是 Mapper 代理开发。</p>\n</blockquote>\n<ul>\n<li>在开始 Mapper 代理开发前，可了解一种 MyBatis 的原始 Dao 开发方法：<ul>\n<li>Step.01.提供 Dao 接口，有增、删、改、查的方法。</li>\n<li>Step.02.提供 Dao 的实现类，在实现类中利用 Spring 注入 SqlSessionFactory，然后在各个方法中得到 SqlSession，进行操作后，关闭 SqlSession 即可。</li>\n</ul>\n</li>\n<li><p>便于理解，放上实现代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DAO 层接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertOneTuple</span><span class=\"params\">(User user)</span> throw Exception</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteOneTupleById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>  throw Exception</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateOneTupleById</span><span class=\"params\">(User user)</span>  throw Exception</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findCertainById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> throw Exception</span>;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DAO 层实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDaoImpl</span><span class=\"params\">(SqlSessionFactory sqlSessionFactory)</span> </span></span><br><span class=\"line\"><span class=\"function\">        throw Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findCertainById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> throw Exception </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 省略实现逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteOneTupleById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>  throw Exception </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// 省略实现逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateOneTupleById</span><span class=\"params\">(User user)</span>  throw Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略实现逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findCertainById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> throw Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略实现逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDaoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        InputStream inputStream = </span><br><span class=\"line\">            Resource.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = </span><br><span class=\"line\">            <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindCertainById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BaseDao sampleDao = <span class=\"keyword\">new</span> SampleDaoImpl(sqlSessionFactory);</span><br><span class=\"line\">        User user = sampleDao.findCertainById(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println( user.toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Mapper-代理开发\"><a href=\"#Mapper-代理开发\" class=\"headerlink\" title=\"Mapper 代理开发\"></a>Mapper 代理开发</h5><ul>\n<li><p>Mapper 映射文件：上一节配置的映射文件 <code>SampleMapper.xml</code></p>\n</li>\n<li><p>Mapper 接口：</p>\n<ul>\n<li>在 SampleMapper.xml 中 namespace 等于 Mapper 的接口地址 ( <code>全路径地址</code> )；</li>\n<li>在 Mapper 接口中的 <code>方法名</code> 和 SampleMapper.xml 中 Statement 的 <code>ID</code> 名称一致；</li>\n<li>在 Mapper 接口中的方法 <code>输入参数类型</code> 和 SampleMapper.xml 中 Statement 的 <code>parameterType</code> 指定的类型一致。</li>\n<li>在 Mapper 接口中的 <code>方法返回值类型</code> 和 SampleMapper.xml 中 Statement 的 <code>resultType</code> 指定的类型一致。</li>\n</ul>\n</li>\n<li><p>关于规范的启示：故我们进行 Mapper 的开发应该遵循一些规范，这样 MyBatis 方可自动生成 <code>XXXMapper</code> 类的代理实现类。</p>\n<ul>\n<li>保证 XXXMapper.xml 中的 <code>namespace</code> 同 XXXMapper.java 的 <code>全限定名称</code> 一致；</li>\n<li>保证 XXXMapper.xml 中的 <code>Statement ID</code> 同 XXXMapper.java 的 <code>方法名称</code> 一致；</li>\n<li><p>保证 XXXMapper.xml 中的 Statement 的输入参数的类型 ( <code>parameterType</code> )、输出参数的类型 ( <code>resultType</code> ) 同 <code>XXXMapper.java</code> 的保持一致.</p>\n<p><img src=\"/images/illustration/Project/2018/08/J2EE-SSM-1_6-2.png\" alt=\"图6-2Mapper代理开发规范\"></p>\n<center>图6-2 Mapper 代理开发规范</center>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertOneTuple</span><span class=\"params\">(Sample sample)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteOneTupleById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateOneTupleById</span><span class=\"params\">(Sample sample)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sample <span class=\"title\">findCertainTupleById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载 MyBatis 配置文件，得到配置文件流</span></span><br><span class=\"line\">        InputStream inputStream =</span><br><span class=\"line\">            Resources.getResourceAsStream(<span class=\"string\">\"SqlMapConfig.xml\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建会话工厂</span></span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        <span class=\"comment\">// 通过会话工厂，得到 SqlSession 对象</span></span><br><span class=\"line\">        sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindCertainTupleById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SampleMapper sampleMapper = sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println( sampleMapper.findCertainTupleById(<span class=\"number\">15</span>).toString() );</span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>当然不要忘记在全局配置文件 <code>SqlMapConfig.xml</code> 中加载映射文件 ( 参考上述配置文件 )。</p>\n</li>\n</ul>\n<h5 id=\"POJO-包装类型查询\"><a href=\"#POJO-包装类型查询\" class=\"headerlink\" title=\"POJO 包装类型查询\"></a>POJO 包装类型查询</h5><h6 id=\"输入映射\"><a href=\"#输入映射\" class=\"headerlink\" title=\"输入映射\"></a>输入映射</h6><ul>\n<li><p>输入映射：通过 parameterType 指定输入参数的类型，类型可以是 <code>简单类型</code>，也可以是  <code>POJO</code>、<code>HashMap</code> 类型。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义包装类型 POJO：自定义所需要的查询条件，实现多表查询</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">POJOCollection</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 为更加形象、理解，这里引入用户和部门的实体类</span></span><br><span class=\"line\"><span class=\"comment\">     * 一个用户对应一个部门，一个部门包含多个用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user; <span class=\"comment\">// User 实体类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Department department; <span class=\"comment\">// Department 实体类</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 构造函数初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">POJOCollection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 生成 Setter 和 Getter 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123; <span class=\"keyword\">this</span>.user = user; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> user; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDepartment</span><span class=\"params\">(Department department)</span> </span>&#123; <span class=\"keyword\">this</span>.department = department; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Department <span class=\"title\">getDepartment</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> department; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在映射文件 <code>SampleMapper.xml</code> 中配置 SQL 语句：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  自定义所需要的查询条件，实现多表查询 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findPOJOList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.POJOCollection\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">resultType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user as u, t_department as d</span><br><span class=\"line\">    WHERE u.uid = #&#123;user.uid&#125; and d.depart_id = #&#123;department.depart_id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mapper 接口：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Sample&gt; <span class=\"title\">findPOJOList</span><span class=\"params\">(POJOCollection pojoCollection)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindPOJOList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mapper 接口代理</span></span><br><span class=\"line\">        SampleMapper sampleMapper =</span><br><span class=\"line\">            sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        POJOCollection pojoCollection = <span class=\"keyword\">new</span> POJOCollection();</span><br><span class=\"line\">        pojoCollection.getUser().setUid(<span class=\"number\">50</span>);</span><br><span class=\"line\">        pojoCollection.getDepartment().setDepart_id(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; list =</span><br><span class=\"line\">            sampleMapper.findPOJOList(pojoCollection);</span><br><span class=\"line\">        System.out.println( list.get(<span class=\"number\">0</span>).toString() );</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"输出映射\"><a href=\"#输出映射\" class=\"headerlink\" title=\"输出映射\"></a>输出映射</h6><ul>\n<li><p>输出映射：使用 resultType 进行输出映射，查询列名和 POJO 中的属性名一致，该列才会成功映射。</p>\n<blockquote>\n<p>若查询出来的列名 ( 通过 AS 自定义的列名 ) 和 POJO 的属性名不一致，通过定义一个 resultMap 对列名和属性名之间作一个映射关系。</p>\n</blockquote>\n</li>\n<li><p>定义 resultMap：在映射文件 <code>SampleMapper.xml</code> 中定义；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\"> | id：resultMap 唯一标识</span></span><br><span class=\"line\"><span class=\"comment\"> | type：</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sampleResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Sample\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | id 表示查询结果集中的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">     | colum：查询出来的列名 ( AS 自定义列名 )</span></span><br><span class=\"line\"><span class=\"comment\">     | property：type 指定的 POJO 类型中的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id_\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | result 对非 ID 的属性进行映射定义</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name_\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 resultMap 作为 Statement 的输出映射类型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"listCustomView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"sampleResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT id as id_, name as name_</span><br><span class=\"line\">    FROM t_sample</span><br><span class=\"line\">    WHERE id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mapper 接口：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sample <span class=\"title\">listCustomView</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testListCustomView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mapper 接口代理</span></span><br><span class=\"line\">        SampleMapper sampleMapper = </span><br><span class=\"line\">            sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        System.out.println( sampleMapper.listCustomView(<span class=\"number\">15</span>) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"映射对比\"><a href=\"#映射对比\" class=\"headerlink\" title=\"映射对比\"></a>映射对比</h6><ul>\n<li><code>resultType</code> 查询出来的列名 ( 通过 AS 自定义的列名 ) 和 POJO 的属性名需一致，该列才会成功映射。<br>  <code>resultMap</code> 可根据查询出来的列名指定 POJO 类型中的应的属性名。</li>\n<li><code>resultType</code> 返回的是 User 对象，适应较简单的输出结果映射，MyBatis 其实还提供了<code>resultMap</code> 作为复杂输出结果映射。在 <a href=\"#高级映射\">高级映射</a> 章节将对比阐述。</li>\n</ul>\n<h5 id=\"动态-SQL\"><a href=\"#动态-SQL\" class=\"headerlink\" title=\"动态 SQL\"></a>动态 SQL</h5><p>MyBatis 核心是对 SQL 语句进行灵活操作，通过表达式进行判断，对 SQL 进行灵活拼接、组装。</p>\n<ul>\n<li>SQL 语句 <code>拼接</code>，例如 <code>&lt;where&gt;</code> 和 <code>&lt;if&gt;</code> 标签的组合使用；</li>\n<li>SLQ 语句 <code>抽离</code>，例如 <code>&lt;sql&gt;</code> 和 <code>&lt;include&gt;</code> 标签的组合使用； </li>\n<li><p>Foreach：向 SQL 传递数组或 List 集合，MyBatis 使用 <code>&lt;foreach&gt;</code> 标签解析。例如，我们需要查询多个 ID 值；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 将通用的 SQL 语句抽离，例如：属性名、表名等 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"t_sample\"</span>&gt;</span>t_sample<span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findPOJOList\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.POJOCollection\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">resultType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Sample\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"t_sample\"</span> /&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自动去掉条件中第一个 AND 或者 OR  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Case.01.注意下面这种写法只适用于 id 类型为 String  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\" sample.id != null and sample.id != '' \"</span>&gt;</span></span><br><span class=\"line\">            AND sample.id = #&#123;sample.id&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\" other.id != null and other.id  != '' \"</span>&gt;</span></span><br><span class=\"line\">            AND other.id = #&#123;other.id&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Case.02.若 id 类型为 Integer 需要以下写法 </span></span><br><span class=\"line\"><span class=\"comment\">        &lt;if test=\"_parameter!=null and _parameter &gt; 0\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            AND id = #&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/if&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Case.03.查询多个 ID 值 --&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  拼接效果：AND(id = ? OR id = ? OR id = ?) </span></span><br><span class=\"line\"><span class=\"comment\">        &lt;if test=\"ids != null\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;foreach collection=\"ids\" item=\"id\" </span></span><br><span class=\"line\"><span class=\"comment\">                open=\"AND (\" close=\")\" separator=\"OR\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                id = #&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;/foreach&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/if&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  拼接效果：IN(1, 3, 5)</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;if test=\"ids != null\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;foreach collection=\"ids\" item=\"id\" </span></span><br><span class=\"line\"><span class=\"comment\">                open=\"IN (\" close=\")\" separator=\",\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">                id = #&#123;id&#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;/foreach&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/if&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"高级映射\"><a href=\"#高级映射\" class=\"headerlink\" title=\"高级映射\"></a>高级映射</h5><p>为便于后续章节的学习，这里以用户表、商品表、订单表和订单明细表的实例来阐述问题：</p>\n<p><img src=\"/images/illustration/Project/2018/08/J2EE-SSM-1_6-3.png\" alt=\"图6-3用户购物清单ER图\"></p>\n<center>图 6-3 用户购物清单 ER 图</center>\n\n<ul>\n<li>用户表 ( User )：购买商品的用户信息；</li>\n<li>商品表 ( Item )：商品的明细信息；</li>\n<li>订单表 ( Order )：用户所创建的订单；</li>\n<li><p>订单明细表 ( OrderDetail )：每一张订单记录购买的商品信息；</p>\n<blockquote>\n<p>为便于理解，数据表与 POJO ( 实体类 ) 的名称统一命名为相同名称。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"一对一映射\"><a href=\"#一对一映射\" class=\"headerlink\" title=\"一对一映射\"></a>一对一映射</h6><p>便于理解，我们可以确立一需求：查询订单表，关联查询 <code>创建订单的用户信息</code>。</p>\n<p>User 和 Order 的关联查询，关键是查询出来的结果如何映射？是用 resultType，还是用 resultMap？</p>\n<p>1) <code>resultType</code>  </p>\n<p>显然我们的实体类 ( User 仅仅包含用户信息，Order 仅仅包含订单信息，Order 中没有 User 的引用 ) 并不能接受关联查询的结果集，那么我们可以考虑使用 OrderVoUser 映射类，即让它 <code>extends Orders</code>，然后在加上一些 User 的属性作为输出结果类型。</p>\n<blockquote>\n<p>OrdersVoUser 映射类的创建原理与上述的 POJOCollection 映射类一样。</p>\n</blockquote>\n<p>2) <code>resultMap</code>  </p>\n<p>可满足复杂输出结果映射，例如数据库字段名称与查询的字段名称 ( 或通过 AS 声明了别名 ) 不一致的映射；延迟加载；一对一，一对多，多对多等高级映射特性。</p>\n<blockquote>\n<p>这里引用实例说明，即使用 resultMap 将查询结果中的订单信息映射到 Other 对象中，在 Order 类中添加 User 属性，将关联查询出来的用户信息映射到 Other 对象中的 User 属性中。 </p>\n</blockquote>\n<ul>\n<li><p>配置映射文件 Mapper.xml </p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 订单查询映关联查询用户信息的 resultMap  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrderUserResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Order\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 配置映射的订单信息</span></span><br><span class=\"line\"><span class=\"comment\">     | colum：订单信息的列名</span></span><br><span class=\"line\"><span class=\"comment\">     | property：订单信息的列名所映射到 POJO 中的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"order_id\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 配置映射的关联用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     | association 标签中 javaType 必须要明确指明类型</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"cn.kofes.ssh.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"uid\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"uid\"</span> /&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span> /&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"phone\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"phone\"</span> /&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- SQL 语句：查询订单表，关联查询创建订单的用户信息  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findOrderUserResultMap\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrderUserResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT</span><br><span class=\"line\">        u.uid, u,username, u.age, u.phone, </span><br><span class=\"line\">        o.order_id</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">        Order AS o, User AS u</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">        o.id = u.uid</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Mapper 接口：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SampleMapper 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">findOrderUserResultMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindOrderUserResultMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mapper 接口代理</span></span><br><span class=\"line\">        SampleMapper sampleMapper = </span><br><span class=\"line\">            sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        List&lt;Order&gt; list = sampleMapper.findOrderUserResultMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"一对多映射\"><a href=\"#一对多映射\" class=\"headerlink\" title=\"一对多映射\"></a>一对多映射</h6><p>确立一需求：查询订单及订单明细的信息。</p>\n<ul>\n<li><p>实体类配置</p>\n<blockquote>\n<p>为了满足二级缓存需求，所有实体类实现 <code>Serializablle</code> 接口，实现序列化。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer uid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer order_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createtime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 把订单所对应的订单明细映射到 orderDetail 属性中</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;OrderDetail&gt; orderDetail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer orderdetail_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer item_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer order_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer amount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer item_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String itemname;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String itemprice;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置映射文件 Mapper.xml </p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 查询订单及关联查询订单明细的 resultMap  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"OrderAndOrderDetailResultMap\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Order\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">extend</span>=<span class=\"string\">\"OrderUserResultMap\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置映射的订单信息 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置映射的用户信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过继承免去重复配置：extend=\"Objective ResultMap ID\" --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 配置映射的订单明细信息：使用 Collection 对关联查询的多条记录</span></span><br><span class=\"line\"><span class=\"comment\">     | 映射到一个 List 集合属性中</span></span><br><span class=\"line\"><span class=\"comment\">     | ofType：指定映射到集合属性中 POJO 的类型</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderDetail\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"cn.kofe.ssm.pojo.OrderDetail\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"item_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"amount\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"amount\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- SQL：查询订单及订单明细的信息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"findOrderAndOrderDetailResultMap\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrderAndOrderDetailResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT</span><br><span class=\"line\">        o.order_id, o.createtime, </span><br><span class=\"line\">        od.item_id, od.amount,</span><br><span class=\"line\">        i.itemname</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">        Order AS o, Item AS i, OrderDetail As od</span><br><span class=\"line\">    WHERE </span><br><span class=\"line\">        od.order_id = o.order_id AND </span><br><span class=\"line\">        od.item_id = i.item_id</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Mapper 接口：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SampleMapper 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Order&gt; <span class=\"title\">findOrderAndOrderDetailResultMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindOrderAndOrderDetailResultMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mapper 接口代理</span></span><br><span class=\"line\">        SampleMapper sampleMapper = </span><br><span class=\"line\">            sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        List&lt;Order&gt; list = sampleMapper.findOrderAndOrderDetailResultMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"多对多映射\"><a href=\"#多对多映射\" class=\"headerlink\" title=\"多对多映射\"></a>多对多映射</h6><p>确立一需求：查询用户及用户购买的商品信息。</p>\n<p>在多对多映射中，具体的映射思路是：<br>1) 在 User 实体类中添加订单列表属性 <code>List&lt;Order&gt; orderList</code>，将用户创建的订单映射到 orderList。<br>2) 在 Order 实体类中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetail</code>，将订单的明细映射到 orderDetail。<br>3) 在 OrderDetail 实体类中添加 <code>Item</code> 属性，将订单明细所对应的商品映射到 item。  </p>\n<ul>\n<li><p>实体类配置</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer uid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将用户创建的订单映射到 orderList</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Order&gt; orderList;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer order_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createtime;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将订单所对应的订单明细映射到 orderDetail 属性中</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;OrderDetail&gt; orderDetail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer orderdetail_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer item_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer order_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer amount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Item item;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer item_id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String itemname;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String itemprice;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\">// Getter 和 Setter 方法要实现</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置映射文件 Mapper.xml </p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 查询用户及关联查询用户购买的商品信息的 resultMap  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"UserAndItemResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置用户信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"uid\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"uid\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"phone\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"phone\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 配置映射的订单信息：使用 Collection 对关联查询的多条记录</span></span><br><span class=\"line\"><span class=\"comment\">     | 映射到一个 List 集合属性中</span></span><br><span class=\"line\"><span class=\"comment\">     | ofType：指定映射到集合属性中 POJO 的类型</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"cn.kofe.ssm.pojo.Order\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"order_id\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span> /&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置映射的订单明细信息：一个订单包含多个订单明细 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderDetail\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"cn.kofe.ssm.pojo.OrderDetail\"</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"item_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"amount\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"amount\"</span> /&gt;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置映射的商品信息：一个订单明细对应一个商品 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"item\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Item\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"item_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"item_id\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"itemname\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemname\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"itemprice\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemprice\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- SQL：查询用户信息和用户购买过的商品信息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findUserAndItemResultMap\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"UserAndItemResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT </span><br><span class=\"line\">        u.uid, u.username, </span><br><span class=\"line\">        o.order_id,</span><br><span class=\"line\">        od.item_id, od.amount</span><br><span class=\"line\">        i.itemname, i.itemprice</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">        Order AS o, User AS u, Item AS i, OrderDetail As od</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">        o.user_id = u.uid AND</span><br><span class=\"line\">        od.order_id = o.order_id AND</span><br><span class=\"line\">        od.item_id = i.item_id</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Mapper 接口：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SampleMapper 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findUserAndItemResultMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  SqlSession sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindUserAndItemResultMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Mapper 接口代理</span></span><br><span class=\"line\">        SampleMapper sampleMapper = </span><br><span class=\"line\">            sqlSession.getMapper(SampleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        List&lt;User&gt; list = sampleMapper.findUserAndItemResultMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"高级映射总结\"><a href=\"#高级映射总结\" class=\"headerlink\" title=\"高级映射总结\"></a>高级映射总结</h6><ul>\n<li>一对一映射：在 <code>Order</code> 实体对象中引入 <code>User</code> 属性，且在配置文件 Mapper.xml 中，通过 <code>&lt;association&gt;</code> 标签关联用户信息。</li>\n<li>一对多映射：在 <code>Order</code> 实体对象中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetails</code>，且在配置文件 Mapper.xml 中，通过 <code>&lt;collection&gt;</code> 标签关联订单明细信息。</li>\n<li>多对多映射：<ul>\n<li>在 User 实体对象中添加订单列表属性 <code>List&lt;Order&gt; orderList</code>，将用户创建的订单映射到 orderList。  </li>\n<li>在 Order 实体对象中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetail</code>，将订单的明细映射到 orderDetail。  </li>\n<li>在 OrderDetail 实体对象中添加 <code>Item</code> 属性，将订单明细所对应的商品映射到 item。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h5><ul>\n<li><p>延迟加载，即需要时才发出 SQL 查询请求。Hibernate 中有延迟加载，MyBatis 同样提供了这个功能，具体以 <code>&lt;resultMap&gt;</code> 标签的属性完成配置。当然，我们可具体分析 MyBatis 的延迟加载。</p>\n</li>\n<li><p>MyBatis是默认开启延迟加载的么？如果不是，那么显然应该进行延迟加载配置。</p>\n<p>  在 MyBatis 的全局核心配置文件 SqlMapConfig.xml 的 <code>&lt;settings&gt;</code> 标签中可设置 lazyLoadingEnabled 以及 aggressiveLazyLoading 属性值。</p>\n<ul>\n<li><p><code>lazyLoadingEnabled</code>：全局性设置懒加载，默认值为 flase，即所有相关联的都会被初始化加载。</p>\n</li>\n<li><p><code>aggressiveLazyLoading</code>：默认值为 ture，懒加载的对象可能被任何懒属性全部加载。否者，每个属性按需加载。</p>\n</li>\n</ul>\n</li>\n<li><p>要实现延迟加载，就得进行 SQL 拆分 ( 若我们的SQL都写在一起，DB要么执行，要么不执行，根本做不到按需查询，所以要延迟加载就得拆分 SQL ) 那么怎么进行拆分呢？</p>\n<p>  在 resultMap 中的 <code>&lt;collection&gt;</code> 以及 <code>&lt;association&gt;</code> 标签中有 <code>select</code> 属性，也就是说当使用到了 <code>&lt;collection&gt;</code> 或者 <code>&lt;association&gt;</code> 时才发出 <code>select</code> 属性对应的 SQL。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 延迟加载的 resultMap --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"OrderUserLazyLoadingResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.Order\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"order_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"order_id\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 实现对用户信息进行延迟加载</span></span><br><span class=\"line\"><span class=\"comment\">     | select 属性：指定延迟加载需要执行的 Statement 的 ID，</span></span><br><span class=\"line\"><span class=\"comment\">     | 即根据 user_id 查询用户信息的 Statement</span></span><br><span class=\"line\"><span class=\"comment\">     | column 属性：订单信息中关联查询用户信息得到的列，</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"cn.kofes.ssh.pojo.User\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">select</span>=<span class=\"string\">\"findUserById\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Step.01.查询订单管理查询用户信息，用户信息需要延迟加载 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"finOrderUserLazyLoading\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrderUserLazyLoadingResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM Order</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Step.02.关联查询用户信息：根据订单信息中的 user_id 去关联查询用户信息 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">\"findUserById\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"cn.kofes.ssm.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM User WHERE user_id = #&#123;user_id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\"> | 执行顺序：即先执行 finOrderUserLazyLoading，</span></span><br><span class=\"line\"><span class=\"comment\"> | 当需要查询用户时在再执行 findUserById</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>我们其实可以借助 MyBatis 去完成延迟加载，也可以自己实现延迟加载。怎么做呢？即有需求时，我们自己调用相应的 Statement 完成即可。</li>\n</ul>\n<h5 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h5><p><img src=\"/images/illustration/Project/2018/08/J2EE-SSM-1_6-4.png\" alt=\"图6-4MyBatis的一级缓存和二级缓存\"></p>\n<center>图 6-4 MyBatis 的一级缓存和二级缓存 $^{[3]}$</center>\n\n<ul>\n<li>MyBatis 提供一级缓存和二级缓存：<ul>\n<li>一级缓存是 sqlSession 级别的缓存。在操作数据库时需要构造 sqlSession 对象，在对象中有一个数据结构 ( HashMap，KEY 主要就是 SqlSession + StatementId 构成 ) 用于存储缓存数据。不同的 sqlSession 之间的缓存数据区域是互不影响的；</li>\n<li>二级缓存是 Mapper 级别的缓存 ( <code>按 Namespace 划分</code> )。多个 sqlSession 去操作同一个 Mapper 的 SQL 语句，多个 sqlSession 去操作数据库得到数据的数据会存到二级缓存中。二级缓存区域是共享的。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h6><ul>\n<li>一级缓存的工作原理：<ul>\n<li>如图 6-3 所示，当 sqlSession 发起 <code>查询</code> 操作，查询结果会 <code>写入</code> 到一级缓存中，待二次 <code>读取</code> 直接从一次缓存中读取即可；若 sqlSession 发起 <code>插入、更新、删除</code> 操作，则会 <code>清空</code> 一级缓存区域中的信息，以避免脏读。</li>\n<li>当 sqlSession 关闭时，sqlSession 缓存也随之失效。</li>\n</ul>\n</li>\n<li>MyBatis 是默认支持一级缓存的，无需配置开启。</li>\n</ul>\n<h6 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h6><ul>\n<li><p>二级缓存是需要配置开启的：</p>\n<ul>\n<li>在全局配置文件 <code>SqlMapConfig.xml</code> 中指明，即在 <code>&lt;setting&gt;</code> 标签中的 <code>cacheEnabled</code> 属性，开启全局性缓存开关；</li>\n<li><p>其次在需要开启二级缓存的 <code>XXXMapper.xml</code> 中指明 <code>&lt;cache&gt;</code> 标签。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"cn.kofes.mapper.SampleMapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 开启本 Mapper namespace 下的二级缓存</span></span><br><span class=\"line\"><span class=\"comment\">     | type 属性：指定 cache 接口的实现类的类型，默认使用 PerpetualCache</span></span><br><span class=\"line\"><span class=\"comment\">     | </span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">\"...\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当然也可使用分布式缓存：Ehcache</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;cache type=\"org.mybatis.caches.ehcache.EhcacheCache\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>所有 POJO 实现序列化接口：若开启二级缓存，其存储介质可在内存、磁盘等，即为了将缓存数据取出执行反序列化操作。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123; <span class=\"comment\">/* 省略细节 */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123; <span class=\"comment\">/* 省略细节 */</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>二级缓存的局限性：</p>\n<p>  例如，我们仅仅更新了其中一个信息，那么意味着二级缓存的清空。而我们真正想要的是刷新该商品的缓存信息而不要影响其他商品的缓存信息。</p>\n</li>\n</ul>\n<h5 id=\"整合-ehcache\"><a href=\"#整合-ehcache\" class=\"headerlink\" title=\"整合 ehcache\"></a>整合 ehcache</h5><ul>\n<li><code>ehcache</code> 是一个分布式缓存框架，当然还有 <code>redis</code>、<code>memached</code> 等。</li>\n<li>分布式缓存，系统为了提高系统并发、性能，一般对系统进行分布式部署 ( 集群部署方式 )。</li>\n<li><p>整合方法：MyBatis 提供的 Cache 接口，实现缓存逻辑即实现 Cache 接口即可。</p>\n<ul>\n<li>提供 ehcache 以及 ehcache 与 MyBatis 整合的依赖 ( 或者 Jar 包 )；</li>\n<li>在 <code>&lt;cache&gt;</code> 标签中，type 属性指明 ehcache 实现 Cache 接口的实现类，既有：<br><code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</code>；</li>\n<li><p>提供相关的 ehcache 配置文件.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyBatis 提供的 Cache 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putObject</span><span class=\"params\">(Object var1, Object var2)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getObject</span><span class=\"params\">(Object var1)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">removeObject</span><span class=\"params\">(Object var1)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">ReadWriteLock <span class=\"title\">getReadWriteLock</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"逆向工程\"><a href=\"#逆向工程\" class=\"headerlink\" title=\"逆向工程\"></a>逆向工程</h5><ul>\n<li>MyBatis 官方提供逆向工程，可针对单表自动生成 MyBatis 执行所需要的代码 ( mapper.java，mapper.xml，pojo 等 )。</li>\n<li>企业实际开发中，常用的逆向工程方式：由数据库表生成 Java 代码。</li>\n<li>添加依赖或添加 Jar 包：<a href=\"http://mvnrepository.com/artifact/org.mybatis.generator/mybatßis-generator-core\" target=\"_blank\" rel=\"noopener\">MyBatis-Generator</a> ( Maven 中央仓库 )</li>\n</ul>\n<h6 id=\"运行逆向工程\"><a href=\"#运行逆向工程\" class=\"headerlink\" title=\"运行逆向工程\"></a>运行逆向工程</h6><ul>\n<li>参考官方指南 <a href=\"http://www.mybatis.org/generator/running/running.html\" target=\"_blank\" rel=\"noopener\">MyBatis Generator</a>，运行逆向工程有如下方式：<ul>\n<li>使用命令提示符读取 XML 配置文件；</li>\n<li>使用 Maven 插件；</li>\n<li>使用 Java 程序读取 XML 配置文件 ( 推荐，即不依赖 IDE )；</li>\n<li>使用 IDE 插件 ( Eclipse )；</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"代码配置文件\"><a href=\"#代码配置文件\" class=\"headerlink\" title=\"代码配置文件\"></a>代码配置文件</h6><ul>\n<li><p>MyBatis 官方提供了配置文档的范例：<a href=\"http://www.mybatis.org/generator/configreference/xmlconfig.html\" target=\"_blank\" rel=\"noopener\">MyBatis GeneratorXML Configuration File Reference</a></p>\n<p>  当然，你可以参考下文 $^{[5]}$，搭配注释，互相补充：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- generatorConfig.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">generatorConfiguration</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"testTables\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否去除自动生成的注释：true / false --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ( 必填 ) 数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接 MySQL 数据库 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://127.0.0.1:3306/db_testdb?characterEncoding=utf-8\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">userId</span>=<span class=\"string\">\"root\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"123456\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接 Oracle 数据库</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;jdbcConnection driverClass=\"oracle.jdbc.OracleDriver\"</span></span><br><span class=\"line\"><span class=\"comment\">            connectionURL=\"jdbc:oracle:thin:@127.0.0.1:1521:db_testdb\" </span></span><br><span class=\"line\"><span class=\"comment\">            userId=\"kofe\" password=\"123456\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/jdbcConnection&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | false ( 默认 )，把 Jdbc Decimal 和 Numeric 类型解析为 Integer</span></span><br><span class=\"line\"><span class=\"comment\">         | true，把 Jdbc Decimal 和 Numeric 类型解析为 java.math.BigDecimal</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- targetProject：生成 PO 类的位置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.kofes.ssm.pojo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\".\\src\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- targetProject:mapper 映射文件生成的位置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.kofes.ssm.mapper\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\".\\src\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- targetPackage:mapper 接口生成的位置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"cn.kofes.ssm.mapper\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\".\\src\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"Item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"Order\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"Orderdetail\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"User\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"sys_user\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"sys_role\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"sys_permission\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"sys_user_role\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"sys_role_permission\"&gt;&lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 有些表的字段需要指定 Java 类型</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;table schema=\"\" tableName=\"\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;columnOverride column=\"\" javaType=\"\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"执行逆向工程生成代码\"><a href=\"#执行逆向工程生成代码\" class=\"headerlink\" title=\"执行逆向工程生成代码\"></a>执行逆向工程生成代码</h6><ul>\n<li><p>配置文件配置完成后，执行以下程序即可生成代码，细节如下：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GeneratorSqlmap</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generator</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; warnings = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> overwrite = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//指定逆向工程配置文件</span></span><br><span class=\"line\">        File configFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"generatorConfig.xml\"</span>); </span><br><span class=\"line\">        </span><br><span class=\"line\">        ConfigurationParser cp = <span class=\"keyword\">new</span> ConfigurationParser(warnings);</span><br><span class=\"line\">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class=\"line\">        DefaultShellCallback callback = <span class=\"keyword\">new</span> DefaultShellCallback(overwrite);</span><br><span class=\"line\">        MyBatisGenerator myBatisGenerator = <span class=\"keyword\">new</span> MyBatisGenerator(config,</span><br><span class=\"line\">            callback, warnings);</span><br><span class=\"line\">        myBatisGenerator.generate(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用 generator() 执行逆向工程生成代码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            GeneratorSqlmap generatorSqlmap = <span class=\"keyword\">new</span> GeneratorSqlmap();</span><br><span class=\"line\">            generatorSqlmap.generator();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>值得注意的是，除了生成基本的 POJO 类还多了一个类，就是 <code>xxxExample.java</code>。这个类是给用户自定义 SQL 使用的。到这里就生成好了，下面我们就把生成的代码 <code>拷贝</code> 到自己的工程即可。</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h4><ul>\n<li>Spring 框架是 Java 应用最广的框架，其成功源于它的理念，即 <code>控制反转</code> ( Inversion of Control，IoC ) 和 <code>面向切面编程</code> ( Aspect Oriented Programming，AOP )。</li>\n<li>Spring 框架也可理解为一个轻量级的 IoC 和 AOP 的容器框架。</li>\n<li><p>Spring 框架在 <a href=\"https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html#Spring\">SSH 部分</a> 有阐述，在本章节就不具体展开探讨，笔记以补充和整合部分内容为主。</p>\n<blockquote>\n<p>在 SSH Spring 章节中，要求导入相关 Jar 包，而本文的 SSM 框架要求导入的 Jar 包 ( 或者 Maven 依赖 ) 以 <code>版本信息</code> 的为标准。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"Spring-整合-MyBatis\"><a href=\"#Spring-整合-MyBatis\" class=\"headerlink\" title=\"Spring 整合 MyBatis\"></a>Spring 整合 MyBatis</h5><p>Spring 整合 MyBatis 是通过 <code>MyBatis-Spring</code> 的类库实现的，具体配置和使用信息可参考 <a href=\"http://www.mybatis.org/spring/zh/index.html\" target=\"_blank\" rel=\"noopener\">MyBatis-Spring 官方使用文档</a> $^{[4]}$。</p>\n<h6 id=\"原始-DAO-开发\"><a href=\"#原始-DAO-开发\" class=\"headerlink\" title=\"原始 DAO 开发\"></a>原始 DAO 开发</h6><p>首先要向 DAO 的实现类中注入 SqlSessionFactory ( 交由 Spring 管理，即 Spring 声明式注入 SqlSessionFactory )，然后在各个方法中得到 SqlSession 进行数据库操作。</p>\n<blockquote>\n<p><code>诉求</code>：在 Spring 运作中，首先加载 Spring 核心配置文件，再创建对象 ( SqlSessionFactory )。而创建对象可通过 New 的方式创建 ( <a href=\"#MyBatis-原始方法\">原始方法</a> )，但效率太低，则我们可以把加载配置文件和创建对象过程，在服务器启动时完成。故引入 Spring 声明式注入 SqlSessionFactory。</p>\n</blockquote>\n<ul>\n<li>使用封装的方法，即让 Dao 的实现类继承 <code>SqlSessionDaoSupport</code>，而 SqlSessionDaoSupport 类中已经存在 <code>setSqlSessionFactory()</code> 方法，因此我们可以直接向 Dao 的实现类注入 SqlSessionFactory。</li>\n<li><p>另外 SqlSessionDaoSupport 中有 SqlSession，因此使得操作更加简单；而且都交给 Spring 管理，我们自然不必担心忘记关闭 SqlSession。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下述实现是通过 XML 配置方式加载配置和 Bean ( 注解方式也是可行的，但写法有区别 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dao 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Sample&gt; <span class=\"title\">findSampleById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dao 层实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">SqlSessionDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSession sqlSession;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDaoImpl</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Expection </span>&#123;</span><br><span class=\"line\">        sqlSession = <span class=\"keyword\">this</span>.getSqlSession();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sample <span class=\"title\">findSampleById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSession.selectOne(</span><br><span class=\"line\">            <span class=\"string\">\"cn.kofes.ssm.mapper.SampleMapper.findSampleById\"</span>, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDaoTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BaseDao baseDao;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        applicationContext = </span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:spring.xml\"</span>);</span><br><span class=\"line\">        baseDao = (BaseDao) applicationContext.getBean(<span class=\"string\">\"baseDao\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindCertainById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( baseDao.findSampleById(<span class=\"number\">15</span>).toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Mapper-代理开发-1\"><a href=\"#Mapper-代理开发-1\" class=\"headerlink\" title=\"Mapper 代理开发\"></a>Mapper 代理开发</h6><ul>\n<li><p>Mapper 代理开发的具体思路：</p>\n<ul>\n<li><p>SqlSessionFactory 交给 Spring 管理 ( 单例模式 )。</p>\n<p>注意到 SqlSessionFactory 的创建显然需要数据库连接相关的信息，因此需要 <code>数据库连接池 (c3p0)</code>；除此之外还需要 MyBatis 的主配置文件 <code>SqlMapConfig.xml</code>。</p>\n</li>\n<li><p>Spring 和 MyBatis 整合生成代理对象，使用 SqlSessionFactory 创建 SqlSession ( Spring 和 MyBatis 整合后自动完成此过程 )。</p>\n</li>\n<li><p>若采用 Mapper 代理的方式开发，我们需要 Spring 管理 Mapper 动态代理实现。</p>\n</li>\n</ul>\n</li>\n<li><p>在 Spring 配置文件下配置数据库信息，并整合 MyBatis。后者将 SessionFacotry 交由 Spring 管理：</p>\n<blockquote>\n<p>c3p0.properties 配置文件位于 Src 根目录下，键值分离以便修改配置。</p>\n</blockquote>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring.xml --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描包下注解，并注册为 Bean --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.kofes.ssm\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"annotation\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"org.springframework.stereotype.Controller\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context:exclude-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">          </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在根目录下新建文件 c3p0.properties，存储数据连接信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:c3p0.properties\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Dao 层的配置，即 Mybatis 的配置 ( 分模块开发思想 ) --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring/mybatis-spring.xml\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis-spring.xml --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans.xsd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1. 数据源 : DriverManagerDataSource --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用 c3p0.properties 的键值对即可，格式如 $&#123;key.value&#125; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.driverClass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.jdbcUrl&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.minPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.initialPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdleTime\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxIdleTime&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxStatements&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireIncrement\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.acquireIncrement&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"checkoutTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.checkoutTimeout&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"idleConnectionTestPeriod\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.idleConnectionTestPeriod&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 2. 配置和 MyBatis 的整合 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 3. 配置一个可以执行批量的 SqlSession --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSession\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionTemplate\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"executorType\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"BATCH\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 4. MyBatis 自动扫描加载 Sql 映射文件: MapperScannerConfigurer</span></span><br><span class=\"line\"><span class=\"comment\">     | 自动扫描出的 Mapper Bean 的 ID 名称为首字母小写的类名</span></span><br><span class=\"line\"><span class=\"comment\">     | 且效果与 SqlMapConfig.xml 中配置批量加载映射文件相同，即 &lt;package name=\"cn.kofes.ssm.mapper\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     | 1) 批量加载映射文件：mapper.java 与 mapper.xml 同名，且在同一目录下</span></span><br><span class=\"line\"><span class=\"comment\">     | 2) 当然，你可以建立同样的文件夹目录 (cn/kofes/ssm/mapper)，把 mapper.xml 单独放置资源目录下</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.kofes.ssm.mapper\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码实现：注解方式实现 Mapper 类的调用：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下述实现是通过注解方式加载配置和 Bean ( XML 方式也是可行的，但写法有区别 )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mapper 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SampleMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sample <span class=\"title\">findCertainTupleById</span><span class=\"params\">(Integer id)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ContextConfiguration</span>(<span class=\"title\">locations</span> </span>= &#123;<span class=\"string\">\"classpath:spring.xml\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SampleMapper sampleMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindCertainTupleById</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println( </span><br><span class=\"line\">            sampleMapper.findCertainTupleById(<span class=\"number\">15</span>).toString() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h4><ul>\n<li>MVC ( Model-View-Controller ) 模式把应用程序 ( 输入逻辑、业务逻辑和 UI 逻辑 ）分成不同的方面，同时提供这些元素间的松耦合。<ul>\n<li>Model：模型，封装了应用程序的 <code>数据</code> 和由它们组成的 <code>POJO</code>。</li>\n<li>View：视图，负责把模型数据 <code>渲染到视图</code> 上，将数据以一定形式展现给用户。</li>\n<li>Controller：负责 <code>处理用户请求</code>，并建立适当的模型把它传递给视图渲染。</li>\n</ul>\n</li>\n<li>Spring MVC 把 <code>模型</code>、<code>视图</code> 和 <code>控制器</code> 分层，组合成一个有机灵活的系统。</li>\n<li>Spring MVC 中可定义逻辑视图，通过其提供的解析器找到对应的视图渲染；或在 Controller 的方法内加入注解 ( <code>@ResponseBody</code> )，通过消息转换系统将数据转换为 JSON，提供给前端 Ajax 请求使用。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://book.douban.com/subject/27090950/\" target=\"_blank\" rel=\"noopener\"> 杨开振. Java EE 互联网轻量级框架整合开发 [M]. 电子工业出版社. 2017</a></li>\n<li>[2] <a href=\"https://www.jianshu.com/p/91a32e3d4b26\" target=\"_blank\" rel=\"noopener\">张丰哲. MyBatis + Spring MVC 开发指南 (一). 简书. 2017</a></li>\n<li>[3] <a href=\"https://www.jianshu.com/p/48b78ee24fa3\" target=\"_blank\" rel=\"noopener\">张丰哲. MyBatis + Spring MVC 开发指南 (二). 简书. 2017</a></li>\n<li>[4] <a href=\"http://www.mybatis.org/spring/zh/index.html\" target=\"_blank\" rel=\"noopener\">MyBatis. MyBatis-Spring 官方使用文档. mybatis.org</a></li>\n<li>[5] <a href=\"https://blog.csdn.net/yerenyuan_pku/article/details/71909325\" target=\"_blank\" rel=\"noopener\">李阿昀. MyBatis 逆向工程自动生成代码. csdn.net. 2017</a></li>\n</ul>\n","categories":["Project"],"tags":["J2EE","JSP","SSM","MyBatis","Spring","Spring MVC"]},{"title":"乔布斯营销方法论：如何打造伟大品牌","url":"/2023/06/SteveJobs-how-to-build-a-great-brand.html","content":"<div class=\"note default\"><p>作者：Steve Jobs<br>视频：<a href=\"https://www.bilibili.com/video/BV1Da411L7aM\" target=\"_blank\" rel=\"noopener\">Steve Jobs. 如何打造伟大品牌 [OL]. bilibili.com</a></p></div>\n<p>营销是关于价值观的事，在这一个复杂喧嚣世界里，我们没机会让人们铭记太多。打破砂锅问到底，营销一家企业、一个品牌，最终想让消费者了解我们什么？这是当时苹果再出发要思考的命题。</p>\n<a id=\"more\"></a>\n<ul>\n<li>一个伟大品牌需要投资和呵护才能维持地位和活力。苹果却忽略了这一点，即使苹果在广告方面投入也花了不少钱，所以得拨乱反正，赢回局面。<ul>\n<li>我们不谈论各种技术指标，也不谈论为啥比同行好，我们来谈一谈非传统营销思路。</li>\n<li>奶制品行业花了 20 年来说服牛奶对身体好，事实上这是个谎言（乔布斯是一位极端素食主义者）。<a href=\"https://baike.baidu.com/item/GOT%20MILK/9078010?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Got Milk</a> 则另辟蹊径，他们的广告不提及产品，而是通过强大明星阵营演出，让明星都挂上经典的 “牛奶胡须”。即给消费者一种暗示，喝牛奶可以长肌肉、补钙、长高，还有喝脱脂牛奶减肥。</li>\n<li><a href=\"https://www.bilibili.com/video/BV1Rt411D7eD\" target=\"_blank\" rel=\"noopener\">Nike Dream Crazy</a> 广告也不谈及产品，也不讲 Air soles 气囊要比锐步的好。他们在广告里赞美伟大的运动员，赞美伟大的运动。</li>\n</ul>\n</li>\n<li>那么，苹果公司想让消费者知道他们是什么，代表什么，以及处于世界什么位置？<ul>\n<li>苹果核心价值观，让有激情的人改变世界，那些疯狂到认为自己能改变世界的人往往能真正改变世界。</li>\n<li>苹果再一次起航，首个品牌营销广告《非同凡想》就得回到核心价值观上 — 赞美那些改变世界的人。</li>\n<li>最终，赞美非同凡想的人去推动这个世界进步。这就是关于我们是什么的最好阐释，它也直抵苹果的灵魂。</li>\n</ul>\n</li>\n</ul>\n","categories":["Marketing"],"tags":["乔布斯","营销","品牌"]},{"title":"乔布斯营销方法论：市场定位与如何做营销","url":"/2023/06/SteveJobs-how-to-do-marketing.html","content":"<div class=\"note default\"><p>作者：Steve Jobs<br>视频：<a href=\"https://www.bilibili.com/video/BV1YX4y1M7vF?vd_source=b25ae18ba1c075fd10ba8f5f9b9943e1\" target=\"_blank\" rel=\"noopener\">Steve Jobs. NeXT 公司内部分享《市场定位》和《如何做营销》[OL]. bilibili.com</a></p></div>\n<p>讲座中，乔老爷子谈及的三个问题，刚好对标上客户、产品、渠道三大市场经营活动要素。让我们带着问题听讲座，结合工作实际，去领会乔老爷子营销方法论的巧妙所在吧。</p>\n<blockquote>\n<p>讲座种提到 NeXT，他是乔布斯 1985 年被苹果董事会赶走之后成立的一家电脑公司，专门制造和开发高等教育和商业市场上的工作站电脑。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li><p>Q1：谁是我们的目标客户？</p>\n<blockquote>\n<p>不妨学习毛主席的社会各阶层分析方法，把用户做到显微级的分层管理与经营。</p>\n</blockquote>\n</li>\n<li><p>Q2：客户为什么选择了我们的产品，而非竞争对手的产品？</p>\n</li>\n<li>Q3：我们将用什么样的推广渠道来触达目标客户？</li>\n</ul>\n<h2 id=\"观点\"><a href=\"#观点\" class=\"headerlink\" title=\"观点\"></a>观点</h2><h3 id=\"寻找目标客户\"><a href=\"#寻找目标客户\" class=\"headerlink\" title=\"寻找目标客户\"></a>寻找目标客户</h3><ul>\n<li><p>分析竞争对手：工作站（HP、IBM）、消费级电脑（PC、Mac）</p>\n<ul>\n<li>工作站市场：拥有强大多任务处理能力、网络性能等，但普遍不注重用户体验设计、第三方软件生态建设。</li>\n<li>消费级电脑：NeXT 拥有媲美当时 Mac 操作系统的用户体验，且拥有强大的硬件性能。然而并没有为他带来竞争优势。</li>\n</ul>\n</li>\n<li><p>此时，NexT 市场定位是打造更好用的工作站，还是性能更强大的消费级电脑？深入调研之后再下定论：</p>\n<ul>\n<li><p>工作站：服务科学研究和工程领域的电脑。</p>\n<blockquote>\n<p>专业工作站市场：指希望得到工作站计算能力的专业人士。比如，出版业、数据库驱动的医疗应用、高等教育等细分领域市场。再延伸想想，当今自媒体时代 MacPro 能独占鳌头，也算得上是细分市场后的产物。</p>\n</blockquote>\n</li>\n<li><p>与个人电脑市场相比，工作站市场更小，但 NeXT 似乎找到了该领域的蓝海市场。</p>\n</li>\n</ul>\n</li>\n<li><p>NexT 相信自家进入该领域必定带来市场增长。其中原因有：</p>\n<ul>\n<li><p>其一：并非服务科学研究和工程的市场的科学家、工程师都不干专业工作了，而是原有 PC / Mac 用户进入了该市场，他们需要更复杂网络、更高级的开发环境。</p>\n<blockquote>\n<p>乔老爷子开玩笑工程师们都去读 MBA 啦~ 😝</p>\n</blockquote>\n</li>\n<li><p>其二：很多传统用户现在还在用终端模拟器，连接服务器开发数据库应用。然而，越来越多用户把应用移植到更强大的工作站上，相比连接服务器方式，后者可以获得更快的开发速度、更好用户体验以及经济效益。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"客户主动选择\"><a href=\"#客户主动选择\" class=\"headerlink\" title=\"客户主动选择\"></a>客户主动选择</h3><ul>\n<li><p>究竟是什么因素促使这些客户转移到专业工作站这一新兴市场，并选择我们的产品？</p>\n</li>\n<li><p>其中原因：</p>\n<ul>\n<li>用户有写定制软件的需要（想要 -&gt; 需要 -&gt; 需求），开发关键性任务软件，开发环境对他们来说格外重要。</li>\n<li>他们的应用程序需要大量使用网络、需要非常复杂的网络功能，而这些都是传统 PC、Mac 上欠缺的。</li>\n<li>他们的应用程序多数是由数据驱动的，他们希望在桌面级计算机上开发应用程序，而桌面运行的应用程序需要通过复杂网络和 SQL 数据库通信（数据库通常运行在大型服务器上），即用户需要与大型服务器上的数据库无缝连接的能力。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"触达目标客户\"><a href=\"#触达目标客户\" class=\"headerlink\" title=\"触达目标客户\"></a>触达目标客户</h3><ul>\n<li><p>该部分用户决定进入新领域，我们凭借什么击败竞争对手？</p>\n</li>\n<li><p>具体策略：</p>\n<ul>\n<li>定制办公软件，促使人们从 PC 升级到工作站。</li>\n<li>优秀生产力应用软件，比如 Lotus Improv、Word Perfect、Adobe Illustrator（类似现在的 Excel、Word、AI）。</li>\n<li><p>人际沟通，通过这些高级台式机增强团队协同能力与提高办公效率。</p>\n<blockquote>\n<p>当时环境人们还看不到人际沟通的价值。但最好的营销就是教育，让用户一次又一次体验中，领会工作站上协同办公的价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Marketing"],"tags":["乔布斯","营销","细分市场","NeXT"]},{"title":"论文 | 归类分析 GPS 以预测车辆停留意图信息","url":"/2018/06/Stop-purpose-classification-from-GPS-data-of-commercial-vehicle-fleets.html","content":"<div class=\"note default\"><p>原文：Stop purpose classification from GPS data of commercial vehicle fleets<br>作者：Sarti L, Bravi L, Sambo F.<br>来源：Data Mining Workshops, 2017 IEEE International Conference on. IEEE, 2017: 280-287.  </p></div>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>从原始 GPS（全球定位系统）数据中提取 <code>汽车停靠意图数据</code> 是大多数位置感知应用程序中的关键任务，且随着从移动设备收集 GPS 数据的不断增长，这项任务变得越来越有趣。近期很多研究都集中在行人手机数据上（可理解为红海市场），而商用车领域几乎没有探索（蓝海市场）。</p>\n<p>在本论文中，针对车辆 GPS 数据的汽车停靠意图的 <code>识别</code> 和 <code>分类</code> 问题 (利用来自不同行业的商业车队的大型异构数据集)，按照意图分类，旨在把汽车停靠点分类为：<code>工作相关</code> 和 <code>非工作相关</code>，以挖掘相关商业价值。</p>\n<p>还对每个汽车停靠点计算一组含 100 个不同特征的集合，特征可分为四个主要类别：<code>汽车停靠点特征</code>，<code>兴趣点特征</code>，<code>汽车停靠点集群特征</code> 和 <code>序列特征</code>。并组合四组特征，加入训练，通过随机森林分类模型，我们得以评估四组特征中每个特征的相对重要性。</p>\n<blockquote>\n<p>强特征可有效地提升分类模型的精度。</p>\n</blockquote>\n<p>实验结果表明，本论文的方法显着地超越了现有商业车辆背景下用于汽车停靠意图的分类模型。</p>\n<a id=\"more\"></a>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>在过去的十年中，GPS 设备的巨大推广，使得人们越发关注 <code>数据挖掘算法</code> 在 <code>时空数据</code> (GPS 产生的数据) 中的应用。而许多实际应用需要使用关于 <code>用户行为</code> 和 <code>地理位置的语义信息</code>。例如，下述的两个实例：</p>\n<ul>\n<li>基于用户的历史位置以衡量用户之间的相似度 $^{[1]}$；</li>\n<li>基于位置的兴趣地点推荐系统 $^{[2]}$。</li>\n</ul>\n<p>语义标记 GPS 数据，目标旨在 <code>识别</code> 和 <code>归类</code> GPS 沿途轨迹上的位置信息，即具体工作有 <code>语义位置的侦察</code> 和 <code>汽车停靠或出游的意图归类</code>。尽管上述问题不是同一类型的问题，但却是强相关的。例如，对多个用户而言具有相同意图的共同定位点，可能是语义上相关联的地方，因为知道某个地方的语义对分类每个汽车停靠点意图有很大的帮助。</p>\n<p>通常，对于上述 <code>识别</code> 和 <code>归类</code> 问题的解决方法分两个阶段执行：</p>\n<ul>\n<li><p><code>侦查兴趣地点</code>：通常以非监督的方式实现位置侦查 $^{[3,4]}$，而作者提出了基于 <code>DBSCAN</code> $^{[5\\,or\\,6]}$ 的修改版本的聚类算法，或者利用层次聚类从汽车停靠位置中提取访问点。</p>\n<blockquote>\n<p>当要处理非常大的数据集时需要考虑计算性能的问题，可参考其他论文中的扩展方法，例如对地点坐标进行哈希散列法 $^{[7,8]}$。</p>\n</blockquote>\n</li>\n<li><p><code>对侦查到的地点分类</code>：对有关地点或汽车停靠点进行分类，可以在文献中找到两种主要方法：</p>\n<ul>\n<li>基于规则的系统 $^{[9,10]}$，其主要依赖于活动的位置、土地利用的数据以及机器学习方法，即活动本身提取特征；</li>\n<li><p>利用 SVM 分类器来区分标识位置内的活动停靠点和非活动停靠点。分类器 (SVM，随机森林或逻辑回归) 利用时间和空间特征 $^{[6]}$，以及隐马尔可夫模型 (HMM) 利用时序特征把这些汽车停靠点分类为预定义类型。</p>\n<blockquote>\n<p>1) SVM 提取三个主要特征：停车驻留时间，每个汽车停靠地段周围的点到质心的平均距离。<br>2) 地点的语义分类是基于 GPS 数据和卫星图像的组合而定的 $^{[8]}$。  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>最后，本论文解决了与参考文献 [7] 的同样问题，即利用四个不同的特征集，使用一个随机森林分类器，对商业车队的汽车停靠意图数据进行分类建模。且本文的主要贡献如下：</p>\n<ul>\n<li>描述了一种方法，即从 GPS Pings (GPS 定位仪) 中提取汽车停靠点信息，并从运作状态的停车时间表 ( 已知的地点信息 ) 中給它们分配地面实况标签，实际是 <code>标注标签的过程</code>;</li>\n<li>基于以上带标签的数据集，<code>建立模型</code>，<code>自动分类</code> 汽车停靠点，即区分工作相关和非工作相关的停靠点;</li>\n<li>提供了严格评估的多类型 <code>特征集</code>，便于我们处理问题 (提高分类精确度)，其中包括：<ul>\n<li>汽车停靠点特征 (Stop-wise features，SWF)；</li>\n<li>兴趣点特征 (Points of interest features，POIF)；</li>\n<li>停靠点集群特征 (Stop Cluster，CF)；</li>\n<li>序列特征 (Sequential features，SeqF).</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"GPS-和工单数据的定义\"><a href=\"#GPS-和工单数据的定义\" class=\"headerlink\" title=\"GPS 和工单数据的定义\"></a>GPS 和工单数据的定义</h4><ul>\n<li>本论文采用的数据集由 Fleetmatics 公司 (车队情报公司) 提供。</li>\n<li>采集的数据有两种类型，分别是 <code>原始 GPS Pings 数据</code> 和 <code>工单数据</code>。<ul>\n<li>原始 GPS Pings 数据<ul>\n<li>提供有关车辆位置的信息、工单状态的信息、有关司机执行工作的进度信息；</li>\n<li>设定有一系列的 GPS Pings ${P<em>i}</em>{i=1}^n = {P_1, …, P_n}$ 分别描述每辆车行驶的路线。</li>\n<li>每一个 GPS Ping $P_i$ 包含每辆车的状态信息，即有车辆 ID $v_i$，经度和纬度 (位置信息 $p_i$)，里程表 $d_i$，时间戳 $t_i$ 和 事件代码 $e_i$。</li>\n</ul>\n</li>\n<li>工单数据<ul>\n<li>设定有一系列的工单 ${W<em>i}</em>{i=1}^n = {W_1, …, W_n}$。</li>\n<li>每一个工单包含的信息有：车辆 ID $v_i$，经度和纬度 (位置 $p_i$)，时间戳 $t_i$ 和 状态代码 $c_i$ (例如：挂起，启动，完成)。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"侦查车辆停靠状态的方法\"><a href=\"#侦查车辆停靠状态的方法\" class=\"headerlink\" title=\"侦查车辆停靠状态的方法\"></a>侦查车辆停靠状态的方法</h4><p>正如上述所描述的，关于瞬时车辆位置的原始数据是由 GPS Ping 组成的，将它们汇集起来以描述车辆的活动。为此本论文开发了一个 <code>时空聚类程序</code>。</p>\n<ul>\n<li>首先得为每个 GPS 信息分配一种状态类型 (Engine off，iDling，Journey)，然后把它们聚集成 GPS Ping 群组，并把这个 GPS Ping 群组称为 <code>汽车停靠点集</code>。</li>\n<li>GPS Ping 的状态可分为三种类型：<ul>\n<li><code>Engine Off (发动机关闭状态)</code>：发动机关闭事件。即这些 Ping 在发动机关闭的瞬间产生的 (当发动机处于关闭状态时不发送 Ping);</li>\n<li><code>iDling (空转/怠速状态)</code>：发动机处于开启状态，但车辆静止或车辆在小区域内仍然缓慢行驶。对于后者，我们还需要作一些约束，设定 $H(p<em>i,p</em>{i-1})$ 表示两点间的半正定距离。然后，对于给定车辆给予一对连续的 Ping $P<em>i\\,and\\,P</em>{i-1}$，且满足以下约束，则可定义为怠速：<ul>\n<li>$s<em>i = H(p_i,p</em>{i-1})\\,/\\,(t<em>i - t</em>{i-1}) \\leq 1.4\\,m/s\\,(5km/h)$，确定速度接近零；</li>\n<li>$H(p<em>i,p</em>{i-1}) \\leq 150\\,m$，确保 $P_{i-1}\\,and\\,P_i$ 足够接近，且避免了由于丢失数据而产生的 <code>伪影</code>。</li>\n</ul>\n</li>\n<li><code>Journey (行驶状态)</code>：即不是发动机关闭状态，也不是怠速状态。</li>\n</ul>\n</li>\n<li>当 Ping 被分类后，以每辆车为单位，按时间顺序排序；并把所有连续的怠速状态和发动机关闭状态的 Ping 聚集成集群 (并不会被其中 Journey 状态的 Ping 給分割开来)。</li>\n<li><p>由于丢失数据，导致一组连续的怠速状态 Ping 彼此相对较远地分布开来。故我们得重新执行 <code>时间-空间</code> 的约束条件 ($s<em>i \\leq 1.4\\,m/s$ and $H(p_i,p</em>{i-1}) \\leq 150\\,m$)。</p>\n<blockquote>\n<p>无法满足约束条件：即一组连续的怠速状态 Ping 将被分隔得很远，其中的 Journey 状态的 Ping 都给丢失了。 </p>\n</blockquote>\n</li>\n<li><p>以这种方式创建的 <code>Pings 集群</code> 代表我们想要分类的 <code>已标识汽车停靠点</code>。综上所述，汽车停靠点被定义为按时间顺序排序的 Pings  集群 (包含怠速状态或发动机关闭状态的 Pings，并且满足进一步的 <code>时间-空间</code> 约束条件。</p>\n</li>\n<li>每个 <code>汽车停靠点</code> 都有几个特性 ( 通过计算其中的 Ping )：Ping 的数量，停靠点的起点和终点 ( 属于该停靠点的 Ping 的第一个和最后一个时间戳 )，驻留时间 ( 属于该停靠点的起始时间和结束时间 ) 和形状 ( 由GPS消息的最大 (最小) 纬度/经度坐标定义 )。</li>\n<li>所有这些信息对于在第二阶段提取特征工作至关重要，即汽车停靠点意图的分类。</li>\n</ul>\n<h4 id=\"标注标签\"><a href=\"#标注标签\" class=\"headerlink\" title=\"标注标签\"></a>标注标签</h4><ul>\n<li>首先，对上述程序中获得的汽车停靠点分配 <code>地面实况标签</code>。</li>\n<li>再者，将它们与 <code>工单数据</code> 进行匹配。一般来说，若车辆停留点在时间上和空间上与工单数据 $W_i$ 相匹配，则可认为该汽车停靠点就是该工单数据。<ul>\n<li><code>空间匹配</code>：对于只包含 idling 和 engine off 状态的停靠点，我们认为它满足空间上的匹配。</li>\n<li><code>时间匹配</code>：对于任何工单，空间上匹配了停留点；如果停留点的驻留时间与工单的时间项 (指示作业已启动的时间和指示服务已结束的时间) 间隔相交，时间的匹配也随着满足。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分类特征\"><a href=\"#分类特征\" class=\"headerlink\" title=\"分类特征\"></a>分类特征</h4><p>在 <code>车辆停靠侦查技术</code> 章节中描述的，从一系列的 GPS Pings 提取汽车停靠点，并从中提取 100 个不同的特征用于训练随机森林模型，随之将这些特征划分为 4 个不同的组：</p>\n<ul>\n<li><p>汽车停靠点特征 ( Stop-wise features，SWF )：</p>\n<ul>\n<li>驻留时间：(汽车) 停靠点第一个和最后一个 Ping 的时间差。</li>\n<li><p>开始时间特征：一天中的小时，一周中的某天，某月某日，某年某日等。</p>\n<blockquote>\n<p>是否统一时间表示方式 (时间戳)： yyyy-MM-dd HH:mm</p>\n</blockquote>\n</li>\n<li><p>关闭引擎所花费的时间：对于每一个引擎关闭事件，我们计算当前 Ping 与前一个非引擎关闭状态的 Ping 之间的时间差，以表示引擎启动的时间。由于每个停靠点包含多个引擎关闭状态的 Ping，我们需要使用几个聚合函数聚合取得结果。</p>\n</li>\n<li>形状：停靠点的宽度、高度、面积、比例。</li>\n<li>停靠点类型：发动机关闭状态。</li>\n<li>停靠点中发动机关闭状态 Ping 的数量。</li>\n<li>里程表距离：从第一次 Ping 到最后一次 Ping 的里程表距离。</li>\n<li>停靠点内 Ping 的总数。</li>\n<li>平均速度 (根据停留点中第一次和最后一次 Ping 之间的里程差除以驻留时间计算所得)。</li>\n</ul>\n</li>\n<li>兴趣点特征 ( Points of interest features，POIF)：利用 <code>PTV xLocate Server</code> 中提取以下 POI 类型：<ul>\n<li>银行;</li>\n<li>大学;</li>\n<li>酒店;</li>\n<li>餐厅;</li>\n<li>休息区;</li>\n<li>杂货店;</li>\n<li>学校;</li>\n<li>购物中心;</li>\n<li>汽油;</li>\n<li>开放式停车场;</li>\n</ul>\n</li>\n<li><p>汽车停靠点集群特征 ( Stop cluster features，CF )：描述当前停靠点集周围停靠点的特征所组成的特征集。其原理是，存在一些工作状态的工单和非工作状态的工单数据，趋向于聚类成簇。类似于 [7] 中提出的熵度量方法：对于每个停靠点，查看并收集 250 米半径内的周边环绕的停靠点数据。</p>\n<ul>\n<li><p>车辆熵，计算公式为：</p>\n<script type=\"math/tex; mode=display\">E_v = - \\sum_{\\nu \\in V} \n  \\frac{n_{\\nu}}{N} ln(\\frac{n_{\\nu}}{N})\n  \\tag{1}</script><blockquote>\n<p>$V$ 是车队中的车辆集合， $N$ 是 250 米半径范围内车队所有车辆的总停留点数，$n_{\\nu}$ 是车辆 $\\nu$ 在同一区域停靠的总次数。这个熵度量给出了一个区域内同一车队车辆的多样性。</p>\n</blockquote>\n</li>\n<li><p>簇中汽车停靠点的平均，总和，最大和最小驻留时间。</p>\n</li>\n<li>邻近汽车停靠点的数量 (在其质心250米半径以内)。</li>\n</ul>\n</li>\n<li><p>序列特征 (Sequential features，SeqF)：</p>\n<ul>\n<li><code>工作日内停车的次序位置</code>：同一辆车在白天按照停车先后顺序的 (归一化的) 相对位置。</li>\n<li><code>停车所涵盖的时间百分比</code>：停车行为在工作日中的时间占比 ( 注意该值与工作日的开始相关，且工作日的开始由一天中第一个 Ping 定义 )。这也是司机夜间休息时间的近似假设。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><blockquote>\n<p>实验过程请参考原文献，篇幅问题就不照搬文章内容了。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>本文基于商用车队的 GPS 数据研究了停车目的识别和分类问题。</li>\n<li>为了建立地面真实数据集，通过查看考虑到每辆车的工作单进度数据，开发了一个时空聚类算法，实现了一个自动标注标签过程；</li>\n<li>为了提高分类精确度，从 GPS Ping 数据中提取了 4 组不同的特征 ( SWF、POIF、CF 和 SeqF )；</li>\n<li>利用提取的特征训练随机森林模型，并与两种基线模型进行性能比较。实验结果表明，本文提取总结的 4 组特征显著提高了随机森林的分类能力。</li>\n</ul>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>在车辆停靠点侦查技术章节中，使用的是非监督方式的算法，即基于密度的 DBSCAN 聚类算法。其中涉及密度阈值的设定多少问题，就需要对具体样本量进行考究才能决定。</li>\n<li>数据集是否可用于处理多分类问题。例如，通过扩大标签集以包含更具体的停车类型，而不仅仅限制于二元标签 ( 工作状态与非工作状态 )。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>[1] Horozov T, Narasimhan N, Vasudevan V. Using location for personalized POI recommendations in mobile environments [C]//Applications and the internet, 2006. SAINT 2006. International symposium on. IEEE, 2006: 6 pp.-129.<br>[2] Jiang K, Yin H, Wang P, et al. Learning from contextual information of geo-tagged web photos to rank personalized tourism attractions [J]. Neurocomputing, 2013, 119: 17-25.<br>[3] Palma A T, Bogorny V, Kuijpers B, et al. A clustering-based approach for discovering interesting places in trajectories [C]//Proceedings of the 2008 ACM symposium on Applied computing. ACM, 2008: 863-868.<br>[4] Gong L, Sato H, Yamamoto T, et al. Identification of activity stop locations in GPS trajectories by density-based clustering method combined with support vector machines [J]. Journal of Modern Transportation, 2015, 23(3): 202-213.<br>[5] Ester M, Kriegel H P, Sander J, et al. A density-based algorithm for discovering clusters in large spatial databases with noise [C]//Kdd. 1996, 96(34): 226-231.<br>[6] Lv M, Chen L, Xu Z, et al. The discovery of personally semantic places based on trajectory data mining [J]. Neurocomputing, 2016, 173: 1142-1153.<br>[7] Gingerich K, Maoh H, Anderson W. Classifying the purpose of stopped truck events: An application of entropy to GPS data [J]. Transportation Research Part C: Emerging Technologies, 2016, 64: 17-27.<br>[8] Sambo F, Salti S, Bravi L, et al. Integration of GPS and satellite images for detection and classification of fleet hotspots [C]//Intelligent Transportation Systems (ITSC), 2017 IEEE 20th International Conference on. IEEE, 2017: 1-6.<br>[9] Wolf J, Guensler R, Bachman W. Elimination of the travel diary: Experiment to derive trip purpose from global positioning system travel data [J]. Transportation Research Record: Journal of the Transportation Research Board, 2001 (1768): 125-134.<br>[10] Bohte W, Maat K. Deriving and validating trip purposes and travel modes for multi-day GPS-based travel surveys: A large-scale application in the Netherlands [J]. Transportation Research Part C: Emerging Technologies, 2009, 17(3): 285-297.  </p>\n","categories":["Paper"],"tags":["数据挖掘","聚类","机器学习","分类","特征提取"]},{"title":"Java 快速上手教程","url":"/2017/09/Java-in-a-Nutshell.html","content":"<p>由于对图灵出品的 O’Reilly 动物书情有独钟，至此本篇文章以动物书系列之 <a href=\"https://book.douban.com/subject/26674131/\" target=\"_blank\" rel=\"noopener\">Java 技术手册</a> 为主要框架，开启我的 Java 语言学习旅程。</p>\n<p>当然，通读一遍本书之后，你会发现本书对 Java 基础知识部分的讲述一定是有所欠缺的，所以课后补充工作很有必要。如通过参考其他 Java 书籍（下文中有参考书目推荐）、优秀博文的补充，核心需求就是要输出一份便于常翻阅、可复用的读书笔记、学习笔记。</p>\n<p>需要说明的是，笔记当中会包含实际项目当中深入了解、研究的知识点，如 Class 类文件结构、Java 范型等。既经由分析、解决、随之文档化的过程，这不仅仅可作为自己的案例库，也可用于分享、交流。毕竟自身的知识面是非常有限的，有不恰当之处、不正确的地方，欢迎广大朋友的帮忙、斧正，互为补足。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>参考书目</p>\n</blockquote>\n<ul>\n<li>基础篇：《 Java 技术手册 》:  O’Reilly 动物书系列，因本书籍不会刻意去阐述面向对象编程（Object Oriented Programming，OOP）的相关概念、内容，适合对 OOP、Java 编程语言有一定了解后，所使用的学习材料。</li>\n<li>进阶篇：《 Java编程思想 / Thinking in Java 》：待阅读。贴上本书豆瓣的书评，供朋友评判，做出抉择。<a href=\"https://book.douban.com/subject/2130190/\" target=\"_blank\" rel=\"noopener\">TIJ(中文第四版)</a> | <a href=\"https://book.douban.com/subject/2061172/\" target=\"_blank\" rel=\"noopener\">TIJ(英文第四版)</a></li>\n</ul>\n<blockquote>\n<p>优秀博文</p>\n</blockquote>\n<ul>\n<li><a href=\"http://wdxtub.com/2012/09/11/awesome-java/\" target=\"_blank\" rel=\"noopener\"> 索引 - 小土刀. Java 资源索引. 2012. wdxtub.com</a> </li>\n<li><a href=\"https://github.com/akullpp/awesome-java\" target=\"_blank\" rel=\"noopener\"> 索引 - Akullpp. Awsome Java. 2018. github.com</a></li>\n<li><a href=\"https://github.com/Blankj/AndroidStandardDevelop\" target=\"_blank\" rel=\"noopener\"> 规范 - BlankJ. Java / Android 开发规范. 2017. github.com</a></li>\n<li><a href=\"https://github.com/biezhi/30-seconds-of-java8\" target=\"_blank\" rel=\"noopener\"> API - BieZhi. 30 Seconds Of Java8. 2018. github.com</a></li>\n</ul>\n<blockquote>\n<p>开源项目</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Blankj/awesome-java-leetcode\" target=\"_blank\" rel=\"noopener\"> BieZhi. Awesome Java Leetcode. 2018. github.com</a> ( 学习数据结构和算法或打算刷 LeetCode 的伙伴们推荐阅读 )</li>\n<li><a href=\"https://www.ctolib.com/java/categoriesallsub.html\" target=\"_blank\" rel=\"noopener\"> CTOlib. Java 实战类库与框架. 2018. ctolib.com</a></li>\n</ul>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><ul>\n<li>2017.09.01：整理 Notes 草稿；</li>\n<li>2017.09.14：输出 Markdown 文档；  </li>\n<li>2018.01.30：完成序言；</li>\n<li>2018.03.20：更新正文 ( 共 10 章 )；</li>\n<li>2018.04.30：更新完毕；</li>\n<li>2019.10.07：更新 Java 集合章节内容；删除第六章节的内容。</li>\n</ul>\n<h2 id=\"内容总览\"><a href=\"#内容总览\" class=\"headerlink\" title=\"内容总览\"></a>内容总览</h2><ul>\n<li><a href=\"#壹-Java-环境介绍\">壹 Java 环境介绍</a>  </li>\n<li><a href=\"#贰-Java-基本句法\">贰 Java 基本句法</a></li>\n<li><a href=\"#叁-Java-面向对象编程\">叁 Java 面向对象编程</a></li>\n<li><a href=\"#肆-Java-类型系统\">肆 Java 类型系统</a>  </li>\n<li><a href=\"#伍-Java-的面向对象设计\">伍 Java 的面向对象设计</a>  </li>\n<li><a href=\"#陆-Java-实现内存管理和并发编程\">陆 Java 实现内存管理和并发编程</a>  </li>\n<li><a href=\"#柒-编程和文档约定\">柒 编程和文档约定</a>  </li>\n<li><a href=\"#捌-使用-Java-集合\">捌 使用 Java 集合</a>  </li>\n<li><a href=\"#玖-处理常见的数据格式\">玖 处理常见的数据格式</a>  </li>\n<li><a href=\"#拾-处理文件和-I-O\">拾 处理文件和 I/O</a>  </li>\n<li><a href=\"#拾壹-类加载、反射和方法句柄\">拾壹 类加载、反射和方法句柄</a>  </li>\n</ul>\n<h2 id=\"壹-Java-环境介绍\"><a href=\"#壹-Java-环境介绍\" class=\"headerlink\" title=\"壹 Java 环境介绍\"></a>壹 Java 环境介绍</h2><h3 id=\"JVM-程序、环境\"><a href=\"#JVM-程序、环境\" class=\"headerlink\" title=\"JVM - 程序、环境\"></a>JVM - 程序、环境</h3><ul>\n<li>Java 虚拟机 (Java Virtual Machine，JVM)。</li>\n<li>JVM 是一个程序，提供运行 Java 程序所需的运行时环境。</li>\n<li>应用代码的容器。</li>\n<li>提供一个安全、跨平台的执行环境。</li>\n<li>Java 源码 -&gt; Java 字节码 (*.class) -&gt; JVM (即字节码格式程序的解码器，即图 1-1 中的解释器)。</li>\n</ul>\n<h3 id=\"Java-程序的生命周期\"><a href=\"#Java-程序的生命周期\" class=\"headerlink\" title=\"Java 程序的生命周期\"></a>Java 程序的生命周期</h3><ul>\n<li><p>Java 代码的编译和加载：</p>\n<ul>\n<li>整个流程从 Java 源码开始，经过 <code>Javac</code> 程序处理后得到 <code>类文件</code>，类文件保存的是编译源码后得到的 Java 字节码。类文件是 Java 平台能处理的最小功能单位，也是把新代码传给运行中程序的唯一方式。</li>\n<li>新的类文件通过类加载机制载入虚拟机，从而把新类型提供给解释器执行。</li>\n<li><p>Java 代码的编译和加载过程，如图 1-1 所示。</p>\n<p>  <img src=\"/images/illustration/Programme/2017/09/Java_in_a_Nutshell_1-1.png\" alt=\"Java代码的编译和加载过程\"></p>\n  <center>图 1-1 Java 代码的编译和加载过程</center>\n</li>\n</ul>\n</li>\n<li><p>其中，涉及了 <code>机器码</code> 与 <code>字节码</code> 的概念：</p>\n<ul>\n<li><p>机器码 (Machine Code)，学名机器语言指令，有时也被称为原生码 (Native Code)，是电脑的 CPU 可直接解读的数据。  </p>\n<blockquote>\n<p>通常意义上来理解的话，机器码就是计算机可以直接执行，并且执行速度最快的代码。</p>\n</blockquote>\n</li>\n<li><p>字节码 (Bytecode)，是一种包含执行程序、由一序列 <code>数据对</code> 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。  </p>\n<ul>\n<li>通常情况下字节码通常不像源码一样可以让人阅读，而是编码后的数值常量、引用、指令等构成的序列。</li>\n<li>关于 <code>字节码文件</code>，即 Class 类文件，根据Java虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构表示，如下述代码所示。    </li>\n<li><p>若想了解更多 Class 文件结构的内容，可参考周志明老师写的《深入理解Java虚拟机》\\(^{[1]}\\)，其中有对 Class 文件结构的详细介绍。</p>\n<blockquote>\n<p>延伸：其实每种类型的文件的头都有着 4 个字节的作用域，则把其称为 <code>魔数</code>，它的作用是唯一标识该文件所属类型。  </p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;  </span><br><span class=\"line\">     u4 magic;  </span><br><span class=\"line\">     u2 minor_version;  </span><br><span class=\"line\">     u2 major_version;  </span><br><span class=\"line\">     u2 constant_pool_count;  </span><br><span class=\"line\">     cp_info constant_pool[constant_pool_count-<span class=\"number\">1</span>];  </span><br><span class=\"line\">     u2 access_flags;  </span><br><span class=\"line\">     u2 this_class;  </span><br><span class=\"line\">     u2 super_class;  </span><br><span class=\"line\">     u2 interfaces_count;  </span><br><span class=\"line\">     u2 interfaces[interfaces_count];  </span><br><span class=\"line\">     u2 fields_count;  </span><br><span class=\"line\">     field_info fields[fields_count];  </span><br><span class=\"line\">     u2 methods_count;  </span><br><span class=\"line\">     method_info methods[methods_count];  </span><br><span class=\"line\">     u2 attributes_count;  </span><br><span class=\"line\">     attribute_info attributes[attributes_count];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java-和其他语言比较\"><a href=\"#Java-和其他语言比较\" class=\"headerlink\" title=\"Java 和其他语言比较\"></a>Java 和其他语言比较</h3><center>表 1-1 Java 与 C 语言的区别</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Java</th>\n<th style=\"text-align:left\">C</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Java 是面向对象的语言</td>\n<td style=\"text-align:left\">C 是面向过程的语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">通过类文件实现可移植性</td>\n<td style=\"text-align:left\">C 需要重新编译实现移植</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">没有指针</td>\n<td style=\"text-align:left\">有指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">垃圾回收提供了自动内存管理功能</td>\n<td style=\"text-align:left\">无法从低层布局内存 (结构体)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<center>表 1-2 Java 与 PHP 语言的区别</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Java</th>\n<th style=\"text-align:left\">PHP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Java 是静态类型语言</td>\n<td style=\"text-align:left\">PHP 是动态类型语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java 支持多线程操作</td>\n<td style=\"text-align:left\">PHP 不支持多线程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>在本书中，关于静态语言与动态语言的区别，即在于编译时或是运行时 <code>检测错误</code>。</p>\n<blockquote>\n<p>对于类型系统的概念，众说纷纭，如何理解静态、动态类型语言，推荐知乎 <a href=\"https://www.zhihu.com/question/19918532/answer/21647195\" target=\"_blank\" rel=\"noopener\">rainoftime</a> 的回答。 </p>\n</blockquote>\n<ul>\n<li><p><code>Program Errors</code>：  </p>\n<ul>\n<li><code>Trapped errors</code>：导致程序终止执行，例如：零为被除数、Java 数组越界访问。  </li>\n<li><code>Untrapped errors</code>：出错后继续执行，但可能出现任意行为。如 C 里的缓冲区溢出、Jump 到错误地址。</li>\n</ul>\n</li>\n<li><p><code>Forbidden Behaviours</code>：语言设计时，可以定义一组 Forbidden behaviors，它必须包括所有 Untrapped errors，但可能包含 Trapped errors。</p>\n</li>\n<li><p><code>Well behaved</code> 与 <code>ill behaved</code>：  </p>\n<ul>\n<li><code>well behaved</code>: 如果程序执行不可能出现 Forbidden behaviors, 则为 Well behaved。   </li>\n<li><code>ill behaved</code>: 否则为 ill behaved。  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>有了上面的概念，再讨论强、弱类型，静态、动态类型：</p>\n<ul>\n<li><code>强类型</code> (Strongly typed)：如果一种语言的所有程序都是 Well behaved，即不可能出现 Forbidden behaviors，则该语言为 Strongly typed。</li>\n<li><p><code>弱类型</code> (Weakly typed)：否则为 Weakly typed。譬如 C 语言的缓冲区溢出，属于 Trapped errors，即属于 Forbidden behaviors，故 C 是弱类型。 </p>\n<p>  弱类型语言类型检查更不严格，如偏向于容忍隐式类型转换。譬如说 C 语言的 int 型可强转为 double 型。这样的结果是：容易产生 Forbidden behaviours，所以是弱类型的。</p>\n</li>\n<li><p><code>静态类型</code> (Statically)：如果在 <code>编译时</code> 拒绝 ill behaved 程序，则是 Statically typed。</p>\n</li>\n<li><code>动态类型</code> (Dynamiclly)：如果在 <code>运行时</code> 拒绝 ill behaviors, 则是 Dynamiclly typed。</li>\n</ul>\n</li>\n</ul>\n<center>表 1-3 Java 与 JavaScript 语言的区别</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Java</th>\n<th style=\"text-align:left\">JavaScript (Js)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Java 是静态类型语言</td>\n<td style=\"text-align:left\">Js 是动态类型语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java 使用基于类的对象</td>\n<td style=\"text-align:left\">JS 使用基于原型的对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java 提供良好的对象封装</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Java 支持多线程操作</td>\n<td style=\"text-align:left\">Js 不支持多线程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"贰-Java-基本句法\"><a href=\"#贰-Java-基本句法\" class=\"headerlink\" title=\"贰 Java 基本句法\"></a>贰 Java 基本句法</h2><h3 id=\"词法结构\"><a href=\"#词法结构\" class=\"headerlink\" title=\"词法结构\"></a>词法结构</h3><div class=\"note success\"><p>说明：词法结构的内容与 Java / Android 开发规范的内容有所交集，可参阅上述推荐的优秀博文：<br><a href=\"https://github.com/Blankj/AndroidStandardDevelop\" target=\"_blank\" rel=\"noopener\">BlankJ. Java / Android 开发规范. 2017. github.com</a>。</p></div>\n<ul>\n<li>Java 编码使用的是 Unicode 字符集。</li>\n<li>需要区分大小写与空白的情况：<ul>\n<li>关键字使用小写 (class、interface、abstract、public、static 等)；</li>\n<li>函数、方法名称使用 <code>驼峰式命名法</code>；</li>\n<li><code>宏定义</code> 使用全大写字母的命名风格；</li>\n</ul>\n</li>\n<li><p>注释：单行注释、多行注释和块注释：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释：注释的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 多行注释：注释的内容 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 块注释的风格：</span></span><br><span class=\"line\"><span class=\"comment\"> * 注释的内容 1</span></span><br><span class=\"line\"><span class=\"comment\"> * 注释的内容 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保留字：<br>如 interface、class、public、private、protected、true、null 等，是不能单用来命名变量名称和类名称的。</p>\n</li>\n<li><p>标识符：Java 程序中某个部分的名称，例如类、类中方法和方法中声明的变量。</p>\n<ul>\n<li>不能以数字开头；</li>\n<li>不能包含标点符号；</li>\n<li><p>可以使用货币符号 (¥或$)；</p>\n<blockquote>\n<p>货币符号主要用在自动生成的源码中，例如 Javac 生成的代码。不在标识符中使用货币符号，可避免自己的标识符和自动生成的标识符冲突。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>字面量：直接出现在 Java 源码中的值，包括：</p>\n<ul>\n<li>整数 <code>1</code>、浮点数 <code>3.141</code>；</li>\n<li>单引号字符 <code>&#39;A&#39;</code>、双引号字符 <code>&quot;Hello&quot;</code> ;</li>\n<li>保留字 <code>true、false、null</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">取值</th>\n<th style=\"text-align:left\">默认值</th>\n<th style=\"text-align:left\">大小</th>\n<th style=\"text-align:left\">范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true/false</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">1 位</td>\n<td style=\"text-align:left\">NA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">Unicode 字符</td>\n<td style=\"text-align:left\">\\u0000</td>\n<td style=\"text-align:left\">16 位</td>\n<td style=\"text-align:left\">\\u0000 ~ \\uFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">byte</td>\n<td style=\"text-align:left\">有符号的整数</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">8 位</td>\n<td style=\"text-align:left\">[-128, 127]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">有符号的整数</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">16 位</td>\n<td style=\"text-align:left\">[-32768, 32767]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">有符号的整数</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">32 位</td>\n<td style=\"text-align:left\">[-2147483648, 2147483647]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">有符号的整数</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">64 位</td>\n<td style=\"text-align:left\">[-9223372036854775808, 9223372036854775807]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">IEEE 154 浮点数</td>\n<td style=\"text-align:left\">0.0</td>\n<td style=\"text-align:left\">32 位</td>\n<td style=\"text-align:left\">[1.4E-25, 3.4028235E+38]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">IEEE 754 浮点数</td>\n<td style=\"text-align:left\">0.0</td>\n<td style=\"text-align:left\">64 位</td>\n<td style=\"text-align:left\">[4.9E-324, 1.7976931348623157E+308]</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h4><ul>\n<li>表示两种个逻辑状态，可表示开或关，也可是与否。</li>\n<li><p>零或非零表逻辑：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123; <span class=\"comment\">// -7,-1,1,8...等非零数值都可作为条件体 </span></span><br><span class=\"line\">    <span class=\"comment\">// 永真循环</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象体表逻辑：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> != obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 忽略实现细节</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h4><ul>\n<li>普通字符</li>\n<li>转义字符</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">退格符</td>\n<td style=\"text-align:left\">\\b</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平制表符</td>\n<td style=\"text-align:left\">\\t</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">换行符</td>\n<td style=\"text-align:left\">\\n</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">换页符</td>\n<td style=\"text-align:left\">\\f</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">回车符</td>\n<td style=\"text-align:left\">\\r</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">双引号</td>\n<td style=\"text-align:left\">\\“</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">八进制</td>\n<td style=\"text-align:left\">\\000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">十六进制</td>\n<td style=\"text-align:left\">\\u0000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>在上表中，以取双引号为例，只需附加上反斜杆 <code>\\</code> 即可。<br>例如：<code>\\\\</code>、<code>\\&quot;</code> <code>\\&#39;</code>。</p>\n</blockquote>\n<h3 id=\"表达式和运算符\"><a href=\"#表达式和运算符\" class=\"headerlink\" title=\"表达式和运算符\"></a>表达式和运算符</h3><ul>\n<li><p>运算符概述：</p>\n<ul>\n<li>优先级：与 <a href=\"https://www.kofes.cn/2017/04/C-Programming-Design-Learning.html#4-1-关系运算符及其优先次序\">C语言类同</a> (单目运算符 &gt; 双目运算符 &gt; 三目运算符)</li>\n<li>结合方式：从左向右</li>\n</ul>\n</li>\n<li><p>算术运算符：加 <code>+</code>、减 <code>-</code>、乘 <code>*</code>、除 <code>/</code>、求模 <code>%</code>、负号 <code>-</code>。</p>\n</li>\n<li><p>字符串连接符：<code>&quot;Hello&quot; + &quot;World&quot;</code> 相当于 <code>“HelloWorld”</code>。</p>\n</li>\n<li><p>递增、递减运算符：操作数必须是变量、数组中的元素或对象的字段。</p>\n</li>\n<li><p>比较运算符：等于 <code>==</code>、不等于 <code>!=</code>、小于 <code>&lt;</code>、大于 <code>&gt;</code>、大于等于 <code>&gt;=</code>、小于等于 <code>&lt;=</code>。</p>\n</li>\n<li><p>逻辑运算符：条件与 <code>&amp;&amp;</code>、条件或 <code>||</code>、逻辑非 <code>!</code>。</p>\n</li>\n<li><p>位运算符和位移运算符：</p>\n<ul>\n<li>按位补码 <code>~</code>：把操作数的每一位反相，0 变 1，1 变 0<br>~12 =&gt; ~00001100 =&gt; 11110011 =&gt; -13</li>\n<li>位与 <code>&amp;</code><br>10 &amp; 7 =&gt; 00001010 &amp; 00000111    =&gt;    00000010 =&gt; 2</li>\n<li>位或 <code>|</code><br>10 | 7 =&gt; 00001010 | 00000111    =&gt;    00001111 =&gt; 15</li>\n<li>位异或 <code>^</code>：相异为真<br>10 ^ 7 =&gt; 00001010 ^ 00000111    =&gt;    00001101 =&gt; 13</li>\n</ul>\n</li>\n<li><p>左移 <code>&lt;&lt;</code>：高位丢掉，右边补零，向左移动 n 位，相当于乘以 2\\(^{n}\\)。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">左移运算的实例：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> &lt;&lt; <span class=\"number\">1</span> =&gt; <span class=\"number\">00001010</span> &lt;&lt; <span class=\"number\">1</span> =&gt; <span class=\"number\">00010100</span> =&gt; <span class=\"number\">20</span> =&gt; <span class=\"number\">10</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">07</span> &lt;&lt; <span class=\"number\">3</span> =&gt; <span class=\"number\">00000111</span> &lt;&lt; <span class=\"number\">3</span> =&gt; <span class=\"number\">00111000</span> =&gt; <span class=\"number\">56</span> =&gt; <span class=\"number\">07</span> * <span class=\"number\">2</span>^<span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span> =&gt; <span class=\"number\">11111111</span> &lt;&lt; <span class=\"number\">2</span> =&gt; <span class=\"number\">11111100</span> =&gt; -<span class=\"number\">4</span> =&gt; -<span class=\"number\">1</span> * <span class=\"number\">2</span>^<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -1&lt;&lt;2 =&gt; 11111111&lt;&lt;2：即负数是补码形式存储的。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>带符号右移 <code>&gt;&gt;</code>：高位 <code>补符号</code>，左侧操作数为正数则 <code>高位补0</code>，左侧操作数为负数则 <code>高位补1</code>。向右移动 n 位，相当于除以 2\\(^{n}\\)。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> &gt;&gt; <span class=\"number\">1</span>  =&gt; <span class=\"number\">00001010</span> &gt;&gt; <span class=\"number\">1</span> =&gt; <span class=\"number\">0</span> <span class=\"number\">0000101</span> =&gt; <span class=\"number\">05</span> =&gt; <span class=\"number\">10</span> / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">27</span> &gt;&gt; <span class=\"number\">3</span>  =&gt; <span class=\"number\">00011011</span> &gt;&gt; <span class=\"number\">3</span> =&gt; <span class=\"number\">000</span> <span class=\"number\">00011</span> =&gt; <span class=\"number\">03</span> =&gt; <span class=\"number\">27</span> / <span class=\"number\">2</span>^<span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">50</span> &gt;&gt; <span class=\"number\">2</span> =&gt; <span class=\"number\">11001110</span> &gt;&gt; <span class=\"number\">2</span> =&gt; <span class=\"number\">11</span> <span class=\"number\">110011</span> =&gt; -<span class=\"number\">13</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>赋值运算符与条件运算符：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">e = a &lt; b ? c :d; <span class=\"comment\">// 条件运算符鼻赋值运算符优先级高</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊运算符：</p>\n<ul>\n<li>访问对象成员 <code>.</code></li>\n<li>访问数组中元素 <code>[]</code></li>\n<li>调用方法 <code>()</code></li>\n<li>lambda 表达式 <code>-&gt;</code></li>\n<li>创建对象 <code>new</code></li>\n<li>类型转换及校正 <code>()</code>，</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><ul>\n<li><p>选择结构和循环结构和 C 语言的相差无几，这里就不详细列举。</p>\n</li>\n<li><p>synchronized 语句：</p>\n<ul>\n<li><code>Expression</code> 表达式的计算结果必须是一个 <code>对象</code> 或 <code>数组</code>。<code>Statements</code> 是能导致破坏的代码块 (指同步互斥)。</li>\n<li><p>即 Java 解析器为 <code>Expression</code> 计算得到的对象或数组获取一个排它锁，直到语句块执行完毕再释放。只要某个线程拥有对象的排它锁，其他线程就不能再获取这个锁。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>( Expression ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Statements</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>throw 语句：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// throw expression;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">double</span> fact;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( x &lt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"x must be &gt;= 0.\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(fact=<span class=\"number\">1.0</span>; x &gt; <span class=\"number\">1</span>; fact *= x, x--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> fact;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>try/catch/finall 语句：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 正常情况，从上往下执行</span></span><br><span class=\"line\">       <span class=\"comment\">// 也有可能跑出异常，或是 throw 语句直接抛出异常</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( SomeException e1 ) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 处理 SomeException 或其子类型的异常对象</span></span><br><span class=\"line\">       <span class=\"comment\">// 使用名称 e1 引用那个异常对象</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( AnotherException e2 ) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 处理 AnotherException，使用名称 e2 引用传入的异常对象</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 不管 try 子句的结束方式如何，这段代码都会执行。</span></span><br><span class=\"line\">       <span class=\"comment\">// 但是 try 子句中调用了 System.exit()，解析器会马上退出，而不执 finally 子句。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  即 Java 解析器执行 throw 语句，会立即停止常规程序执行，开始捕获或处理异常的异常处理程序 ( try/catch/finally 语句编写 )。</p>\n</li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h4><ul>\n<li><p>方法的定义都是以签名开头，后面跟着方法主体。方法主体，即放在花括号里的任意语句序列。方法签名包括下述内容：</p>\n<ul>\n<li>方法名称；</li>\n<li>方法所用参数的数量、顺序、类型和名称；</li>\n<li>方法的返回值类型；</li>\n<li>方法抛出的已检异常 ( 下述有解释：已检异常和未检异常 )；</li>\n<li>提供方法额外信息的多个方法修饰符.</li>\n</ul>\n</li>\n<li><p>方法签名的格式：<code>modifiers</code> <code>type</code> <code>name(paramlist)</code> [ throws <code>exceptions</code> ]  </p>\n<ul>\n<li><code>modifiers</code> : 指零个或多个特殊的修饰符关键字；  </li>\n<li><code>type</code> : 指明方法的返回类型；  </li>\n<li><code>name</code> : 即方法名称；  </li>\n<li><code>paramlist</code> : 指形参列表；  </li>\n<li><code>exceptions</code> : 抛出已检异常.  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"方法修饰符\"><a href=\"#方法修饰符\" class=\"headerlink\" title=\"方法修饰符\"></a>方法修饰符</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">修饰符</th>\n<th style=\"text-align:left\">作用描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">abstract</td>\n<td style=\"text-align:left\">abstract 修饰方法，类本身也必须声明 abstract。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">final</td>\n<td style=\"text-align:left\">final 修饰的方法不能被子类覆盖或隐藏。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">public、protected、private</td>\n<td style=\"text-align:left\">这些访问修饰符指定方法是否能在定义它的类之外使用，或能在何处使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">synchronized</td>\n<td style=\"text-align:left\">synchronized 修饰符的作用是实现线程安全的方法 (避免两个线程同时执行该方法)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td style=\"text-align:left\">static 声明的方法是类方法。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"已检异常和未检异常\"><a href=\"#已检异常和未检异常\" class=\"headerlink\" title=\"已检异常和未检异常\"></a>已检异常和未检异常</h4><ul>\n<li><p>已检异常和未检异常 — <code>什么情况抛出异常</code></p>\n<ul>\n<li><p>已检异常：明确的特定情况下抛出。</p>\n<blockquote>\n<p>例如：FileNotFoundException — 打开某个文件却不在目录中。</p>\n</blockquote>\n</li>\n<li><p>未检异常：任何方法任何时候都可能抛出。</p>\n<blockquote>\n<p>例如：OutOfMemoryError、NullPointerException。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>区分已检和未检异常，记两点：  </p>\n<ol>\n<li>异常是 Throwable 对象；  </li>\n<li>异常分两种类型：Error (未检) 和 Exception (已检).</li>\n</ol>\n</li>\n<li><p>处理已检异常：在方法签名的 throws 子句中声明这个异常。Java 编译器检查方法签名，若没有声明会导致编译出错，故叫已检异常。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">estimateHomePageSize</span><span class=\"params\">(String host)</span> throw IOException </span>&#123;</span><br><span class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"htts://\"</span> + host);</span><br><span class=\"line\">    <span class=\"keyword\">try</span>( InputStream in = url.openStream() ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> in.available();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"变长参数列表\"><a href=\"#变长参数列表\" class=\"headerlink\" title=\"变长参数列表\"></a>变长参数列表</h4><ul>\n<li><p>变长参数列表：方法可声明为数量不定的参数。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> first, <span class=\"keyword\">int</span>...rest)</span> </span>&#123; </span><br><span class=\"line\">       <span class=\"comment\">// int...rest 相当于 int[] rest</span></span><br><span class=\"line\">       <span class=\"comment\">// 省略实现细节</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"介绍类和对象\"><a href=\"#介绍类和对象\" class=\"headerlink\" title=\"介绍类和对象\"></a>介绍类和对象</h3><blockquote>\n<p>关于类最重要的事情是，它们定义了一种新数据类型。例如定义一个 Point 类表示笛卡尔二维坐标系中的数据点。</p>\n</blockquote>\n<ul>\n<li><p>定义类：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> x, y;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">distanceFromOrigin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.sqrt(x*x,y*y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建对象与使用对象：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Point point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2.0</span>, <span class=\"number\">3.5</span>);</span><br><span class=\"line\">System.out.println( <span class=\"string\">\"Sqrt(x, y):\"</span> + point.distanceFromOrigin() );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再谈数据类型：谈论数据类型时，得分开数据类型和数据类型的值。Char 类型的值表示某个具体的字符，而 Point 类是一种新的数据类型，用于表示坐标 (x, y)，Point 类为引用类型，即聚合类型，而 Point 类表示的值是对象。</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">数据类型的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">unicode 字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Point 类</td>\n<td style=\"text-align:left\">point 对象</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>lambda 表达式：其实就是没有名称的函数，<code>某个类中定义的匿名方法</code>。  </p>\n<blockquote>\n<p>某个类中定义的匿名方法：Java 不允许脱离类的概念运行方法。</p>\n</blockquote>\n<p>  定义 lambda 表达式：( paramlist ) -&gt; { Statements }</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Runable r = () -&gt; &#123; System.out.println(<span class=\"string\">\"Hello World.\"</span>); &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"数组的类型\"><a href=\"#数组的类型\" class=\"headerlink\" title=\"数组的类型\"></a>数组的类型</h4><ul>\n<li><p>数组中元素的类型可是任何有效的 Java 类型，包括数组类型。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// byte 是基本类型</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// byte[] 是由 byte 类型的值组成的数组</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] arrayOfBytes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// byte[][] 是由 byte[] 类型的值组成的数组</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[][] arrayOfArrayOfBytes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String[] 是由字符串组成的数组</span></span><br><span class=\"line\">String[] points;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"创建和初始化数组\"><a href=\"#创建和初始化数组\" class=\"headerlink\" title=\"创建和初始化数组\"></a>创建和初始化数组</h4><ul>\n<li><p>Java 在运行时 <code>初始化数组</code> 有个推论：数组初始化程序中的 <code>表达式</code> 可能会在运算时计算，而且不一定非要使用 <code>编译时常量</code>。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Point[] point = </span><br><span class=\"line\">\t&#123;circle1.getCenterPoint(), circle2.getCenterPoint()&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">String[] lines = <span class=\"keyword\">new</span> String[<span class=\"number\">50</span>]; <span class=\"comment\">// 中括号中使用非负整数</span></span><br><span class=\"line\">String[] greetings = </span><br><span class=\"line\">\t<span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"World\"</span>, <span class=\"string\">\"I'm Kofes.\"</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用数组\"><a href=\"#使用数组\" class=\"headerlink\" title=\"使用数组\"></a>使用数组</h4><ul>\n<li>数组的边界：a[ 0…a.length-1 ]</li>\n<li><p>迭代数组：遍历数组</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] primes = &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sumOfPrimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> = <span class=\"number\">0</span>; i &lt; primes.length; i++ ) &#123;</span><br><span class=\"line\">    sumOfPrimes += prime[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 等价于上一个 for 循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> p : primes ) sumOfPrimes += p;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><ul>\n<li><p>多维数组的定义和初始化：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] products = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][]; <span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] products = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][<span class=\"number\">10</span>]; <span class=\"comment\">// 错误，指定的维度必须位于最左边</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ ) &#123;</span><br><span class=\"line\">    products[i] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li><p>引用类型与基本类型：</p>\n<ul>\n<li>引用类型：<ul>\n<li>1) 引用类型由用户定义，可有无限多个。  </li>\n<li>2) 即聚合类型，保存零或多个基本值或对象。</li>\n</ul>\n</li>\n<li>基本类型：  <ul>\n<li>1) 8 种基本类型由 Java 语言定义，不能由我们自己定义新基本类型。  </li>\n<li>2) 基本类型表示单个值。  </li>\n<li>3) 基本类型需要 1 到 8 字节的内存空间。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>处理对象和引用副本：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Point p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\">Point q = p; <span class=\"comment\">// 因变量 p 和 q 保存的引用都指向同一对象。</span></span><br><span class=\"line\">System.out.println(p.x); <span class=\"comment\">// 1.0</span></span><br><span class=\"line\">q.x = <span class=\"number\">13.0</span>;</span><br><span class=\"line\">System.out.println(p.x); <span class=\"comment\">// 13.0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较对象，即 <code>==</code> 与 <code>obj.equal()</code> 的区别：</p>\n<ul>\n<li><code>==</code> 比较引用类型时，比较的是引用是否指向同一对象。</li>\n<li><p><code>obj.equal()</code> 比较的是对象内容是否一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String letter = <span class=\"string\">\"O\"</span>;</span><br><span class=\"line\">String s = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\">String t = <span class=\"string\">\"Hell\"</span> + letter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( s==t ) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"equal\"</span>); <span class=\"comment\">// 显然不等</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>( s.equal(t) ) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"equal\"</span>); <span class=\"comment\">// 内容相等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"包和-Java-命名空间\"><a href=\"#包和-Java-命名空间\" class=\"headerlink\" title=\"包和 Java 命名空间\"></a>包和 Java 命名空间</h3><ul>\n<li><p>声明包：<code>package org.apache.commons.net;</code></p>\n<blockquote>\n<p>package 指定类属于哪个包 (Java 代码的第一行标记，除注释和空格外)</p>\n</blockquote>\n</li>\n<li><p>导入类型：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 现不用输入 java.io.File 了，输入 File 定义即可</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File; </span><br><span class=\"line\">File file = <span class=\"keyword\">new</span> File();\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java.io 包中的所有类都可以使用简称</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入静态成员：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.*;</span><br><span class=\"line\">Math.sqrt( abs(sin(x)) ); <span class=\"comment\">// 直接使用 sqrt( abs(sin(x)) );</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Java 文件结构：</p>\n<ul>\n<li><code>一个</code> 可选的 package 指令；</li>\n<li><code>零个或多个</code> import 或者 import static 指令；</li>\n<li><p>Java 文件中 <code>只有一个</code> 声明 public 的类，且类名必须与文件名相同.</p>\n<blockquote>\n<p>public 类的目的是供其他包中的类使用。不管类是否为 public，一个文件只定义一个类，并且名称相同，是良好的编程习惯。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"叁-Java-面向对象编程\"><a href=\"#叁-Java-面向对象编程\" class=\"headerlink\" title=\"叁 Java 面向对象编程\"></a>叁 Java 面向对象编程</h2><h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><h4 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h4><ul>\n<li><p>类：</p>\n<ul>\n<li>由一些保存值的 <code>数据字段</code> 和处理这些值的 <code>方法</code> 组成。</li>\n<li><p>类定义一种新的引用类型。</p>\n<blockquote>\n<p>例如：Point 类，表示所有笛卡尔二维坐标点。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>对象：类的实例，对象一般通过实例化类来创建。</p>\n</li>\n</ul>\n<h4 id=\"定义类的句法\"><a href=\"#定义类的句法\" class=\"headerlink\" title=\"定义类的句法\"></a>定义类的句法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerNumber</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span></span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"keyword\">implements</span> <span class=\"title\">Serialzable</span>, <span class=\"title\">Comparable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 类的成员 (成员变量和成员方法)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段和方法\"><a href=\"#字段和方法\" class=\"headerlink\" title=\"字段和方法\"></a>字段和方法</h3><ul>\n<li><code>类字段</code>、<code>类方法</code>：关联在类自身上的 <code>类成员</code> (静态变量)。</li>\n<li><p><code>实例字段</code>、<code>实例方法</code>：关联在类的单个实例 (对象) 身上的 <code>实例成员</code>。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类字段</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14159</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 类方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">radiusToDegrees</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> radius * <span class=\"number\">180</span> / PI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例字段，即实例化后获得参数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> r; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">area</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> PI * r * r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>this 引用的工作方式：只要 Java 方法在类中访问 <code>实例字段</code>，都默认方法 this 参数指向的对象中的字段。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRadius</span><span class=\"params\">(<span class=\"keyword\">double</span> radius)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.radius = radius; <span class=\"comment\">// 把参数赋值给类字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一般地，若实参变量名称与类字段不一致，可省略 this，例如形参为 <code>double r</code>，即  <code>radius = r</code> 。在该例子中省略会让编译器报错，即无法理解值是谁赋给谁。</li>\n<li>实例方法可以使用 this 关键字，相反类方法不能使用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"创建和初始化对象\"><a href=\"#创建和初始化对象\" class=\"headerlink\" title=\"创建和初始化对象\"></a>创建和初始化对象</h3><ul>\n<li><p>定义构造方法：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">protected</span> <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> r)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>构造放方法的成名始终和类名一样。</li>\n<li>声明构造方法时不指定返回值类型，连 void 都不用。</li>\n</ul>\n</li>\n<li><p>定义多个构造方法：只要构造方法的参数列表不同，为一个类定义多个构造方法是可以的。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        r = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">double</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.r = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字段的默认值和初始化程序：类中的字段不一定要初始化，因为字段自己使用默认值初始化。</p>\n<blockquote>\n<p>良好的编程习惯，或字段的默认值不适合情景。建议显式提供初始值。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"子类的继承\"><a href=\"#子类的继承\" class=\"headerlink\" title=\"子类的继承\"></a>子类的继承</h3><h4 id=\"扩展类\"><a href=\"#扩展类\" class=\"headerlink\" title=\"扩展类\"></a>扩展类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlanCircle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Circle</span> </span>&#123; <span class=\"comment\">// 自动继承了 Circle 类的字段和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> x, y;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PlanCircle</span><span class=\"params\">(<span class=\"keyword\">double</span> r, <span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 调用超类的构造方法 Circle()</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(r);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cx = x;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cy = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"构造方法链和默认构造方法\"><a href=\"#构造方法链和默认构造方法\" class=\"headerlink\" title=\"构造方法链和默认构造方法\"></a>构造方法链和默认构造方法</h4><ul>\n<li>创建类的实例，Java 保证会调用这个类的构造方法。</li>\n<li>创建任何子类的实例，Java 保证会调用超类的构造方法。</li>\n<li>若构造方法没有调用超类的构造方法，Java 会隐式调用。</li>\n<li><p>若类没有声明构造方法，Java 会为类隐式添加一个构造方法。</p>\n<blockquote>\n<p>若超类没有声明无参数的构造方法，这种隐式调用会导致编译出错。所以，若类中没有定义任何构造方法，默认会为其提供一个无参数的构造方法。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"覆盖超类的方法\"><a href=\"#覆盖超类的方法\" class=\"headerlink\" title=\"覆盖超类的方法\"></a>覆盖超类的方法</h4><blockquote>\n<p>注意，覆盖不是遮盖。</p>\n</blockquote>\n<ul>\n<li>类中定义的某个实例方法和超类的某个方法有相同 <code>名称</code>、<code>返回类型</code>、<code>参数</code>，那么这个方法会覆盖，即 <code>@Override</code>。</li>\n</ul>\n<h3 id=\"数据隐藏和封装\"><a href=\"#数据隐藏和封装\" class=\"headerlink\" title=\"数据隐藏和封装\"></a>数据隐藏和封装</h3><ul>\n<li>封装：把数据隐藏在类中，只能通过方法获取。<ul>\n<li>隐藏类的内部细节。</li>\n<li>保护类，如一些相互依赖的字段。</li>\n</ul>\n</li>\n<li><p>访问控制</p>\n<ul>\n<li><p>访问包：</p>\n<ul>\n<li>1) 访问控制一般在类和类的成员这些层级完成。  </li>\n<li>2) 访问其他包，import 导入相关包即可。  </li>\n</ul>\n</li>\n<li><p>访问类：默认情况，顶层类在定义它的包中可以访问。</p>\n</li>\n<li><p>访问成员：类的成员在类的主体里始终可以访问。</p>\n<ul>\n<li>public、private、protected (default) 作为修饰符，修饰类的成员。  </li>\n<li>public =&gt; 类的任何地方都可访问这个成员。  </li>\n<li>private =&gt; 除了类内部能访问。  </li>\n<li>protected =&gt; 包里的所有类都能访问这个成员，只限制在同一包内进行访问。  </li>\n</ul>\n</li>\n<li><p>访问控制和继承：</p>\n<blockquote>\n<p>不继承类字段、类方法。</p>\n</blockquote>\n<ul>\n<li>使用 <code>private</code> 声明的字段和方法绝不会被继承，类字段和类方法也一样。</li>\n<li>构造方法不会被继承，而不是链在一起调用。</li>\n<li>子类和超类： <ul>\n<li>1) 同一包中，子类继承所有没使用 <code>private</code> 声明的实例字段和方法。  </li>\n<li>2) 不同包中，子类继承所有使用 <code>protected</code> 和 <code>public</code> 声明的实例字段和方法。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"抽象类和方法\"><a href=\"#抽象类和方法\" class=\"headerlink\" title=\"抽象类和方法\"></a>抽象类和方法</h3><ul>\n<li>类中有一 abstract 方法，则该类为 abstract，若是 final 关键字声明的类不能有任何 abstract 方法。</li>\n<li>abstract 类无法实例化。</li>\n</ul>\n<h4 id=\"转换引用类型\"><a href=\"#转换引用类型\" class=\"headerlink\" title=\"转换引用类型\"></a>转换引用类型</h4><ul>\n<li><p>对象不能转换不相关的类型。</p>\n<blockquote>\n<p>String 对象 -&gt; Point 对象</p>\n</blockquote>\n</li>\n<li><p>对象可以转成超类类型，或任何祖先类型。即放大转换，因此不需要校正。</p>\n</li>\n<li>对象可以转换成子类型，缩小转换，但需确保转换有效。</li>\n</ul>\n<h4 id=\"修饰符总结\"><a href=\"#修饰符总结\" class=\"headerlink\" title=\"修饰符总结\"></a>修饰符总结</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">修饰符</th>\n<th style=\"text-align:left\">用于</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">abstract</td>\n<td style=\"text-align:left\">类</td>\n<td style=\"text-align:left\">这个类不能实例化，且可能包含未实现的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">接口</td>\n<td style=\"text-align:left\">所有接口都是抽象的，声明接口时这个修饰符是可选的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">这个方法没有主体，主体由子类提供，签名后面紧接一个分号。所在的类必须也是抽象的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">这个接口方法的实现是可选的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">final</td>\n<td style=\"text-align:left\">类</td>\n<td style=\"text-align:left\">不能创建这个类的子类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">不能覆盖这个方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">字段</td>\n<td style=\"text-align:left\">这个字段的值不能改变</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">变量</td>\n<td style=\"text-align:left\">值不能改变的局部变量、方法参数或异常参数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">无(包)</td>\n<td style=\"text-align:left\">类</td>\n<td style=\"text-align:left\">包级私有：没有声明 public 的类只能在包中访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">接口</td>\n<td style=\"text-align:left\">包级私有：没有声明 public 的接口只能在包中访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">成员</td>\n<td style=\"text-align:left\">包级私有：没有声明 public、private 或 protected 的成员只能在包中访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">private</td>\n<td style=\"text-align:left\">成员</td>\n<td style=\"text-align:left\">该成员只在定义它的类中可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">protected</td>\n<td style=\"text-align:left\">成员</td>\n<td style=\"text-align:left\">该成员只在定义它的包中和子类中可以访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">public</td>\n<td style=\"text-align:left\">类</td>\n<td style=\"text-align:left\">能访问所在包的地方都能访问这个类</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">接口</td>\n<td style=\"text-align:left\">能访问所在包的地方都能访问这个接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">成员</td>\n<td style=\"text-align:left\">能访问所在类的地方都能访问这个成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">static</td>\n<td style=\"text-align:left\">类</td>\n<td style=\"text-align:left\">使用 static 声明的内部类是顶层类，而不是所在类的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">static 方法是类方法，不隐式传入 this 对象引用，可通过类名调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">字段</td>\n<td style=\"text-align:left\">static 字段是类字段，不管创建多少类实例，这个字段只有一个实例，可通过类名访问</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">初始化程序</td>\n<td style=\"text-align:left\">这个初始化程序在加载类时运行，而不是创建实例时运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">synchronized</td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">这个方法对类或实例执行非原子操作，故得确保不能让两个线程同时修改类或实例。对 static 方法来说，执行方法前先为类获取一个锁；对非 static 方法来说，会为具体的对象实例获取一个锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">volatile</td>\n<td style=\"text-align:left\">字段</td>\n<td style=\"text-align:left\">该字段能被异步线程访问，因此必须对其做些特定的优化</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"肆-Java-类型系统\"><a href=\"#肆-Java-类型系统\" class=\"headerlink\" title=\"肆 Java 类型系统\"></a>肆 Java 类型系统</h2><ul>\n<li><p>Java 是一种静态语言，如果把不兼容型的值赋给变量，会导致编译出错。而在运作时检查类型兼容性的语言叫做动态类型语言，如 Javascript。  </p>\n<blockquote>\n<p>在 <a href=\"#Java-和其他语言比较\">第壹章：Java 和其他语言比较</a> 中有对语言类型的深入了解。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><ul>\n<li>接口的作用只是描述 API，接口提供类型的描述信息，以及实现这个 API 的类应提供的方法 (和签名)。</li>\n<li>Java 的接口不为它描述的方法提供实现代码，这些方法是强制要实现的。</li>\n</ul>\n<h4 id=\"定义接口\"><a href=\"#定义接口\" class=\"headerlink\" title=\"定义接口\"></a>定义接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Centered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCenter</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getCenterX</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getCenterY</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>特别说明：</p>\n<ul>\n<li>接口中所有强制方法都隐式使用 abstract 声明，不能有方法主体，以分号结束。</li>\n<li><p>接口定义公开的 API，接口所有成员都隐式使用了 public 声明。</p>\n<blockquote>\n<p>使用 protected 或 private 定义方法，将会编译出错。</p>\n</blockquote>\n</li>\n<li><p>接口不能实例化，因此不定义构造方法。</p>\n</li>\n<li>接口中可包含嵌套类型。</li>\n<li>接口中可包含静态方法。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"扩展接口\"><a href=\"#扩展接口\" class=\"headerlink\" title=\"扩展接口\"></a>扩展接口</h4><ul>\n<li><p>继承父接口的所有方法和常量，且可定义新方法和常量。接口的 extends 子句可包含多个父接口。</p>\n<blockquote>\n<p>注意：实现这个接口的类必须实现这个 <code>接口直接定义</code> 的抽象方法，包括所有 <code>父接口</code> 中继承的全部抽象方法。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Transformable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Scalable</span>, <span class=\"title\">Translateble</span>, <span class=\"title\">rotalable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 忽略细节</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h4><ul>\n<li><p>实现多个接口：一个类即可实现一个接口，也可实现多个接口，后者表明的这个类要实现所有接口中的全部抽象方法 (强制方法)。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperDuperSquare</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Centered</span>, <span class=\"title\">UpperRightCornered</span>, <span class=\"title\">Scalable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 忽略细节</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"默认方法\"><a href=\"#默认方法\" class=\"headerlink\" title=\"默认方法\"></a>默认方法</h4><ul>\n<li>向后兼容性：前一版平台编写 (或已编译) 的代码在最新版平台中必须能继续使用。</li>\n<li><p>实现默认方法：若升级某一接口，重新定义接口后，尝试在为旧接口编写的代码中使用这个新接口，不会成功。  </p>\n<p>  即抛出 <code>NoClassDefError</code> 异常，如下例中添加新的强制方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Positionable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Centered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setUpperRightCorner</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getUpperRightX</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getUpperRightY</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 在此接口增加以下强制方法，是不会成功的。后续的解决办法是使用抽象类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLowerLeftCorner</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getowerLeftX</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getowerLeftY</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Java-泛型\"><a href=\"#Java-泛型\" class=\"headerlink\" title=\"Java 泛型\"></a>Java 泛型</h3><h4 id=\"介绍泛型\"><a href=\"#介绍泛型\" class=\"headerlink\" title=\"介绍泛型\"></a>介绍泛型</h4><ul>\n<li><p>使用泛型增强程序的安全性，使编译时信息避免简单的类型错误。具体以下述的引例展开学习。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List shapes = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">shapes.add( <span class=\"keyword\">new</span> CenteredCircle(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>) );</span><br><span class=\"line\">shapes.add( <span class=\"keyword\">new</span> CenteredSquare(<span class=\"number\">2.5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// list::get() 返回 Object 对象，想得到 CenteredCircle 对象必须校正</span></span><br><span class=\"line\">CenteredCircle circle0 = (CenteredCircle) shapes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行此代码时会导致运行失败</span></span><br><span class=\"line\">CenteredCircle circle1 = (CenteredCircle) shapes.get(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>CenteredCircle circle1 = (CenteredCircle) shapes.get(1);</code> 运行失败的原因，即把不同类型的对象放在同一容器中，一切正常运行。但若做了不合法的校正，程序就会崩溃。</p>\n<p>  为了解决此类问题，Java 提供了一种句法，即指明某中类型是一个容器，这个容器中保存着其他引用类型的实例。容器中保存的 <code>负载类型</code> 在尖括号中指定：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;CenteredCircle&gt; shapes = <span class=\"keyword\">new</span> ArrayList&lt;CenteredCircle&gt;();</span><br><span class=\"line\">shapes.add( <span class=\"keyword\">new</span> CenteredCircle(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>) );</span><br><span class=\"line\">shapes.add( <span class=\"keyword\">new</span> CenteredCircle(<span class=\"number\">2.5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>容器类型</code> 一般称为泛型：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">unbox</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"泛型和类型参数\"><a href=\"#泛型和类型参数\" class=\"headerlink\" title=\"泛型和类型参数\"></a>泛型和类型参数</h4><ul>\n<li><code>&lt;T&gt; 句法</code>，也称 <code>类型参数</code>，因此泛型还有一个名称 <code>参数化类型</code>。</li>\n<li><p>定义有参数的类型，要使用一种不对类型参数做任何假设的方式指定具体的值。且类型参数可在方法的签名和主体中使用，就像真正的类型一样。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"菱形句法\"><a href=\"#菱形句法\" class=\"headerlink\" title=\"菱形句法\"></a>菱形句法</h4><ul>\n<li><p>使用菱形句法创建一个由 CenteredCircle 对象组成的 List。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后一个 &lt;&gt; 内为空，但编译器能推导出类型参数的值</span></span><br><span class=\"line\">List&lt;CenteredCircle&gt; shapes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h4><ul>\n<li><p>Java 平台十分看重向后兼容性，问题的关键是，如果让类型系统既能使用旧的非泛型集合类又能使用新的泛型集合类，则设计者们选择 <code>校正</code> 的解决方案。</p>\n<p>  下述代码表明，<code>List</code> 与 <code>List&lt;String&gt;</code> 是兼容的，Java 通过类型擦除实现这种兼容性。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List someThings = getSomeThing();</span><br><span class=\"line\"><span class=\"comment\">// 这种校正不安全，即使 someThings 的内容确定是字符串</span></span><br><span class=\"line\">List&lt;String&gt; myStrings = (List&lt;String&gt;) SomeThings;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类型擦除机制还能禁止使用某些其他定义方式。</p>\n<p>  下述代码看似合法，其实是无法编译的。其实当擦除类型后，两方法的签名变成 <code>int totalOrder(Map);</code>，Java 语言规范把这种句法列为不合法的句法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderCounter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">totalOrder</span><span class=\"params\">( Map&lt;String, List&lt;String&gt;&gt; orders )</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">totalOrder</span><span class=\"params\">( Map&lt;String, Integer&gt; orders )</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h4><ul>\n<li><p>受限通配符，限制类型参数的值能使用哪些类型。</p>\n<ul>\n<li>类型协变：表示<code>容器类型之间</code> 和 <code>负载类型之间</code> 具有 <code>相同</code> 的关系，这种关系通过 <code>extends</code> 关键字表示。</li>\n<li>类型逆变：表示<code>容器类型之间</code> 和 <code>负载类型之间</code> 具有 <code>相反</code> 的关系，这种关系通过 <code>super</code> 关键字表示。</li>\n</ul>\n</li>\n<li><p>例如，Cat 类 扩展 Pet 类，<code>List&lt;Cat&gt;</code> 是 <code>List&lt;? extends Pet&gt;</code> 的子类型。List 是 Cat 对象的制造者，应使用关键字 extends。</p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/Josh%20Bloch/4419184?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Joshua Bloch</a> 把这种用法总结为 PECS. <code>Producer Extends, Consumer Super</code> 原则，即使用者使用 super，制造者使用 extends。</p>\n</blockquote>\n</li>\n<li><p>使用和设计泛型</p>\n<ul>\n<li>使用者：理解类型擦除的基本知识。</li>\n<li>设计者：泛型更多功能。如通配符、”Capture of” 错误信息等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"枚举和注解\"><a href=\"#枚举和注解\" class=\"headerlink\" title=\"枚举和注解\"></a>枚举和注解</h3><h4 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RegularPolygon &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 带参数的枚举必须使用分号</span></span><br><span class=\"line\">    TRIANGLE(<span class=\"number\">3</span>), SQUARE(<span class=\"number\">4</span>), PENTAGON(<span class=\"number\">5</span>), HEXAGON(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape shape; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Shape getShape &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.shape;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 因枚举实例在 Java 运行时创建，在外部不能实例化，故把构造方法声明为私有。</span></span><br><span class=\"line\">    <span class=\"comment\">// 只能有一个私有的构造方法 (或默认访问权限，即不写)。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">RegularPolygon</span><span class=\"params\">(<span class=\"keyword\">int</span> sides)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(sides) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"comment\">// 三角形</span></span><br><span class=\"line\">                shape = <span class=\"keyword\">new</span> Triangle(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">60</span>, <span class=\"number\">60</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// 矩形</span></span><br><span class=\"line\">                shape = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"comment\">// 五边形</span></span><br><span class=\"line\">                shape = <span class=\"keyword\">new</span> Pentagon(</span><br><span class=\"line\">                    <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>: <span class=\"comment\">// 六边形</span></span><br><span class=\"line\">                shape = <span class=\"keyword\">new</span> Hexagon(</span><br><span class=\"line\">                    <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际使用</span></span><br><span class=\"line\">RegularPolygon polygon = </span><br><span class=\"line\">    <span class=\"keyword\">new</span> RegularPolygon( RegularPolygon.TRIANGLE );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：<ul>\n<li>枚举不能泛型化，不能被扩展；</li>\n<li>可以实现接口；</li>\n<li>只能有一个私有的构造方法 (或使用默认访问权限，不声明任何关键字).</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h4><ul>\n<li>注解是一种特殊的接口，其作用是注解 Java 程序的某个部分。</li>\n<li>能为编译器和集成环境 (IDE) 提供有用的提示。</li>\n<li>注解没有直接作用，例如 <code>@Override</code> 为注解的方法提供额外信息，注明这个方法覆盖了超类中的方法。</li>\n<li>Java 平台中常见的基本注解：<ul>\n<li><code>@Override</code> - 注明方法是覆盖的。</li>\n<li><code>@Deprecated</code> - 注明方法已经废弃了。</li>\n<li><code>@SuppressWarnings</code> - 注明编译器生成的警告。</li>\n<li><code>@SafeVarargs</code> - 为变长参数方法提供增强的警告静态方法、默认方法功能</li>\n<li><code>@FunctionalInterface</code> - 接口是一正确的函数式接口，注解能够更好地让编译器进行检查。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h4><ul>\n<li>使用 <code>@interface</code> 关键字定义新的注解类型，与定义类和接口的方式差不多。</li>\n<li>自定义注解的关键是使用 <code>元注解</code>，他们是用来注解新注解类型的定义，必须使用两个基本元注解 <code>@Target</code> 和 <code>@Retention</code>。<ul>\n<li><code>@Target</code>：指明自定义的新注解能在 Java 源码的什么地方使用。可用的值在枚举 <code>ElementType</code> 中定义，其中包括：<ul>\n<li>TYPE - 类、接口 (包括注解类型) 或 Enum 声明</li>\n<li>FIELD - 域声明 (包括 Enum 实例)</li>\n<li>METHOD - 方法声明</li>\n<li>PARAMETER - 参数声明</li>\n<li>CONSTRUCTOR - 构造器声明</li>\n<li>LOCAL_VARIABLE - 局部变量声明</li>\n<li>ANNOTATION_TYPE - 注解</li>\n<li>PACKAGE - 包声明</li>\n</ul>\n</li>\n<li><code>@Retention</code>：指明 Javac 和 Java 运行时如何处理自定义的注解类型。可用的值得在枚举 <code>RetentionPolicy</code> 中定义，其中包括：<ul>\n<li>SOURCE - 表示注解将被编译器丢弃。</li>\n<li>CLASS - 表示注解会出现在类文件中，但运行时 JVM 无法访问。</li>\n<li>RUNTIME - JVM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。</li>\n</ul>\n</li>\n<li><code>@Documented</code>：将此注解包含在 Javadoc 中。</li>\n<li><code>@Inherited</code>：允许子类继承父类中的注解。</li>\n</ul>\n</li>\n<li><p>便于理解，这里定义一个名为 @Nickname 的注解，使用这个注解为方法指定一个昵称，运行时使用反射可以找到这个方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Nickname &#123;</span><br><span class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h4><ul>\n<li>顶层类型：诸如类、接口和枚举类型都定义为顶层类型，即都是包中的直接成员。</li>\n<li>嵌套类型：也称为 <code>内部类</code>，不能作为完全独立的实体真实存在，类型通过四种不同方式嵌套在其他类型中。</li>\n<li><p>四种嵌套方式：</p>\n<ul>\n<li>静态成员类型：嵌套的接口，枚举和注解 (既使不使用 static 关键字)。</li>\n<li>非静态成员类型：没有 static 关键字声明，只有类才能作为非静态成员类型。</li>\n<li>局部类：Java 代码块中定义的类，只是这个块可见。</li>\n<li><p>匿名类：局部类，匿名类是不能有名字的类，在创建 new 语句来声明它们。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 忽略细节</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread = <span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">runnable.start();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>嵌套类型的运作方式：对于 Java 解析器而言，并没有所谓的嵌套类型，<code>所有类型都是普通的顶层类</code>。为了实现嵌套类型，Javac 把每个嵌套类型编译为 <code>单独类文件</code>，得到的类文件使用 <code>特殊命名约定</code>。</p>\n<ul>\n<li><p>静态 / 非静态成员类型：以 <code>EnclosingType$Member.class</code> 格式命名成员类型的类文件。</p>\n<blockquote>\n<p>例如在 LinkedStack 类中，定义一个 Linkable 的静态成员接口。<br>在编译这个 LinkedStack 类时，编译器会生成两个类文件，分别是 LinkedStack.class 和 LinkedStack$Linkable.class。</p>\n</blockquote>\n</li>\n<li><p>匿名类：类文件的名称由实现细节决定，例如 Oracle 或 OpenJDK 中 Javac 使用数字表示匿名类的名称，即 <code>EnclosingType$1.class</code>.</p>\n</li>\n<li>局部类：综合使用前两种方式命名，例如 <code>EnclosingType$1Member.class</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h4><ul>\n<li><p>列出目录中文件名以 “.java” 结尾的文件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">File dir = <span class=\"keyword\">new</span> File(<span class=\"string\">\"/src\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 list() 方法，参数的值是匿名类实现的 FilenameFilter</span></span><br><span class=\"line\">String[] fileList = dir.list( <span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File file, String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.endsWith(<span class=\"string\">\".java\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lambda 表达式</span></span><br><span class=\"line\">String[] fileList = dir.list( </span><br><span class=\"line\">    (file, str) -&gt; &#123;<span class=\"keyword\">return</span> str.endsWith(<span class=\"string\">\".java\"</span>); &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>转换 lambda 表达式：必须满足以下条件才算是合法的 Java 代码。 </p>\n<ul>\n<li>必须出现在期望使用接口类型实例的地方；</li>\n<li>期望使用接口类型必须只有一个强制方法；</li>\n<li>该强制方法的签名要完全匹配 lambda 表达式).</li>\n</ul>\n</li>\n<li><p>方法引用：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该接口只有一个非默认方法：</span></span><br><span class=\"line\"><span class=\"comment\">// 该方法接受一个 MyObject 类型的参数，返回类型为 String</span></span><br><span class=\"line\">(MyObject myobject) -&gt; &#123; myobject.toString(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法引用：Java 8 提供了更简洁的句法</span></span><br><span class=\"line\">MyObject::toString;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"伍-Java-的面向对象设计\"><a href=\"#伍-Java-的面向对象设计\" class=\"headerlink\" title=\"伍 Java 的面向对象设计\"></a>伍 Java 的面向对象设计</h2><h3 id=\"Java-的值\"><a href=\"#Java-的值\" class=\"headerlink\" title=\"Java 的值\"></a>Java 的值</h3><ul>\n<li><p>Java 的值有两种类型，基本值和对象引用，只有这两种值才能赋值给变量。</p>\n<ul>\n<li>基本值：基本值不能改，2永远是2。</li>\n<li><p>对象引用：对象引用的内容一般能修改，一般为对象内容的变化。</p>\n<blockquote>\n<p>[说明] Java 不是 “引用传递” 的语言。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">manipulate</span><span class=\"params\">(Circle circle)</span> </span>&#123;</span><br><span class=\"line\">    circle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Circle circle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">2</span>);</span><br><span class=\"line\">manipulate(circle);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还是输出 =&gt; Radius:2</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Radius:\"</span> + circle.getRadius() );</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象的设计要略\"><a href=\"#面向对象的设计要略\" class=\"headerlink\" title=\"面向对象的设计要略\"></a>面向对象的设计要略</h4><ul>\n<li><p>常量：实现某个接口的任何类都会继承这个接口中定义的常量。特别是在多给类中使用的一组常量。</p>\n</li>\n<li><p>高度抽象：选择接口还是抽象类：</p>\n<ul>\n<li>在已定义的接口添加一个新的强制方法，那么已经实现这个接口的所有类都会出现问题，即接口中添加新方法必须为默认方法，并提供实现。</li>\n<li>抽象类，可放心添加非抽象方法。子类必须实现抽象方法，但非抽象方法不要求。</li>\n</ul>\n</li>\n<li><p>实例方法还是类方法：</p>\n<ul>\n<li>类方法：static 声明的静态方法。</li>\n<li><p>实例方法：关联在类的单个实例 (对象) 身上的实例成员。</p>\n<blockquote>\n<p>选择实例方法还是类方法，视设计方式决定，哪个方便来哪种。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>合成还是继承：可参考 <code>装饰模式</code>。</p>\n</li>\n<li><p>字段继承和访问器：</p>\n<ul>\n<li><code>protected</code> 修饰字段，允许子类直接访问这些字段。</li>\n<li><p>提供访问器，即字段声明为私有，对外隐藏细节。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> radius;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getRadius</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> radius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>单例 ：单例模式，只需要为类创建一个实例。更多设计模式可参考：</p>\n<blockquote>\n<p>原书笔记：<a href=\"https://www.kofes.cn/2018/01/Design-Pattern-Based-on-Android.html\">Android 设计模式之实践与案例</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"异常和异常处理\"><a href=\"#异常和异常处理\" class=\"headerlink\" title=\"异常和异常处理\"></a>异常和异常处理</h4><ul>\n<li><p>设计异常机制，应遵循下述良好的做法：</p>\n<ul>\n<li>异常也是对象，即考虑要在异常中存储什么额外状态；</li>\n<li>Exception 类有四个公开构造。一般情况，自定义异常类需要实现这四个构造方法，可用于初始化额外的状态，定制异常消息；</li>\n<li>不要捕获异常而不处理；      </li>\n<li><p>不要捕获异常，记录日志后再次抛出异常.  </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不要捕获异常而不处理</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    SomeMethodThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理异常的细节</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要捕获异常，记录日志后再次抛出异常</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    SomeMethodThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(SpecificException e) &#123;</span><br><span class=\"line\">    log(e);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> e; <span class=\"comment\">// 不要再异常处理中再抛出异常</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"陆-Java-实现内存管理和并发编程\"><a href=\"#陆-Java-实现内存管理和并发编程\" class=\"headerlink\" title=\"陆 Java 实现内存管理和并发编程\"></a>陆 Java 实现内存管理和并发编程</h2><ul>\n<li>本书对 Java 内存管理和高效并发的综述较为模糊，建议阅读周志明老师的《深入理解 Java 虚拟机》的第五部分 <code>高效并发</code> $^{[1]}$。</li>\n</ul>\n<h2 id=\"柒-编程和文档约定\"><a href=\"#柒-编程和文档约定\" class=\"headerlink\" title=\"柒 编程和文档约定\"></a>柒 编程和文档约定</h2><h3 id=\"命名和大小写约定\"><a href=\"#命名和大小写约定\" class=\"headerlink\" title=\"命名和大小写约定\"></a>命名和大小写约定</h3><ul>\n<li><p><code>包</code>：小写字母，常见做法是把公司的网站域名倒过来。</p>\n<blockquote>\n<p>例如：cn.kofes.javanutshell</p>\n</blockquote>\n</li>\n<li><p><code>引用类型</code>：<code>类</code> 的名称应大写字母开头，混用小写字母；若名称中有部分是 <code>简称</code>，则简称全大写。</p>\n<ul>\n<li>类和枚举类型，表示对象，名称多使用 <code>名词</code>。如 <code>Thread</code>、<code>FormatConvertor</code>。</li>\n<li>接口，为实现这个接口的类提供额外信息，接口名称一般使用 <code>形容词</code>。如 <code>Runnable</code>、<code>Cloneable</code>。</li>\n</ul>\n</li>\n<li><p><code>方法</code>：<code>名词 + 名词</code>；<code>动词 + 名词</code> 且遵循 <code>驼峰式</code> 命名规则。</p>\n<blockquote>\n<p>例如：ListenerCollection()、insertObjectA()</p>\n</blockquote>\n</li>\n<li><p><code>字段和常量</code>：声明为 <code>static final</code> 的常量，名称使用 <code>全大写形式</code>，若常量名词包含多个单词，单词之间应使用下划线分割。枚举类型定义的常量往往也全部使用大写字母。</p>\n</li>\n<li><p><code>参数</code>：尽量清楚表明参数作用的名称，尽量使用一个单词命名参数。</p>\n<blockquote>\n<p>例如：<code>WidgetProcessor widget;</code>、<code>ImageLoader image;</code></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java-文档注释\"><a href=\"#Java-文档注释\" class=\"headerlink\" title=\"Java 文档注释\"></a>Java 文档注释</h3><ul>\n<li><p>文档注释是普通的多行注释，即 <code>/* 块注释的内容. */</code>。文档包含简单的 Html 格式化标签，还可以包含其他特殊关键字，提供额外信息。</p>\n<p>  Javadoc 程序会把文档注释提取出来，自己转换成 Html 格式的在线文档。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个新 Complex 对象，表示复数 &lt;i&gt; x + y * i &lt;/i&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> x 复数的实部</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> y 复数的虚部</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Complex</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\"> \t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文档注释标签：</p>\n<ul>\n<li><code>@author name</code> 声明作者，例如 <code>@author BenEvans</code>。</li>\n<li><p><code>@version text</code>，声明版本信息，例如 <code>@version 1.3.2，08/26/2017</code>。</p>\n<blockquote>\n<p>这个标签常和支持自动排序版本号的版本控制系统一起使用，如：git、son。</p>\n</blockquote>\n</li>\n<li><p><code>@param parameter-name description</code>，声明参数信息。例如 <code>@param circle Circle 类实例化的对象</code>。</p>\n</li>\n<li><p><code>@return description</code>，声明返回信息。</p>\n<blockquote>\n<p>@return <code>&lt;code&gt;true&lt;/code&gt;</code> 成功插入对象。<br>@return <code>&lt;code&gt;false&lt;/code&gt;</code> 列表中已包含要插入的对象。</p>\n</blockquote>\n</li>\n<li><p><code>@exception full-classname description</code> 或 <code>@throw full-classname description</code>，声明异常。例如 <code>@exception java.io.FileNotFoundException 如果找不到指定的文件</code>。</p>\n</li>\n</ul>\n</li>\n<li><p>关于 Html 标签的使用说明：</p>\n<ul>\n<li><code>&lt;i&gt;&lt;/i&gt;</code>：用于强调文字内容。</li>\n<li><code>&lt;code&gt;&lt;/code&gt;</code>：用于显示类、方法和字段的名称。</li>\n<li><code>&lt;pre&gt;&lt;/pre&gt;</code>：用于显示多行代码示例。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"捌-使用-Java-集合\"><a href=\"#捌-使用-Java-集合\" class=\"headerlink\" title=\"捌 使用 Java 集合\"></a>捌 使用 Java 集合</h2><h3 id=\"介绍集合-API\"><a href=\"#介绍集合-API\" class=\"headerlink\" title=\"介绍集合 API\"></a>介绍集合 API</h3><h4 id=\"两种基本数据结构\"><a href=\"#两种基本数据结构\" class=\"headerlink\" title=\"两种基本数据结构\"></a>两种基本数据结构</h4><ul>\n<li>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对的映射表。</li>\n<li><p>Collection：对象的集合，如图 8-1 所示。 </p>\n<p>  <img src=\"/images/illustration/Programme/2017/09/Java_in_a_Nutshell_8-1.png\" alt=\"Collection数据结构\"></p>\n<center>图 8-1 Collection 数据结构</center>\n</li>\n<li><p>Map：对象间的一系列映射或关联关系，即 <code>键值对</code>，如图 8-2 所示。 </p>\n<p>  <img src=\"/images/illustration/Programme/2017/09/Java_in_a_Nutshell_8-2.png\" alt=\"Map数据结构\"></p>\n  <center>图 8-2 Map 数据结构</center>\n</li>\n<li><p>关于图 8-1 中，部分数据结构的说明：  </p>\n<ul>\n<li><code>Set</code>、<code>List</code> 是 <code>Collection</code>。Set 没有重复对象，Set 实现都不会对元素排序；List 可能有重复，且其元素按顺序排列。</li>\n<li><code>SortedSet</code> 和 <code>SortedMap</code> 是特殊的集合映射，其中的元素按顺序排序。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Collection-接口\"><a href=\"#Collection-接口\" class=\"headerlink\" title=\"Collection 接口\"></a>Collection 接口</h4><ul>\n<li><code>Collection&lt;E&gt;</code>，参数化接口，表示由泛型 E 对象组成的集合。</li>\n<li>该接口定义了很多方法，如：集合中添加、删除、遍历对象，测试对象是否存在集合中，集合中的元素转换成数组，返回集合大小。</li>\n</ul>\n<h4 id=\"Set-接口\"><a href=\"#Set-接口\" class=\"headerlink\" title=\"Set 接口\"></a>Set 接口</h4><ul>\n<li>无重复对象组成的集合<ul>\n<li>不可能有两个引用指向同一对象；</li>\n<li>不可能有两个指向 Null 的引用；</li>\n<li><code>a.equals(b)</code>，即 a，b 两对象不能同时出现在集合中.</li>\n</ul>\n</li>\n<li><p>多数通用的 Set 实现 <code>都不会对元素排序</code>，但并不禁止使用 <code>有序集</code>。</p>\n<blockquote>\n<p><code>有序集</code>：例如 SortedSet、LinkedHashSet。</p>\n</blockquote>\n</li>\n<li><p>实现 Set 接口的类</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类</th>\n<th style=\"text-align:left\">内部表示</th>\n<th style=\"text-align:left\">元素排序</th>\n<th style=\"text-align:left\">成员限制</th>\n<th style=\"text-align:left\">基本操作</th>\n<th style=\"text-align:left\">迭代性能</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HashSet</td>\n<td style=\"text-align:left\">哈希表</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">O(1)</td>\n<td style=\"text-align:left\">O(capacity)</td>\n<td style=\"text-align:left\">失去元素的插入顺序信息，使用 Iterator 遍历得到的结果是不确定的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedHashSet</td>\n<td style=\"text-align:left\">哈希链表</td>\n<td style=\"text-align:left\">插入顺序</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">O(1)</td>\n<td style=\"text-align:left\">O(n)</td>\n<td style=\"text-align:left\">内部使用双向链表维护元素的插入顺序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TreeSet</td>\n<td style=\"text-align:left\">红黑树</td>\n<td style=\"text-align:left\">升序排列</td>\n<td style=\"text-align:left\">可比较</td>\n<td style=\"text-align:left\">O(lgn)</td>\n<td style=\"text-align:left\">O(n)</td>\n<td style=\"text-align:left\">元素所需要的类型要实现 Comparable 接口或 Comparator 接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CopyOnWriteArraySet</td>\n<td style=\"text-align:left\">数组</td>\n<td style=\"text-align:left\">插入顺序</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">O(n)</td>\n<td style=\"text-align:left\">O(n)</td>\n<td style=\"text-align:left\">不使用同步方法也能保证线程安全</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"List-接口\"><a href=\"#List-接口\" class=\"headerlink\" title=\"List 接口\"></a>List 接口</h4><ul>\n<li>List 是一组 <code>有序</code> 的对象集合。</li>\n<li>列表中的每个元素都有特定的位置，且 List 接口定义了一些方法，用于查询或设定特定位置 (或叫索引) 的元素。从这个角度看，<code>List 对象和数组类似</code>，不过<code>列表的大小能按需变化</code>。</li>\n<li>和集不同，列表允许出现重复的元素。</li>\n<li><p>遍历循环和迭代，即依次处理每个元素。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ListCollection&lt;String&gt; c = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>( String word : c ) &#123;</span><br><span class=\"line\">\tSystem.out.println(word); <span class=\"comment\">// 遍历循环</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for 循环迭代判断是否还有下一个值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( Iterator&lt;String&gt; i = c.iterator(); i.hasNext(); ) &#123;</span><br><span class=\"line\">\tSystem.out.println( i.next() );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = c.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>( iterator.hasNext() ) &#123;</span><br><span class=\"line\">\tSystem.out.println( iterator.next() );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现 List 接口的类</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类</th>\n<th style=\"text-align:left\">表示方式</th>\n<th style=\"text-align:left\">随机访问</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ArrayList</td>\n<td style=\"text-align:left\">数组</td>\n<td style=\"text-align:left\">能</td>\n<td style=\"text-align:left\">高效查找和修改</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedList</td>\n<td style=\"text-align:left\">双向链表</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">高效插入和删除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CopyOnWriteArrayList</td>\n<td style=\"text-align:left\">数组</td>\n<td style=\"text-align:left\">能</td>\n<td style=\"text-align:left\">线程安全；遍历快；修改慢</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Map-接口\"><a href=\"#Map-接口\" class=\"headerlink\" title=\"Map 接口\"></a>Map 接口</h4><ul>\n<li>映射，一系列键值对，一个键对应一个值。</li>\n<li>Map 是参数化类型，即 <code>Map&lt;k,v&gt;</code>，<code>k</code> 表示映射中键的类型，<code>v</code> 表示键对应的值，如：<code>Map&lt;String, Integer&gt;</code></li>\n<li>实现 Map 接口的类</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类</th>\n<th style=\"text-align:left\">表示方式</th>\n<th style=\"text-align:left\">Null 键</th>\n<th style=\"text-align:left\">Nul 值</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HashMap</td>\n<td style=\"text-align:left\">哈希表</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentHashMap</td>\n<td style=\"text-align:left\">哈希表</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">线程安全 (详情请参阅 JDK API)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentSkipListMap</td>\n<td style=\"text-align:left\">哈希表</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">线程安全 (详情请参阅 JDK API)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedHashMap</td>\n<td style=\"text-align:left\">哈希表 + 列表</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">保留插入或访问顺序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TreeMap</td>\n<td style=\"text-align:left\">红黑树</td>\n<td style=\"text-align:left\">否</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">按照键排序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WeakHashMap</td>\n<td style=\"text-align:left\">哈希表</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">是</td>\n<td style=\"text-align:left\">不会阻止垃圾回收键</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Queue、BlockingQueue-接口\"><a href=\"#Queue、BlockingQueue-接口\" class=\"headerlink\" title=\"Queue、BlockingQueue 接口\"></a>Queue、BlockingQueue 接口</h4><ul>\n<li>队列是一组有序的元素，提取元素时按顺序从对头读取。队列插入元素的顺序实现，可分类为：<ul>\n<li>FIFO：先进先出 — <code>队列</code> 的特性。</li>\n<li>LIFO：后进先出 — <code>栈</code> 的特性。</li>\n</ul>\n</li>\n<li>把元素添加队列中：<ul>\n<li><code>add()</code>：Collection 接口定义，常规的方式添加元素。对有界的队列来说，若队列已满，这个方法会抛出异常。</li>\n<li><code>offer()</code>：Queue 接口中定义，若有界的队列已满，这个方法返回 false。</li>\n<li><code>put()</code>：BlockingQueue 接口中定义，会 <code>阻塞操作</code>。即队列已满，而无法插入元素，put() 方法会一直等待，直至其他线程从队列中移除元素，有空间插入新元素为止。</li>\n</ul>\n</li>\n<li><p>把元素从队列中移除：</p>\n<ul>\n<li><code>remove()</code>：<ul>\n<li>Collection 接口定义，把指定元素从队列中移除。</li>\n<li>Queue 接口中定义，则是没有参数的 remove()，移除并返回对头元素 (出队)，若队为空，则抛出 <code>NoSuchElementException</code> 异常。</li>\n</ul>\n</li>\n<li><p><code>poll()</code>：Queue 接口中定义，移除并返回对头元素，若队列为空，则返回 null。</p>\n<blockquote>\n<p>BlockingQueue 接口中定义了超时版的 poll()，指定时间内等待元素添加到空队列中。</p>\n</blockquote>\n</li>\n<li><p><code>take()</code>：BlockingQueue 接口定义，用于删除并返回队头元素 (出队)，若队为空，<code>这个方法会等待</code>，直到其他线程把元素添加到队列中为止。</p>\n</li>\n<li><code>drainTo()</code>：BlockingQueue 接口定义，把队列中的所有元素都移除，再把这些元素添加到指定的 Collection 对象中。这个方法不会阻塞操作。</li>\n</ul>\n</li>\n<li>查询：就队列而言，查询时访问队头元素，但不将其从队列中移除。<ul>\n<li><code>element()</code>：Queue 接口中定义，作用时返回队头元素，但不将其从队列中移除，若队为空，则抛出 <code>NoSuchElementException</code> 异常。</li>\n<li><code>peek()</code>：Queue 接口中定义，作用和 element() 类似，但队为空时返回 null。</li>\n</ul>\n</li>\n<li>特别说明：  <ul>\n<li>如果想在操作成功前一直阻塞，应选 put() 与 take()。  </li>\n<li>如果想检查方法返回值，应选 offer() 和 poll()。  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h4><ul>\n<li><code>java.util.Collections</code> 类定义了一些静态实用方法，用于处理集合。</li>\n<li><p><code>包装集合</code>：把集合本身没有提供的功能绑定到集合上。即包装集合能提供的功能有：线程安全性、写保护和运行时类型检查。</p>\n<ul>\n<li>为包装集合提供线程安全性。</li>\n<li><p>不能修改底层集合，即得到的集合只读。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为包装集合提供线程安全性</span></span><br><span class=\"line\">List&lt;String&gt; list = Collections.sychronizedList( </span><br><span class=\"line\">\t<span class=\"keyword\">new</span> ArrayList&lt;String&gt;() );</span><br><span class=\"line\">Set&lt;Integer&gt; set = Collections.sychronizedSet( </span><br><span class=\"line\">\t<span class=\"keyword\">new</span> HashSet&lt;Integer&gt;() );</span><br><span class=\"line\">Map&lt;String, Integer&gt; map = Collections.sychronizedMap( </span><br><span class=\"line\">\t<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;() );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不能修改底层集合，即得到的集合只读</span></span><br><span class=\"line\">List&lt;Integer&gt; primes = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; readonly = Collections.unmodifiableList(primes);</span><br><span class=\"line\">primes.add( Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) ); <span class=\"comment\">// 正常</span></span><br><span class=\"line\">readonly.add(<span class=\"number\">23</span>); <span class=\"comment\">// 抛出 UnsupportedOperationException 异常</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>操作集合</code>：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二分查找前，必须使列表变有序</span></span><br><span class=\"line\">Collections.sort(list);</span><br><span class=\"line\"><span class=\"keyword\">int</span> pos = Collections.binarySearch(list, <span class=\"string\">\"key\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把 list2 的元素复制到 list1，覆盖 list1</span></span><br><span class=\"line\">Collections.copy(list1, list2); \t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用对象 obj 去填充 list</span></span><br><span class=\"line\">Collections.fill(list, obj); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出集合 list 中最大、小的元素</span></span><br><span class=\"line\">Collections.max(list);</span><br><span class=\"line\">Collections.min(list);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反转列表</span></span><br><span class=\"line\">Collections.reverse(list); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打乱列表</span></span><br><span class=\"line\">Collections.shuffle(list);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>返回集合</code>：若方法需返回一个集合，若返回值为空，建议返回空集合，代替返回 <code>null</code>。</p>\n<ul>\n<li><code>Set&lt;Integer&gt; set_list = Collections.emptySet();</code>  </li>\n<li><code>List&lt;String&gt; list = Collections.emptyList();</code>  </li>\n<li><code>Set&lt;String, Integer&gt; map_list = Collections.emptyMap();</code>  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数组和辅助方法\"><a href=\"#数组和辅助方法\" class=\"headerlink\" title=\"数组和辅助方法\"></a>数组和辅助方法</h4><ul>\n<li><p>对象组成的数组和集合的作用类似，二者间可相互转换。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String[] str = &#123;<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"sample\"</span>&#125;; <span class=\"comment\">// 数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组转换成大小不可变的列表</span></span><br><span class=\"line\">List&lt;String&gt; list = Array.asList(str); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个大小可变的副本</span></span><br><span class=\"line\">List&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(list);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Array 类还定义了一些静态方法：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.sort(array); <span class=\"comment\">// 原地排序数组</span></span><br><span class=\"line\">Array.binary(array, <span class=\"number\">7</span>); <span class=\"comment\">// 在 Array 中找 7</span></span><br><span class=\"line\">Array.equals(array1, array2); <span class=\"comment\">// 比较两个数组是否相等</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"玖-处理常见的数据格式\"><a href=\"#玖-处理常见的数据格式\" class=\"headerlink\" title=\"玖 处理常见的数据格式\"></a>玖 处理常见的数据格式</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><h4 id=\"字符串的特殊句法\"><a href=\"#字符串的特殊句法\" class=\"headerlink\" title=\"字符串的特殊句法\"></a>字符串的特殊句法</h4><ul>\n<li><p>字符串字面量：Java 允许把一系列字符放在双引号中创建字面量字符串对象。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String pet = <span class=\"string\">\"Cat\"</span>;</span><br><span class=\"line\">system.out.println(<span class=\"string\">\"Dog\"</span>,.length());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>toString()：作用是方便把任何对象转换成字符串。</p>\n</li>\n<li>字符串连接：”StringA” + “StringB”。<br>连接字符串时，先创建一个使用 StringBuilder 对象表示的一个工作区 (暂存区)，其内容和原始字符串中的字符序列一样。然后更新 StringBuilder 对象，把另一个字符串中的字符源加到末尾。最后，在 StringBuilder 对象上调用 toString() 得到一个新字符串。</li>\n</ul>\n<h4 id=\"字符串的不可变性\"><a href=\"#字符串的不可变性\" class=\"headerlink\" title=\"字符串的不可变性\"></a>字符串的不可变性</h4><ul>\n<li>String1 + String2 =&gt; StringBuilder对象 (暂存区) =&gt; toString()，则输出的字符串为 <code>String1 + String2</code>。</li>\n</ul>\n<h4 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h4><ul>\n<li>正则表达式，用于扫描和匹配文本的搜索模式。</li>\n<li><p>Java 使用 Pattern 类表示正则表达式。</p>\n<blockquote>\n<p><code>?</code> 为元字符。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pattern p = Pattern.compile(<span class=\"string\">\"honou?r\"</span>);</span><br><span class=\"line\">String caesarUK = <span class=\"string\">\"For Brutus is an honourable man.\"</span>;</span><br><span class=\"line\">Matcher mUK = p.matcher(caesarUK);</span><br><span class=\"line\"></span><br><span class=\"line\">String caesarUS =<span class=\"string\">\"For Brutus is an honorable man.\"</span>;</span><br><span class=\"line\">Mathcher mUS = p.matcher(caesarUS);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Matches.UK Spelling?\"</span> + mUK.find());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Matches.US Spelling?\"</span> + mUS.find());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>正则表达式元字符：</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">元字符</th>\n<th style=\"text-align:left\">意义</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">可选字符出现0或1次</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">前一个字符出现0或多次</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">前一个字符出现1或多次</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{m, n}</td>\n<td style=\"text-align:left\">前一个字符出现m到n次</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">一个数字</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">一个不是数字的字符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">一个组成单词的字符</td>\n<td style=\"text-align:left\">数字、字母和 _</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">一个不能组成单词的字符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">一个空白字符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">一个不是空白的字符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">制表符</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">任意一个字符</td>\n<td style=\"text-align:left\">在 Java 中不包括换行符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[]</td>\n<td style=\"text-align:left\">方括号中的任意字符</td>\n<td style=\"text-align:left\">叫作字符组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><sup><a href=\"#fn_\" id=\"reffn_\"></a></sup></td>\n<td style=\"text-align:left\">不在方括号中的任意一字符</td>\n<td style=\"text-align:left\">叫作排除字符组</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">()</td>\n<td style=\"text-align:left\">构成一组模式元素</td>\n<td style=\"text-align:left\">叫作组 (捕获组)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">或的符号</td>\n<td style=\"text-align:left\">定义可选值</td>\n<td style=\"text-align:left\">实现逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">字符串的开头</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">字符串的末尾</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note success\"><p> 工欲善其事，必先利其器。为更快速、准确上手正则，这些现成的、实用的表达式助你一臂之力。<br><a href=\"https://www.jianshu.com/p/e7bb97218946\" target=\"_blank\" rel=\"noopener\">技匠. 知道这20个正则表达式能让你少写 1,000 行代码. 2016. jianshu.com</a>\\(^{[2]}\\) </p></div>\n<h3 id=\"数字和数学运算\"><a href=\"#数字和数学运算\" class=\"headerlink\" title=\"数字和数学运算\"></a>数字和数学运算</h3><h4 id=\"Java-表示整数类型的方式\"><a href=\"#Java-表示整数类型的方式\" class=\"headerlink\" title=\"Java 表示整数类型的方式\"></a>Java 表示整数类型的方式</h4><ul>\n<li><p>以 Java 的 Byte 类型为例，说明 Java 是如何表示整数的。Byte 类型的数字占8位，设定 Byte 类型数字的最高位用于表示正、负号。故有128个正数，128个负数。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> b = <span class=\"number\">0b0000_0001</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> b = <span class=\"number\">0b0111_1111</span>; <span class=\"comment\">// 127</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 负数是以补码形式存储的，而正数，原码、反码、补码一致</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> b = <span class=\"number\">0b1111_1111</span>; <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span> b = <span class=\"number\">0b1111_1111</span>; <span class=\"comment\">// -2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"拾-处理文件和-I-O\"><a href=\"#拾-处理文件和-I-O\" class=\"headerlink\" title=\"拾 处理文件和 I/O\"></a>拾 处理文件和 I/O</h2><h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><ul>\n<li>Java 对网络支持的核心 API 在 java.net 包中，其他扩展 API 则由 javax.net 包提供，尤其是 <code>java.net.ssl</code>。</li>\n</ul>\n<h4 id=\"超文本传输协议-HTTP\"><a href=\"#超文本传输协议-HTTP\" class=\"headerlink\" title=\"超文本传输协议 (HTTP)\"></a>超文本传输协议 (HTTP)</h4><ul>\n<li><p>URL 是关键的类，其原生支持 <code>http://</code>、<code>https://</code>、<code>ftp://</code>、<code>file://</code> 形式的 URL。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载指定 URL 对应页面的内容</span></span><br><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.baidu.com\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span>( InputStream in = url.openStream() ) &#123;</span><br><span class=\"line\">    File.copy(in, Paths.get(<span class=\"string\">\"output.txt\"</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( IOException ex ) &#123;</span><br><span class=\"line\">    ex.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深入低层控制，可使用 URLConnection 类</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    URLConnection conn = url.openConnection();</span><br><span class=\"line\">    String type = conn.getContectType();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = conn.getContentLength();</span><br><span class=\"line\">    InputStream in = conn.getInputStream();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>( IOException e ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HTTP 定义了多个“请求方法”，客户端使用这些操作远程资源。这些方法有：<code>GET</code>、<code>POST</code>、<code>HEAD</code>、<code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code>、<code>TRACE</code>。</p>\n<ul>\n<li>GET：用于取文档，不能执行任何副作用；</li>\n<li>HEAD：与 GET 的作用一样，但不返回主体，用于检查 URL 对应的网址的页面是否有变化。</li>\n<li>POST：把数据发给服务器处理。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"传输控制协议-TCP\"><a href=\"#传输控制协议-TCP\" class=\"headerlink\" title=\"传输控制协议 (TCP)\"></a>传输控制协议 (TCP)</h4><ul>\n<li><p>TCP具有下列特征 (特性)：</p>\n<ul>\n<li>基于连接：数据属于单个逻辑流 (连接)。</li>\n<li>保证送达：<code>三次握手</code>，如果未收到数据包，会一直重新发送，知道送达为止。</li>\n<li>错误检查：能检测到网络传输导致的损坏，并自动修复。</li>\n</ul>\n</li>\n<li><p>Java 使用 Socket 和 ServerSocket 类表示 TCP。</p>\n<ul>\n<li><p>例1：我们既要从客户端套接字中读取数据，也要把数据写入客户端套接字，且构建请求时要遵守 HTTP 标准 (RFC 2616)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String hostname = <span class=\"string\">\"www.example.com\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> port = <span class=\"number\">80</span>;</span><br><span class=\"line\">String filename = <span class=\"string\">\"/index.html\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>(</span><br><span class=\"line\">    Socket socket = <span class=\"keyword\">new</span> Socket(hostname, port);</span><br><span class=\"line\">    BufferedReader from = <span class=\"keyword\">new</span> BufferedReader(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> InputStreamReader( socket.getInputStream() )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    PrintWriter to = <span class=\"keyword\">new</span> PrintWriter(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> OutputStreamWriter( socket.getOutputStream() )</span><br><span class=\"line\">    );</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    to.print(<span class=\"string\">\"GET\"</span> + filename + </span><br><span class=\"line\">        <span class=\"string\">\"HTTP/1.1\\r\\nHost:\"</span> + hostname + <span class=\"string\">\"\\r\\n\\r\\n\"</span>);</span><br><span class=\"line\">    to.flush();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>( String l = <span class=\"keyword\">null</span>; (l = from.readLine()) != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        System.out.println(l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例2：在服务器端，可能需要处理多个连入连接。编写一个服务器的主循环，使用 <code>accept()</code> 从操作系统中接收一个新连接。随后，要迅速把这个新连接传给单独的类处理，好让服务器主循环继续监听新连接。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理连接的类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTTPHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Socket socket;</span><br><span class=\"line\">    HTTPHandler(Socket client) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.socket = client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(</span><br><span class=\"line\">            Buffered in = <span class=\"keyword\">new</span> BufferedReader(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InputStreamReader( socket.getInputStream() )</span><br><span class=\"line\">            );</span><br><span class=\"line\">            PrintWriter out = <span class=\"keyword\">new</span> PrintWriter(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> OutputStreamWriter( socket.getOutputStream() )</span><br><span class=\"line\">            );</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            out.print(<span class=\"string\">\"HTTP/1.0 200 /r/nContent-Type:text/plain\"</span>);</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>( (line = in.readLine()) != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( <span class=\"number\">0</span> == line.length()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                out.println(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>( Exception e ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务器主循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> port = Integer.parseInt( args[<span class=\"number\">0</span>] );</span><br><span class=\"line\">        ServerSocket ss = <span class=\"keyword\">new</span> ServerSocket(port);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">            Socket client = ss.accept();</span><br><span class=\"line\">            HTTPHandler handler = <span class=\"keyword\">new</span> HTTPHandler(client);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(handler).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>( Exception e ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"互联网协议-IP\"><a href=\"#互联网协议-IP\" class=\"headerlink\" title=\"互联网协议 (IP)\"></a>互联网协议 (IP)</h4><ul>\n<li>传输数据的最低层标准，抽象了把自己从 A 设备移动到 B 设备的物理网络技术。</li>\n<li>与 TCP 不同，IP 数据包不能保证送达，在传输路径中，任何过载系统都可能会丢掉数据包。</li>\n<li>Java 使用 <code>DatagramSocket</code> 类实现这种功能。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">[1] 周志明. 深入理解 Java 虚拟机 [M]. 第2版. 机械工业出版社, 2013</a><br><a href=\"https://www.jianshu.com/p/e7bb97218946\" target=\"_blank\" rel=\"noopener\">[2] 技匠. 知道这20个正则表达式能让你少写 1,000 行代码. 2016. jianshu.com</a></p>\n","categories":["Programme"],"tags":["java"]},{"title":"一个 APP 的诞生：以设计师角度造产品","url":"/2018/03/Producting-An-Application.html","content":"<p><a href=\"https://book.douban.com/subject/26865230/\" target=\"_blank\" rel=\"noopener\">《 一个 APP 的诞生 》</a>被定义是一本教科书、工具书，适合想通过 APP 实现自己的产品梦的受众通读，即通过本书可让你快速了解 APP 产品的整个流程，从零到一，创造 APP 产品。</p>\n<p>而通读本书籍后，或许你、我有同样的感受，即大部分内容是以设计师的角度看待问题的。这样，若你就是设计师，或许这将助你更加透彻理解 APP 的产出过程；若你是软件工程师，也可看待成是从另一角度理解软件过程。当然，这些知识只停留在书本层面，而对实际项目而言，有出入是无法避免的，但不失它的参考价值。简言之，这样一本图文并茂、实例贴近现实且含有众多跨界元素 (设计、开发、交互、产品等) 的工具书，特别是产品这一类别的书目 (下述还有同类型的书籍推荐)，不仅让你有机会感同身受业界优秀企业的工作流程，也是自身寻求产品方法论的不二选择。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>推荐书目：</p>\n<ul>\n<li><p>《 U一点·料 》：由阿里巴巴集团 1688.UED 团队历经多年实践之后的佳作，内容重实战、讲方法、求专业、论文化，且以 “道─术─器” 的思路为编排脉络，从设计观、思考体系、方法论上层层剖析，将零散的行业技术诀窍串成体系，对 “UED如何发展突破” 提出了自己的真知灼见。  </p>\n<p>  贴上本书的 <a href=\"https://book.douban.com/subject/26594029/\" target=\"_blank\" rel=\"noopener\">豆瓣书评</a>，供朋友评判，做出抉择。</p>\n</li>\n<li><p>《 设计之下 》：由搜狐新闻客户端 UED 团队共同出品的佳作，分别以交互设计、视觉设计、设计师视觉，全面讲解了用户体验设计的流程和方法。  </p>\n<p>  贴上本书的 <a href=\"https://book.douban.com/subject/25817190/\" target=\"_blank\" rel=\"noopener\">豆瓣书评</a>，供朋友评判，做出抉择。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><ul>\n<li>2018.03.25：完成序言；</li>\n<li>2018.03.26：更新内容 ( 共 6 章 )；</li>\n<li>2018.04.02：更新完毕.</li>\n</ul>\n<h2 id=\"零-思维导图\"><a href=\"#零-思维导图\" class=\"headerlink\" title=\"零 思维导图\"></a>零 思维导图</h2><blockquote>\n<p>学习思路：根据思维导图的架构，掌握知识；以及参考部分项目经验，文档归纳。</p>\n</blockquote>\n<ul>\n<li>前景探索<ul>\n<li>竞品分析<ul>\n<li>熟悉竞品分析的流程；</li>\n<li>明确竞品分析的每个部分包含的内容；</li>\n<li>分析报告的输出.</li>\n</ul>\n</li>\n<li>用户研究<ul>\n<li>了解用户研究的方法及它们的定义；</li>\n<li>用户画像<br>1) 掌握建立的流程；<br>2) 用户画像的分类，每种分类的使用方法及优缺点；<br>3) 用户画像的构成、价值.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计规范及流程<ul>\n<li>建立设计规范的特定情况；</li>\n<li>iOS 和 Android 规范的差别；</li>\n<li>主要元素及作用.</li>\n</ul>\n</li>\n<li>交互设计<ul>\n<li>用户体验<ul>\n<li>交互设计师的工作内容、状况分析及处理；</li>\n<li>紧密联系生活.</li>\n</ul>\n</li>\n<li>交互设计的基本流程<ul>\n<li>交互设计五要素：<code>人</code>、<code>目的</code>、<code>环境</code>、<code>媒介</code>、<code>行为</code>；</li>\n<li>基本流程.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>视觉设计<ul>\n<li>Ui 设计<ul>\n<li>Ui 设计制作流程；</li>\n<li>对未来设计趋势的了解与把握.</li>\n</ul>\n</li>\n<li>图标品质的提升</li>\n<li>界面细节设计<ul>\n<li>栅格系统提升界面易读性与可用性；</li>\n<li>切图标注的知识与技能；</li>\n<li>设计资源命名及文件分类整理.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>开发实现<ul>\n<li>如何与产品、运营、开发配合工作<ul>\n<li>互联网企业中产品开发实现过程；</li>\n<li>主要工作岗位职责和工作性质，以及岗位配合的注意事项.</li>\n</ul>\n</li>\n<li>发布制作完成的 APP<ul>\n<li>发布方式</li>\n<li>常见市场</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线上运营<ul>\n<li>运营的定义<ul>\n<li>什么是运营及运营的目标；</li>\n<li>运营手段及运营岗位.</li>\n</ul>\n</li>\n<li>线上运营活动：策划线上活动流程</li>\n<li>H5 页面和 Banner 设计</li>\n</ul>\n</li>\n<li><p>服务设计</p>\n<blockquote>\n<p>推荐阅读 <em>This is service design thinking</em> \\(^{[1]}\\)</p>\n</blockquote>\n<ul>\n<li>服务设计的概念</li>\n<li>服务设计的流程</li>\n<li>工具箱：熟悉常见服务设计工具</li>\n</ul>\n</li>\n<li>跨界设计</li>\n</ul>\n<h2 id=\"壹-前景探索\"><a href=\"#壹-前景探索\" class=\"headerlink\" title=\"壹 前景探索\"></a>壹 前景探索</h2><h3 id=\"竞品分析\"><a href=\"#竞品分析\" class=\"headerlink\" title=\"竞品分析\"></a>竞品分析</h3><p>竞品分析，能带来的价值：</p>\n<ul>\n<li>企业：优势 (Strength，S) 和 劣势 (Weakness，W)</li>\n<li>设计：User Interface</li>\n</ul>\n<h4 id=\"为什么要竞品分析\"><a href=\"#为什么要竞品分析\" class=\"headerlink\" title=\"为什么要竞品分析\"></a>为什么要竞品分析</h4><ul>\n<li>知己知彼<ul>\n<li>市场：红海 (已知的市场空间)；蓝海 (还不存在的产品)</li>\n<li>动向：目标人群、运营策略、用户体验、用户反馈</li>\n</ul>\n</li>\n<li>设计灯塔：权衡利益与设计成本的关系</li>\n</ul>\n<h4 id=\"如何做竞品分析\"><a href=\"#如何做竞品分析\" class=\"headerlink\" title=\"如何做竞品分析\"></a>如何做竞品分析</h4><ul>\n<li><code>确立</code> 竞争对手<ul>\n<li>市场目标一致；</li>\n<li>目标用户相同；</li>\n<li>产品功能相同、相似；</li>\n<li>用户需求相同.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>选择优质和合适的竞品，再进行分析。如表 1-1 所示，定位于即时通信类 APP ，即所要考虑的竟品类型及竞争关系。</p>\n</blockquote>\n<center>表 1-1 即时通信类 APP 的竟品类型及竞争关系</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">考虑因素</th>\n<th style=\"text-align:left\">主要分析对象</th>\n<th style=\"text-align:left\">参考分析对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">市场目标方向一致、目标用户群体大致相同、功能用户需求相似</td>\n<td style=\"text-align:left\">QQ、微信</td>\n<td style=\"text-align:left\">陌陌、JUJU</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">市场目标方向不一致、功能需求互补</td>\n<td style=\"text-align:left\">YY、斗鱼</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p><code>挖掘</code> 对手信息</p>\n<ul>\n<li>搜集资料<ul>\n<li>数据资料，例如：APP 下载量，市场方面数据等。</li>\n<li>其他信息，例如：APP 新闻动态，研究报告，APP 评价等。</li>\n</ul>\n</li>\n<li>搜集渠道<ul>\n<li>公司内部资源</li>\n<li>运营部门</li>\n<li>搜索引擎</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>分析</code> 数据信息</p>\n<ul>\n<li><a href=\"#分析数据信息\">分析数据模型</a></li>\n<li>整合收集的信息 (企业战略、目标人群、交互设计、视觉设计、运营策略等)</li>\n</ul>\n</li>\n<li><p><code>输出</code> 分析报告 — <a href=\"#输出分析报告\">可视化输出</a></p>\n</li>\n</ul>\n<h4 id=\"分析数据信息\"><a href=\"#分析数据信息\" class=\"headerlink\" title=\"分析数据信息\"></a>分析数据信息</h4><ul>\n<li><p>分析数据模型</p>\n<ul>\n<li><p><code>SWOT</code> 模型，即道斯矩阵、态势分析法，经常用于企业战略制定、竞争对手分析。</p>\n<p>详细解释见：<a href=\"http://wiki.mbalib.com/wiki/%E9%81%93%E6%96%AF%E7%9F%A9%E9%98%B5\" target=\"_blank\" rel=\"noopener\">MBAlib.智库百科.SWOT分析模型</a></p>\n<blockquote>\n<p><code>SWOT</code> 分别代表企业的优势 (Stength)、劣势 (Weakness)、机会 (Opportunity) 和威胁 (Threats)。</p>\n</blockquote>\n</li>\n<li><p>波士顿矩阵 \\(^{[2,3]}\\)，四象限分析法。详细解释见：<a href=\"http://wiki.mbalib.com/wiki/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E7%9F%A9%E9%98%B5\" target=\"_blank\" rel=\"noopener\">MBAlib.智库百科.波士顿矩阵</a></p>\n</li>\n<li><p>KANO 模型 \\(^{[4]}\\)，一种典型的定性分析模型，经常用于绩效指标分类。其定义了顾客需求的三个层次：基本型需求、期望型需求和兴奋型需求。详细解释见：<a href=\"http://wiki.mbalib.com/wiki/KANO%E6%A8%A1%E5%9E%8B\" target=\"_blank\" rel=\"noopener\">MBAlib.智库百科.KANO 模型</a></p>\n</li>\n</ul>\n</li>\n<li><p>关于 SWOT 分析模型</p>\n<ul>\n<li>SW：竞争优势指一企业超越其竞争对手的能力，这种能力有助于实现企业的主要目标 — 盈利。  </li>\n<li>OT：不利发展趋势所形成的挑战。</li>\n</ul>\n</li>\n</ul>\n<center>表 1-2 SWOT 分析模型</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">发展趋势 (负)</th>\n<th style=\"text-align:center\">条件</th>\n<th style=\"text-align:center\">发展趋势 (正)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">劣势 (Weakness，W)</td>\n<td style=\"text-align:center\">企业自身自身实力与竞争对手比较</td>\n<td style=\"text-align:center\">优势 (Strength，S)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">威胁 (Threats，T)</td>\n<td style=\"text-align:center\">外部环境变化对企业可能的影响</td>\n<td style=\"text-align:center\">机遇 (Opportunity，O)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>举例：对蚂蜂窝 APP 实行 SWOT 分析法    </p>\n</blockquote>\n<ul>\n<li><code>S</code>：旅游攻略是蚂蜂窝进军移动端的拳头产品，手持海量 UGC 数据和攻略引擎技术。</li>\n<li><code>W</code>：盈利模式单一，知识与传统 OTA 合作的佣金 + 广告模式)。</li>\n<li><code>O</code>：OTA &amp; O2O。</li>\n<li><p><code>T</code>：行业壁垒；变现能力还能支持技术和运营走多远？</p>\n</li>\n<li><p>关于波士顿矩阵：波士顿矩阵区分出4种业务组合，如表 1-3 所示。</p>\n</li>\n</ul>\n<center>表 1-3 波士顿矩阵业务组合</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">销售增长率</th>\n<th style=\"text-align:left\">市场占有率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">明星类产品</td>\n<td style=\"text-align:left\">高</td>\n<td style=\"text-align:left\">高</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">瘦狗类产品</td>\n<td style=\"text-align:left\">低</td>\n<td style=\"text-align:left\">低</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">问题类产品</td>\n<td style=\"text-align:left\">高</td>\n<td style=\"text-align:left\">低</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">现金牛类产品</td>\n<td style=\"text-align:left\">低</td>\n<td style=\"text-align:left\">高</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"输出分析报告\"><a href=\"#输出分析报告\" class=\"headerlink\" title=\"输出分析报告\"></a>输出分析报告</h4><ul>\n<li>竞品分析包括内容：<ul>\n<li>市场趋势、行业现状； — <code>SWOT 分析法</code></li>\n<li>竞品的企业愿景、APP 定位、发展策略；</li>\n<li>目标用户，用户画像；</li>\n<li>核心功能；</li>\n<li>交互设计；</li>\n<li>APP 优缺点；</li>\n<li>运营及推广策略；</li>\n<li>总结并建议.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"用户研究\"><a href=\"#用户研究\" class=\"headerlink\" title=\"用户研究\"></a>用户研究</h3><p>用户研究最终的输出产物之一就是用户画像，即用户研究 =&gt; 用户画像。</p>\n<h4 id=\"一般方法\"><a href=\"#一般方法\" class=\"headerlink\" title=\"一般方法\"></a>一般方法</h4><ul>\n<li>场景观察：正常的工作环境或其他产品合适的 <code>物理场景</code> 中观察用户并与其交流。</li>\n<li>可用性测试：用户在一定场景下使用产品。由可用性工程师对 <code>用户操作过程、习惯</code> 等进行 <code>观察、记录和测量</code>，以评估产品的可用性问题。</li>\n<li>问卷调查：用 <code>统一、严格设计的问卷</code> 收集研究对象有关的 <code>心理特征</code> 和 <code>行为数据</code> 资料。</li>\n<li><p>访谈研究：在访问用户过程中，提示被访者对某一问题的 <code>潜在冬季、新年、态度和感情</code>。</p>\n<blockquote>\n<p>潜在冬季、新年、态度和感情？</p>\n</blockquote>\n</li>\n<li><p>焦点小组：定性研究方法。一定的组织结构，让用户一起进行 <code>互动</code>，用以激发新的思考和想法。</p>\n</li>\n<li>桌面研究：对已收集信息进行调研活动，即对二手资料进行搜集、筛选，并判断问题是否已经 <code>局部解决</code> 或 <code>全部解决</code>。</li>\n<li>专家评估：组织各领域专家运用专业方面知识和经验，通过直观归纳，对产品过去、现在及发展过程进行综合分析、研究，再作判断。</li>\n</ul>\n<h4 id=\"用户画像\"><a href=\"#用户画像\" class=\"headerlink\" title=\"用户画像\"></a>用户画像</h4><ul>\n<li><p>输出用户画像的流程</p>\n<ul>\n<li>获取研究用户信息</li>\n<li>细分用户群</li>\n<li>建立并丰富用户画像</li>\n</ul>\n</li>\n<li><p>建立用户画像的方法</p>\n<ul>\n<li><code>定性</code> 用户画像</li>\n<li>经 <code>定量验证</code> 的 <code>定性</code> 用户画像</li>\n<li><p><code>定量</code> 用户画像</p>\n<blockquote>\n<p>定性 (性质) 研究：创立理论的过程。即 <code>具体向抽象转化</code>，形成理论。通常以 <code>访谈、观察</code> 等方法收集第一手描述性资料 (归纳法)。 </p>\n<p>定量 (度量) 研究：<code>提出理论假设</code>，使用 <code>问卷</code> 等工具收集具有数量关系的资料，对资料进行 <code>量化</code>，以 <code>数据形式</code> 验证假设。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>定性用户画像 — <code>直接分用户群</code></p>\n<ul>\n<li>步骤<br>1) 定性研究访谈；<br>2) 细分用户群；<br>3) 建立细分群体的用户画像。 </li>\n<li>定性用户画像优缺点<ul>\n<li>优点 - 省时省力、简单、需要专业人员少。</li>\n<li>缺点 - 缺少数据支持和验证。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>经定量验证的定性用户画像 — <code>分了用户群再验证</code></p>\n<ul>\n<li>步骤<br>1) 定性研究访谈；<br>2) 细分用户群；<br>3) 定量验证细分群体；<br>4) 建立细分群体的用户画像。  </li>\n<li>经定量验证的定性用户画像优缺点<ul>\n<li>优点 - 有一定的定量验证工作，需要少量的专业人员。</li>\n<li>缺点 - 工作量较大，成本较高。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定量用户画像 — <code>验证了再分用户群</code></p>\n<ul>\n<li>步骤<br>1) 定性研究；<br>2) 多个细分假设；<br>3) 通过定量收集细分数据；<br>4) 聚类分析细分用户；<br>5) 建立细分群体的用户画像。  </li>\n<li>定量用户画像的优缺点<ul>\n<li>优点 - 有充分的佐证、更加科学、需要大量的专业人员。</li>\n<li>缺点 - 工作量较大，成本高。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>用户画像包含以下元素：</p>\n<ul>\n<li>基本信息 (姓名、照片、年龄、家庭状况、收入、工作)；</li>\n<li>典型场景；</li>\n<li>目标和动机；</li>\n<li>需求和痛点；</li>\n<li><p>对 APP 的态度；</p>\n<p>如图 1-1 以音乐沉侵爱好者为例，建立用户画像。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_1-1.png\" alt=\"音乐沉侵爱好者的用户画像\"></p>\n<center>图 1-1 音乐沉侵爱好者的用户画像</center>\n\n<h4 id=\"调查问卷设计\"><a href=\"#调查问卷设计\" class=\"headerlink\" title=\"调查问卷设计\"></a>调查问卷设计</h4><p>设计问卷的目的是为了更好地搜集信息或者定量去验证定性研究的结果。故在问卷设计的过程中，要把握调查的目的和需求，具体可分为以下几个步骤：</p>\n<ul>\n<li><p>问卷设计流程</p>\n<ul>\n<li>确定所需要的信息<ul>\n<li>调研目的</li>\n<li>竞品分析文档</li>\n<li>用户画像</li>\n</ul>\n</li>\n<li>确定问题顺序：<code>先易后难</code></li>\n<li>问卷的测试和修改<ul>\n<li>投放预测试</li>\n<li>问题修改</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设计问卷题目</p>\n<ul>\n<li>用户基本信息 (年龄、爱好、APP 相关生活行为)</li>\n<li>用户使用 APP 典型场景 (碎片化时间使用，使用频次)</li>\n<li><p>用户的痛点与需求</p>\n<blockquote>\n<p>可参考书本 P27-30 的实例，全民 K 歌用户体验调研问卷。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-交互设计\"><a href=\"#贰-交互设计\" class=\"headerlink\" title=\"贰 交互设计\"></a>贰 交互设计</h2><h3 id=\"用户体验\"><a href=\"#用户体验\" class=\"headerlink\" title=\"用户体验\"></a>用户体验</h3><ul>\n<li>用户体验，即站在用户角度考虑问题。</li>\n<li>交互设计师<ul>\n<li>核心价值：沟通</li>\n<li>工作流程：<ul>\n<li>对重要或者紧急设计任务进行准备、分工、安排；</li>\n<li>写解决方案，画稿；</li>\n<li>评审待确认的设计；</li>\n<li>总结方案，输出结果，同步给部门；</li>\n<li>输出设计稿，与产品、研发及时沟通；</li>\n<li>与项目接口人沟通.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"交互设计基本流程\"><a href=\"#交互设计基本流程\" class=\"headerlink\" title=\"交互设计基本流程\"></a>交互设计基本流程</h3><h4 id=\"交互五要素\"><a href=\"#交互五要素\" class=\"headerlink\" title=\"交互五要素\"></a>交互五要素</h4><ul>\n<li>人 (Amber)：有记录灵感的设计师，有需求的人称之为用户。</li>\n<li>媒介 (Tools)：用户使用的设备。</li>\n<li>行为 (Behavior)：用户的具体操作。</li>\n<li>目的 (Purpose)：要达到某种的效果。</li>\n<li>环境 (Enviroment)：用户使用的设备，这里指手机。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-1.png\" alt=\"交互设计五元素\"></p>\n<center>图 2-1 交互设计五元素</center>\n\n<h4 id=\"如何参与一个项目\"><a href=\"#如何参与一个项目\" class=\"headerlink\" title=\"如何参与一个项目\"></a>如何参与一个项目</h4><p>交互设计师接到一个项目或者需求后，他们的工作流程基本按照以下流程执行，即需求分析、信息架构设计、流程图设计、原型设计、最终进入产品的可用性测试，当然需求分析阶段完成后，也可以进行可用性测试，以验证方案的可行性。图 2-2 描述了交互设计师如何参与一个项目。</p>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-2.png\" alt=\"交互设计师如何参与一个项目\"> </p>\n<center>图 2-2 交互设计师如何参与一个项目</center>\n\n<blockquote>\n<p>提示：实例中，我们以便签 APP 为主题展开讨论的。</p>\n</blockquote>\n<ul>\n<li><p>1) 需求分析</p>\n<ul>\n<li>了解需求</li>\n<li>用户调研</li>\n<li>需求定位：竟品分析、头脑风暴、绘制故事板、人物建模 (用户画像)、产品数据</li>\n<li><code>实例</code>：在需求分析阶段，我们从诸多研究方法和数据中简明得出便签 APP 的产品定位：  <ul>\n<li>产品定义<ul>\n<li>使用人群 — <code>设计师、学设计的学生</code>  </li>\n<li>主要功能 — <code>记录想法、分享想法</code>  </li>\n</ul>\n</li>\n<li>用户需求<ul>\n<li>使用目标 — <code>随时随地记录想法、把想法分享给同事和朋友</code>  </li>\n<li>使用场景 — <code>商场、会议、课堂、工作、训练、作图</code>  </li>\n<li>用户目标 — <code>操作方便快捷、耗流量少、学习成本低</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>2) 信息架构</p>\n<ul>\n<li>需求收集</li>\n<li>需求删减</li>\n<li>定义优先级</li>\n<li>用户任务</li>\n<li><p><code>实例</code>：根据需求分析得到的信息，接下来便梳理架构，开始架构草图设计。如图 2-2 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-3.png\" alt=\"信息架构图\"> </p>\n<center>图 2-3 信息架构图</center>\n</li>\n</ul>\n</li>\n<li><p>3) 流程图</p>\n<ul>\n<li>操作流程</li>\n<li>页面流</li>\n<li>布局设计</li>\n</ul>\n</li>\n<li><p>4) 原型设计</p>\n<ul>\n<li>交互原型</li>\n<li>交互说明</li>\n<li>设计规范</li>\n<li>项目跟进</li>\n</ul>\n</li>\n<li><p>5) 测试</p>\n<ul>\n<li>可用性测试</li>\n<li>A/B 测试</li>\n<li>用户反馈</li>\n<li>产品数据</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"需求分析的考虑因素\"><a href=\"#需求分析的考虑因素\" class=\"headerlink\" title=\"需求分析的考虑因素\"></a>需求分析的考虑因素</h4><p>在产品设计的整个过程中，要充分考虑商业需求和用户体验的平衡。如图 2-4 所示，展示了需求收集需要考虑的因素。</p>\n<p>需求的删减是需求分析中很有必要的步骤，他是设计师们综合考虑各种因素，取舍得到的结果。</p>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-4.png\" alt=\"信息架构图\"></p>\n<center>图 2-4 需求收集需要考虑的因素</center>\n\n<h4 id=\"如何组织需求\"><a href=\"#如何组织需求\" class=\"headerlink\" title=\"如何组织需求\"></a>如何组织需求</h4><ul>\n<li>1) 定义信息优先级<ul>\n<li>产品定位：核心功能，意味着这些功能的优先级最高。</li>\n<li>真实需求：区分次要需求。它们是围绕核心功能进行拓展的。</li>\n<li>需求删减：权衡删减需求。</li>\n</ul>\n</li>\n<li>2) 信息架构：深度和广度要均衡。</li>\n</ul>\n<h4 id=\"流程图设计\"><a href=\"#流程图设计\" class=\"headerlink\" title=\"流程图设计\"></a>流程图设计</h4><ul>\n<li>确定信息架构</li>\n<li>确定用户任务</li>\n<li><p>如何完成操作</p>\n<p>  完成任务方法即我们所说的流程，任务流程是根据用户实际操作的心理和行为来确定的。  </p>\n<p>  [实例] 人在使用纸质版的便签的流程：  </p>\n<ul>\n<li>首先拿出纸和笔；</li>\n<li>纸上记录想法；</li>\n<li><p>粘贴醒目的地方便于查看。</p>\n<p>在现实中使用便签的过程和在手机上使用便签的实际操作步骤基本吻合，如图 2-5 所示，展示了添加便签的流程图。</p>\n<blockquote>\n<p>这里的流程图设计，可以使用 C 语言程序设计中的程序流程图。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-5.png\" alt=\"添加便签的流程图\"></p>\n<center>图 2-5 添加便签的流程图素</center>\n\n<h4 id=\"原型设计及设计原则\"><a href=\"#原型设计及设计原则\" class=\"headerlink\" title=\"原型设计及设计原则\"></a>原型设计及设计原则</h4><ul>\n<li>确立功能和逻辑后</li>\n<li>设计草图</li>\n<li>低保真线框图</li>\n<li><p>高保真原型图</p>\n<p>  图 2-6 是本人早期设计的沙漏记事 APP 的低保真线稿，强制插入了一段广告哈。而对应的高保真原型图，可参考对应的专题介绍。<a href=\"http://www.zcool.com.cn/work/ZMTU3NjcxMTI=.html\" target=\"_blank\" rel=\"noopener\">「沙漏记事」APP</a></p>\n<p>  <img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_2-6.jpg\" alt=\"沙漏记事APP低保真线稿\"></p>\n  <center>图 2-6 沙漏记事 APP 低保真线稿</center>\n\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>交互设计基本流程<ul>\n<li>需求收集和分析</li>\n<li>定义优先级</li>\n<li>信息架构设计</li>\n<li>流程设计</li>\n<li>原型设计</li>\n</ul>\n</li>\n<li>需求分析过程，要综合考虑 <code>商业</code>、<code>项目</code>、<code>用户</code> 三要素。</li>\n</ul>\n<h2 id=\"叁-视觉设计\"><a href=\"#叁-视觉设计\" class=\"headerlink\" title=\"叁 视觉设计\"></a>叁 视觉设计</h2><h3 id=\"UI-设计\"><a href=\"#UI-设计\" class=\"headerlink\" title=\"UI 设计\"></a>UI 设计</h3><h4 id=\"UI-的定义\"><a href=\"#UI-的定义\" class=\"headerlink\" title=\"UI 的定义\"></a>UI 的定义</h4><p>用户界面 (User Interface，UI)，系统和用户之间进行交互和信息交换的媒介，它实现信息的内部形式与人类可接受形式之间的转换。</p>\n<h4 id=\"UI-设计流程\"><a href=\"#UI-设计流程\" class=\"headerlink\" title=\"UI 设计流程\"></a>UI 设计流程</h4><ul>\n<li><p>具体把 UI 设计流程分为前期准备和情绪板两个阶段。</p>\n<ul>\n<li>1) 定义：做好定义 / 用户细分。</li>\n<li>2) 找寻：找到同类竞品的 APP 安装并进行沉侵式体验。</li>\n<li>3) 分析：分析竞品并学习。</li>\n<li>4) 关键字：确定情感关键字。</li>\n<li>5) 收集：图片素材收集，建立情绪板。</li>\n<li>6) 分析：对情绪板进行色彩和质感分析。</li>\n<li>7) 访谈：用户验证确定设计风格。</li>\n<li><p>8) 完善：完善整个 APP 视觉设计。</p>\n<blockquote>\n<p>Step 1 ~ 4 为前期准备阶段，Step 5 ~ 8 为情绪板阶段。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>做用户定义：如何定义用户在这不再重复阐述，详细见 <a href=\"#壹-前景探索\">第一章 前景探索</a>。</li>\n<li>找寻同类竞品 APP 使用并体验：站得高，看得远。即选择的竞品也要有足够的市场表现力。</li>\n<li>确定情感关键字：该 APP 的视觉所要表达的情感感受。</li>\n<li>情绪板：把每个人对情感的抽象理解成实际可定义的元素。<ul>\n<li>关键字提炼；</li>\n<li>建立具象图库 (具体的事实物、场景) 和抽象；</li>\n<li>图库 (色彩质感等元素).</li>\n</ul>\n</li>\n<li>对情绪板进行色彩和质感分析，即把握图片上的颜色、元素的感觉，再抽象成颜色方案。</li>\n</ul>\n<h3 id=\"图标品质提升\"><a href=\"#图标品质提升\" class=\"headerlink\" title=\"图标品质提升\"></a>图标品质提升</h3><h4 id=\"素描色彩的基础\"><a href=\"#素描色彩的基础\" class=\"headerlink\" title=\"素描色彩的基础\"></a>素描色彩的基础</h4><ul>\n<li><p>素描的三大面五大调</p>\n<ul>\n<li>三大面：亮面，灰面，暗面。</li>\n<li><p>五大调：亮面，灰面，明暗交界线，反光部和投影。</p>\n<blockquote>\n<p>在构图中，我们都是通过假设光源的方法来进行创作。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>构图注意事项</p>\n<ul>\n<li>构图不能太小 (让人觉得画面不够饱满，显得小气)；</li>\n<li>构图应注重重心平衡；</li>\n<li>构图应注意透视的变化及比例关系.</li>\n</ul>\n</li>\n<li><p>色彩的魅力</p>\n<ul>\n<li>色彩的冷暖：物体通过表面色彩给人温暖或凉爽的观感。</li>\n<li>色彩的轻重：质感与色感的复合感觉。</li>\n<li>色彩的前进性与后腿性：一般而言，暖色比冷色更富有前进的特性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一个像素也是事儿\"><a href=\"#一个像素也是事儿\" class=\"headerlink\" title=\"一个像素也是事儿\"></a>一个像素也是事儿</h4><ul>\n<li><code>边缘像素</code> 的完美方案：图标变虚问题 =&gt; 没有边缘对齐，故在矢量绘图当中，需要对齐边缘，对齐像素。</li>\n<li><code>旋转像素</code> 的完美方案：<ul>\n<li>旋转中心点挪到任意定点，再旋转。</li>\n<li>若是旋转并缩放，建议先旋转再缩放。</li>\n</ul>\n</li>\n<li>Ai 到 Ps 的完美粘贴<ul>\n<li>1) Ai 里选 <code>对齐像素网格</code>；</li>\n<li>2) Ps 里建一个图标大小相同的 <code>选区</code>，再粘贴进来，粘贴时最好选择 <code>形状图层</code>，这样便于后期编辑。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"国际化的图标设计\"><a href=\"#国际化的图标设计\" class=\"headerlink\" title=\"国际化的图标设计\"></a>国际化的图标设计</h4><ul>\n<li><p>表现形式上符合全球化潮流的设计趋势。</p>\n<blockquote>\n<p>这里非常容易理解，例如地铁、高铁、机场的指示标志，还有厕所指示标志等。</p>\n</blockquote>\n</li>\n<li><p>动感：动效与交互的相交融。</p>\n</li>\n<li>质感：拟物、扁平和微质感，这里视具体情况而决定，如公司文化、应用受众、市场趋势等因素，总得来说，调研、分析工作是少不了环节。</li>\n</ul>\n<h3 id=\"界面细节提升\"><a href=\"#界面细节提升\" class=\"headerlink\" title=\"界面细节提升\"></a>界面细节提升</h3><h4 id=\"栅格系统\"><a href=\"#栅格系统\" class=\"headerlink\" title=\"栅格系统\"></a>栅格系统</h4><p>栅格系统，又称网格系统。主要以规则的网格阵列来指导和规范页面中的版面布局以及信息布局。当然，栅格系统也只是一种布局辅助工具，在实际项目中应灵活地根据需求在整体或布局合理应用，即综合 iOS 或 Android 的规范准则，总体把控每个元素与界面的协调感。</p>\n<h4 id=\"资源规范\"><a href=\"#资源规范\" class=\"headerlink\" title=\"资源规范\"></a>资源规范</h4><ul>\n<li><p>切图</p>\n<ul>\n<li>iOS：选择一这种的分辨率，即 @2x，750 x 1334 px，再输出 @3x，@4x。当然，你的设计稿是基于 <code>矢量工具</code> 绘制的。</li>\n<li><p>Android：MDPI (160 DPI)，HDPI (240 DPI)，XHDPI (320 DPI), XXHDPI (480DPI)，或更多。</p>\n<blockquote>\n<p>1) 关于切图适配的问题，除了上述的原始办法外，现有很多插件、工具可帮你完成此项工作了。<br>2) 一套切图尽可能适配 iOS 与 Android，即找准 @ 与 DPI 的大小关系即可。</p>\n</blockquote>\n</li>\n<li><p>在标注文档中，可采用 <code>物理像素单位</code> 描述元素的大小、布局的位置和间距留白的大小。<br>这样做的好处是，<strong>开发人员直接设置参数，设计人员按照切图的倍率输出切图</strong> (@2x、@3x、@4x)。</p>\n</li>\n<li><p>特别地，切图是以偶数倍放大的，便于缩放，设计元素的大小注意使用偶数单位即可。  </p>\n<p>例如，标注的基准信息是 <code>14.0 DP / @1x</code>，适配对应尺寸的参数即有：<br><code>XHDPI / @2x &lt;=&gt; 28px</code>，<code>XXHDPI / @3x &lt;=&gt; 42px</code>，<code>@4x &lt;=&gt; 56px</code>。</p>\n</li>\n</ul>\n</li>\n<li><p>.9.PNG</p>\n<ul>\n<li>最外围的一圈像素，必须限定是 <code>1px</code> 大小，必须是纯黑色 <code>#000000</code>，任何参杂都不行。</li>\n<li><p>文件名后缀必须是 <code>*.9.PNG</code>。</p>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_3-1.png\" alt=\".9.PNG使用演示图\"></p>\n<center>图 3-1 .9.PNG使用演示图</center>\n</li>\n</ul>\n</li>\n<li><p>压缩切图：在 Photoshop 中，输出方式为 <code>存储为 web 所用格式</code>；在 Sketch 中使用 <code>导出功能</code> 导出图片；其他工具可自行查阅资料，这里就不一一列举了。</p>\n</li>\n<li><p>标注</p>\n<ul>\n<li>常用的标注软件：<code>Markman</code>、PxCook、Assistor PS。</li>\n<li>若公司、团队有规范的设计、开发手册，则请按照规范标准进行设计。</li>\n<li><p>拥有自己的一套标注文档 (迎合大众的，容易理解的)。</p>\n<p>对于一界面来说，图片、图标、框架、文字等元素，是必不可少的。若是为了更高程度的还原，那么详细的标注描述、文字说明、交互说明是必要的。在一般情况下，很多朋友为了便捷 (偷懒) 会在同一界面一次性把上述工作都堆积在一起完成，而这样带来的问题就是 <code>糟糕的阅读体验</code>。</p>\n<p>这里推崇一种做法 <code>分页描述法</code>。即：<br>1) 第一页，描述界面布局的信息，如间距大小、背景颜色；<br>2) 第二页，描述文字属性信息，如文字的字体、字号、颜色、布局；<br>3) 第三页，描述组件属性信息，如按钮、小图标等；<br>4) 第四页，描述界面的交互信息，按照需求，你还可以细分为每个组件的交互信息；<br>5) 以此类推…</p>\n</li>\n</ul>\n</li>\n<li><p>资源命名</p>\n<ul>\n<li><p><code>组件类型_模块_子功能_状态</code> 或者 <code>模块_组件类型_子功能_状态</code>；</p>\n<blockquote>\n<p>例如：btn_setting_logout_n.png / setting_btn_logout_n.png</p>\n</blockquote>\n</li>\n<li><p>下划线相连命名，如 <code>ico_appicon_normal.png</code></p>\n</li>\n</ul>\n</li>\n<li>PSD 源文件<ul>\n<li>以模块为单位，归类于不同文件夹中；</li>\n<li>PSD 源文件中，有 <code>分组分层</code> 的习惯.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"肆-开发实现\"><a href=\"#肆-开发实现\" class=\"headerlink\" title=\"肆 开发实现\"></a>肆 开发实现</h2><h3 id=\"如何与产品、运营、开发配合\"><a href=\"#如何与产品、运营、开发配合\" class=\"headerlink\" title=\"如何与产品、运营、开发配合\"></a>如何与产品、运营、开发配合</h3><h4 id=\"互联网产品的研发流程\"><a href=\"#互联网产品的研发流程\" class=\"headerlink\" title=\"互联网产品的研发流程\"></a>互联网产品的研发流程</h4><ul>\n<li>需求来了：产品经理，负责需求的策划和整理，输出产品需求文档 (Product Requirement Document，PRD)。那么产品经理的需求来自哪：<ul>\n<li>版本规划：从无到有策划一款产品，这些功能不是一次性开发的，而是分布在若干版本中。</li>\n<li>动态演变的产品：根据市场的反馈，调整后续的增量版本。</li>\n<li>细节的优化：注重用户体验的优化。</li>\n<li>适应丰富的使用场景。</li>\n</ul>\n</li>\n<li>需求要评审：方案需要和开发、设计、测试、运维人员一起评审。</li>\n<li>开始设计</li>\n<li>开始开发</li>\n<li>测试把关</li>\n</ul>\n<h4 id=\"与各种角色融洽相处\"><a href=\"#与各种角色融洽相处\" class=\"headerlink\" title=\"与各种角色融洽相处\"></a>与各种角色融洽相处</h4><p>可借助一些 <code>协作平台</code> 来规范研发流程，如需求的追加、任务分派、提交 BUG 等。相关人员通过日志、文档开展工作。</p>\n<p><code>协作平台</code>：<a href=\"https://worktile.com/\" target=\"_blank\" rel=\"noopener\">Worktile</a> 、 <a href=\"https://www.teambition.com/\" target=\"_blank\" rel=\"noopener\">Teambition</a> 、<a href=\"http://co.youdao.com/\" target=\"_blank\" rel=\"noopener\">有道云协作</a> 、 <a href=\"https://processon.com/\" target=\"_blank\" rel=\"noopener\">ProcessOn (在线绘图)</a>  </p>\n<p>当然，软件过程中，一款合适的团队协作工具能使事情事半功倍。特别是敏捷方法，它是非常依赖工具的。至于哪款工具更适合于你们团队，建议参考知乎的文章再作判断：<a href=\"https://www.zhihu.com/question/24920474\" target=\"_blank\" rel=\"noopener\">Worktile 与 Teambition 的优劣对比？</a></p>\n<h4 id=\"发布应用程序\"><a href=\"#发布应用程序\" class=\"headerlink\" title=\"发布应用程序\"></a>发布应用程序</h4><ul>\n<li>灰度发布：在发布新版本时，仅针对少部分用户样本发布。灰度发布是一种常用的产品测试及质量管理工具。对于用户量大的产品，贸然发布一个新版本取代用户当前使用的版本，风险太大。因此互联网公司摸索出了一种工具，即灰度发布。</li>\n</ul>\n<h4 id=\"快速制作原型\"><a href=\"#快速制作原型\" class=\"headerlink\" title=\"快速制作原型\"></a>快速制作原型</h4><p>快速原型的工具有很多，推荐几款制作工具：<a href=\"https://modao.cc/\" target=\"_blank\" rel=\"noopener\">墨刀</a> 、 <a href=\"https://www.axure.com/download\" target=\"_blank\" rel=\"noopener\">Axure PR</a> 、 <a href=\"https://proto.io/\" target=\"_blank\" rel=\"noopener\">Proto.io</a></p>\n<h2 id=\"伍-线上运营\"><a href=\"#伍-线上运营\" class=\"headerlink\" title=\"伍 线上运营\"></a>伍 线上运营</h2><h3 id=\"运营的概述\"><a href=\"#运营的概述\" class=\"headerlink\" title=\"运营的概述\"></a>运营的概述</h3><h4 id=\"运营的定义\"><a href=\"#运营的定义\" class=\"headerlink\" title=\"运营的定义\"></a>运营的定义</h4><p>在互联网中，针对不同群体推广产品，进行内容建议，并通过数据指标优化运营手段、产品功能与体验等行为。</p>\n<ul>\n<li>运营三要素：产品、用户和渠道，如图 5-1 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-1.png\" alt=\"运营三要素\"></p>\n<center>图 5-1 运营三要素</center>\n\n<ul>\n<li>运营的目标：运营是以目标为导向，数据为基础的工作。一切工作都围绕着运营三要素来进行，即产品、用户和渠道。运营的目标如图 5-2 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-2.png\" alt=\"运营的目标\"></p>\n<center>图 5-2 运营的目标</center>\n\n<ul>\n<li><p>产品、运营、设计工作的关系：为了达到运营目标，运营经理需要与产品经理、设计师等配合工作，如图 5-3 所示，简单地描述了产品经理、运营经理和设计师的工作关系。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-3.png\" alt=\"产品、运营、设计工作关系图\"></p>\n  <center>图 5-3 产品、运营、设计工作关系图</center>\n\n</li>\n</ul>\n<h4 id=\"运营工作内容及岗位\"><a href=\"#运营工作内容及岗位\" class=\"headerlink\" title=\"运营工作内容及岗位\"></a>运营工作内容及岗位</h4><ul>\n<li><p>典型的产品生命周期：即每个阶段的运营重点都不同。图 5-4 展示了一款产品的生命周期。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-4.png\" alt=\"产品的生命周期\"></p>\n  <center>图 5-4 产品的生命周期</center>\n</li>\n<li><p>运营目标：可量化的指标</p>\n<ul>\n<li>拉新：为 APP 带来下载或注册，或微信公众号拉粉。<br>常用手段有：<code>搜索引擎优化</code>，<code>广告投放</code>，<code>渠道合作</code>、<code>社交媒体推广</code>。</li>\n<li>留存：想办法留住用户。运营的方式为：<code>优化产品内容机制</code>；<code>策划活动与用户互动</code>。</li>\n<li>促活：<ul>\n<li>促用户更高频使用产品，增加用户黏性。可用 <code>等级设定</code>、<code>激励体系</code>、<code>积分制度</code> 等增加长期活跃性。</li>\n<li>已流失的用户，通过 <code>站内信</code>、<code>邮件</code>、<code>短信</code> 等手段召回。</li>\n</ul>\n</li>\n<li>营收：增加付费用户和提高付费用户的活跃度。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运营工作方法论\"><a href=\"#运营工作方法论\" class=\"headerlink\" title=\"运营工作方法论\"></a>运营工作方法论</h4><ul>\n<li>如何让运营手段更抓住人心，追根溯源就是研究人性，一款好的产品及运营，一定能迎合人性七宗罪中的其中之一。下述为 <code>利用人性</code> 的产品功能举例。<ul>\n<li><code>色欲</code>：美女直播、陌陌、基于 LBS (基于位置的服务) 的陌生人社交。</li>\n<li><code>虚荣</code>：游戏装备。</li>\n<li><code>贪婪</code>：双十一折扣、抽奖、送红包。</li>\n<li><code>懒惰</code>：一键下单、二维码。</li>\n<li><code>窥探</code>：无秘、悄悄关注。</li>\n<li><code>傲慢</code>：吵架营销、粉丝大战。</li>\n</ul>\n</li>\n<li>数据化运营：基于数据的运营决策更可靠。<ul>\n<li>产品数据<ul>\n<li>用户注册：包括下载量、注册用户激活数、APP 打开数、新增注册数等；</li>\n<li>用户留存：留存率、使用留存、购买留存等；</li>\n<li>用户活跃：活跃用户数、注册活跃转化率、APP 启动数、访问频率、浏览时长等；</li>\n<li>营收数据：付费用户数、付费转化率、付费金额、付费频次等；</li>\n<li>功能数据：每日评论数、交互反馈次数 (收藏、分享、喜欢等功能)。</li>\n</ul>\n</li>\n<li>用户数据：用户画像 (性别、职业、学历、年龄、地域、使用设备、操作系统、消费行为)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"活动运营\"><a href=\"#活动运营\" class=\"headerlink\" title=\"活动运营\"></a>活动运营</h3><h4 id=\"什么是活动运营\"><a href=\"#什么是活动运营\" class=\"headerlink\" title=\"什么是活动运营\"></a>什么是活动运营</h4><ul>\n<li>传统行业短期的活动促销，带来一定人气增长、销售额增加。</li>\n<li>社交网络的病毒式传播，例如春晚微信摇红包、支付宝集五福等。</li>\n</ul>\n<h4 id=\"活动使用场景\"><a href=\"#活动使用场景\" class=\"headerlink\" title=\"活动使用场景\"></a>活动使用场景</h4><ul>\n<li>常规活动：有针对性提高某一指标，或新功能推广。其活动形式有：签到、邀请好友、新用户福利。</li>\n<li>节日：每个节日都有其自带的属性，利用节假日的情感共鸣。如表 5-1 所示。</li>\n</ul>\n<center>表 5-1 常见节日举例</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">常见节日</th>\n<th style=\"text-align:left\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">常规节日</td>\n<td style=\"text-align:left\">春节、情人节、圣诞节、母亲节、劳动节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">人为创造</td>\n<td style=\"text-align:left\">双十一、双十二、520告白日</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">店庆活动</td>\n<td style=\"text-align:left\">天猫店庆、周年庆</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">季节变化</td>\n<td style=\"text-align:left\">换季清仓、节气、春夏秋冬交替</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">体育赛事</td>\n<td style=\"text-align:left\">奥运会、欧冠、世界杯、NBA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">颁奖典礼</td>\n<td style=\"text-align:left\">奥斯卡、电影节</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>每个节日都有其自带属性，例如春节会想到春运，双十一想到打折促销、中秋节想到团圆等。</p>\n<ul>\n<li>突发热点事件：极具话题性，短期爆发力强，能迅速传播。如表 5-2 列举了一些热点。</li>\n</ul>\n<center>表 5-2 热点举例</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">热点</th>\n<th style=\"text-align:left\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">民生类</td>\n<td style=\"text-align:left\">与我有关的话题，生老病死的话题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">公益类</td>\n<td style=\"text-align:left\">环保、支教、老人、儿童、宠物</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">娱乐类</td>\n<td style=\"text-align:left\">明星八卦、热门参与、笑话段子</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">敏感话题</td>\n<td style=\"text-align:left\">权利、金钱、色情</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">技术趋势</td>\n<td style=\"text-align:left\">人工智能、区块链、科技公司新品发布</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>例如，肌萎缩侧索硬化症引发的冰桶挑战，达到的效果有：微博话题阅读超 7 亿，捐款总额达 137 万元。</p>\n<h4 id=\"如何策划线上活动\"><a href=\"#如何策划线上活动\" class=\"headerlink\" title=\"如何策划线上活动\"></a>如何策划线上活动</h4><p>策划线上活动共四阶段，即准备阶段、策划阶段、执行阶段和总结阶段。</p>\n<ul>\n<li><code>准备阶段</code>：活动前的准备<ul>\n<li>活动需求：目的、人群、平台、机会点 (借势发挥，如世界杯)</li>\n<li>活动目的：量化为数据指标，核心目标为推广品牌、拉新用户、促进消费、提升用户活跃度。</li>\n</ul>\n</li>\n<li><p><code>策划阶段</code>：活动方案策划</p>\n<ul>\n<li>明确活动的时间、内容、规范、文案、流程；</li>\n<li><p>确认奖品及协调推广资源；</p>\n<p>[注意] 策划方案时应：<br>1) 流程简单，文案清晰；<br>2) 吸引力，例如奖励等手段；<br>3) 适时反馈，精神激励。例如动态显示参与人数、突出用户收益、获奖用户轮播。</p>\n</li>\n</ul>\n</li>\n<li><code>执行阶段</code>：活动上线后做好三点<ul>\n<li>客服跟进：解决用户疑难，平息用户情绪。</li>\n<li>监控数据：随时调整，保证活动质量和预期。</li>\n<li>分布活动结果和活动善后 (<code>不要让用户感到被欺骗</code>)。</li>\n</ul>\n</li>\n<li><code>总结阶段</code><ul>\n<li>用户参与情况和数据，用以判断是否达到目标。</li>\n<li>总结活动经验，提炼亮点和失误点，为下次活动做准备。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h4><p>以 “新浪微博愚人节刮奖” 活动为例。</p>\n<ul>\n<li>活动类型：游戏</li>\n<li>活动目标：提升用户活跃度</li>\n<li>活动时间：愚人节，七天活动</li>\n<li>目标人群及切入需求：针对老用户 -&gt; <code>逐利心理</code></li>\n<li>平台：手机</li>\n<li>交互方式：模拟真实的刮奖操作</li>\n<li>规则判定<ul>\n<li>每天每个用户可参与 5 次 刮刮卡活动，第一次免费。</li>\n<li>完成某些指定任务可获得更多抽奖活动。</li>\n</ul>\n</li>\n<li>奖品设置<ul>\n<li>根据预算控制奖品数量和中奖概率。</li>\n<li>头奖要吸引眼球，配合普通奖品，<code>增加用户获奖信心</code>。</li>\n</ul>\n</li>\n<li>文案与视觉设计<ul>\n<li>标题醒目，规则明确，页面简洁。</li>\n<li>结合活动主题渲染气氛。</li>\n</ul>\n</li>\n<li>活动指标：参与人数，传播度 (分享数)，任务完成度，活动期间的活跃用户数。</li>\n</ul>\n<h3 id=\"H5-与-Banner-的设计\"><a href=\"#H5-与-Banner-的设计\" class=\"headerlink\" title=\"H5 与 Banner 的设计\"></a>H5 与 Banner 的设计</h3><h4 id=\"H5-表现形式\"><a href=\"#H5-表现形式\" class=\"headerlink\" title=\"H5 表现形式\"></a>H5 表现形式</h4><p>H5，即第五代 HTML，也泛指利用 HTML5 语言制作的页面。在开始设计前，先了解 H5 专题页的类型。</p>\n<ul>\n<li>按功能形式分：如图 5-5 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-5.png\" alt=\"按功能形式分的H5\"></p>\n<center>图 5-5 按功能形式分的 H5</center>\n\n<ul>\n<li>按目标分：如图 5-6 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_5-6.png\" alt=\"按目标分的H5\"></p>\n<center>图 5-6 按目标分的 H5</center>\n\n<ul>\n<li><p>在确定了专题页的功能与目标后，接下来的设计阶段尤为关键。即可从用户角度出发，思考用户的分享动机 (共六种情况)。</p>\n<ul>\n<li>利益相关：<code>有奖形式</code> 促进用户分享。</li>\n<li>有所收获：通过传播内容，学习自己感兴趣的知识，或 <code>自我提升</code>。</li>\n<li>身份认同：内容使某一类型人产生身份认同和归属感。</li>\n<li>成就吸引：朋友间竞技，满足用户 <code>炫耀心理需求</code>。</li>\n<li>情感共鸣：<code>情感共鸣</code>，从而产生集体回忆的分享冲动。</li>\n<li>借助热点：借助 <code>当前热点</code>，吸引用户眼球。</li>\n</ul>\n</li>\n<li><p>H5 页面表现形式</p>\n<ul>\n<li>展示型：支付宝十年账单、微信故事。</li>\n<li>互动型：智能招聘的职场神曲 DIY。</li>\n<li>产品型：微信公众号里的微商城，如京东。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Banner\"><a href=\"#Banner\" class=\"headerlink\" title=\"Banner\"></a>Banner</h4><p>投放于线上 (PC端、移动端) 的各种尺寸和形状的广告图。</p>\n<ul>\n<li>设计流程<ul>\n<li>了解目的，定义信息优先级；</li>\n<li>确定文案，确定设计方向；</li>\n<li>视觉设计排版，讨论修改.</li>\n</ul>\n</li>\n<li>搭配方式 =&gt; 输出 Banner<ul>\n<li>内容专题：文案 + 主体物或文案 + 背景形式。<code>P238</code></li>\n<li>电商：文案 + 主体物 + 背景形式。<code>P239</code></li>\n<li>活动：文案 + 主体物 + 引导 Button + 背景 + 引导 Button 的形式。<code>P240 ~ 241</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"陆-服务设计\"><a href=\"#陆-服务设计\" class=\"headerlink\" title=\"陆 服务设计\"></a>陆 服务设计</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"服务设计的定义\"><a href=\"#服务设计的定义\" class=\"headerlink\" title=\"服务设计的定义\"></a>服务设计的定义</h4><p>一种新兴领域，主要关注通过 <code>有形、无形媒介的结合方式</code> 形成细致考量过的 <code>体验设计过程</code>。它已经在实践中为各种传统下行业都带来了更优良的用户体验。</p>\n<h4 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h4><blockquote>\n<p>本章节将围绕一个虚构的餐馆为例，姑且称他为 <code>美食与爱</code>。</p>\n</blockquote>\n<ul>\n<li><p>服务提供者：除一般含义的服务人员外，还包括电子显示屏、按钮开关等实体。</p>\n<blockquote>\n<p>在 <code>美食与爱</code> 中，就包括侍应、收银员、厨师、后台系统等。</p>\n</blockquote>\n</li>\n<li><p>利益相关者：服务提供者所属的商业实体负责人。</p>\n<blockquote>\n<p>餐馆老板、门店经理、收银系统的服务商。</p>\n</blockquote>\n</li>\n<li><p>服务设计团队：除设计师外，还包括利益相关者、一些顾客等。</p>\n</li>\n<li><p>顾客：指服务提供者面向的用户、消费者等。</p>\n</li>\n<li><p>触点：顾客与服务提供者之间每个有接触点的点。</p>\n<blockquote>\n<p>门口排位服务员、侍应、菜单、桌椅。</p>\n</blockquote>\n</li>\n<li><p>服务周期：前期、中期和后期。</p>\n<p>  以就餐为例：</p>\n<ul>\n<li><code>前期</code> 顾客感到饥饿时，有人推荐或搜 <code>美食与爱</code>，前往餐馆就餐。</li>\n<li><code>中期</code> 到门店后，需排位等待，收号入座，点菜，等就餐，就餐，结账。</li>\n<li><code>后期</code> 离开餐馆，呼叫的士回家 / 公司。 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"五个原则\"><a href=\"#五个原则\" class=\"headerlink\" title=\"五个原则\"></a>五个原则</h4><ul>\n<li>用户至上：应通过客户的视角出发来设计整套服务。</li>\n<li>合作创新：设计师 (主持人)，利益相关者，服务提供人员，顾客。每种角色必须从自己视角出发提出想法。</li>\n<li>先后顺序：服务是一般以 <code>时间为序</code> 的 <code>动态</code> 的过程，而每一 <code>服务片段</code> 类似电影中的帧一样，把服务结构成一个个 <code>独立触点</code> 和 <code>交互行为</code>。</li>\n<li><p>有理有据：服务是无形的，需要用人工制品的形式“显示”出来，让其容易被感知。</p>\n<blockquote>\n<p>例如，酒店的清洁人员在客人不在时打扫卫生。</p>\n</blockquote>\n</li>\n<li><p>全局视觉：涉及的角色、触点众多，具备全局视觉，以统筹好各个环节。</p>\n</li>\n</ul>\n<h3 id=\"设计流程\"><a href=\"#设计流程\" class=\"headerlink\" title=\"设计流程\"></a>设计流程</h3><p>以下介绍服务设计的基本流程，即 <code>探索</code> =&gt; <code>创造</code> =&gt; <code>反思</code> =&gt; <code>实施</code>。</p>\n<ul>\n<li><p><code>探索</code></p>\n<ul>\n<li>了解公司对于设计思维的态度，是否接受服务设计这样需要合作创新的设计流程。</li>\n<li>找服务设计要解决的本质问题 (问题往往是公司自身的，或是从公司角度提出的)。</li>\n<li><p>找出问题本质所在。</p>\n<blockquote>\n<p>从 <code>潜在顾客</code> 和 <code>顾客</code> 的角度出发，理解他们当时的处境以及做出对应行为背后的真实动机。</p>\n</blockquote>\n</li>\n<li><p>设计师要把研究后的发现和现有服务流程可视化方法展现出来。</p>\n</li>\n</ul>\n</li>\n<li><p><code>创造</code>：产生解决方案的阶段</p>\n<ul>\n<li>服务设计的最大特点：鼓励各种试错，而不是避免出错。</li>\n<li><p>阶段任务：</p>\n<ul>\n<li>基于探索阶段发现的核心问题；</li>\n<li>基于顾客需求；</li>\n<li>基于服务提供者本身诉求等约束条件；</li>\n<li><p>基于用户旅程图的一系列的触点.</p>\n<blockquote>\n<p>设计新的方案，并不断加以迭代验证、优化方案。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>反思</code>：创新阶段产生新方案后，这个阶段要进行测试验证。<ul>\n<li>产品原型 (人机交互 Demo / 实体产品小样)，找顾客或者专家进行测试评估，然后不断改进以达到预期目标。</li>\n<li>服务原型：通过 <code>角色扮演</code> 等 <code>互动沉侵</code> 的方式，让顾客与服务之间产生 <code>真实的交互</code> 以及 <code>情感上的沟通</code>。</li>\n</ul>\n</li>\n<li><code>实施</code>：工具 — <code>服务蓝图</code></li>\n</ul>\n<h3 id=\"工具箱\"><a href=\"#工具箱\" class=\"headerlink\" title=\"工具箱\"></a>工具箱</h3><p>在 <em>This is service design thinking</em> \\(^{[1]}\\) 中，列举了 24 种服务设计的工具，下述选择了其中三款常用工具进行阐述，即 <code>影子跟随法</code>、<code>顾客旅程图</code>、<code>服务蓝图</code>，若对此模块有兴趣可查阅原书学习。</p>\n<h4 id=\"影子跟随法\"><a href=\"#影子跟随法\" class=\"headerlink\" title=\"影子跟随法\"></a>影子跟随法</h4><ul>\n<li><p>概念：研究人员或设计师把自己融入到顾客的，前后台人员的日常生活或工作中去，像 <code>影子</code> 一样跟着他们去观察他们一举一动。</p>\n<blockquote>\n<p>该方法可以真正做到从全局或者 <code>上帝视觉</code> 审视整个服务运作方式。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"顾客旅程图\"><a href=\"#顾客旅程图\" class=\"headerlink\" title=\"顾客旅程图\"></a>顾客旅程图</h4><ul>\n<li>概念：用 <code>顾客</code> 与 <code>服务</code> 之间产生互动的一个个 <code>触点</code> 来构成用户完整旅程的 <code>地图</code>。即这个图是从顾客的视角表达出所有与服务之间互动的行为以及由于互动而产生的情感。</li>\n<li><p>如何绘制顾客旅程图</p>\n<ul>\n<li>1) 需要找到顾客与服务之间所有互动的行为触点。</li>\n<li>2) 当所有行为触点找出后，按时序的方式进行罗列以形成完整的体验流程。</li>\n<li>3) 然后通过访谈或利用顾客自己的描述和记录，以顾客口吻表达出他们每个步骤的心理活动，对应某种情绪，打分以形成情绪曲线图。</li>\n<li><p>4) 分析旅程图中情绪分值较低部分 (尤其是 <code>谷底</code> 时)，找出问题所在，往往当中存在不错创新设计机会点。</p>\n<p>如图 6-1 所示，为餐馆就餐的典型顾客旅程图。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_6-1.png\" alt=\"餐馆就餐的典型顾客旅程图\"></p>\n<center>图 6-1 餐馆就餐的典型顾客旅程图</center>\n\n<h4 id=\"服务蓝图\"><a href=\"#服务蓝图\" class=\"headerlink\" title=\"服务蓝图\"></a>服务蓝图</h4><blockquote>\n<p>服务蓝图，类似建筑设计的蓝图。</p>\n</blockquote>\n<ul>\n<li>从全局的视觉详细地设计服务体系里包含的所有对象、交互、触点等的图形化语言。</li>\n<li>该图包含多种角色：用户、服务提供者，涉及服务流程相关者，触点及后台流程。</li>\n<li><p>服务蓝图绘制方法： </p>\n<ul>\n<li>首先按时序把 <code>用户新的行为</code> (设计后的行为) 从左到右罗列出来。并从服务的前中后阶段 (如就餐前、就餐时、就餐后) 对其进行分类。</li>\n<li>在行为 <code>上一行</code>，列出用户行为所接触的物理触点或环境。</li>\n<li>在行为 <code>下一行</code>，列出用户交互的服务提供者。</li>\n<li><p>在行为 <code>下两行</code>，是后台服务提供者以及提供的支援流程。</p>\n<p>如图 6-2 所示，针对餐馆优化后的服务蓝图。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/03/Producting_An_Application_6-2.png\" alt=\"针对餐馆优化后的服务蓝图\"></p>\n<center>图 6-2 针对餐馆优化后的服务蓝图</center>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://book.douban.com/subject/5397784/\" target=\"_blank\" rel=\"noopener\">[1] Schneider, Jakob. This is service design thinking [M]. Canada: BIS Publishers, 2011</a><br>[2] 赵晋. 波士顿矩阵分析在实际案例中的运用[J]. 中国高新技术企业,2008,(8).<br>[3] 张镜天. 波士顿矩阵在酒类营销中的运用[J]. 中国酒业. 2006,(1).<br>[4] 上海质量科学研究院. 顾客满意的测量、分析与改进[M]. 中国标准出版社,2009.10.  </p>\n","categories":["Reading"],"tags":["APP","产品","设计流程","规范"]},{"title":"树莓派能做什么？","url":"/2019/01/Raspbian-Guideline.html","content":"<p>树莓派能做什么？关于此命题，最直观感受就是看看树莓派实验室整理的一些<a href=\"http://shumeipai.nxez.com/what-raspi-used-for\" target=\"_blank\" rel=\"noopener\">案例</a>，相信你心目中会有答案的。例如，打造一个家庭媒体中心 ( KODI )、配置无线路由器、搭建 BT 下载服务器、搭建代码托管服务器 ( SVN、GIt )、搭建网站服务器、搭建 Shadowsocks、用 HomeKit + Siri 声控家里电器等，即可把树莓派想象成嵌入式、微小型的服务器，这一过程就好比操作系统 ( Linux ) 赋予硬件生命，编程 ( Python、Java )、程序灌入灵魂，借助树莓派低能耗、移动便携性、GPIO 等特性，很多想法不是不可能，相信树莓派会给你创造更多的惊喜！</p>\n<a id=\"more\"></a>\n<p>需要说明的是，本文将围绕两大方面去探索树莓派，即基础应用和解决方案两大部分，也可理解为基础到进阶的过程。</p>\n<ul>\n<li><a href=\"#基础应用\">基础应用</a>：介绍使用树莓派必须的应用或组件，这些应用和组件主要作用是：一方面是增强系统功能，另一方面则是为解决方案建立软件基础。</li>\n<li><a href=\"#解决方案\">解决方案</a>：诸如引言中谈及的，搭建服务器、智能家居控制中心等，即针对某部分需求集成为服务，学术说法称其为某某即服务 ( XaaS )。</li>\n</ul>\n<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><ul>\n<li>树莓派型号：树莓派 3B+</li>\n<li>树莓派系统：<a href=\"https://www.raspberrypi.org/downloads/noobs/\" target=\"_blank\" rel=\"noopener\">Raspbian v.3.0.0</a></li>\n</ul>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2019.01.21：完成初稿，形成笔记的整体框架；</li>\n<li>2019.02.25：更新「Jupyter 服务器」 章节内容；</li>\n<li>2019.02.26：更新「Conda 服务器」 章节内容；</li>\n</ul>\n<h2 id=\"教学资源\"><a href=\"#教学资源\" class=\"headerlink\" title=\"教学资源\"></a>教学资源</h2><ul>\n<li>🚩 | 社区 | <a href=\"http://shumeipai.nxez.com/\" target=\"_blank\" rel=\"noopener\">树莓派实验室</a> | 教程、创意、作品、资讯、硬件五位一体的爱好者交流社区。</li>\n<li>🚩 | 社区 | <a href=\"https://www.quwj.com/\" target=\"_blank\" rel=\"noopener\">趣无尽</a> | 树莓派高端、创意的玩法探索博客站。</li>\n<li>📄 | 资料 | <a href=\"https://www.yahboom.com/study/raspberry\" target=\"_blank\" rel=\"noopener\">亚博智能官方资料. 树莓派3代B型开发板</a> | <a href=\"https://pan.baidu.com/s/1OUa0KszF7sxim5FcUdqccQ\" target=\"_blank\" rel=\"noopener\">资料打包下载 ( bwnr )</a></li>\n</ul>\n<h2 id=\"基础应用\"><a href=\"#基础应用\" class=\"headerlink\" title=\"基础应用\"></a>基础应用</h2><h3 id=\"TeamViewer-远程控制\"><a href=\"#TeamViewer-远程控制\" class=\"headerlink\" title=\"TeamViewer 远程控制\"></a>TeamViewer 远程控制</h3><h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>访问树莓派有多种方式，如直连显示器交互使用、通过 SSH 远程登录访问、通过软件实现控制使用等。其中，TeamViewer 是通过软件方式实现对树莓派的远程控制，其拥有有以下几种特性：</p>\n<ul>\n<li>可穿透局域网，支持外网连接；</li>\n<li>实时 GUI 界面显示；</li>\n<li>支持文件双向传输。</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>在本节，则单独介绍 TeamViewer 的配置与使用，当然教程是参考文章 <a href=\"http://www.52pi.net/archives/549\" target=\"_blank\" rel=\"noopener\">[5]</a>、<a href=\"https://blog.csdn.net/realDonaldTrump/article/details/79694196\" target=\"_blank\" rel=\"noopener\">[6]</a> 整理而得。</p>\n<h5 id=\"删除-TeamViewer\"><a href=\"#删除-TeamViewer\" class=\"headerlink\" title=\"删除 TeamViewer\"></a>删除 TeamViewer</h5><p>删除 TeamViewer，用于安装出错时，清理残留软件包，方便从头再来。😂</p>\n<blockquote>\n<p>此步骤是非必要执行的步骤。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove teamviewer-host</span><br><span class=\"line\"><span class=\"comment\"># 清除所有已删除包的残余配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># 若报错误 dpkg: –purge needs at least one package name argument</span></span><br><span class=\"line\"><span class=\"comment\"># 证明你的系统中没有残留配置文件了</span></span><br><span class=\"line\">dpkg -l |grep ^rc|awk <span class=\"string\">'&#123;print $2&#125;'</span> |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装-TeamViewer\"><a href=\"#安装-TeamViewer\" class=\"headerlink\" title=\"安装 TeamViewer\"></a>安装 TeamViewer</h5><p>Step.01：进入 <a href=\"https://www.teamviewer.com/en-us/download/linux/\" target=\"_blank\" rel=\"noopener\">官方下载</a>，在「TeamViewer Host for Raspberry Pi」模块，复制安装包地址，接着正式开始安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过 wget 在线下载安装包</span></span><br><span class=\"line\">wget https://download.teamviewer.com/download/linux/teamviewer-host_armhf.deb</span><br><span class=\"line\"><span class=\"comment\"># 安装本地软件包，但不解决依赖关系</span></span><br><span class=\"line\">sudo dpkg -i teamviewer-host_armhf.deb</span><br><span class=\"line\"><span class=\"comment\"># 修复损坏的软件包，尝试卸载出错的包，重新安装正确版本的</span></span><br><span class=\"line\">sudo apt-get -f install</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\"># 若提示未找到依赖包，可安装 Gdebi，通过 Gdebi 安装解决依赖问题</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 Gdebi 可代替软件中心接管 deb 软件包的安装</span></span><br><span class=\"line\"><span class=\"comment\"># 它会根据软件仓库这一实用的特性来解算依赖关系</span></span><br><span class=\"line\">sudo apt-get install gdebi</span><br><span class=\"line\">sudo gdebi teamviewer-host_armhf.deb</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置-TeamViewer\"><a href=\"#配置-TeamViewer\" class=\"headerlink\" title=\"配置 TeamViewer\"></a>配置 TeamViewer</h5><p>Step.02：因为我们烧写的系统有图形界面，默认 TeamViewer 要在图形界面进行配置，如远程控制的账号、密码设置等。若有条件支持，可移步图形化界面操作，即可忽略此步骤。</p>\n<ul>\n<li><p>没有图形界面，则我们需要在命令行下配置。使用 <code>raspi-config</code> 配置 Raspbian 仅命令行模式运行。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 命令模式的操作界面</span></span><br><span class=\"line\"><span class=\"comment\"># 依次选择操作 ( 同理，还原桌面模式也是类似操作 )</span></span><br><span class=\"line\"><span class=\"comment\"># Boot Options -&gt; Desktop / CLI -&gt; Console AutoLogin -&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Finished</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置保存后，树莓派会自动重启，那么重新远程登录继续操作。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo teamviewer setup</span><br><span class=\"line\"><span class=\"comment\"># 1. Accept License Agreement? (y/n) y</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 输入用户名和密码的步骤无法跳过，没有账号请移步「官网完成注册」</span></span><br><span class=\"line\"><span class=\"comment\"># \t 注册地址：https://login.teamviewer.com/LogOn</span></span><br><span class=\"line\"><span class=\"comment\"># \t Please enter your e-mail / username: kofe</span></span><br><span class=\"line\"><span class=\"comment\"># \t Please enter your password: ******</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 然后 TeamViewer 会发一份设备授权邮件，请移步「邮箱处理」</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 重新输入用户名和密码登录，提示分组信息，点击 y：</span></span><br><span class=\"line\"><span class=\"comment\"># \t Adding this machine as 'raspberrypi' to ... </span></span><br><span class=\"line\"><span class=\"comment\">#\t Do you want to continue? (y/n) [n]  y</span></span><br><span class=\"line\"><span class=\"comment\"># 5. 提示 \"Successfully....\" 即表示已经完成配置工作了</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>完成初始化配置后，只需设置远程控制密码即可使用了。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本机 ID</span></span><br><span class=\"line\">teamviewer info</span><br><span class=\"line\"><span class=\"comment\"># 设置本机密码</span></span><br><span class=\"line\">teamviewer passwd [你的密码]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>当然，我们还需要把 Raspbian 还原为图形化操作界面。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo raspi-config</span><br><span class=\"line\"><span class=\"comment\"># Boot Options -&gt; Desktop / CLI -&gt; Desktop AutoLogin -&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Finished</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li><p>一般情况下，我们主要是通过命令模式访问树莓派、配置 TeamViewer。当然也可以通过图形界面完成配置操作，按照文字提示操作即可，这里就不详细阐述了。附上 TeamViewer 常用的命令：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看帮助信息</span></span><br><span class=\"line\">teamviewer <span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 查看本机 ID</span></span><br><span class=\"line\">teamviewer info</span><br><span class=\"line\"><span class=\"comment\"># 设置本机密码</span></span><br><span class=\"line\">sudo teamviewer passwd [你的密码]</span><br><span class=\"line\"><span class=\"comment\"># 启动 TeamViewer 服务</span></span><br><span class=\"line\">sudo teamviewer --daemon start</span><br><span class=\"line\"><span class=\"comment\"># 开启 TeamViewer 服务随机启动</span></span><br><span class=\"line\">sudo teamviewer --daemon <span class=\"built_in\">enable</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后，关于图形化界面显示方面，可能还有分辨率调整与存在黑边的问题，详细可参考以下文章解决问题：</p>\n<ul>\n<li><a href=\"https://www.raspberrypi.org/documentation/configuration/config-txt/README.md\" target=\"_blank\" rel=\"noopener\">树莓派. 官方使用文档之 CONFIG-TXT. raspberrypi.org</a></li>\n<li><a href=\"https://blog.csdn.net/fishchina/article/details/54564395\" target=\"_blank\" rel=\"noopener\">FishChina. 树莓派有黑边不能全屏解决方法. 2017. csdn.net</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MySQL-数据库\"><a href=\"#MySQL-数据库\" class=\"headerlink\" title=\"MySQL 数据库\"></a>MySQL 数据库</h3><h4 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>数据库的用途毋庸置疑，若在树莓派上跑脚本、程序、网站系统等，少不了数据的交互，为此我们需要一款数据库作为数据储存的媒介。MySQL，是一款开源免费的数据库，也是关系型数据库管理系统，支持多种存储引擎 $^{[1, 2]}$，对于个人开发和日常使用足矣。</p>\n<p>以下将介绍，在树莓派 Raspbian 上安装 Mysql  服务，并开启远程访问。</p>\n<h4 id=\"安装-MySQL\"><a href=\"#安装-MySQL\" class=\"headerlink\" title=\"安装 MySQL\"></a>安装 MySQL</h4><ul>\n<li><p>删除 MySQL：安装前，确保系统没有旧版的 MySQL。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get autoremove --purge mysql-server</span><br><span class=\"line\">sudo apt-get remove mysql-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除所有已删除包的残馀配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># 若报错误 dpkg: –purge needs at least one package name argument</span></span><br><span class=\"line\"><span class=\"comment\"># 证明你的系统中没有残留配置文件了</span></span><br><span class=\"line\">dpkg -l |grep ^rc|awk <span class=\"string\">'&#123;print $2&#125;'</span> |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>安装 MySQL：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br><span class=\"line\">sudo apt-get install mysql-client</span><br><span class=\"line\">sudo apt-get install python-mysqldb <span class=\"comment\"># 安装 Python 接口的 MySQL</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置-MySQL\"><a href=\"#配置-MySQL\" class=\"headerlink\" title=\"配置 MySQL\"></a>配置 MySQL</h4><ul>\n<li><p>命令行安装，默认是不用配置用户和密码信息，故我们首先配置登录信息 $^{[3]}$：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mysql -u root <span class=\"comment\"># 无密码登录 MySQL</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 加密方式选择，系统默认是 'unix_socket'，这里暂为空</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">plugin</span>=<span class=\"string\">''</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span>=<span class=\"string\">'root'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">password</span>=<span class=\"keyword\">PASSWORD</span>(<span class=\"string\">'你自己的密码'</span>) <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span>=<span class=\"string\">'root'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>; <span class=\"comment\"># 清空缓存</span></span><br><span class=\"line\">exit;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>操作数据库 ( 配置完信息，重启 MySQL 以让设置生效 )</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo /etc/init.d/mysql status/start/stop/restart</span></span><br><span class=\"line\">sudo /etc/init.d/mysql restart</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># 当然可通过 systemctl 命令管理系统服务</span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl restart mysql # 重启系统服务</span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl status mysql # 查看系统状态</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"开启远程访问\"><a href=\"#开启远程访问\" class=\"headerlink\" title=\"开启远程访问\"></a>开启远程访问</h4><p>以上配置工作完成后，即可本地使用 MySQL 数据库了。若需要开启远程访问服务，我们还需要实现以下工作：防火墙与访问规则配置和远程登录的账号配置。</p>\n<h5 id=\"外网访问\"><a href=\"#外网访问\" class=\"headerlink\" title=\"外网访问\"></a>外网访问</h5><p>若在树莓派下测试，让数据库允许外网访问，注意得关闭防火墙或添加规则允许某端口的访问权限 $^{[4]}$。</p>\n<ul>\n<li>Case.01：本机和服务器端 ( 树莓派 ) 互相 Ping 对方 IP，以检验网络是否畅通、是否拒绝访问。</li>\n<li><p>Case.02：若网络畅通、没有拒绝访问，还要留意对应端口是否有权限访问，通过 nc -vz IP 端口检验，返回 Succeeded 即成功。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># MacOS：nc -vz IP地址 端口号</span></span><br><span class=\"line\">nc -vz 192.168.x.x 3306</span><br><span class=\"line\"><span class=\"comment\"># Windows：telnet IP地址 端口号</span></span><br><span class=\"line\">telnet 192.168.x.x 22 <span class=\"comment\"># SSH 远程访问</span></span><br><span class=\"line\">telnet 192.168.x.x 3306 <span class=\"comment\"># MySQL 数据库</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"防火墙与访问规则\"><a href=\"#防火墙与访问规则\" class=\"headerlink\" title=\"防火墙与访问规则\"></a>防火墙与访问规则</h5><p>针对上述两种情况，则可通过关闭防火墙或者添加端口的访问规则，以授权 IP 和相关端口接受访问。</p>\n<ul>\n<li><p>配置防火墙：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 ufw ( 已安装忽略 )</span></span><br><span class=\"line\">sudo apt-get install ufw</span><br><span class=\"line\"><span class=\"comment\"># 设置默认规则为 allow，除指明打开的端口，所有端口默认关闭</span></span><br><span class=\"line\">ufw default deny</span><br><span class=\"line\"><span class=\"comment\"># 启用 /关闭 ufw</span></span><br><span class=\"line\">ufw <span class=\"built_in\">enable</span>/<span class=\"built_in\">disable</span></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙状态</span></span><br><span class=\"line\">ufw status</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置访问规则：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如：打开 SSH 远程登录</span></span><br><span class=\"line\">sudo ufw allow 22</span><br><span class=\"line\"><span class=\"comment\"># 删除添加过的规则</span></span><br><span class=\"line\">sudo ufw delete allow 22</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"远程登录的账号\"><a href=\"#远程登录的账号\" class=\"headerlink\" title=\"远程登录的账号\"></a>远程登录的账号</h5><p>最后，我们还需要设置可远程登录的账号。</p>\n<ul>\n<li><p>修改 MySQL 配置：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf</span><br><span class=\"line\"><span class=\"comment\"># 找到 bind-address 这行注释掉，然后重启</span></span><br><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>修改 MySQL 账号信息：在配置 <code>登录信息</code> 时已授权，此项可日后用作远程登录账号的配置。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"><span class=\"keyword\">use</span> mysql;</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'root账号密码'</span> <span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">OPTION</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Jupyter-服务器\"><a href=\"#Jupyter-服务器\" class=\"headerlink\" title=\"Jupyter 服务器\"></a>Jupyter 服务器</h3><h4 id=\"引言-2\"><a href=\"#引言-2\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>Jupyter Notebooks 是什么？相信做数据科学项目的同学都清楚，Jupyter 其提供了一个集成环境，无需更多附加操作就可在其中编写你的代码、运行代码、查看输出、可视化数据并查看结果。</p>\n<p>作为一款可执行端到端的数据科学工作流程的便捷工具，它不仅支持数据清理、统计建模、构建和训练机器学习模型、可视化数据等数据科学工作，而且其强大的交互性，使得它可以更具教学性的方式展示代码。</p>\n<blockquote>\n<p>当然 Jupyter 也能运行其他 Python 程序，这里只是为了代入特定场景介绍它。</p>\n</blockquote>\n<h4 id=\"安装-Jupyter-Notebook\"><a href=\"#安装-Jupyter-Notebook\" class=\"headerlink\" title=\"安装 Jupyter Notebook\"></a>安装 Jupyter Notebook</h4><ul>\n<li><p>在此之前，需要确保你安装了 <code>Python</code> 以及 <code>pip</code> 模块。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 树莓派 Raspbian 原生内置了 Python 2.7</span></span><br><span class=\"line\"><span class=\"comment\"># 我们需要基于 Python 3.x 基础上运作 Jupyter，则需要先安装 Python 3.x</span></span><br><span class=\"line\">sudo apt-get install python3.5 python3-pip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Jupyter Notebook：</p>\n<blockquote>\n<p>若你已经有使用 virtualenv 的经验，强烈建议在虚拟环境中安装所需版本的 jupyter notebook。</p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于 Python 2.7</span></span><br><span class=\"line\">pip install --upgrade jupyter</span><br><span class=\"line\"><span class=\"comment\"># 基于 Python 3.x</span></span><br><span class=\"line\">pip3 install --upgrade jupyter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否安装成功，成功返回版本号</span></span><br><span class=\"line\">jupyter --version</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置-Jupyter-Notebook\"><a href=\"#配置-Jupyter-Notebook\" class=\"headerlink\" title=\"配置 Jupyter Notebook\"></a>配置 Jupyter Notebook</h4><p>配置 Jupyter Notebook，参考了文档 <a href=\"https://www.jianshu.com/p/639c8d939643\" target=\"_blank\" rel=\"noopener\">[7]</a>：</p>\n<ul>\n<li><p>生成配置文件：注意不同用户组，生成的配置文件是存放在不同位置的。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件存放于 /root/.jupyter/jupyter_notebook_config.py </span></span><br><span class=\"line\">sudo jupyter notebook --generate-config</span><br><span class=\"line\"><span class=\"comment\"># 配置文件存放于 /home/pi/.jupyter/jupyter_notebook_config.py ( 推荐 )</span></span><br><span class=\"line\"><span class=\"comment\"># /home/pi/ 为当前登录用户的工作目录</span></span><br><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置密码：终端进入 iPython / Python 环境，借助 Python 生成 SHA 密钥：</p>\n<blockquote>\n<p>若不开启远程服务，则可跳过此步骤。</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd <span class=\"comment\"># 导入授权模块设置密码</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>passwd() <span class=\"comment\"># 提示键入密码</span></span><br><span class=\"line\">Enter password: your password</span><br><span class=\"line\">Verify password: your password again</span><br><span class=\"line\"><span class=\"comment\"># 密码的哈希值，用于配置文件中设置密码</span></span><br><span class=\"line\"><span class=\"string\">'sha1:67c9e601de......7d111089e11aed'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入配置文件：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /home/pi/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>修改配置内容：配置选项非常丰富，关于其他配置的选项用途详细可参考 <code>jupyter_notebook_config.py</code> 内的注释。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意开启配置选项，记得去掉 #，才能使配置生效！</span></span><br><span class=\"line\"><span class=\"comment\"># 允许所有 IP 访问</span></span><br><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\"># 远程访问密钥</span></span><br><span class=\"line\">c.NotebookApp.password = u<span class=\"string\">'sha:67c9e......11aed'</span></span><br><span class=\"line\"><span class=\"comment\"># 不在本机自动打开浏览器</span></span><br><span class=\"line\">c.NotebookApp.open_browser = False</span><br><span class=\"line\"><span class=\"comment\"># 指定监听端口</span></span><br><span class=\"line\">c.NotebookApp.port =8888</span><br><span class=\"line\"><span class=\"comment\"># Jupyter 的默认工作目录</span></span><br><span class=\"line\">c.NotebookApp.notebook_dir = <span class=\"string\">'/home/pi/ipynb/'</span></span><br><span class=\"line\"><span class=\"comment\"># 允许使用 root 用户启动 jupyter</span></span><br><span class=\"line\"><span class=\"comment\"># c.NotebookApp.allow_root = True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>启动 Jupyter Notebook：<code>jupyter notebook</code></li>\n</ul>\n<h4 id=\"拓展-Jupyter-Notebook\"><a href=\"#拓展-Jupyter-Notebook\" class=\"headerlink\" title=\"拓展 Jupyter Notebook\"></a>拓展 Jupyter Notebook</h4><h5 id=\"开启远程访问-1\"><a href=\"#开启远程访问-1\" class=\"headerlink\" title=\"开启远程访问\"></a>开启远程访问</h5><p>Jupyter Notebook 开启远程访问 ( 远程访问这里指同一局域网，其他终端访问树莓派，若是要外网访问请参阅内网穿透相关内容 )，但端口被拒绝访问。</p>\n<ul>\n<li><p>在配置文件中，我们只设置了 <code>0.0.0.0</code> 或 <code>*</code> 的 IP 地址，在局域网环境运行能正常访问。但对于远程访问，归根结底，我们还需要知道树莓派的 IP 才能访问到服务端的 Jupyter，故我们是这样解决访问问题的 $^{[7]}$。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nohup: 一直执行命令，即使关闭了 SSH。</span></span><br><span class=\"line\"><span class=\"comment\"># --ip: 指定在 192.168.10.200 ( 树莓派的IP ) 上监听活动。</span></span><br><span class=\"line\"><span class=\"comment\"># &amp;: 在后台运行这条命令。</span></span><br><span class=\"line\">nohup jupyter notebook --ip 192.168.10.200 &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后，我们需要确保该端口是否在安全策略下已经开启，详细可参考 MySQL 数据库的 <a href=\"#防火墙与访问规则\">防火墙与访问规则</a> 章节内容。</p>\n</li>\n</ul>\n<h5 id=\"开启自启服务\"><a href=\"#开启自启服务\" class=\"headerlink\" title=\"开启自启服务\"></a>开启自启服务</h5><p>搭建 Jupyter 服务器，Jupyter 挂靠后台服务，且开通断电自动重启功能，参考了文档 <a href=\"https://blog.csdn.net/q361949240/article/details/83179560\" target=\"_blank\" rel=\"noopener\">[8]</a>。</p>\n<ul>\n<li><p>在 <code>/etc/systemd/system</code> 下创建 <code>jupyter.service</code> 输入如下内容：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sytemd/system/jupyter.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>jupyter.service</code> 内容填写如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Jupyter Notebook</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"comment\"># 这里在 /run 目录下没有 jupyter.pid</span></span><br><span class=\"line\"><span class=\"comment\"># 这个是进程产生之后出现的，虽然在启动前没有，但是可以使用</span></span><br><span class=\"line\">PIDFile=/run/jupyter.pid</span><br><span class=\"line\"><span class=\"comment\"># ExecStart 是执行文件 jupyter-notebook</span></span><br><span class=\"line\"><span class=\"comment\"># config 是配置文件 jupyter_notebook_config.py</span></span><br><span class=\"line\"><span class=\"comment\"># ip 是树莓派的地址</span></span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/bin/jupyter-notebook --config=/home/pi/.jupyter/jupyter_notebook_config.py --ip=192.168.10.200</span><br><span class=\"line\">User=pi</span><br><span class=\"line\"><span class=\"comment\"># 查看用户组 groups pi，发现属于 pi 组</span></span><br><span class=\"line\">Group=pi</span><br><span class=\"line\"><span class=\"comment\"># 自己设置的工作目录</span></span><br><span class=\"line\"><span class=\"comment\"># 需同时在 jupyter_notebook_config.py 中设置</span></span><br><span class=\"line\"><span class=\"comment\"># c.NotebookApp.notebook_dir = '/home/pi/ipynb/'</span></span><br><span class=\"line\">WorkingDirectory=/home/pi/ipynb/</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=10</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使服务自启动：<code>systemctl enable jupyter</code></p>\n</li>\n<li>启动服务：<code>service jupyter start</code></li>\n</ul>\n<h5 id=\"加载虚拟环境\"><a href=\"#加载虚拟环境\" class=\"headerlink\" title=\"加载虚拟环境\"></a>加载虚拟环境</h5><ul>\n<li><p>首先，我们为 Jupyter Notebook 创建隔绝的虚拟环境，从而便捷、更针对地管理软件包。</p>\n<blockquote>\n<p>比如，某个 Python 程序需要 Python 2.7 特定环境运行，而我们编译的环境是 Python 3.x ，即为了运行该程序需要把原来的 Python 3.x 给替换成 Python 2.7。同理，对于程序的依赖包，即使是同一个软件包也存在不同版本的要求。那么问题就出现在这，在同一台电脑上，为让更多程序兼容运行，这正是虚拟环境的作用之一。  </p>\n</blockquote>\n</li>\n<li><p>再者，引入 <a href=\"#Conda-管理器\">Conda 管理器</a> 的概念，简单来说 Conda 是一款包管理系统。conda 与 pip 类似，它会根据你的键入需求，且自行交代清楚相互依赖的包，并实现自动化地下载、安装它们。</p>\n</li>\n<li><p>基于以上两点的理解，我们正式进入正题，开始配置一个虚拟环境，并让 Jupyter Notebook 使用起来：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 参考 Conda 管理器的 BerryConda 小节，完成 BerryConda 的安装</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 建立一个虚拟环境运作 Conda 以方便管理各种包</span></span><br><span class=\"line\">conda create -n your_venv_name python=3.6</span><br><span class=\"line\"><span class=\"comment\"># 3. 激活环境</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate your_venv_name</span><br><span class=\"line\"><span class=\"comment\"># 4. 安装 Jupyter 包：上述内容中，Jupyter 是安装在原生环境下的</span></span><br><span class=\"line\"><span class=\"comment\"># 考虑到兼容性的情况 (例如第5点的情况)，在该虚拟环境中重新安装一个 Jupyter</span></span><br><span class=\"line\">conda install jupyter</span><br><span class=\"line\"><span class=\"comment\"># 给该环境下载其他软件包也是类似操作</span></span><br><span class=\"line\"><span class=\"comment\"># conda install scipy numpy scikit-learn...</span></span><br><span class=\"line\"><span class=\"comment\"># 5. 指定版本安装 tornado，不然 Jupyter 会报错</span></span><br><span class=\"line\">conda install tornado=4.5</span><br><span class=\"line\"><span class=\"comment\"># 6. 安装 nb_conda 包，让 Jupyter 支持使用虚拟环境</span></span><br><span class=\"line\">conda install nb_conda</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若使用虚拟环境中的 Jupyter ( 自启服务的 ExecStart 设置同理 )，此时启动 Jupyter 的程序应该改为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /home/pi/ 为当前登录用户的工作目录</span></span><br><span class=\"line\">/home/pi/berryconda3/envs/your_venv_name/bin/jupyter-notebook</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"打造科学环境\"><a href=\"#打造科学环境\" class=\"headerlink\" title=\"打造科学环境\"></a>打造科学环境</h5><h6 id=\"Tensorflow\"><a href=\"#Tensorflow\" class=\"headerlink\" title=\"Tensorflow\"></a>Tensorflow</h6><p>值得庆贺的是，<a href=\"https://medium.com/tensorflow/tensorflow-1-9-officially-supports-the-raspberry-pi-b91669b0aa0\" target=\"_blank\" rel=\"noopener\">Tensorflow 1.9</a> 官方版本开始支持树莓派 RaspBerry Pi 了，没有繁琐的步骤即可体验 Tensorflow！具体的安装方法大概参考 <a href=\"https://tensorflow.google.cn/install/pip\" target=\"_blank\" rel=\"noopener\">Tensorflow 官方说明文档</a>。</p>\n<ul>\n<li><p>但在实操过程中还是碰到了不可预计的情况：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 安装 libatlas-base-dev (Required for Numpy)</span></span><br><span class=\"line\">sudo apt install libatlas-base-dev</span><br><span class=\"line\"><span class=\"comment\"># 2. 同样，在虚拟环境内安装 tensorflow，虚拟环境的 Python 版本为 3.6</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate your_venv_name</span><br><span class=\"line\"><span class=\"comment\"># 3. 安装 h5py、hdf5，不然 tf 安装过程中会报错 ( 缺少 hdf5.h 文件 )：</span></span><br><span class=\"line\"><span class=\"comment\"># /tmp/pip-install-ve4RnJ/h5py/h5py/api_compat.h:27:18: </span></span><br><span class=\"line\"><span class=\"comment\"># fatal error: hdf5.h: No such file or directory</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 通过 conda 安装 h5py ( 好像 pip (Python3.x) 安装 h5py 会遇到缺少文件的问题？)</span></span><br><span class=\"line\">conda install h5py </span><br><span class=\"line\"><span class=\"comment\"># 5. 正式安装 tensorflow</span></span><br><span class=\"line\"><span class=\"comment\"># pip --version 查看是否是虚拟环境的 pip，不然未能安装在当前环境</span></span><br><span class=\"line\">pip install --upgrade --user tensorflow</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>若中途不出错、不提示错误，等待安装成功即可。然后输入代码测试验证：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python <span class=\"comment\"># 命令进入 ipython / python 模式</span></span><br><span class=\"line\">&gt;&gt;&gt; import tensorflow as tf</span><br><span class=\"line\">&gt;&gt;&gt; tf.enable_eager_execution()</span><br><span class=\"line\">&gt;&gt;&gt; <span class=\"built_in\">print</span>( tf.reduce_sum(tf.random_normal([1000, 1000])) )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然，还可能遇到 tensorflow 部分模块的 Python 版本跟编译环境的 Python 版本对不上，则可通过针对 ( 编译环境的 ) Python 版本的 pip 升级 tensorflow 解决此问题：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异常的情况大概如下：</span></span><br><span class=\"line\"><span class=\"comment\"># /usr/lib/python3.6/importlib/_bootstrap.py:219: </span></span><br><span class=\"line\"><span class=\"comment\"># RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' </span></span><br><span class=\"line\"><span class=\"comment\"># does not match runtime version 3.6</span></span><br><span class=\"line\">python3.6 -m pip install --upgrade --user tensorflow</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Keras\"><a href=\"#Keras\" class=\"headerlink\" title=\"Keras\"></a>Keras</h6><ul>\n<li><p>安装过程演示：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 同样，在虚拟环境内安装 keras，虚拟环境的 Python 版本为 3.6</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate your_venv_name</span><br><span class=\"line\"><span class=\"comment\"># 2. 正式安装 keras</span></span><br><span class=\"line\"><span class=\"comment\"># pip --version 查看是否是虚拟环境的 pip，不然未能安装在当前环境</span></span><br><span class=\"line\">pip install --upgrade --user keras</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>当然，还可能遇到版本对不上的异常，参考 上述解决方案：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3.6 -m pip install --upgrade --user keras</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"常见问题整理\"><a href=\"#常见问题整理\" class=\"headerlink\" title=\"常见问题整理\"></a>常见问题整理</h5><ul>\n<li><p>当新建或修改 ipynb 文档时，出现 <code>Permission denied: Untitled.ipynb</code> 权限异常，检查工作目录是否具有操作权限、当前用户是否有操作权限。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确保 Jupyter 工作目录属于当前登录用户 pi</span></span><br><span class=\"line\">sudo chown -R pi:pi /home/pi/ipynb</span><br><span class=\"line\"><span class=\"comment\"># 确保 Jupyter 工作目录有可读、可写和可执行的权限</span></span><br><span class=\"line\"><span class=\"comment\"># 更新后的权限情况：drwxrwxr--</span></span><br><span class=\"line\">chmod ug=rwx /home/pi/ipynb</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Conda-管理器\"><a href=\"#Conda-管理器\" class=\"headerlink\" title=\"Conda 管理器\"></a>Conda 管理器</h3><h4 id=\"引言-3\"><a href=\"#引言-3\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>无论是使用 Jupyter Notebook，亦或是原生 Python 环境做 <code>数据科学</code> 相关工作，难免需要 <code>安装各种科学计算包</code>，而且还涉及众多依赖包的安装。那么如何管理包变成了一门 “手艺活” 了，此时推荐你使用 Conda 包管理系统，繁琐的包安装工作交由 Conda 处理，你只管专心地开展数据科学工作。</p>\n<p>参考 <a href=\"https://www.zhihu.com/question/65430209\" target=\"_blank\" rel=\"noopener\">树莓派 Raspbian 系统可安装 Anaconda 吗？</a>，得知树莓派安装 Conda 共有两种选择：</p>\n<ul>\n<li><a href=\"https://conda.io/en/latest/miniconda.html\" target=\"_blank\" rel=\"noopener\">MiniConda</a>：年久未更，目前 Python 只停留在 Python 3.4 版本。</li>\n<li><a href=\"https://github.com/jjhelmus/berryconda\" target=\"_blank\" rel=\"noopener\">BerryConda</a>：是一款为树莓派定制基于 Conda Python 发行版的开源软件。Berryconda 提供了 Python 2.7 的 Berryconda 2 和 Python 3.6 的 Berryconda 3，同时还支持树莓派 0、1、2、3 各个系列，我们可根据树莓派的版本选择适合的软件版本安装即可。</li>\n</ul>\n<h4 id=\"Miniconda\"><a href=\"#Miniconda\" class=\"headerlink\" title=\"Miniconda\"></a>Miniconda</h4><p>Miniconda 与 Anaconda 同为发行版本的 Conda 包管理系统，Miniconda 则是最小的 Conda 安装环境。以下直接安装操作演示，安装过程参考了 <a href=\"https://blog.csdn.net/tju_cc/article/details/80024721\" target=\"_blank\" rel=\"noopener\">[9]</a>、<a href=\"https://www.jianshu.com/p/edaa744ea47d\" target=\"_blank\" rel=\"noopener\">[10]</a>。</p>\n<h5 id=\"安装-MiniConda\"><a href=\"#安装-MiniConda\" class=\"headerlink\" title=\"安装 MiniConda\"></a>安装 MiniConda</h5><ul>\n<li><p>首先，确保安装了 <code>wget</code> 和 <code>bzip2</code>：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看是否有反馈，有则表示已安装</span></span><br><span class=\"line\">wget --<span class=\"built_in\">help</span></span><br><span class=\"line\">bzip2 --<span class=\"built_in\">help</span></span><br><span class=\"line\">sudo apt-get install -y wget bzip2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>下载安装脚本：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wget 不添加参数，默认是保存到当前路径</span></span><br><span class=\"line\"><span class=\"comment\"># wget -O /path/name 指定路径及文件名</span></span><br><span class=\"line\">wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-armv7l.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>运行安装脚本：</p>\n<blockquote>\n<p>安装过程中不需要使用 sudo，程序默认会安装到 /home/pi/miniconda3 中。当然，也是为了确保 miniconda3 工作目录属于当前登录用户 pi。</p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash Miniconda3-latest-Linux-armv7l.sh</span><br><span class=\"line\"><span class=\"comment\"># 安装过程中，需要阅读一份声明，后面需要输入两次 Yes 确认</span></span><br><span class=\"line\"><span class=\"comment\"># 第一个 Yes 是是否同意声明，若回车跳过则是默认输入了 No</span></span><br><span class=\"line\"><span class=\"comment\"># 第二个 Yes 是添加到环境变量，否则需要自己手动添加到环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># --------- 若选择了 No 则需进行以下步骤的操作 --------- #</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 编辑 /bashrc 文件</span></span><br><span class=\"line\">vim /home/pi/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 2. 添加以下内容 (根据自己的安装路径修改)：</span></span><br><span class=\"line\"><span class=\"comment\"># export PATH=\"/home/pi/miniconda3/bin:$PATH\"</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 添加完成后记得让其生效 ( 启动时才执行原则 )</span></span><br><span class=\"line\"><span class=\"comment\"># export 生成的环境变量是临时的，关闭终端即结束 ( 可改永久性环境变量 )</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/pi/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用-MiniConda\"><a href=\"#使用-MiniConda\" class=\"headerlink\" title=\"使用 MiniConda\"></a>使用 MiniConda</h5><ul>\n<li><p>检查 conda 是否安装成功，返回版本信息：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 conda 是否安装成功，返回版本信息</span></span><br><span class=\"line\">conda --version</span><br><span class=\"line\"><span class=\"comment\"># 显示当前已经安装好的包</span></span><br><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>创建虚拟环境</code>，以避免 “污染” 环境，便于管理各种 Python 包：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建立一个虚拟环境运作 Conda 以方便管理各种包</span></span><br><span class=\"line\">conda create -n your_venv_name python=3.4</span><br><span class=\"line\"><span class=\"comment\"># 删除一个虚拟环境：</span></span><br><span class=\"line\"><span class=\"comment\"># conda env remove -n your_venv_name</span></span><br><span class=\"line\"><span class=\"comment\"># 激活环境 &lt;---&gt; 关闭环境：source deactivate</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> activate your_venv_name</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>更改国内源，优化安装包下载速度：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加国内下载源 ( 例如: 清华源 )</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\"><span class=\"comment\"># 替换源后记得更新 Conda 以促使配置生效</span></span><br><span class=\"line\">conda update conda</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>使用 Conda 安装包:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 事先查找指定软件是否存在</span></span><br><span class=\"line\">conda search numpy</span><br><span class=\"line\"><span class=\"comment\"># 安装指定软件</span></span><br><span class=\"line\">conda install numpy</span><br><span class=\"line\"><span class=\"comment\"># 安装特定版本的软件，Conda 会先卸载已安装版本，然后重新安装指定版本</span></span><br><span class=\"line\">conda install 软件名=版本号</span><br><span class=\"line\"><span class=\"comment\"># 更新指定软件</span></span><br><span class=\"line\">conda update numpy</span><br><span class=\"line\"><span class=\"comment\"># 卸载指定软件</span></span><br><span class=\"line\">conda remove numpy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"卸载-MiniConda\"><a href=\"#卸载-MiniConda\" class=\"headerlink\" title=\"卸载 MiniConda\"></a>卸载 MiniConda</h5><ul>\n<li><p>卸载 MiniConda 的方法：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 在 /home/pi/.bashrc 移除环境变量 ( 注释掉 )</span></span><br><span class=\"line\"><span class=\"comment\"># export PATH=\"/home/pi/miniconda3/bin:$PATH\"</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 删除 miniconda 整个文件</span></span><br><span class=\"line\">rm -rf miniconda3/</span><br><span class=\"line\"><span class=\"comment\"># 3. 重新激活 .bashrc</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/pi/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"BerryConda\"><a href=\"#BerryConda\" class=\"headerlink\" title=\"BerryConda\"></a>BerryConda</h4><p>BerryConda 是一款为树莓派定制基于 conda python 发行版的开源软件。安装过程参考了 <a href=\"https://www.jianshu.com/p/ccad38dbb897\" target=\"_blank\" rel=\"noopener\">[11]</a>。</p>\n<h5 id=\"安装-BerryConda\"><a href=\"#安装-BerryConda\" class=\"headerlink\" title=\"安装 BerryConda\"></a>安装 BerryConda</h5><ul>\n<li><p>参考 <a href=\"https://github.com/jjhelmus/berryconda\" target=\"_blank\" rel=\"noopener\">BerryConda</a> 文档，根据自己的机器版本 ( 树莓派 3B+ / Armv7l 架构 )，并确定 Python 版本号 ( Python 3.x )，为此选择了 Berryconda 3 版本安装，安装方法与 Miniconda 类似。</p>\n</li>\n<li><p>下载安装脚本：</p>\n<blockquote>\n<p>安装过程中不需要使用 sudo，程序默认会安装到 /home/pi/berryconda3 中。当然，也是为了确保 berryconda3 工作目录属于当前登录用户 pi。</p>\n</blockquote>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/jjhelmus/berryconda/releases/download/v2.0.0/Berryconda3-2.0.0-Linux-armv7l.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>执行安装脚本：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash Berryconda3-2.0.0-Linux-armv7l.sh</span><br><span class=\"line\"><span class=\"comment\"># 安装过程中，需要阅读一份声明，后面需要输入两次 Yes 确认</span></span><br><span class=\"line\"><span class=\"comment\"># 第一个 Yes 是是否同意声明，若回车跳过则是默认输入了 No</span></span><br><span class=\"line\"><span class=\"comment\"># 第二个 Yes 是添加到环境变量，否则需要自己手动添加到环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># --------- 若选择了 No 则需进行以下步骤的操作 --------- #</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 编辑 /bashrc 文件</span></span><br><span class=\"line\">vim /home/pi/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 2. 添加以下内容 (根据自己的安装路径修改)：</span></span><br><span class=\"line\"><span class=\"comment\"># export PATH=\"/home/pi/miniconda3/bin:$PATH\"</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 添加完成后记得让其生效</span></span><br><span class=\"line\"><span class=\"comment\"># export 生成的环境变量是临时的，关闭终端即结束 ( 可改永久性环境变量 )</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /home/pi/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"使用-BerryConda\"><a href=\"#使用-BerryConda\" class=\"headerlink\" title=\"使用 BerryConda\"></a>使用 BerryConda</h5><ul>\n<li><p>至此，BerryConda 已经安装完成，查看版本信息检验是否安装成功，剩余的 Conda 操作参考 <a href=\"#使用-MiniConda\">使用 MiniConda</a> 章节即可。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 conda 是否安装成功，返回版本信息</span></span><br><span class=\"line\">conda --version</span><br><span class=\"line\"><span class=\"comment\"># 显示当前已经安装好的包</span></span><br><span class=\"line\">conda list</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://baike.baidu.com/item/存储引擎\" target=\"_blank\" rel=\"noopener\">百度百科. 存储引擎. baike.baidu.com</a></li>\n<li>[2] <a href=\"https://github.com/jaywcjlove/mysql-tutorial/blob/master/chapter3/3.5.md\" target=\"_blank\" rel=\"noopener\">jaywcjlove. mysql-tutorial. 2017. github.com</a></li>\n<li>[3] <a href=\"https://www.cnblogs.com/apanly/p/9061803.html\" target=\"_blank\" rel=\"noopener\">编程浪子. 树莓派3之安装Mysql服务. 2018. cnblogs.com</a></li>\n<li>[4] <a href=\"https://blog.csdn.net/faryang/article/details/50788795\" target=\"_blank\" rel=\"noopener\">farYang. 树莓派安装mysql并开启远程访问. 2016. csdn.net</a></li>\n<li>[5] <a href=\"http://www.52pi.net/archives/549\" target=\"_blank\" rel=\"noopener\">Li, TaterLi. 十步配置TeamViewer远程控制Pi. 2017. 52pi.net</a></li>\n<li>[6] <a href=\"https://blog.csdn.net/realDonaldTrump/article/details/79694196\" target=\"_blank\" rel=\"noopener\">萝是carrot夢是Dream. 树莓派安装配置TeamViewer实现外网远程控制. 2018. csdn.net</a></li>\n<li>[7] <a href=\"https://www.jianshu.com/p/639c8d939643\" target=\"_blank\" rel=\"noopener\">终可见. 树莓派 3B 搭建 Jupyter notebook. 2018. jianshu.com</a></li>\n<li>[8] <a href=\"https://blog.csdn.net/q361949240/article/details/83179560\" target=\"_blank\" rel=\"noopener\">齐志刚. 树莓派 3B Jupyter notebook 设置为后台服务. 2018. csdn.net</a></li>\n<li>[9] <a href=\"https://blog.csdn.net/tju_cc/article/details/80024721\" target=\"_blank\" rel=\"noopener\">Holy_C. 树莓派 miniconda3+opencv3.3+tensorflow1.7 踩坑总结. 2018. csdn.net</a></li>\n<li>[10] <a href=\"https://www.jianshu.com/p/edaa744ea47d\" target=\"_blank\" rel=\"noopener\">卖萌哥. Conda 的安装与使用. 2018. jiansu.com</a></li>\n<li>[11] <a href=\"https://www.jianshu.com/p/ccad38dbb897\" target=\"_blank\" rel=\"noopener\">Speculatecat. 解决 Raspbian Miniconda 无法安装最新 Python3.6. 2018. jianshu.com</a></li>\n</ul>\n","categories":["Technique"],"tags":["树莓派","Raspbian","博客搭建","服务器","数据科学"]},{"title":"次第花开：藏人精神保持愉悦的秘密","url":"/2022/10/blooming-flowers-in-turn.html","content":"<p>痛苦是因为我执，我执源于缺乏对痛苦的认识，以及时间长河中无法看清事物的无常无我，使得我们心生烦恼、内心焦虑。</p>\n<p>如何减轻痛苦？书中上师给了我们开示，减轻痛苦应该从认识烦恼及远离烦恼的因开始，不断地修行我们的出离心、菩提心、四无量心，以缓释我执、远离烦恼。人生长河中，事物无常无我，修行之路无止境，我们不要过于功利化去追寻一个确定的答案。因为不稳定是常态，不然适得其反跌入另一个我执当中，循环往复、徒增烦恼。</p>\n<p>简言之，因上努力，果上随缘，但行好事，莫问前程。积极心态修心修德，感受世间细微事，善良心地终究能开出安乐之花。</p>\n<a id=\"more\"></a>\n<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><ul>\n<li>佛法中，最幽深的理论与我们当下的身心活动紧密联结，给我们现实人生遇到的问题提供方案或心灵指导。</li>\n<li>人们在极度焦虑不安时，通常会把希望寄托于佛法当中，以寻得一种 <code>解脱</code> 的途径。<ul>\n<li>事实：事实上我们无法从外界寻得一颗清净的心移植到自己身上。</li>\n<li>启示：我们唯一能做的只有面对当下，回归内心，与烦恼开战。</li>\n</ul>\n</li>\n<li>远离烦恼，从认识烦恼开始，必须认识及远离烦恼的 <code>因</code>。<ul>\n<li>对境：感官感受到的障碍。</li>\n<li>串习：不断修炼？</li>\n<li>随学恶友：物以类聚，人以群分。近朱者赤近墨者黑，接触善友便学善法，接触恶友便学恶法。</li>\n<li>颠倒作意：好坏颠倒，也可用在晨昏颠倒、无限制享乐上。</li>\n<li>听闻不正确的法教</li>\n<li>潜伏在心田的烦恼种子</li>\n</ul>\n</li>\n<li><p>远离前五因，阻止烦恼现前，所谓 <code>出离</code>。</p>\n<blockquote>\n<p>警惕一种矫枉过正的做法，就是刻意追求所谓的 “出离的出离”。我们要明白，主要矛盾是烦恼，而不在于出离的形式。 </p>\n</blockquote>\n</li>\n<li><p>过生活不是修行，修行是在悲欢离合中体认无常、缘会、因果；在生病中认识到与生俱来的脆弱、忧苦，由此生起出离心，推己及人，再生起悲悯之心。</p>\n<blockquote>\n<p>生活本身不一定是修行，如果你能把生命经验，顺境、逆境、苦乐，用于巩固你的出离心、菩提心、空性的见解，才是修行。</p>\n</blockquote>\n</li>\n<li><p>反转无始以来的惯性思维，我们以烦恼为契机去勘悟世间万象的本质，从烦恼入手实现止息烦恼的最终目的。换角度理解，这样一个充满烦恼的人生就是我们解脱的最好机缘。</p>\n</li>\n</ul>\n<h2 id=\"珍宝人生\"><a href=\"#珍宝人生\" class=\"headerlink\" title=\"珍宝人生\"></a>珍宝人生</h2><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Blooming-flowers-in-turn/blooming-flowers-pain.svg\" alt> 认识痛苦</p>\n</blockquote>\n<ul>\n<li>无我<ul>\n<li>事物不具有绝对的自性，也并非虚无主义。</li>\n<li>无我讲空性，无我也讲因果。</li>\n</ul>\n</li>\n<li>无常<ul>\n<li>事物普通具有的特性，即事物变化的普遍性。</li>\n<li>不要害怕它，也不要抵触它，因为我们阻止不了它的发生。 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"痛苦\"><a href=\"#痛苦\" class=\"headerlink\" title=\"痛苦\"></a>痛苦</h3><ul>\n<li>因果一旦成熟，任何行动都无法阻止果报的显现。 若痛苦、尴尬在所难免，我们最好让自己有所准备。</li>\n<li>解脱从认识痛苦开始。</li>\n<li><p>痛苦可分为三大类：苦苦、变苦、行苦</p>\n<ul>\n<li>苦苦：显而易见，不折不扣的痛苦，比如身体和心灵的创伤、病痛、恐惧、生离死别。</li>\n<li><p>变苦：由快乐变成痛苦。</p>\n<blockquote>\n<p> 比如现在的富贵病，多吃少运动，身心健康变差；相聚终有分别苦；相爱相随相守苦；岁月不饶人之苦等。</p>\n</blockquote>\n</li>\n<li><p>行苦：更深刻细微的痛苦，它指限于轮回的众生整个存在状态的无奈和不圆满，身受到业力牵制，被种种烦恼束缚。</p>\n</li>\n</ul>\n</li>\n<li><p>人间的痛苦又分为八种</p>\n<ul>\n<li>生、老、病、死</li>\n<li>怨憎会、爱别离、求不得、不欲临</li>\n</ul>\n</li>\n<li><p>防患于未然：利用对痛苦的熟知，通过破坏其形成的条件去阻止某项痛苦的产生。</p>\n</li>\n</ul>\n<h3 id=\"无我无常\"><a href=\"#无我无常\" class=\"headerlink\" title=\"无我无常\"></a>无我无常</h3><ul>\n<li>对痛苦的了解越深入、越全面，被激励着就会去实践 <code>离苦得乐</code> 的方法。</li>\n<li><p>痛苦和快乐不是凭空而来的，它们都有各自形成的原因和条件。</p>\n<blockquote>\n<p>一切痛苦的根源在于我们长期以来对自身及外部世界根深蒂固的误解，执幻为实。</p>\n</blockquote>\n</li>\n<li><p>实际造成痛苦的不是无常，而是对无常的恐惧。</p>\n</li>\n<li>克服恐惧的两个方法<ul>\n<li>熟悉无常，了解无常的原因。</li>\n<li>事物变化具有普遍性，因此不要害怕变化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"亲证无我\"><a href=\"#亲证无我\" class=\"headerlink\" title=\"亲证无我\"></a>亲证无我</h3><ul>\n<li>如果我们不去努力证悟无我，而只是把无我的观点当作一种知识储备在脑子里，就好比一个病人把医生开出来救命的药方当文章欣赏，而不去按方抓药、治病救命。</li>\n<li><p>我们倾向于把当下纯粹的苦受扩大，演绎成悲惨的故事，甚至是连续剧，掺进去太多不相干的情节、评判以及谈论。</p>\n<blockquote>\n<p>启示：运用无我的观点思考问题，辩证看待已发生的事物；并结合目的论的思维模式，尽可能往有用、积极的方向考量问题。</p>\n</blockquote>\n</li>\n<li><p>因果律：事物无我，却能随缘显象。</p>\n</li>\n<li>行善积德却遭遇不幸，我们为什么还要行善？<ul>\n<li>改变心态，看待事物的角度会不一样。</li>\n<li>帮助他人能更好地实现自身价值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"菩提心\"><a href=\"#菩提心\" class=\"headerlink\" title=\"菩提心\"></a>菩提心</h3><ul>\n<li>忆苦思甜<ul>\n<li>因为不知道可贵，所以不知道希求。</li>\n<li>生活得太安逸，不知痛苦匮乏为何物，又对安乐富足习以为常，很难生起求解脱之心。当痛苦来临时不知所措，此时刻意四处求得解脱之法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>若解脱之道不是远离贪嗔痴，不是诸恶莫作、众善奉行，我们很容易迷失在对贫穷、蔑视、责难、羞辱得恐惧和对富贵、尊崇、荣耀、赞美向往中。</li>\n<li>反转无始以来的惯性思维，我们以烦恼为契机去勘悟世间万象的本质，从烦恼入手实现止息烦恼的最终目的。换角度理解，这样一个充满烦恼的人生就是我们解脱的最好机缘。</li>\n</ul>\n<h2 id=\"寻得安乐\"><a href=\"#寻得安乐\" class=\"headerlink\" title=\"寻得安乐\"></a>寻得安乐</h2><ul>\n<li>痛苦消失，快乐显现。</li>\n<li>痛苦源自于我执和法执，即对自己的执着以及对周遭事物的执着。</li>\n<li><p>正视情绪的价值，即使是负面情绪。</p>\n<blockquote>\n<p>安住负面情绪，而非压制它，也能帮助我们培养菩提心。</p>\n</blockquote>\n</li>\n<li><p>不了解自己的另一个表现是不知道如何正确对待自己。</p>\n<blockquote>\n<p>对世界认知不浅，但对自己却知之甚少。</p>\n</blockquote>\n</li>\n<li><p>快乐人生从接受缺憾开始，接受一个不那么完美的自己。</p>\n<blockquote>\n<p>启示：因上努力，果上随缘；但行好事，莫问前程。任何有意义付出，对我们来说是经验积淀，会让下一次成功概率更大一些。</p>\n</blockquote>\n</li>\n<li><p>把快乐寄托在向外驰求上，就像喝盐水止渴一样，得到越多越不满足。</p>\n</li>\n</ul>\n<h2 id=\"玉树开示\"><a href=\"#玉树开示\" class=\"headerlink\" title=\"玉树开示\"></a>玉树开示</h2><h3 id=\"无常\"><a href=\"#无常\" class=\"headerlink\" title=\"无常\"></a>无常</h3><ul>\n<li>一切有为法如梦幻泡影，凡因缘和合的事物都会耗尽，都是无常的，没有例外。</li>\n</ul>\n<h3 id=\"因果\"><a href=\"#因果\" class=\"headerlink\" title=\"因果\"></a>因果</h3><ul>\n<li>每一件事的发生都是因果关系共同作用的结果。</li>\n<li><p>由于认知能力的局限，往往只是看到无限因果相续中有限的某个片段。</p>\n<blockquote>\n<p>当事物的来龙去脉在空间或者时间的跨度上超过了目前的认识范围，人们很自然会怀疑是否凡事都由因果导向。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"共存\"><a href=\"#共存\" class=\"headerlink\" title=\"共存\"></a>共存</h3><ul>\n<li>相信自己与万物是分离的，这样一个错觉强化了人心的冷漠，让人不觉得自己应该对他人、对社会以及整个世界承担什么责任。</li>\n<li><p>在追求幸福过程中，我们要以时空为维度，考虑当今生活在地球上的人，还包括以后生活在地球上的人，以及我们共存的动植物，留出足够的空间和可能性，实现它们的幸福生活。</p>\n<blockquote>\n<p>启示：以什么样的思维对待世界，会潜移默化影响我们的价值观念，并在创造价值中产生什么样的结果。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"自律\"><a href=\"#自律\" class=\"headerlink\" title=\"自律\"></a>自律</h3><ul>\n<li>修行是修养仁爱、宽容、谦让，与人为善等能给自己或他人带来安乐的精神品质。</li>\n<li>不可或缺的修行：替众生着想，为此转化内心实际行动起来。</li>\n<li><p>从长远来看，我们真心替别人着想，首先须做到自律。</p>\n<blockquote>\n<p>启示：己所不欲勿施于人。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"慈悲\"><a href=\"#慈悲\" class=\"headerlink\" title=\"慈悲\"></a>慈悲</h3><ul>\n<li>布施：让我们发觉给予是让人感到丰足而不是贫乏的。</li>\n<li><p>布施的关键不是要解决他人多大问题才去做，而更重要的是我们能借此学习放下我执。</p>\n<blockquote>\n<p>启示：外在行为久而久之会影响心态，习惯布施的人比较容易让事情离去。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"修行误区\"><a href=\"#修行误区\" class=\"headerlink\" title=\"修行误区\"></a>修行误区</h2><h3 id=\"皈依\"><a href=\"#皈依\" class=\"headerlink\" title=\"皈依\"></a>皈依</h3><ul>\n<li>无常不是人生的一段过渡期，而是整个人生。</li>\n<li><p>相信因果不等于相信宿命，否则，我们不会那么精进修行、忏悔罪障。</p>\n<blockquote>\n<p>好比佛洛依德的原因论与阿德勒的目的论，前者看起来很精彩，但对改变自己并无多大用处。</p>\n</blockquote>\n<ul>\n<li>我们的一言一行，起心动念都会产生相应的后果。</li>\n<li>事实上，从头到尾都是我们自己对自己负责。</li>\n</ul>\n</li>\n<li><p>忍辱指遇到情况不急于做出反应，不急于逃避不安、寻找安慰，而是放慢整个事情的节奏，给自己留一点空间去观察和感受，让自己可以看清事情原貌，不致于迷失在流言蜚语中。</p>\n</li>\n</ul>\n<h3 id=\"出离心\"><a href=\"#出离心\" class=\"headerlink\" title=\"出离心\"></a>出离心</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Blooming-flowers-in-turn/blooming-flowers-disencumber.svg\" alt> 出离心</p>\n</blockquote>\n<ul>\n<li>放松是修行的第一课。</li>\n<li><p>趋利避害大概是所有众生最根深蒂固的一个习惯。</p>\n<ul>\n<li>对趋利避害上瘾，只要一感觉不舒服马上就另外寻找慰藉，不给自己留一点时间去认知和体验。有人称之为 “纵欲”，只要条件允许人们都愿意纵欲，因为这是他们逃避不安的习惯模式。</li>\n<li><p>我们一般认为灯红酒绿、纸醉金迷才是纵欲。其实躺平也是一种逃避现实的纵欲。</p>\n<blockquote>\n<p>启示：坦然接受不稳定的因素，世间是无常的，适度放松、迎接挑战。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>我们的初衷是让自己免于痛苦，得到安适，而实际做的只是以一种痛苦替代一种痛苦。如此循环往复，更强化了我们的恐惧。</p>\n<blockquote>\n<p>启示：内心空虚也是因为物质丰富后，拥有更多逃避痛苦的选择。你可以频繁地变换安慰的方式，只是结果会让你感受到更多挫败感和不满足。</p>\n</blockquote>\n</li>\n<li><p>把自己看得太重是我们另一个顽强的习惯。</p>\n</li>\n<li>只有不排斥别人才能接受自己。</li>\n</ul>\n<h3 id=\"菩提心-1\"><a href=\"#菩提心-1\" class=\"headerlink\" title=\"菩提心\"></a>菩提心</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Blooming-flowers-in-turn/blooming-flowers-bodhi-heart.svg\" alt> 菩提心</p>\n</blockquote>\n<ul>\n<li>缺少对自己的慈悲，很难真正对他人慈悲。</li>\n<li><p>不往内观照，无法消除迷惑；不心怀温柔，修行只剩下受苦。</p>\n<blockquote>\n<p>慈、悲、喜、舍都是从内心的温柔中生起的。</p>\n</blockquote>\n</li>\n<li><p>亲密相处的两层含义</p>\n<ul>\n<li>诚实地察觉自己的身、语、意所有活动</li>\n<li>柔和对待自己</li>\n</ul>\n</li>\n<li><p>不否认自己的缺点和过失，也不认为自己一无是处而失去内心的庄严。</p>\n</li>\n<li>即使面对自己的狭隘、冷漠、混乱，依然不忘记知足和感恩。</li>\n<li>只有尊重自己内心的感受，才会愿意去体念他人的感受。</li>\n</ul>\n<h3 id=\"四无量心\"><a href=\"#四无量心\" class=\"headerlink\" title=\"四无量心\"></a>四无量心</h3><ul>\n<li>慈心：愿诸众生永具安乐及安乐因。可理解为内心毫无偏见的友爱之情。</li>\n<li><p>悲心：愿诸众生远离痛苦及痛苦因。可理解为同理心。</p>\n</li>\n<li><p>我们喜欢夸大内心的感受，尤其是负面的感受。虽然这样会加重自己的痛苦，可能是我们不想把心打开，不想原谅某人，或不想面对某些真相。</p>\n<blockquote>\n<p>宁愿相信自己深受痛苦，让自己心碎比宽恕要容易、痛快得多。每个人都会有自卑的一面，这是正常的，但不要发展到自卑情结的地步。</p>\n</blockquote>\n</li>\n<li><p>某些情况下，我们会发现对亲近的人反而更难以无条件地爱。亲密的人之间太多执着，我们心里会有许多的期待和要求，不仅要求对方理解、欣赏、领受，且要符合我们的心意，不然便感觉失落、痛苦。</p>\n<ul>\n<li>启示1：对亲近的人，我们并不缺少爱，而是缺少宽容和放松。</li>\n<li>启示2：对伤害过我们的人、与我们作为的人、让我们难堪讨厌的人，要学会体念他们的烦恼，也是检验我们宽容和开放的能力。</li>\n</ul>\n</li>\n<li><p>有悲心自然会远离嗔恨心，但实践中某些人的悲心会引发嗔恨心。比如放生者对杀生者产生强烈的偏见。</p>\n</li>\n<li><p>为别人的成功、健康、善举、快乐等而高兴，所谓随喜。</p>\n<blockquote>\n<p>启示：即使自己未曾拥有，不要心生嫉妒，就要相信将有一天我们也可以争取拥有，以此激励自己。</p>\n</blockquote>\n</li>\n<li><p>嫉妒表面是对别人不满，实际反映对自己不满，因为我们意识到自己的不足。</p>\n</li>\n</ul>\n","categories":["Reading"],"tags":["烦恼","辩证","无常","无我","出离心","菩提心","四无量心"]},{"title":"冯友兰：中国哲学简史","url":"/2023/03/a-short-history-of-chinese-philosophy.html","content":"<p>哲学源于西方的概念名词，各哲学家对于“哲学”的定义亦有不同，中国哲学无不例外。中国哲学，实质上是各思想家学问主张，比如儒家学说、道家学说等。从古至今，中国哲学家特别注重人事之故，极力追求 “内圣外王” 之道，对于宇宙论的研究亦甚简略，若是以西方哲学形式上的系统来定义，那么中国无哲学可言。究竟是对标西方哲学（宇宙论、人生论、认知论），还是自成中国哲学体系，或许这就是冯友兰先生撰写中国哲学史的用意所在，即哲学史要义是找出中国实质的哲学系统。</p>\n<p>我们该如何学习中国哲学？冯老先生的《<a href=\"https://book.douban.com/subject/25899663/\" target=\"_blank\" rel=\"noopener\">中国哲学史</a>》给出了启示。哲学是对人生终极问题的系统反思，哲学与哲学家出生年代、出生经历、政治背景等有着强相关关系，即哲学具备鲜明个人特点，个人欣赏某一类哲学与他本人的体质、年纪、环境、遭遇等有关系。在思辨过程中，希望你我都能辩证接纳每一种学派思想，无用之用，将来为我所用。</p>\n<a id=\"more\"></a>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>01 - 02 章：中国哲学的精神、中国哲学的背景。</li>\n<li>03 - 16 章：讨论不同思想家的主张，即孔子及之后兴起的一批哲学家及其哲学思想。</li>\n<li>17 - 18 章：儒家或道家。汉帝国统治时期，与政治统一伴随而来的便是思想统一，周朝的诸子百家不再以单独学派存在，而是把他们的思想融入儒家或道家中。</li>\n<li>19 - 21 章：新道家和佛家。四百年间中国南方、北方分裂，五胡乱华，民众遭受了许多苦难。在哲学上，儒家思想暂时消沉，代之而起的是新道家和佛家思想。</li>\n<li>22 - 22 章：禅宗。隋唐唐朝在政治上重建了中国的统一，国力得到空前发展，文化也登上发展高峰。佛家也获得空前发展。</li>\n<li>23 - 25 章：新的儒家，主张柏拉图式理念的理学。佛家在中国渐趋没落，儒家再度兴起，并在思想界建立起主导地位。</li>\n<li>26 - 26 章：新的儒家，主张宇宙心学。</li>\n<li>27 - 28 章：现代世界中国哲学。<ul>\n<li>民国革命推翻了世界最古老王权体制，中华民国成立。此后十几年间，中国在社会、政治、经济等方面亟待改革。改革短时间内纷至沓来，势必造成内部在政治思想上的动荡。</li>\n<li>天下为空思想（参考 16 - 21 章）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第壹章-中国哲学的精神\"><a href=\"#第壹章-中国哲学的精神\" class=\"headerlink\" title=\"第壹章 中国哲学的精神\"></a>第壹章 中国哲学的精神</h2><h3 id=\"哲学在中国文化的地位\"><a href=\"#哲学在中国文化的地位\" class=\"headerlink\" title=\"哲学在中国文化的地位\"></a>哲学在中国文化的地位</h3><ul>\n<li><p>哲学是对人生的系统的反思。把人生、宇宙以及知识作为思考的对象，有关人生、有关宇宙以及有关知识的学说就是由这样的思考中产生的。</p>\n</li>\n<li><p>人生、生命、宇宙、知识的概念，都是反思的产物。</p>\n<ul>\n<li>人无论是自己思索或与别人谈论，都在人生之中反思。</li>\n<li><p>我们对宇宙进行思索或与人谈论，都在宇宙其中反思。</p>\n<blockquote>\n<p>哲学家所言的“宇宙”有别与物理学家的宇宙，它指代一切存在的整体。中国古代哲学家惠施所说的“大一”，乃是“至大无外”。</p>\n</blockquote>\n</li>\n<li><p>我们对知识进行思索或与人谈论，思索和谈论本身也是知识，即亚里士多德所言“关于思索的思索”。</p>\n</li>\n</ul>\n</li>\n<li><p>宗教也和人生有关联，任何一种大型宗教它的核心必然是哲学。事实上，大型宗教是某种哲学加上一定的上层建筑，包括迷信、教义、礼仪和体制。</p>\n<blockquote>\n<p>儒家、道家、佛家不是一种宗教。比如道家是一种哲学，而道家才是宗教。道家哲学教导人顺应自然，道教却教导人你逆乎自然。举例来讲，老庄思想“万物有生必有死，人对于死应顺应自然”，而道教宗旨是教导长生术，反乎自然。</p>\n</blockquote>\n</li>\n<li><p>中国文化的精神基础不是宗教（至少不是有组织形式的宗教），而是伦理（儒家伦理）。</p>\n<blockquote>\n<p>Q：对于世界许多人来说，宗教信仰和宗教活动是基本要求之一，何以中国人成为例外呢？难道中国人不曾意识到，在道德伦理之上还有更高的价值？</p>\n</blockquote>\n</li>\n<li><p>比伦理道德更高的价值可称为超伦理道德的价值。爱人是一个道德价值，爱神是一个超越道德的价值（宗教价值）。冯老认为，人不满足于现实世界而追求超越现实世界，这是人类内心深处的一种渴望。中国人不那么关切宗教，而是哲学。</p>\n<ul>\n<li>宗教提供有关实际的正面知识（客观事物），但它于科学提供的不同。在西方出现宗教与科学的冲突，科学每进一步，宗教便后退一步，宗教的权威在科学前进历程中不断被削弱。</li>\n<li>根据中国哲学传统，哲学的功能不是为了增进正面知识，而是为了提高人的心灵。</li>\n<li>中国哲学，不需要宗教的祈祷和仪式，也不掺杂想象和迷信，也可达到最高价值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"中国哲学的精神和问题\"><a href=\"#中国哲学的精神和问题\" class=\"headerlink\" title=\"中国哲学的精神和问题\"></a>中国哲学的精神和问题</h3><ul>\n<li><p>做人最高成就是什么？按照中国哲学说法便是成圣，成圣最高成就则是个人和宇宙合而为一。</p>\n<blockquote>\n<p>Q：如果人追求天人合一，是否需要抛弃社会，更甚否定人生呢？</p>\n</blockquote>\n<ul>\n<li><p>出世哲学：主张人应该从物质败坏的世界中解脱出来。</p>\n<blockquote>\n<p>出世哲学过于理想化，不切实际，因而是消极的。</p>\n</blockquote>\n</li>\n<li><p>入世哲学：强调社会中的人际关系和人事。它只谈道德价值，对于超越道德的价值觉得无从谈起，也不愿去探讨。</p>\n<blockquote>\n<p>入世哲学过于实际，过于肤浅。入世哲学诚然积极，但更像走错了方向的人，走得越快，在歧途上就走得越远。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>中国哲学无论是出世派，还是入世派，都直接或间接关切<strong>政治</strong>和<strong>伦理道德</strong>。</p>\n<ul>\n<li>中国哲学主要关心社会，而不是宇宙。</li>\n<li>中国哲学关心人际关系的日常功能，而不是地狱与天堂。</li>\n<li>中国哲学关心人的今生，而不是关系它的来生。</li>\n</ul>\n</li>\n<li><p>中国哲学它即是入世的，又是出世的。它既是理想主义的，又是现实主义的。在理论上且行动中综合理想与实际，而非两极对立，他就是圣人。圣人的品格可以用“内圣外王”来刻画。</p>\n<ul>\n<li>内圣：内心深处是致力于心灵的修养。</li>\n<li>外王：社会活动中积极承担最大责任。</li>\n</ul>\n</li>\n<li><p>哲学家终身持久不懈地操练自己，生活在哲学体验之中，超越了自私和自我中心，以求与天合一。这种心灵的操练一刻也不能停止，一旦停止，自我就会抬头，内心的宇宙意识将会丧失。</p>\n</li>\n</ul>\n<h3 id=\"中国哲学家表达思想方式\"><a href=\"#中国哲学家表达思想方式\" class=\"headerlink\" title=\"中国哲学家表达思想方式\"></a>中国哲学家表达思想方式</h3><ul>\n<li><p>中国哲学家惯于用格言、警句、比喻、事例等形式表述思想。</p>\n<blockquote>\n<p>比如《老子》全书都是以格言形式写成。《庄子》充满寓言和故事。</p>\n</blockquote>\n</li>\n<li><p>一首好诗往往是“言有尽而意无穷”。读书时能从诗句之外去会意，读书时能从字里行间去会意。这就是中国艺术所追求的情趣，也成为中国哲学家表述思想时的风格。</p>\n</li>\n<li>中国艺术的这种风格是有其哲学背景的。比如道家的思想，道不可道，只能暗示。<ul>\n<li>语言的作用不在于它的固定含义，而是在于它的暗示，引发人们去领悟道。</li>\n<li>一旦语言已完成它的暗示作用，就应该忘掉语言本身，为何要让自己被非必要的语言所拖累呢？</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第贰章-中国哲学的背景\"><a href=\"#第贰章-中国哲学的背景\" class=\"headerlink\" title=\"第贰章 中国哲学的背景\"></a>第贰章 中国哲学的背景</h2><h3 id=\"中华民族的地理环境\"><a href=\"#中华民族的地理环境\" class=\"headerlink\" title=\"中华民族的地理环境\"></a>中华民族的地理环境</h3><ul>\n<li>中国是一个大陆国家，对于古人而言世界就是他们生活的这片土地。在中文表述中，“普天之下”、“四海之内”通常被用来表述“世界”。</li>\n</ul>\n<h3 id=\"中华民族的经济背景\"><a href=\"#中华民族的经济背景\" class=\"headerlink\" title=\"中华民族的经济背景\"></a>中华民族的经济背景</h3><ul>\n<li>在一个农业国家里，财富的首要基础是土地。因此，在中国历史上，一切社会、经济思想、政府政策措施都以<strong>土地的分配和利用</strong>为中心。</li>\n<li><p>中国哲学家们的社会经济思想都强调要区别“本”和“末”，农业生产是立国之根本，商业则是立国之末端。</p>\n<blockquote>\n<p>中国历史上，各个社会、经济的理论和政策都 <code>重农轻商</code>。</p>\n</blockquote>\n</li>\n<li><p>读书人通常并不亲自耕地，但他们一般出身于地主家庭，家庭的兴衰和农业生产的好坏联系在一起。因此，他们的宇宙观和人生观都反映了农民的思想，这种表达在中国就采取了哲学、文化、艺术等形式。</p>\n</li>\n</ul>\n<h4 id=\"反者道之动\"><a href=\"#反者道之动\" class=\"headerlink\" title=\"反者道之动\"></a>反者道之动</h4><ul>\n<li>在比较儒道两家不同思想前，我们先认识两家共同的理论思想 — 反者道之动</li>\n<li><p>无论自然、人生领域里，任何事物发展到极端，就有一种趋向，朝反方向的一极端移动。</p>\n<blockquote>\n<p>借用黑格尔的哲学术语，任何事物都包含了对它自己的否定。</p>\n</blockquote>\n</li>\n<li><p>这个理论对中华民族有着巨大的影响，帮助中华民族在漫长的历史中克服了无数困难。</p>\n<ul>\n<li>我们要时常提醒自己要<strong>居安思危</strong>。</li>\n<li>即使处于极端困难之中也不要失望。</li>\n<li>处事宁愿不及，也不要过甚，行事过分将适得其反。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"自然理想化\"><a href=\"#自然理想化\" class=\"headerlink\" title=\"自然理想化\"></a>自然理想化</h4><ul>\n<li>儒道两家思想不同，是因为他们对农民生活中的不同方面加以理论化。</li>\n<li>农民生活简单、思想纯真。道家基于此点出发，谴责文明，鼓吹返璞归真。道家这种思想最后发展到“天人合一”，即人与自然合一、与宇宙合一。</li>\n</ul>\n<h4 id=\"家族制度\"><a href=\"#家族制度\" class=\"headerlink\" title=\"家族制度\"></a>家族制度</h4><ul>\n<li>农民靠土地生活，土地无法挪动，即使地主阶级出身的读书人也无法离开土地。一个人若非有特殊才能，否则他无法离开祖辈生活的这片土地，以及他的子孙也生活在这片土地。</li>\n<li>由此发展起来的家族制度，它的复杂性和组织性是世界少有的。儒家思想很大程度上便是这种 <code>家族制度的理性化</code>。</li>\n<li><p>中国的社会制度便是家庭制度，传统中国把社会关系归纳成君臣、父子、兄弟、夫妇和朋友五种。</p>\n<blockquote>\n<p>中国的祖先崇拜也是这样发展起来的，时代居住在一个地方的一族人，他们追溯首先在这个地方定居的祖先，敬拜他。祖先成为家族的共同象征，就一个巨大复杂的组织（家族），这样的象征是必不可少的。</p>\n</blockquote>\n</li>\n<li><p>儒家思想中的一大部分是这种给社会制度的理论论证。</p>\n</li>\n</ul>\n<h4 id=\"入世出世\"><a href=\"#入世出世\" class=\"headerlink\" title=\"入世出世\"></a>入世出世</h4><ul>\n<li>儒家“游方之内”，显得比道家入世；道家“游方之外”，显得比儒家出世。</li>\n<li>中国哲学既是入世的，又是出世的。<ul>\n<li>在 3、4 世纪间，有一批道家试图使道家思想靠近儒家思想，后世称他们为“新道家”。</li>\n<li>在 11、12 世纪间，也有一批儒家试图使儒家思想靠近道家思想，后世称他们为“新儒家”。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"艺术诗歌\"><a href=\"#艺术诗歌\" class=\"headerlink\" title=\"艺术诗歌\"></a>艺术诗歌</h4><ul>\n<li>儒家把艺术看作是道德教育的工具。</li>\n<li><p>道家对艺术没有正面提出系统的见解，但他们追求心灵的自由流动，把自然看为最高理想，这给中国的伟大艺术家无穷的灵感。</p>\n<blockquote>\n<p>中国美术作品中的许多杰出作画的都是山水、花鸟、树木、竹枝。在许多山水画里，山脚下、溪水边，往往能看到一个人静坐沉醉与天地的大美之中，从中领会超越于自然和人生之上的妙道。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"中国哲学方法论\"><a href=\"#中国哲学方法论\" class=\"headerlink\" title=\"中国哲学方法论\"></a>中国哲学方法论</h4><ul>\n<li><p>诺斯洛普教授提出：概念可分两种，一种来自直觉，一种来自假定。</p>\n<ul>\n<li>直觉的概念指向某个事物，它的完整意义可立即从某个事物中领会到。</li>\n<li>假设得到的概念，它的完整意义是根据一个假设，演绎法推演，从而认定的。</li>\n</ul>\n</li>\n<li><p>诺斯洛普教授指出 <code>直觉的概念</code> 又可分为三种：</p>\n<ul>\n<li>在连续审视中已予区分的概念</li>\n<li>连续审视还未予区分或不确定的概念</li>\n<li>区分的概念</li>\n</ul>\n</li>\n<li><p>由 <code>假设观念</code> 出发的哲学家喜欢明确的东西；而由 <code>直觉</code> 出发，则需要重视 <code>不明确</code> 的东西。</p>\n</li>\n<li><p>结合诺斯洛普教授所讲的：在连续审视中已予区分的概念，由它衍生出还未区分的概念和分辨的概念，基本上是农民的概念。</p>\n<ul>\n<li>农民与之打交道的，诸如田地和庄稼，都是他们日常接触、认识的东西。</li>\n<li>他们处于原始和纯真的心态之中，把直接认知的东西看为宝贵的东西，见惯不怪反映他们思想的哲学家们也同样把直接认知的东西看作哲学思维的出发点。</li>\n</ul>\n</li>\n<li><p>这足以解释何以认识论在中国哲学里从未得到发展的原因。</p>\n<ul>\n<li>中国哲学家对于眼前的这张桌子究竟是真实的，抑或只是幻觉存在，从不认真对待。</li>\n<li>认识论问题之所以产生，是由于主客观已有了明确的界限。在一个连续审视过程之中，还没有明确区分主客观之间的界限，导致认识的主体与客体还是浑然一体的。</li>\n</ul>\n</li>\n<li><p>这也说明中国哲学的语言何以是提示性的、非明晰的。因为它不代表用理性演绎得出的概念。</p>\n<blockquote>\n<p>哲学家只告诉人们他看到了什么，他们所述简练但内容却很丰富。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"海洋与大陆国家\"><a href=\"#海洋与大陆国家\" class=\"headerlink\" title=\"海洋与大陆国家\"></a>海洋与大陆国家</h4><ul>\n<li><p>希腊人生活在海洋国家，靠着贸易维持繁荣，他们以商人为先。</p>\n<ul>\n<li>商人活动要求他们在城镇聚居，因此他们的社会组织更多放映城镇的共同利益，而非家族的共同利益。</li>\n<li>希腊人以城邦为中心组织社会。中国社会制度或许可称为”家邦“，因为中国是通过家族来理解国家的。</li>\n</ul>\n</li>\n<li><p>组织社会的形式不同</p>\n<ul>\n<li>在一个城邦里，社会组织难以形成专制独裁统治，因为在同一等级的城镇居民中，难以论证谁更重要、应该享受更高社会地位。</li>\n<li>在一个家邦里，社会组织是按人生来的地位、等级式地形成的。在一个家庭里，父亲的权威天然高于孩儿的权威。</li>\n</ul>\n</li>\n<li><p>面对创新的态度不同</p>\n<ul>\n<li>农民的生活方式倾向于顺乎自然，他们爱慕自然，谴责认为；他们不喜欢变革，也无法想象事物会变化。</li>\n<li>商人有更多机会见到语言、风俗不同的他族人民，他们习惯于变化，对新奇事物并不惧怕。而且为了销售货物，他们必须不断创新制作新货物。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"中国哲学常与变\"><a href=\"#中国哲学常与变\" class=\"headerlink\" title=\"中国哲学常与变\"></a>中国哲学常与变</h4><ul>\n<li>疑问：既然中国哲学产生于过去中国的经济环境之中，它的内容是否只对过去的中国才有意义？</li>\n<li>解答：<ul>\n<li>任何民族在任何时代的哲学里，总有一些内容只对处于当时经济条件下的大众有用；除此之外，还会有一部分哲学思想具有持久的价值。</li>\n<li>我们在学习哲学史时，应当对其中哪些具有永久价值，哪些时可以改变的，进行合乎逻辑的分析。</li>\n</ul>\n</li>\n</ul>\n","categories":["Reading"],"tags":["儒家","道家","冯友兰","内圣外王","人生","宇宙"]},{"title":"SVN 环境搭建与使用","url":"/2018/08/building-a-svn-server.html","content":"<p>最近有机会接触到公司的新项目，对于多人参与的项目，此刻才感受到 <code>源代码版本控制</code> 的重要性。遗憾之余，为了加深理解和复用起见，本文将从 <code>搭建</code>、<code>配置</code> 和 <code>使用</code> 多方面总结 SVN ( Subversion，开放源代码的版本控制系统 )。</p>\n<p>当然，版本控制的工具有很多，比如 CVS、GIT、SVN。CVS 几乎淘汰；GIT 适合开源软件项目；SVN 适合企业内部由项目经理统一协调的多个并行项目的开发。考虑到种种因素，我们不能单方面评论每种版本控制工具的优劣，故选择哪款版本控制工具视具体情况而定。</p>\n<a id=\"more\"></a>\n<h2 id=\"源代码管理\"><a href=\"#源代码管理\" class=\"headerlink\" title=\"源代码管理\"></a>源代码管理</h2><blockquote>\n<p>介绍参考了资料 [1]。 </p>\n</blockquote>\n<h3 id=\"管理的意义\"><a href=\"#管理的意义\" class=\"headerlink\" title=\"管理的意义\"></a>管理的意义</h3><ul>\n<li>目的：为了解决在软件开发过程中，由源代码引发的各种繁琐的问题。</li>\n<li>作用：<ul>\n<li>能追踪一个项目从诞生一直到定案的过程；</li>\n<li>记录一个项目的所有内容变化，方便地查阅特定版本的修订情况.</li>\n</ul>\n</li>\n<li>常见问题：<ul>\n<li><strong>代码冲突</strong>：多人操作同一个文件 ( 团队开发中的常见问题 )；</li>\n<li>版本备份：费空间 ( 大数据时代，储存成本反而最 “廉价” )；</li>\n<li>权限控制：无法对源代码进行精确的权限控制；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"管理的工具\"><a href=\"#管理的工具\" class=\"headerlink\" title=\"管理的工具\"></a>管理的工具</h3><ul>\n<li>CVS：历史悠久，现在几乎没人使用。</li>\n<li>SVN：<ul>\n<li>集中式版本控制的代表；</li>\n<li>CVS 的接班人，速度和功能比 CVS 有很大幅度提升.</li>\n</ul>\n</li>\n<li>GIT：<ul>\n<li>分布式源代码管理工具；</li>\n<li>目前被大多数开源项目使用。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SVN-概念概述\"><a href=\"#SVN-概念概述\" class=\"headerlink\" title=\"SVN 概念概述\"></a>SVN 概念概述</h2><ul>\n<li><code>Subversion</code> 的简称为 SVN，是一个开放源代码的版本控制系统；</li>\n<li>SVN 用于多个人共同开发同一个项目，目的是为了资源共享共用；</li>\n<li>SVN 服务器有 2 种 <code>运行方式</code>：独立服务器和借助 Apache。两种方式各有利弊，可自行选择。</li>\n<li>SVN <code>存储版本数据</code> 也有 2 种方式：<code>Berkeley DB</code> ( 事务安全型表类型 ) 和 <code>FSFS</code> ( 不需要数据库的存储系统 )。因为 Berkeley DB 方式在服务器中断时，有可能锁住数据，故选择 FSFS 的存储方式会更安全一点。</li>\n</ul>\n<h2 id=\"SVN-环境搭建\"><a href=\"#SVN-环境搭建\" class=\"headerlink\" title=\"SVN 环境搭建\"></a>SVN 环境搭建</h2><h3 id=\"SVN-服务器\"><a href=\"#SVN-服务器\" class=\"headerlink\" title=\"SVN 服务器\"></a>SVN 服务器</h3><ul>\n<li><p>安装 SVN Server For <code>Windows</code>：<a href=\"https://www.visualsvn.com/server/download/\" target=\"_blank\" rel=\"noopener\">VisualSVN Server</a> </p>\n<p>  配置是通过界面操作完成的，具体安装流程就不阐述了，可参考引用文章完成配置 $^{[1,2]}$。</p>\n<blockquote>\n<p>Tips.01. 安装过程中，其中 SVN 服务器端口配置推荐使用HTTPS 的 <code>8443</code> 端口，因为 HTTPS 安全性比較高，尽管 <code>443</code> 是标准 HTTPSport。<br>Tips.02. 还有就是用于验证的身份配置：Windows 验证和 Subversion 身份验证，默认是 Subversion 身份验证。</p>\n</blockquote>\n</li>\n<li><p>安装 SVN Server For <code>MacOS</code>：MacOS 自带了 SVN 的服务器端和客户端功能。参考引用文章完成配置即可使用 $^{[3,4]}$。</p>\n</li>\n</ul>\n<h3 id=\"SVN-客户端\"><a href=\"#SVN-客户端\" class=\"headerlink\" title=\"SVN 客户端\"></a>SVN 客户端</h3><ul>\n<li>Windows Client：<a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">TortoiseSVN</a></li>\n<li><p>MacOS Client：<a href=\"https://cornerstone.assembla.com/\" target=\"_blank\" rel=\"noopener\">Cornerstone</a></p>\n<blockquote>\n<p>在 MacOS 上可利用 SVN 图形界面工具来管理源代码，可以大大减小使用命令行的痛苦 $^{[5]}$。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"SVN-配置与使用\"><a href=\"#SVN-配置与使用\" class=\"headerlink\" title=\"SVN 配置与使用\"></a>SVN 配置与使用</h3><p>Windows 端配置和使用 SVN，可通过图形界面工具即可完成操作，详细的步骤在引用文章 [1]、[2] 中也有提及。故在本章节主要讲述 <code>Mac</code> 环境下搭建和配置 SVN。</p>\n<h4 id=\"SVN-服务端配置\"><a href=\"#SVN-服务端配置\" class=\"headerlink\" title=\"SVN 服务端配置\"></a>SVN 服务端配置</h4><h5 id=\"创建代码仓库\"><a href=\"#创建代码仓库\" class=\"headerlink\" title=\"创建代码仓库\"></a>创建代码仓库</h5><ul>\n<li>Step.01. 新建一个 <code>svn</code> 目录，例如 <code>/Users/kofe/svn</code>，以后可在 <code>svn</code> 目录下创建多个仓库目录。</li>\n<li><p>Step.02. 打开终端，创建一个名为 <code>idea</code> 仓库，输入指令：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指令执行成功后，会发现硬盘上多了个 /Users/kofe/svn/idea 目录</span></span><br><span class=\"line\">svnadmin create /Users/kofe/svn/idea</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"配置用户权限\"><a href=\"#配置用户权限\" class=\"headerlink\" title=\"配置用户权限\"></a>配置用户权限</h5><p>主要是修改 <code>/svn/idea/conf</code> 目录下的三个文件：<code>svnserve.conf</code>、<code>Passwd</code> 文件和 <code>Authz</code> 文件。</p>\n<ul>\n<li><p>svnserve.conf</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># anon-access = read 代表匿名访问的时候是只读的</span></span><br><span class=\"line\"><span class=\"comment\"># anon-access = none 代表禁止匿名访问，需要帐号密码才能访问</span></span><br><span class=\"line\">anon-access = <span class=\"built_in\">read</span></span><br><span class=\"line\">auth-access = write</span><br><span class=\"line\">password-db = passwd</span><br><span class=\"line\">authz-bd = authz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Passwd 文件：在 <code>[users]</code> 下面添加账号和密码。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\"><span class=\"comment\"># 格式：账号 = 密码</span></span><br><span class=\"line\">kofe = 123456</span><br><span class=\"line\">lucy = 123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Authz 文件：配置用户组和权限我们可以将在 Passwd 里添加的用户分配到不同的用户组里。以后就可对不同用户组设置不同的权限，没有必要对每个用户进行单独设置权限。即在 <code>[groups]</code> 下面添加组名和用户名，多个用户之间用逗号 <strong>,</strong> 隔开。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[groups] </span><br><span class=\"line\">usergroup = kofe, lucy <span class=\"comment\"># 格式：组名 = 用户1, 用户2, ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 [/] 代表 SVN 服务器中的所有资源库</span></span><br><span class=\"line\"><span class=\"comment\"># 某个组有读写权限</span></span><br><span class=\"line\">[/]</span><br><span class=\"line\">@usergroup = rw</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 [/] 代表 SVN 服务器中的所有资源库</span></span><br><span class=\"line\"><span class=\"comment\"># 某个用户有读写权限</span></span><br><span class=\"line\"><span class=\"comment\"># lucy = rw</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"启动关闭服务\"><a href=\"#启动关闭服务\" class=\"headerlink\" title=\"启动关闭服务\"></a>启动关闭服务</h5><ul>\n<li><p>在终端输入下列指令：若没有任何提示，恭喜你启动成功。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">svnserve -d -r /Users/kofe/svn</span><br><span class=\"line\"><span class=\"comment\"># 或输入: svnserve -d -r /User/kofe/svn/idea</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然，会启用也要会关闭 SVN 服务器，特别是首次配置完 SVN 服务器需要重启。<br>  Case.01. 在 <code>活动监视器</code> 中搜索 <code>svn</code>, 在列表中找到进程 <code>svnserve</code>, 点击左上角的<code>强制退出进程</code>。<br>  Case.02. 或者可通过 shell 脚本实现一键关闭。  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Current Process List:\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"= = = = = = = = = = =\"</span></span><br><span class=\"line\">ps -A | grep svn</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"= = = = = = = = = = =\"</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> `pgrep <span class=\"string\">\"svn\"</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Kill successfully!\"</span> Current Process Status:</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"= = = = = = = = = = = = = = = = = = = = = =\"</span></span><br><span class=\"line\">ps -A | grep svn</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"= = = = = = = = = = = = = = = = = = = = = =\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"SVN-客户端操作\"><a href=\"#SVN-客户端操作\" class=\"headerlink\" title=\"SVN 客户端操作\"></a>SVN 客户端操作</h4><h5 id=\"代码版本控制\"><a href=\"#代码版本控制\" class=\"headerlink\" title=\"代码版本控制\"></a>代码版本控制</h5><blockquote>\n<p>当然，充分利用 SVN 图形界面工具 ( <a href=\"https://cornerstone.assembla.com/\" target=\"_blank\" rel=\"noopener\">Cornerstone</a> ) 来管理源代码，可大大减小使用命令行的痛苦，提升使用效率。</p>\n</blockquote>\n<ul>\n<li><p>首次导入工程文件到 SVN 服务器：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /Users/kofe/procedure/idea/SSM_DEMO，指的是需要导入的工程文件</span></span><br><span class=\"line\"><span class=\"comment\"># svn://localhost/idea 指把工程文件上传到 idea 目录下</span></span><br><span class=\"line\"><span class=\"comment\"># --username=admin --password=123456 指的是校验用户名和密码</span></span><br><span class=\"line\"><span class=\"comment\"># -m \"初始化导入\" 指的是提交的信息注释</span></span><br><span class=\"line\">svn import /Users/kofe/procedure/idea/SSM_DEMO svn://localhost/idea --username=kofe --password=123456 -m <span class=\"string\">\"初始化导入\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从 SVN 服务器下载工程文件到本地 ( Checkout )：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">svn checkout svn://localhost/idea --username=kofe --password=123456 /Users/kofe/procedure/idea</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>二次提交代码到服务器：二次提交是有一个前提的, 那就是你首先需要在 SVN服务器上下载代码到本地，然后再去修改这一份代码, 才能够二次提交。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /Users/kofe/procedure/idea</span><br><span class=\"line\">svn commit -m <span class=\"string\">\"修改部分代码 (注释修改的内容)\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>SVN 基本操作原理：</p>\n<ul>\n<li><code>svn checkout</code>：将服务器代码完整下载到本地。</li>\n<li><code>svn update</code>：将服务器最新的代码下载到本地。</li>\n<li><p><code>svn commit</code>：将本地修改的内容提交到服务器。</p>\n<p><img src=\"/images/illustration/Project/2018/08/building-a-svn-server_3-1.png\" alt=\"图3-1SVN 基本操作原理\"></p>\n<center>图 3-1 SVN 基本操作原理</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码版本冲突\"><a href=\"#代码版本冲突\" class=\"headerlink\" title=\"代码版本冲突\"></a>代码版本冲突</h5><ul>\n<li><p>版本冲突原因：</p>\n<p>  假设 A、B 两用户都在版本号为 100 时更新了 <code>sample.txt</code> 文件，A 用户在修改完成之后提交 sample.txt 到服务器，这个时候提交成功，这个时候 sample.txt 文件的版本号已经变成 101 了。同时 B 用户在版本号为 100 的 sample.txt 文件上作修改，修改完成之后提交到服务器时，由于不是在当前最新的 101 版本上作的修改，所以导致提交失败。</p>\n</li>\n<li><p>版本冲突现象：</p>\n<p>  冲突发生时，SVN 会在当前工作目录中保存所有的目标文件版本 [ 上次更新版本、当前获取的版本 ( 即别人提交的版本 )、自己更新的版本、目标文件 ]。  假设文件名是 <code>sample.txt</code> ，对应的文件名分别是 ( 同时在目标文件中标记来自不同用户的更改 )：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sample.txt.r101</span><br><span class=\"line\">sample.txt.r102</span><br><span class=\"line\">sample.txt.mine</span><br><span class=\"line\">sample.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>手工合并</code> SVN 冲突 $^{[6]}$，开始的时候让人觉得害怕，但有规律可循。例如有以下文本：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mayonnaise</span><br><span class=\"line\">Lettuce</span><br><span class=\"line\">Tomato</span><br><span class=\"line\">Provolone</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;.mine</span><br><span class=\"line\">Salami</span><br><span class=\"line\">Mortadella</span><br><span class=\"line\">Prosciutto</span><br><span class=\"line\">=======</span><br><span class=\"line\">Sauerkraut</span><br><span class=\"line\">GrilledChicken</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;.r2</span><br></pre></td></tr></table></figure>\n<p>  一连串的大于、小于、等于号是 SVN 冲突标记，这些数据得全部删除才可以提交。在 SVN 冲突区中，或许你需要和你的同事沟通来安排冲突区的文本内容，待所有冲突区得到合理的解决之后方可再提交文件。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是你在冲突区里面做的修改</span></span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;.mine</span><br><span class=\"line\">Salami</span><br><span class=\"line\">Mortadella</span><br><span class=\"line\">Prosciutto</span><br><span class=\"line\">=======</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是别人在冲突区做的修改</span></span><br><span class=\"line\">Sauerkraut</span><br><span class=\"line\">GrilledChicken</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;.r2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>如何降低冲突解决的复杂度：<ul>\n<li>在提交时写上明确的 Message ( 注释 )，方便以后查找用户更新的原因。</li>\n<li>养成良好的使用习惯，使用 SVN 时每次都是先提交，后更新。每天 <code>早上</code> 打开后，首先要从版本库 <code>获取最新版本</code>，每天 <code>下班前</code> 必须将已经编辑过的文档都 <code>提交</code> 到版本库。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1] <a href=\"https://www.jianshu.com/p/96f2db36044b\" target=\"_blank\" rel=\"noopener\">PhelanGeek. SVN 服务器搭建教程. jianshu.com. 2016</a><br>[2] <a href=\"https://juejin.im/post/5b0e50f5f265da08ec33b74e\" target=\"_blank\" rel=\"noopener\">RealLiuNing. Windows 10 搭建独立 SVN 服务器. jianshu.com. 2018</a><br>[3] <a href=\"https://juejin.im/post/58209be1a0bb9f0058c08452\" target=\"_blank\" rel=\"noopener\">CainLuo. 搭建 MacOS 本地 SVN 服务器. juejin.im. 2016</a><br>[4] <a href=\"https://www.jianshu.com/p/66f085556fb2\" target=\"_blank\" rel=\"noopener\">Sunny Fight. iOS 版本控制 SVN (Mac 环境下 SVN 的使用). jianshu.com. 2016</a><br>[5] <a href=\"https://www.jianshu.com/p/650342b0a0ce\" target=\"_blank\" rel=\"noopener\">天蓝. SVN 在 Mac 上使用 Xcode+Cornerstone. jianshu.com. 2017</a><br>[6] <a href=\"https://www.cnblogs.com/aaronLinux/p/5521844.html\" target=\"_blank\" rel=\"noopener\">aaronGao. svn conflict 冲突解决. cnbologs.com. 2016</a></p>\n","categories":["Project"],"tags":["svn","mac","git","版本控制"]},{"title":"讲座 | 利用 t-SNE 降维并可视化高维数据","url":"/2018/11/The-Best-Way-to-Visualize-a-Dataset-Easily.html","content":"<div class=\"note default\"><p>作者：Siraj Raval<br>课堂：The Best Way to Visualize a Dataset Easily | <a href=\"https://www.bilibili.com/video/av35768109\" target=\"_blank\" rel=\"noopener\">Bilibili</a> | <a href=\"https://www.youtube.com/watch?v=yQsOFWqpjkE\" target=\"_blank\" rel=\"noopener\">Youtube</a><br>源码：llSourcell.Visualize_dataset_demo | <a href=\"https://github.com/llSourcell/visualize_dataset_demo\" target=\"_blank\" rel=\"noopener\">Github</a>  </p></div>\n<ul>\n<li><p><code>目标</code>：在本次课堂中，将对人类活动识别 ( Human Activity Recognition，HAR ) 数据集进行数据可视化呈现，并进行探索性分析以发现知识。而本课堂具体目标则是人类活动状态识别，活动状态包括：Sitting-down，Standing-up，Standing，Walking，Sitting。</p>\n<p>  具体地，通过降维方法 <code>t-SNE</code> 实现不同活动状态的数据自动 “分类”，从而在低维度 ( 二维 ) 下复现数据 ( 的特征 )，以便我们理解数据、统计分析数据。</p>\n</li>\n<li><p><code>问题</code>：若我们要将要描述如此复杂的数据，即它们拥有的特征 ( 维度 ) 过多了，相对于人类大脑只能理解二维或三维的层面，如此复杂数据我们是难以从中发现知识的。</p>\n</li>\n<li><p><code>解决</code>：通过可视化数据来描述它们的特征，具体措施是使用机器学习中的降维方法 <code>T-SNE</code> ( Distributed Stochastic Neighbor Embedding )，把高维空间中的数据以二维或三维的形式表示。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>HAR 数据集的数据来源：参与者绑上健身追踪设备，当它们运动起来时，追踪设备会记录这些身体指标数据。</p>\n<blockquote>\n<p>关于HAR 数据集更详细的描述请参考：<a href=\"http://groupware.les.inf.puc-rio.br/har#ixzz4Mt0Teae2\" target=\"_blank\" rel=\"noopener\">HAR Set 介绍</a> | <a href=\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\" target=\"_blank\" rel=\"noopener\">HAR Set 下载</a></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"观察数据\"><a href=\"#观察数据\" class=\"headerlink\" title=\"观察数据\"></a>观察数据</h2><ul>\n<li>每一行数据代表不同的人。</li>\n<li>每一列代表某人的身体指标测量数据，如手臂或者前臂的空间位置 ( x，y，z 坐标 )。</li>\n<li>在人类活动识别数据集中，每一行 ( 实体 ) 都有类标签标记。且共有 5 种标签：Sitting-down，Standing-up，Standing，Walking，Sitting。</li>\n</ul>\n<h2 id=\"预处理数据\"><a href=\"#预处理数据\" class=\"headerlink\" title=\"预处理数据\"></a>预处理数据</h2><blockquote>\n<p>关于 <code>预处理数据</code> 的详细解释，可参考另外一篇文章：<a href=\"https://www.kofes.cn/2018/11/the-best-way-to-prepare-a-dataset-easily.html\">Kofe. 如何轻松有效地预处理数据</a></p>\n</blockquote>\n<ul>\n<li><p><code>数据清洗</code>：缺失值处理、光滑噪声数据、识别和删除离群点。</p>\n<blockquote>\n<p>关于数据清洗，也推荐阅读具有实操意义的一篇博文：<a href=\"https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4\" target=\"_blank\" rel=\"noopener\">TowardsDataScience. How to Handle Missing Data</a></p>\n</blockquote>\n</li>\n<li><p><code>数据集成</code>：多个数据源的数据合并，存放于同一个数据仓库中。</p>\n<ul>\n<li><code>实体识别问题</code>：来自多个信息源，各数据源中的实体之间如何匹配，这涉及实体识别问题。如不同数据来源于不同数据库中，现实意义上它们是同一实体，但它们属性的元数据表达却不同 ( 如主键 )。</li>\n<li><code>冗余和相关分析</code>：集成多个数据源，数据中可能有多组属性重复存在。而冗余可被相关分析检测到，如分类 ( 标称 ) 属性的卡方检验、数值属性的相关系数、数值属性的方差和协方差。</li>\n<li><code>元组重复</code>：元组级检测重复。</li>\n</ul>\n</li>\n<li><p><code>数据归约</code>：在海量数据上进行复杂的数据分析和挖掘，需要时间很长且不显示。在尽可能保持数据原貌前提下，最大限度精简数据量。策略包括：</p>\n<ul>\n<li><code>维归约</code>：也称为特征归约，减少所考虑的属性的个数。方法包括：小波变换、主成分分析、属性子集选择等。当然利用冗余和相关分析也是可行的。</li>\n<li><p><code>数量归约</code>：用替代的、较小的数据集表示形式替换原数据。方法包括：参数的方法，回归和对数线性模型；非参数的方法，聚类、降维、直方图、抽样和数据立方体聚集。</p>\n<blockquote>\n<p>在本课堂中则使用了降维方法进行维度的归约，其中降维方法有：PCA、t-SNE $^{[4]}$、LargeVis $^{[5, 6]}$ 等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>数据变换</code>：主要思想是将数据变换或统一成适合数据挖掘的形式。方法可以是数据归一化、数据离散化、概念分层等。</p>\n<ul>\n<li><code>特征构造</code>：由给定的属性构造新的属性并添加至属性集中。</li>\n<li><code>聚集分解</code>：对数据进行 <code>汇总</code> 或者 <code>聚集</code>。如聚集季度销售数据。与之相对的是 <code>分解</code>，如常见的 “日期” 属性，不同的需求，我们要解构的粒度是不同的。如预测当日的气温变化，则我们可把年和月份剔除。</li>\n<li><code>归一化</code>：针对每一个特征 ( 维度 )，去均值和方差归一化。即把属性数据按比例缩放，让所有特征在统一数量级上运作，如此一来数据指标之间就有了可比性。</li>\n<li><p><code>离散化</code>：数值属性的原始值用区间标签或者概念标签替换，即这些标签可递归地组织成更高层概念，导致数值属性的 <code>概念分层</code>。</p>\n<blockquote>\n<p>例如，我们    对年龄进行分层：1 to 17 为 Adolescent；18 to 45 为 Adult；46 以上为 Senior。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h2><h3 id=\"降维方法\"><a href=\"#降维方法\" class=\"headerlink\" title=\"降维方法\"></a>降维方法</h3><h4 id=\"降维目的\"><a href=\"#降维目的\" class=\"headerlink\" title=\"降维目的\"></a>降维目的</h4><ul>\n<li>通过降维算法来寻找 <code>数据内部的本质结构特征</code>，如特征选择或特征提取。<ul>\n<li><code>特征选择</code>：假定数据中包含大量冗余或无关变量 ( 或称特征、属性、指标等 )，旨在从原有变量中找出主要变量。其代表方法为 <a href=\"https://zh.wikipedia.org/wiki/Lasso%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"noopener\">LASSO</a>。</li>\n<li><code>特征提取</code>：是将高维数据转化为低维数据的过程。在此过程中可能舍弃原有数据、创造新的变量。其代表方法为 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90\" target=\"_blank\" rel=\"noopener\">PCA</a>。</li>\n</ul>\n</li>\n<li>在原始的高维空间中，包含有冗余信息、噪音信息。通过降维方法，<code>减少冗余信息</code> 所造成的误差，以提高模型的精度。</li>\n</ul>\n<h4 id=\"降维本质\"><a href=\"#降维本质\" class=\"headerlink\" title=\"降维本质\"></a>降维本质</h4><ul>\n<li>机器学习领域中，降维指采用某种映射方法将原高维空间中的数据点映射到低维度的空间中。</li>\n<li>降维的本质是学习一个映射函数 $ f : x \\to y$，其中 $x$ 是原始数据点的表达，$y$ 是数据点映射后的低维向量表达 ( 通常 $y$ 的维度小于 $x$ 的维度 )。$f$ 可能是显式的或隐式的、线性的或非线性的映射函数 ( 例如本例提及的 PCA 或者 t-SNE )。</li>\n<li>当我们意识到需要降维时，一般是发现了特征间的高度线性相关。若我们发现了线性相关，则适合使用 PCA 处理 $^{[1]}$，而 t-SNE 主打的是非线性降维。</li>\n</ul>\n<h4 id=\"降维算法\"><a href=\"#降维算法\" class=\"headerlink\" title=\"降维算法\"></a>降维算法</h4><h5 id=\"PCA\"><a href=\"#PCA\" class=\"headerlink\" title=\"PCA\"></a>PCA</h5><ul>\n<li><p><code>PCA</code>：主成分分析算法 ( Principal Component Analysis，PCA )，是最常用的 <code>线性降维方法</code>。它通过某种线性投影，将高维的数据映射到低维的空间中表示。具体工作原理是，从原始的空间中顺序地找一组相互正交的坐标轴，而且新的坐标轴选择与数据本身是密切相关的。其中，第一个新坐标轴选择是原始数据中方差最大的方向，第二个新坐标轴选取是与第一个坐标轴正交的平面中使得方差最大的方向，若继续添加第三个坐标轴，第三个轴与第一、二个轴正交的平面中方差最大的。依次类推，可以得到 $n$ 个这样的坐标轴。</p>\n<p>  而实际情况，大部分方差都包含在前面 $k$ 个坐标轴中，后面的坐标轴所含的方差几乎为 0。事实上实现对数据特征的降维处理，相当于只保留包含绝大部分方差的维度，而忽略包含方差几乎为 0 的维度。</p>\n</li>\n</ul>\n<h5 id=\"SNE\"><a href=\"#SNE\" class=\"headerlink\" title=\"SNE\"></a>SNE</h5><ul>\n<li><p><code>t-SNE</code> 可理解为 <code>SNE</code> 的特殊形式，我们先了解 SNE 的基本原理，再延伸学习 t-SNE ( 本小节可参考多篇博文比对学习，如参考资料中的 [2] - [3] )。</p>\n</li>\n<li><p>SNE 是通过 <a href=\"https://www.zhihu.com/question/20666664\" target=\"_blank\" rel=\"noopener\">仿射变换</a> 将数据点映射到概率分布上，主要包括两个步骤：</p>\n<ul>\n<li><p>SNE 构建一个高维对象之间的概率分布，使得相似的对象有更高的概率被选择，而不相似的对象有较低的概率被选择。</p>\n</li>\n<li><p>SNE在低维空间里在构建这些点的概率分布，使之与高维度的概率分布之间尽可能相似。</p>\n</li>\n</ul>\n</li>\n<li><p>SNE 的实现原理：</p>\n<ul>\n<li><p>原始 SNE 先将 <code>欧几里得距离</code> 转换为 <code>条件概率</code> 来表达点与点之间的相似度。具体地，给定一个 $N$ 个高维的数据 $x_1, x_2, …, x_N$，$x_i$ 和 $x_j$ 之间的相似度可表示为 ( $x_i$ 为中心点 )： </p>\n<script type=\"math/tex; mode=display\">\n  p_{j|i} = \\frac{\n      exp({-||x^{(i)} - x^{(j)}||}^2 / {\n      2\\sigma_i^2})\n  }{ \n      \\sum_{k \\neq i} exp({-||x^{(i)} - x^{(k)}||}^2 / {\n      2\\sigma_i^2})\n  }\n  \\tag{1}</script><p>  这里的有一个参数是 $\\sigma<em>i$，其表示以 $x_i$ 为中心点的高斯分布的方差。且对于不同的点 $x_i$ 取值不一样 $^{[2]}$ ( 具体参详 SNE 的困惑度 ( Perplexity ) )。再者，由于我们只关心不同点两两之间的相似度，所以设定 $p</em>{i|i} = 0$。</p>\n</li>\n<li><p>在把数据映射到低维空间后，高维数据点之间的相似性也应该在低维空间的数据点上体现出来。这里同样用条件概率的形式描述，对于低维度下的 $y_i$，我们可以指定高斯分布为方差为 $\\frac{1}{\\sqrt2}$。因此它们之间的相似度为:</p>\n<script type=\"math/tex; mode=display\">\nq_{j|i} = \\frac{\n  exp( {-||y^{(i)} - y^{(j)}||}^2 )\n}{ \n  \\sum_{k \\neq i} exp( {-||y^{(i)} - y^{(k)}||}^2 )\n}\n\\tag{2}</script></li>\n<li><p>同理，设定 $q<em>{i|i} = 0$。这样一来，若 $y_i$ 和 $y_j$ 真实反映了高维数据点 $x_i$ 和 $x_j$ 之间的关系，那么条件概率 $p</em>{j|i}$ 与 $q_{j|i}$ 应该完全相等。</p>\n<p>  这里我们只考虑 $x_i$ 与 $x_j$ 之间的条件概率，则它们可构成一个条件概率分布函数 $P$。同理，只考虑 $y_i$ 与 $y_j$ 之间的条件概率，在低维空间存在一个条件概率分布 $Q$，且应该与 $P$ 是一致的。</p>\n<p>  如何衡量两个分布之间的相似性？则我们可通过优化两分布的距离，即 <code>K-L 散度</code> ( Kullback-Leibler Divergence )。SNE 最终目标就是对所有数据点最小化这个 K-L 散度，具体地，我们可使用 <code>梯度下降算法</code> 最小化以下代价函数：</p>\n<script type=\"math/tex; mode=display\">\n  C = D_{KL}(P || Q) = \\sum_{i} \\sum_{j} p_{j|i} log \\frac{p_{j|i}}{q_{j|i}}\n  \\tag{3}</script><p>  SNE 代价函数对 $y_i$ 求梯度后的形式如下：</p>\n<script type=\"math/tex; mode=display\">\n  \\frac{\\delta C}{\\delta y_i} = \n  2 \\sum_j ( p_{j|i} - q_{j|i} + p_{i|j} - q_{i|j} )( y_i - y_j )\n  \\tag{4}</script></li>\n<li><p>似乎到这里问题就解决了，得到代价函数，利用梯度下降算法进行训练了。但事情远没有那么简单，因为 K-L 散度是一个非对称的度量，最小化代价函数的目的是让 $pj|i$ 和 $qj|i$ 的值尽可能的接近，即低维空间中点的相似性应当与高维空间中点的相似性一致。</p>\n<ul>\n<li>但从代价函数的形式就可以看出，考虑到离群点的情况，当 $p<em>{j|i}$ 较大，$q</em>{j|i}$ 较小时，即高维空间中两个数据点距离较近，而映射到低维空间后距离较远，那么将得到一个很高的惩罚，这没什么问题；</li>\n<li>而$p<em>{j|i}$ 较小，$q</em>{j|i}$ 较大时，即高维空间中两个数据点距离较远，而映射到低维空间距离较近，将得到一个很低的惩罚值。然而这就是问题所在，理应得到一个较高的惩罚才对。换句话说，SNE 的代价函数更关注局部结构，而忽视了全局结构。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"t-SNE\"><a href=\"#t-SNE\" class=\"headerlink\" title=\"t-SNE\"></a>t-SNE</h5><div class=\"note success\"><p>论文中对 t-SNE 原理描述是基于数学形式化的，更多细节或难以理解的，比如距离度量如何转化为概率度量、如何确定 $\\sigma$、如何求梯度下降值等，建议阅读 t-SNE 的代码实现。</p>\n<p>推荐 <a href=\"https://github.com/karpathy/tsnejs\" target=\"_blank\" rel=\"noopener\">karpathy.tsnejs</a> 和 <a href=\"https://gist.github.com/bindog/0ac283fc4dbdeb4c954990ea5c3dcd87\" target=\"_blank\" rel=\"noopener\">bindog.t-sne.js</a> (请科学上网)，需要说明的是，bindog 的版本是基于 karpathy 的，具体工作是添加了注释和 <a href=\"https://upload-images.jianshu.io/upload_images/415974-ab098a421189c1d0.png\" target=\"_blank\" rel=\"noopener\">算法流程图</a> $^{[8]}$。</p></div>\n<ul>\n<li><p>在原始 SNE 中，$p<em>{i|j}$ 与 $p</em>{j|i}$ 是不相等的，低维空间中 $q<em>{i|j}$ 与 $q</em>{j|i}$ 也是不相等的。若我们分别在高维和低维空间构造更加通用的联合概率分布 $P$ 和 $Q$，使得对任意 i, j，均有 $p<em>{i|j} = p</em>{j|i}, \\, q<em>{i|j} = q</em>{j|i}$。而这种 SNE 称之为对称 SNE ( Symmetric SNE )，因此它们的概率分布可改写为 ( 同理，我们只关注不同点两两之间的相似性，故设定 $p<em>{i||i} = 0, q</em>{i||i} = 0$ ):</p>\n<script type=\"math/tex; mode=display\">\n  p_{i, j} = \\frac{\n          exp({-||x^{(i)} - x^{(j)}||}^2 / {\n          2\\sigma_i^2})\n      }{ \n          \\sum_{k \\neq l} exp({-||x^{(k)} - x^{(l)}||}^2 / {\n          2\\sigma_i^2})\n      } \\\\\n  q_{i, j} = \\frac{\n      exp( {-||y^{(i)} - y^{(j)}||}^2 )\n  }{ \n      \\sum_{k \\neq l} exp( {-||y^{(k)} - y^{(l)}||}^2 )\n  }\n  \\tag{5}</script></li>\n<li><p>这样表达方式使得整体简洁了很多。但是会引入异常值的问题。比如，$x<em>i$ 是异常值，那么 $||x^{(i)} - x^{(j)}||^2$ 会很大，对应的所有的 $j$, $p</em>{i, j}$ 都会很小，导致低维映射下的 $y_i$ 无论处在什么位置，对代价函数影响很小。</p>\n<p>  为了解决这个问题，我们将联合概率分布改写为：</p>\n<script type=\"math/tex; mode=display\">\n  p_{i,j} = \\frac{\n      p_{j|i} + p_{i|j} \n  }{2N} \\\\\n  ( p_{j|i} = \\frac{p_{i,j}}{p_i}, \\,\n  p_{i|j} = \\frac{p_{i,j}}{p_j}, \\,\n  p_i = p_j = \\frac1N )\n  \\tag{6}</script></li>\n<li><p>其中 N 为数据点的总数，这样定义即满足了对称性，又保证了 $x_i$ 的惩罚值不会过小。此时可以利用 KL 距离写出如下代价函数：</p>\n<script type=\"math/tex; mode=display\">\n  C = D_{KL}(P || Q) = \\sum_{i} \\sum_{j} p_{i, j} log \\frac{p_{i, j}}{q_{i, j}}\n  \\tag{7}</script></li>\n<li><p>对称 SNE 的最大优点，即梯度计算变得简单了：</p>\n<script type=\"math/tex; mode=display\">\n  \\frac{\\delta C}{\\delta y_i} = \n  4 \\sum_j ( p_{i, j} - q_{i, j})( y_i - y_j )\n  \\tag{8}</script><p>  但是Maaten 还指出 $^{[4]}$，对称 SNE 的效果只是略微优于原始 SNE 的效果，依然没有从根本上解决问题。我们还需要解决 <code>拥挤问题</code>。</p>\n</li>\n<li><p><code>拥挤问题</code>：就是说各个簇聚集在一起，无法区分。这是由于高维空间距离分布和低维空间距离分布的差异造成的。比如，有一高维度数据在降维到 10 维下可以有很好的表达，但是降维到两维后无法得到 “可信” 映射。</p>\n<p>  进一步说明，假设一个以数据点 $x_i$ 为中心，半径为 $r$ 的 $m$ 维球 ( 三维空间就是球 )，其体积是按 $r^m$ 增长的，假设数据点是在 m 维球中均匀分布的，我们来看看其他数据点与 $x_i$ 的距离随维度增大而产生的变化。具体，我们可参考代码 $^{[3]}$：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy.linalg <span class=\"keyword\">import</span> norm</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">npoints = <span class=\"number\">1000</span>\t<span class=\"comment\"># 抽取 1000 个 m 维球内均匀分布的点</span></span><br><span class=\"line\">plt.figure( figsize=(<span class=\"number\">20</span>, <span class=\"number\">4</span>) )</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, m <span class=\"keyword\">in</span> enumerate((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>)):</span><br><span class=\"line\">    <span class=\"comment\"># 这里模拟 m 维球中的均匀分布用到了拒绝采样</span></span><br><span class=\"line\">    <span class=\"comment\"># 即先生成 m 维立方中的均匀分布，再剔除 m 维球外部的点</span></span><br><span class=\"line\">    accepts = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(accepts) &lt; <span class=\"number\">1000</span>:</span><br><span class=\"line\">        points = np.random.rand(<span class=\"number\">500</span>, m)</span><br><span class=\"line\">        accepts.extend(</span><br><span class=\"line\">            [d <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> norm(points, axis=<span class=\"number\">1</span>) <span class=\"keyword\">if</span> d &lt;= <span class=\"number\">1.0</span>]</span><br><span class=\"line\">        ) <span class=\"comment\"># 拒绝采样</span></span><br><span class=\"line\">    accepts = accepts[:npoints]</span><br><span class=\"line\">    ax = plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">4</span>, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">    ax.set_xlabel(<span class=\"string\">'distance'</span>) <span class=\"comment\"># x 轴表示点到圆心的距离</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">        ax.set_ylabel(<span class=\"string\">'count'</span>) <span class=\"comment\"># y 轴表示点的数量</span></span><br><span class=\"line\">    ax.hist(accepts, bins=np.linspace(<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">50</span>), color=<span class=\"string\">'green'</span>)</span><br><span class=\"line\">    ax.set_title(<span class=\"string\">'m=&#123;0&#125;'</span>.format(str(m)), loc=<span class=\"string\">'left'</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行结果如图 2-1 所示。据图示反映，随着维度的增大，大部分数据点都聚集在 m 维球的表面附近，与点 $x_i$ 的距离分布极不均衡。若直接将这种距离关系保留到低维，肯定会出现拥挤问题。如何解决呢？这个时候就需要请出 $\\tau$ 分布了。</p>\n<p>  <img src=\"/images/illustration/Project/2018/11/The-Best-Way-to-Visualize-a-Dataset-Easily_2-1.jpg\" alt=\"图2-1半径为 r 的 m 维球上的数据分布\"></p>\n  <center>图 2-1 半径为 r 的 m 维球上的数据分布</center>\n</li>\n<li><p>减轻 <code>拥挤问题</code> 的方法：在高维空间下我们使用 <code>高斯分布</code> 将距离转换为概率分布；在低维空间下，我们使用更加 <code>偏重长尾分布</code> 的方式来将距离转换为概率分布，使得高维度下中低等的距离在映射后能够有一个较大的距离。使用了自由度为 1 的 $\\tau$ 分布之后的 $q$ 变化，如下:</p>\n<script type=\"math/tex; mode=display\">\n  q_{i,j} = \\frac{\n      (1 + ||y^{(i)} - y^{(j)}||^2)^{-1}\n  }{ \n      \\sum_{k \\neq l} (1 + ||y^{(k)} - y^{(l)}||^2)^{-1}\n  }\n  \\tag{9}</script><p>  依然用 K-L 距离衡量两个分布之间的相似性，此时梯度变为：</p>\n<script type=\"math/tex; mode=display\">\n  \\frac{\\delta C}{\\delta y_i} = \n  4 \\sum_j ( p_{i, j} - q_{i, j})( y_i - y_j )(1 + ||y^{(i)} - y^{(j)}||^2)^{-1}\n  \\tag{10}</script></li>\n<li><p><code>总结</code>：综上所述，从不对称的 SNE 算法到 t-SNE 算法，所做的改进工作：</p>\n<ul>\n<li>把 SNE 变为对称 SNE；</li>\n<li>在低维空间中采用了 $\\tau$ 分布代替原来的高斯分布，高维空间不变。</li>\n<li><p>具体算法步骤可参考了文章 [7] 的 <a href=\"https://zhuanlan.zhihu.com/p/33722444\" target=\"_blank\" rel=\"noopener\">t-SNE</a> 图文解释，如图 2-2 所示。</p>\n<p><img src=\"/images/illustration/Project/2018/11/The-Best-Way-to-Visualize-a-Dataset-Easily_2-2.jpg\" alt=\"图2-2t-SNE的算法步骤\"></p>\n<center>图 2-2 t-SNE 的算法步骤</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h3><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://www.zhihu.com/question/52022955/answer/387753267\" target=\"_blank\" rel=\"noopener\">微调. t-SNE 数据可视化算法的作用是为了降维还是认识数据. zhihu.com</a></li>\n<li>[2] <a href=\"http://www.datakit.cn/blog/2017/02/05/t_sne_full.html#12-sne原理推导\" target=\"_blank\" rel=\"noopener\">Chrispher. t-SNE 完整笔记 [OL]. datakit.cn. 2017</a></li>\n<li>[3] <a href=\"http://bindog.github.io/blog/2016/06/04/from-sne-to-tsne-to-largevis/\" target=\"_blank\" rel=\"noopener\">Bindog. 从 SNE 到 t-SNE 再到 LargeVis. bindog.github.io. 2016</a></li>\n<li>[4] Maaten L, Hinton G. Visualizing data using t-SNE [J]. Journal of machine learning r/esearch, 2008, 9(Nov): 2579-2605.</li>\n<li>[5] Tang J, Liu J, Zhang M, et al. Visualizing large-scale and high-dimensional data[C]. International World Wide Web Conferences Steering Committee, 2016: 287-297.</li>\n<li>[6] Tang J, Qu M, Wang M, et al. Line: Large-scale information network embedding[C]. International World Wide Web Conferences Steering Committee, 2015: 1067-1077.</li>\n<li>[7] <a href=\"https://zhuanlan.zhihu.com/p/33722444\" target=\"_blank\" rel=\"noopener\">徐小贱民. 降维技术解析：PCA, t-SNE and Auto Encoders. zhihu.com</a></li>\n<li>[8] <a href=\"https://www.jianshu.com/p/631d6529e0df\" target=\"_blank\" rel=\"noopener\">Bindog. t-SNE使用过程中的一些坑. jianshu.com. 2018</a></li>\n</ul>\n","categories":["Project"],"tags":["数据挖掘","数据可视化","Kaggle","t-SNE"]},{"title":"数据分析学习框架","url":"/2018/09/data-analysis-learning-framework.html","content":"<p>本笔记以秦路老师的文章「如何七周成为数据分析师」为内容框架，整合相关的论文、书籍、视频资料，输出学习笔记。主要目的是检验自己的学习效果和日常复习之需。</p>\n<p>初入数据分析的大门，笔记大部门的知识模块以阅读原资料总结整理而得，难免有理解偏差、错误的地方，若有不正当的解释还望朋友们不吝指教！</p>\n<a id=\"more\"></a>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.09.29：完成初稿，形成笔记的整体框架；</li>\n<li>2018.09.30：更新「数据分析入门」章节；</li>\n</ul>\n<h2 id=\"学习框架\"><a href=\"#学习框架\" class=\"headerlink\" title=\"学习框架\"></a>学习框架</h2><ul>\n<li><code>整体框架</code>：本笔记以秦路老师的文章「如何七周成为数据分析师」$^{[1]}$ 为内容框架，整合相关的论文、书籍、视频资料，输出学习笔记。</li>\n<li><p><code>数学部分</code>：数据分析，离不开数学。关于学习资料的选择，推荐盛骤老师的《概率论与数理统计·第4版》和张宇老师的《带你学概率论与数理统计·浙大4版》。</p>\n<blockquote>\n<p>数学并不是自己擅长的科目，出于这样的考虑，故选择了 <code>大学教材</code> 和 <code>考研辅导书</code>，希望借以习题辅导书复习教材内容，以短时间获得最大成效比。</p>\n</blockquote>\n<ul>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/3165271/\" target=\"_blank\" rel=\"noopener\">盛骤. 概率论与数理统计·第4版. 高等教育出版社</a></p>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/26630236/\" target=\"_blank\" rel=\"noopener\">张宇. 带你学概率论与数理统计·浙大4版. 北京理工大学出版社</a></p>\n</li>\n<li><p>📺 | 视频 | <a href=\"https://www.bilibili.com/video/av14690558?from=search&amp;seid=2673720085936060940\" target=\"_blank\" rel=\"noopener\">张宇. 2018 考研概率论强化课程. bilibili.com</a></p>\n</li>\n<li><p>📝 | 文章 | <a href=\"https://www.kofes.cn/2018/09/probability-and-statistics.html\">Kofe | 笔记 | 概率论与数理统计</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>统计部分</code>：很遗憾对此部分知识不了解，在此不具体展开探讨。但《概率论与数理统计》的数理统计部分可以预先复习。</p>\n</li>\n<li><p><code>数据库部分</code>：在秦路老师的文章中，数据库部分侧重 SQL ( 结构化查询语言 ) 的讲解，当然这也是操作性和实用性很强的一模块。且据以往语言学习的经历，<code>多写、多练</code> 是必不可少的阶段，SQL 也不例外，附带的练习题目中有不少经典的实例，作为入门训练材料刚好合适。</p>\n<p>  当然，数据库的知识不仅如此，有需求的朋友可继续参阅书籍《数据库系统概念》$^{[2]}$，即以数据库工程师的角度出发，从需求到维护的流程化学习过程，整体架构上学习数据库这门学科。</p>\n<ul>\n<li><p>📝 | 文章 | <a href=\"http://www.w3school.com.cn/sql/index.asp\" target=\"_blank\" rel=\"noopener\">W3CSchool SQL 教程 &amp; 练习题</a></p>\n</li>\n<li><p>📝 | 文章 | <a href=\"https://leetcode-cn.com/problemset/database/\" target=\"_blank\" rel=\"noopener\">LeetCode SQL 练习题</a></p>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/10548379/\" target=\"_blank\" rel=\"noopener\">Abraham Silberschatz. 数据库系统概念. 机械工业出版社</a></p>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/24250054/\" target=\"_blank\" rel=\"noopener\">福达(Ben Forta). SQL 必知必会. 人民邮电出版社</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>编程部分</code>：主导 Python 语言编程。由于篇幅的缘故，该部分内容请参阅另一篇博文：</p>\n<ul>\n<li><p>📝 | 文章 | <a href=\"https://www.kofes.cn/2018/09/life-is-short-we-need-python.html\">Kofe | 笔记 | Python 3 入门系列教程</a></p>\n</li>\n<li><p>📝 | 文章 | <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">廖雪峰. Python 教程. 2018. liaoxuefeng.com</a></p>\n<blockquote>\n<p>当然，Python 的学习还可以参考廖雪峰老师的教程。</p>\n</blockquote>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://github.com/iamseancheney/python_for_data_analysis_2nd_chinese_version\" target=\"_blank\" rel=\"noopener\">Iamseancheney (译). Python 数据分析 (第二版). 2017. github.com</a></p>\n<blockquote>\n<p>本书是 2017 年 10 月 20 号正式出版的，和第一版的不同之处有：<br>1) 包括 Python 教程内的所有代码升级为 <code>Python 3.6</code>；<br>2) 更新了 Anaconda 和其它包的 Python 安装方法；<br>3) 更新了 Pandas 为 2017 最新版；<br>4) 新增 <code>高级的 Pandas 工具</code> 章节；<br>5) 简要介绍和使用 <code>StatsModels</code> 和 <code>scikit-learn</code>.  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>研究部分</code>：自己课题的需求，数据科学方向的研究是必不可少的环节。篇幅原因，则细节在下文中展开探讨。按照惯例，为了便于知识的引用和问题的探讨，以下罗列自己所使用到的学习资料。</p>\n<ul>\n<li><p>🍉 | 书籍 | <a href=\"https://book.douban.com/subject/26708119/\" target=\"_blank\" rel=\"noopener\">周志华. 机器学习 (西瓜书). 清华大学出版社</a></p>\n</li>\n<li><p>🌼 | 书籍 | <a href=\"https://book.douban.com/subject/27087503/\" target=\"_blank\" rel=\"noopener\">[美] 伊恩·古德费洛. 深度学习 (花书). 人民邮电出版社</a></p>\n</li>\n<li><p>📺 | 视频 | <a href=\"https://www.bilibili.com/video/av15558220\" target=\"_blank\" rel=\"noopener\">深度学习. 读书会分享视频集. bilibili.com</a></p>\n<blockquote>\n<p>视频转载自：<a href=\"https://www.youtube.com/playlist?list=PLsXu9MHQGs8eO64mazCnCU3bc9l25Z1ZZ\" target=\"_blank\" rel=\"noopener\">Alena Kruchkova. Deep Learning Book Live Streams. youtube.com</a><br>若有条件科学上网的朋友，可至 Youtube 搭配在线字幕观看。</p>\n</blockquote>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/10590856/\" target=\"_blank\" rel=\"noopener\">李航. 统计学习方法. 清华大学出版社</a></p>\n</li>\n<li><p>📖 | 书籍 | <a href=\"https://book.douban.com/subject/11542972/\" target=\"_blank\" rel=\"noopener\">[美] Jiawei Han. 数据挖掘：概念与技术 (原书第3版). 机械工业出版社</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据分析入门\"><a href=\"#数据分析入门\" class=\"headerlink\" title=\"数据分析入门\"></a>数据分析入门</h2><h3 id=\"Excel：不考虑性能和数据量\"><a href=\"#Excel：不考虑性能和数据量\" class=\"headerlink\" title=\"Excel：不考虑性能和数据量\"></a>Excel：不考虑性能和数据量</h3><ul>\n<li>掌握各类功能强大的函数 — <a href=\"https://ask.hellobi.com/blog/qinlu/5976\" target=\"_blank\" rel=\"noopener\">常见 Excel 函数</a><ul>\n<li>清洗处理类：trim、concatenate、replace、substitute、left/right/mid、len/lenb、find、search、text</li>\n<li>关联匹配类：lookup、vlookup、index、match、row、column、offset</li>\n<li>逻辑运算类：if、and、or、is系列</li>\n<li>计算统计类：sum/sumif/sumifs、sumproduct、count/countif/countifs、max、min、rank、rand/randbetween、averagea、quartile、stdev、<code>substotal</code>、int/round</li>\n<li>时间序列类：year、month、weekday、weeknum、day、date、now、today、<code>datedif</code></li>\n</ul>\n</li>\n<li><p>Excel 常用工具 — <a href=\"https://ask.hellobi.com/blog/qinlu/5977\" target=\"_blank\" rel=\"noopener\">数据分析：Excel 技巧大揭秘</a></p>\n<ul>\n<li><p><code>格式转换</code>：自定义格式规范时间。</p>\n<blockquote>\n<p>2016/11/11 写成 yyyy/MM/dd<br>2016-11-11 23:59:59 写成 yyyy-MM-dd HH:mm:ss</p>\n</blockquote>\n</li>\n<li><p><code>分列</code>：分列功能可以将某一列按照特定规则拆分，常常用来进行数据清洗。</p>\n</li>\n<li><p><code>数据透视表</code>：数据透视表的核心思想是聚合运算，将字段名相同的数据聚合起来，所谓数以类分。</p>\n<blockquote>\n<p>列和行的设置，则是按不同轴向展现数据。简单说，你想要什么结构的报表，就用什么样的拖拽方式。</p>\n</blockquote>\n</li>\n<li><p><code>删除重复项</code>：一种数据清洗和检验的快速方式。想要验证某一列有多少个唯一值，或者数据清洗，都可以使用。</p>\n</li>\n<li><code>自定义下拉菜单</code> (数据有效性)：数据有效性是一种约束，针对单元格限制其输入，也就是让其只能固定几个值。下拉菜单是一种高阶应用，通过允许下拉箭头即可。</li>\n<li><code>查找公式错误</code>：公式报错也不知道错在哪里时候可以使用该功能，尤其是各类IF嵌套或者多表关联，逻辑复杂时。查找公式错误是逐步运算的，以方便定位。</li>\n<li><code>分组和分级显示</code>：常用在报表中，在报表行数多到一定程度时，通过分组达到快速切换和隐藏的目的。</li>\n<li><p><strong><code>分析工具库</code></strong>：分析工具库是高阶分析的利器，包含很多统计计算，检验功能等工具。Excel是默认不安装的，要安装需要加载项，在工具菜单下（不同版本安装方式会有一点小差异）。</p>\n<blockquote>\n<p>分析工具库是统计包，如随机数发生器、排位与百分比排位、回归、抽样、t-检验等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Excel 实战教程 — <a href=\"https://ask.hellobi.com/blog/qinlu/5978\" target=\"_blank\" rel=\"noopener\">数据分析：手把手教你Excel实战</a></p>\n<ul>\n<li>明确目的<ul>\n<li>数据用来解决什么问题？</li>\n<li>汇总统计制作报表？</li>\n<li>数据可视化，作为一张信息图？</li>\n<li>验证某一类业务假设？</li>\n<li>提高某一个指标的KPI？</li>\n</ul>\n</li>\n<li>观察数据<ul>\n<li>数据有无缺失值<ul>\n<li>某一字段缺失数据较多，要考虑是否删除该字段（超过 50% 即没有业务意义了）</li>\n</ul>\n</li>\n<li>数据是否一致化</li>\n<li>数据是否有脏数据：乱码，错位，重复值，未匹配数据，加密数据</li>\n<li>数据标准结构</li>\n</ul>\n</li>\n<li>数据清洗：结合 <code>观察数据</code> 阶段完成的工作，对数据进行 <code>预处理操作</code>。</li>\n<li>分析过程<ul>\n<li>数据透视表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>单元格格式：数据分析师会和各种数据类型打交道，包括各类 timestamp，date，string，int，bigint，char，factor，float 等。</li>\n<li>了解中文编码：UTF-8、GBK、ASCII 码。</li>\n</ul>\n<h3 id=\"Excel：数据可视化\"><a href=\"#Excel：数据可视化\" class=\"headerlink\" title=\"Excel：数据可视化\"></a>Excel：数据可视化</h3><ul>\n<li>Excel：多种经典图表<ul>\n<li><a href=\"https://ask.hellobi.com/blog/qinlu/5986\" target=\"_blank\" rel=\"noopener\">数据可视化：你想知道的经典图表全在这</a><ul>\n<li>散点图：表示两个变量之间的关系。后续的学习中，多次借用到散点，统计中的 <code>回归分析</code>，比如数据挖掘中的 <code>聚类</code>。</li>\n<li>折线图：了解某一维度在时间上的规律或者趋势。</li>\n<li>柱形图：堆积柱形图，瀑布图，横向条形图，横轴正负图。</li>\n<li>地理图：一切和空间属性有关的分析都可以用到地理图。</li>\n<li>饼图</li>\n<li>雷达图：也叫蛛网图，适合用在固定的框架内表达某种已知的结果。</li>\n<li>箱线图：它能准确地反映数据维度的离散（最大数、最小数、中位数、四分数）情况。凡是离散的数据都适用箱线图。</li>\n<li>热力图：以高亮形式展现数据。</li>\n<li>关系图</li>\n<li>矩形树图：柱形图不适合表达过多类目（比如上百）的数据，那应该怎么办？矩形树图出现了，它直观地以面积表示数值，以颜色表示类目。</li>\n<li>桑基图：常表示信息的变化和流动状态。</li>\n<li>漏斗图</li>\n</ul>\n</li>\n<li><a href=\"https://ask.hellobi.com/blog/qinlu/5987\" target=\"_blank\" rel=\"noopener\">数据可视化：教你打造升职加薪的报表</a></li>\n</ul>\n</li>\n<li>PowerBI：Dashboard 仪表盘，由多个图表集合成的图表仪盘 — <a href=\"https://ask.hellobi.com/blog/qinlu/5989\" target=\"_blank\" rel=\"noopener\">数据可视化：手把手打造BI</a><ul>\n<li>商业智能（Business Intelligence，BI），在传统企业中，它是一套完整的解决方案。将企业的数据有效整合，快速制作出报表以作出决策。涉及 <code>数据仓库</code>，<code>ETL</code>，<code>OLAP</code>，<code>权限控制</code> 等模块。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据分析思维\"><a href=\"#数据分析思维\" class=\"headerlink\" title=\"数据分析思维\"></a>数据分析思维</h2><ul>\n<li>麦肯锡的分析思维：结构化思考，MECE原则，假设先行，关键驱动等方法论。 — <a href=\"https://ask.hellobi.com/blog/qinlu/6002\" target=\"_blank\" rel=\"noopener\">快速掌握麦肯锡的分析思维</a></li>\n<li>分析思维框架：SMART、5W2H、SWOT、4P4C、六顶思考帽等 — <a href=\"https://ask.hellobi.com/blog/qinlu/6003\" target=\"_blank\" rel=\"noopener\">如何建立数据分析的思维框架</a></li>\n</ul>\n<h2 id=\"业务知识\"><a href=\"#业务知识\" class=\"headerlink\" title=\"业务知识\"></a>业务知识</h2><h2 id=\"课题研究\"><a href=\"#课题研究\" class=\"headerlink\" title=\"课题研究\"></a>课题研究</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://ask.hellobi.com/blog/qinlu/8930\" target=\"_blank\" rel=\"noopener\">秦路. 如何七周成为数据分析师. hellobi.com. 2017</a></li>\n<li>[2] <a href=\"https://book.douban.com/subject/10548379/\" target=\"_blank\" rel=\"noopener\">Abraham Silberschatz. 数据库系统概念 (原书第6版) [M]. 机械工业出版社, 2012</a></li>\n</ul>\n","categories":["Reading"],"tags":["数据分析","Excel","Python","数据库"]},{"title":"营销方法论：实体店铺如何获得线上流量","url":"/2023/10/how-offline-stores-get-online-traffic.html","content":"<div class=\"note default\"><p>作者：安可欣<br>视频：<a href=\"https://www.bilibili.com/video/BV1nL41187cg\" target=\"_blank\" rel=\"noopener\">程前朋友圈. 实体店老板怎么在线上搞流量 [OL]. bilibili.com. 2023,05</a></p></div>\n<p>正价商品线上销售难以获得流量，商家一般做法是降价销售商品。商家不妨调转身份，想想消费者是如何看待商品降价行为的。获取流量第一步得从用户心理抓起。</p>\n<a id=\"more\"></a>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/marketing/how_to_get_traffic_online_in_physical_stores.svg\" alt> 组品价格 v.s. 消费者预期 </p>\n</blockquote>\n<ul>\n<li>战术：坚持 “引进来·销出去” 策略，绝大部分消费者认为的触底价，但这种程度的定价还不足以让消费者动心，推出超过最低预期的极低价限量组品，吸引目标客户进来消费，从而带动其他组品的销量。</li>\n<li><p>原理：目标客户浏览了极低价组品，不出意外他们都愿意购买商品。商品一经浏览就被卖掉了，此刻抖音会认为该视频价值大，从而获得流量青睐。</p>\n</li>\n<li><p>以抖音平台为例，实体店如何条理分明地开启线上销售模式。</p>\n  <blockquote class=\"blockquote-center\"><p><strong>钱（利润收入）+ 组品 + 短视频 + 直播</strong></p>\n</blockquote>\n<ul>\n<li><p>钱：可理解为组品的利润收入。按照渠道区分有主动搜过来的、短视频以及直播，不同渠道配置不一样的组品，且折扣力度有所区别。</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th>渠道</th>\n      <th>折扣</th>\n      <th>组品</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>主动搜过来的</td>\n      <td>9 折</td>\n      <td>福利款</td>\n  </tr>\n  <tr>\n      <td>短视频</td>\n      <td>8.6 折</td>\n      <td>利润款</td>\n  </tr>\n  <tr>\n      <td>直播</td>\n      <td>6 折</td>\n      <td>引流款</td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n<li><p>组品：可理解为不同商品的组合。如何做到低价不亏本、薄利又多销、人气单品等，都需要仔细调研、试验、轮换、创新，适合才是最优解。</p>\n<blockquote>\n<p>店铺选组品是一门学问，模仿不来但可借鉴，多渠道小而快尝试，找到独占优势、有效果低成本的途径再发力推广。建议不要平均发力，不然到头来资源被稀释、优势也没占着。</p>\n</blockquote>\n</li>\n<li><p>短视频：为用户呈现有温度的视频，不偏离两个目的：给用户建立商品认知与价格认知。</p>\n<blockquote>\n<p>做什么、怎么做？比如拍摄店铺日常、员工氛围（去有风的地方.求师傅再打我一次）；就地取材，花最少时间、最直接方式让用户认识你卖的产品。</p>\n</blockquote>\n</li>\n<li><p>直播：不同段位的商家，关注消费者的购买行为（意图）也不同。</p>\n<ul>\n<li>一阶段：低价福利引客流，让消费者有理由买你的商品。</li>\n<li>二阶段：为客户提供解决方案。</li>\n<li>三阶段：培养客户消费行为习惯。比如，只有周五十点有，不买只能等下周五啦！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>直播间翻台率：直播间卖东西讲究一个 “翻台率” 的概念，抢一波卖一波，流量就来了。比如，准备售卖 15 单商品，抢 10 单、卖 5 单，后台数据形成一个山峰尖，以此类推不断营造这样的场景，从而获得官方流量青睐。</p>\n</li>\n<li><p>直播间技巧</p>\n<ul>\n<li>最有利用户的点最大化</li>\n<li>脚本设计在于画面感：跟用户互动，利用问题引导用户聚焦于某件事情</li>\n<li>直播话术<ul>\n<li>吸引用户注意</li>\n<li>提供价值</li>\n<li>推动节奏</li>\n</ul>\n</li>\n<li>话术拆解：从零到一，没有废话，流程严谨的直播带货流程是怎么做到的？模仿学习，找行业的优秀主播，拆解学习他们的话术并做好归纳总结。<ul>\n<li>商品与话术的关系</li>\n<li>话术目的</li>\n<li>话术时长</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Marketing"],"tags":["营销","抖音","短视频","直播","消费者行为"]},{"title":"子弹笔记：让每个人都可以笔记方式撰写自传","url":"/2020/11/bullet-journal.html","content":"<h2 id=\"零-引言\"><a href=\"#零-引言\" class=\"headerlink\" title=\"零 引言\"></a>零 引言</h2><ul>\n<li>子弹笔记术：概括描述就是以列表清单的方式，结合其特色符号及方法，以高效性、目的性和功能性地去记录任务、事项以及笔记。最直观感受是本笔记由 Markdown 编写生成，Markdown 所具有的样式特征或多或少正符合着子弹笔记术的思想理念。</li>\n<li><p>本笔记偏向于本书讲述的方法论，不建议生搬硬套交作业，侧重理解子弹笔记的核心思想，勤于思考和练习便可设计创造属于自己的笔记方法论。让我们带着创作的热情，以子弹笔记术为指导方法来开启属于自己的一部自传。</p>\n<blockquote>\n<p>当然 <code>子弹笔记术</code> 不仅有方法论部分，而且还有艺术创作部分（第四章），有兴趣的朋友请参阅原书。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"壹-准备阶段\"><a href=\"#壹-准备阶段\" class=\"headerlink\" title=\"壹 准备阶段\"></a>壹 准备阶段</h2><blockquote>\n<p>关键词：做什么；为什么</p>\n</blockquote>\n<h3 id=\"指导\"><a href=\"#指导\" class=\"headerlink\" title=\"指导\"></a>指导</h3><ul>\n<li>初学者指南<ul>\n<li>子弹笔记由两大元素组成：方法和实践。第二章介绍方法（包括要素概念及用途），第三、四章则深入实践。</li>\n<li>推荐顺序方式阅读本书。</li>\n</ul>\n</li>\n<li>非初学指南<ul>\n<li>书中的章节设计是独立子集，若熟悉子弹笔记的术语，可任意阅读感兴趣的章节。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内在因素\"><a href=\"#内在因素\" class=\"headerlink\" title=\"内在因素\"></a>内在因素</h3><ul>\n<li><p>意向性地生活：作者认为是一种遵循自己 <code>信念行动</code> 的生活方式。</p>\n<blockquote>\n<p>与之相反的是 <code>随心所欲</code> 的生活方式。</p>\n</blockquote>\n<ul>\n<li>认同自己的行动；</li>\n<li>关注自己能产生共鸣和兴趣的事物，也需要关注无法产生共鸣和兴趣的事物；</li>\n<li>视作一部持续更新的 <code>自传</code>，不断地追踪，自我回顾与思考。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"整理想法\"><a href=\"#整理想法\" class=\"headerlink\" title=\"整理想法\"></a>整理想法</h3><ul>\n<li>选择是有成本的，减少强加于自身的决策，专注于重要的事情。</li>\n<li>思想清单：将想法具象化并记录下来，形成思想清单。<ul>\n<li>正在做的</li>\n<li>应该做的</li>\n<li>想要做的</li>\n</ul>\n</li>\n<li>遍历测验：对于每一项事情，以是否紧要、是否重要的方式思考问题，剔除没有价值的事情，剩余事情分类：<ul>\n<li>需要做的事情：属于你的责任</li>\n<li>想要做的事情：属于你的目标</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-结构介绍\"><a href=\"#贰-结构介绍\" class=\"headerlink\" title=\"贰 结构介绍\"></a>贰 结构介绍</h2><blockquote>\n<p>关键词： 任务单；规划簿；日记本</p>\n</blockquote>\n<h3 id=\"关键概念\"><a href=\"#关键概念\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h3><ul>\n<li><code>索引</code>：标题 + 页码 —&gt; 定位内容</li>\n<li><code>快速记录</code>：简单的记号或符号捕捉想法（笔记、时间、任务分门别类），并依据时间/优先级等方式排序。</li>\n<li><code>未来记录</code>：记录本月意外的任务和事件。</li>\n<li><code>月度记录</code>： 本月的时间安排和任务（或本月的思想清单）。</li>\n<li><code>每日记录</code>：一天零碎的想法。</li>\n<li><p><code>子集</code>：模块化笔记</p>\n<blockquote>\n<p>单独项目独立成项，行为子弹笔记的子集，子集中也存在索引、未来记录、月度记录、每日记录以及快速记录。</p>\n</blockquote>\n</li>\n<li><p><code>迁移</code>：每月从笔记中过滤掉无意义内容的过程。</p>\n</li>\n</ul>\n<h3 id=\"快速记录\"><a href=\"#快速记录\" class=\"headerlink\" title=\"快速记录\"></a>快速记录</h3><ul>\n<li>快速记录法：一言蔽之，就是以不断更新的列表形式，通过特定的符号和结构帮助我们捕捉并管理想法。</li>\n<li>笔记、事件和任务的符号表述：</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">样式</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">- 笔记</td>\n<td style=\"text-align:left\"><code>-</code> 表示为一笔记</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">○ 事件</td>\n<td style=\"text-align:left\"><code>○</code> 表示为一事件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">● 任务</td>\n<td style=\"text-align:left\"><code>●</code> 表示为一任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">✕ 已完成任务</td>\n<td style=\"text-align:left\"><code>✕</code> 表示为已完成的任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt; 迁移的任务</td>\n<td style=\"text-align:left\"><code>&gt;</code> 表示为迁移的任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt; 计划中任务</td>\n<td style=\"text-align:left\"><code>&lt;</code> 表示为计划中的任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><del>● 不相关任务</del></td>\n<td style=\"text-align:left\"><code>--</code> 表示为不相关的任务</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"标题页码\"><a href=\"#标题页码\" class=\"headerlink\" title=\"标题页码\"></a>标题页码</h3><ul>\n<li>确定标题<ul>\n<li>标题即描述内容</li>\n<li>阐明意图：具有意向性、目的性</li>\n<li>内容安排</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">一般形式</th>\n<th style=\"text-align:center\">改造之后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">10月13日-第四次会议笔记</td>\n<td style=\"text-align:center\">10-13.四.艾米克公司.企业网站更新</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>页码索引</li>\n</ul>\n<h3 id=\"子弹短句\"><a href=\"#子弹短句\" class=\"headerlink\" title=\"子弹短句\"></a>子弹短句</h3><ul>\n<li><p>项目分类</p>\n<ul>\n<li>你需要做的事情 — <code>任务</code></li>\n<li>你的经历 — <code>事件</code></li>\n<li><p>你不想遗忘的信息 — <code>笔记</code></p>\n<blockquote>\n<p>每类子弹短句会被赋予特定的符号，其能够帮助你快速捕捉想法、帮助你通过特定的背景理解想法，也便于定位查找特定的内容。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"任务子弹\"><a href=\"#任务子弹\" class=\"headerlink\" title=\"任务子弹\"></a>任务子弹</h4><ul>\n<li>任务子弹的不同形态</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">形态</th>\n<th style=\"text-align:left\">符号</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">任务</td>\n<td style=\"text-align:left\">● 任务</td>\n<td style=\"text-align:left\">需要采取行动的事项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">完成的任务</td>\n<td style=\"text-align:left\">* 完成的任务</td>\n<td style=\"text-align:left\">已完成的任务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">迁移的任务</td>\n<td style=\"text-align:left\">&gt; 迁移的任务</td>\n<td style=\"text-align:left\">推迟的月度记录或者某个特定的子集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">计划的任务</td>\n<td style=\"text-align:left\">&lt; 计划的任务</td>\n<td style=\"text-align:left\">不在本月范围但被提前前几项的未来记录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不相关任务</td>\n<td style=\"text-align:left\"><del>不相关任务</del></td>\n<td style=\"text-align:left\">计划赶不上变化，怕影响你的注意力则剔除它</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>主任务和次任务<ul>\n<li>次任务从属于某一主任务，可简单地缩进位列于主任务下方。</li>\n<li>主任务下设过多次任务，建议将该主任务形成独立的子集。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"事件子弹\"><a href=\"#事件子弹\" class=\"headerlink\" title=\"事件子弹\"></a>事件子弹</h4><ul>\n<li>事件子弹：在事件过去后及时记笔记，保留细节且描述保持简洁。</li>\n</ul>\n<h4 id=\"笔记子弹\"><a href=\"#笔记子弹\" class=\"headerlink\" title=\"笔记子弹\"></a>笔记子弹</h4><ul>\n<li><p>笔记子弹：包括事实、注意、想法、评论，想要记住但又无须或者无法立刻采取行动的信息。</p>\n<blockquote>\n<p>适用于会议、讲座、课堂等。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"特殊符号\"><a href=\"#特殊符号\" class=\"headerlink\" title=\"特殊符号\"></a>特殊符号</h3><ul>\n<li>特殊符号置于子弹短句前，达到突出短句的目的，方便我们快速定位、浏览。</li>\n<li>尽量减少使用特殊符号和个性化子弹，太多规则反而让记事变得复杂，效率变低。</li>\n</ul>\n<h3 id=\"每日记录\"><a href=\"#每日记录\" class=\"headerlink\" title=\"每日记录\"></a>每日记录</h3><ul>\n<li>每日记录之需要写上今天的日期和页码，利用 <code>快速记录法</code> 将一天的任务、事件、笔记统统记录下来。</li>\n<li><p>设定目标，但不强求设定期望，毕竟期望是我们无法控制的。</p>\n<blockquote>\n<p>自己通常的做法是标记目标的完成度（0 - 100%）。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"月度记录\"><a href=\"#月度记录\" class=\"headerlink\" title=\"月度记录\"></a>月度记录</h3><ul>\n<li><p>日历页（时间轴）</p>\n<ul>\n<li>简短地记述内容，仅供参考所需。</li>\n<li><p>可提前在日历页标注事件与任务，但计划不会一成不变，为此建议完成后补充记录。</p>\n<blockquote>\n<p>体验了时间轴的功能，它不仅阐明了事件内容，且交代了发生时间、发生背景。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>任务页（思想清单）</p>\n<ul>\n<li>记录每月需要完成的事务，事务优先级</li>\n<li><p>回顾上月未完成事务，把重要事务记录到下一个月的任务页</p>\n<blockquote>\n<p>从另一角度思考，这反馈了待完成事务的延期信息（是否可以结合甘特图来制定时间计划表？）。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><ul>\n<li>子集索引</li>\n<li><p>专用索引：为某一项计划专门设立的子集，并为之设定索引页。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 公司新网站计划 1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">头脑风暴 1 - 15</span><br><span class=\"line\">网站设计 16 - 60</span><br><span class=\"line\">\t用户流 16 - 20</span><br><span class=\"line\">\t线框图 21 - 30</span><br><span class=\"line\">\t设计稿 31 - 50</span><br><span class=\"line\">\t用户测试 51 - 60</span><br><span class=\"line\">网站内容 61 - 90</span><br><span class=\"line\">\t内容策略 61 - 70</span><br><span class=\"line\">\t更新后的输入输出系统 / 片段描述 71 - 80</span><br><span class=\"line\">\t产品描述 81 - 90</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引线法</p>\n</li>\n</ul>\n<h3 id=\"任务迁移\"><a href=\"#任务迁移\" class=\"headerlink\" title=\"任务迁移\"></a>任务迁移</h3><ul>\n<li><p>定期审视自己的任务，把时间和精力放在真正重要的事情上。</p>\n<blockquote>\n<p>毕竟计划的初衷就是，我们可以完成某件事，但并不要求我们应该/必须完成某件事（期限性和不可控性）。</p>\n</blockquote>\n</li>\n<li><p>月度迁移</p>\n</li>\n<li>年度迁移（全书迁移）：建议笔记以年度归档，将子集以及其未完成的项目计入下一笔记本中。</li>\n<li>思想清单迁移</li>\n</ul>\n<h2 id=\"叁-实际操作\"><a href=\"#叁-实际操作\" class=\"headerlink\" title=\"叁 实际操作\"></a>叁 实际操作</h2><blockquote>\n<p>关键词：行动；信念</p>\n</blockquote>\n<h3 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h3><ul>\n<li>每日反思<ul>\n<li>被动回应：受到刺激 —&gt; 被动回应 —&gt; 人通常会感到恐惧、焦虑</li>\n<li>意向驱使：受到刺激 —&gt; 主动应对 —&gt; 通过选择/方法/目标 —&gt; 人会积极反思</li>\n</ul>\n</li>\n<li>日反思 —&gt; 规划 </li>\n<li>夜反思 —&gt; 回顾</li>\n<li>通过迁移进行月度反思和年度反思：迁移操作实质上是一种过滤机制，你需要对未完成的任务进行反思，如此迁移才有意向性。</li>\n</ul>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><ul>\n<li>思想实验：试想自己站在岔路口，面前有两条路可走，一条人迹更多，另一条人迹更少。待迟暮之年，在个人生活或者专业技术方面会获得什么成就，这样的生活给您带来什么结果？<ul>\n<li><code>人迹更多的路</code>：带你走向更熟悉的地方，是目前生活的延续，只追求舒适的进步，不降低现有生活品质，也不改变现状。</li>\n<li><code>人迹更少的路</code>：带你走向不熟悉的地方，冒险多于舒适的生活。敢于追求感兴趣的目标，愿意通过奋斗来提升自己。</li>\n</ul>\n</li>\n<li>身后反思：分别为两条路创建一份 “两种生活” 的子集。选择你喜欢的生活方式，圈出你最骄傲的成就。完成后把这些事项迁移到你的 <code>目标子集</code>。</li>\n</ul>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li>适当的目标：带有意向地设定目标。</li>\n<li>盗用他人的目标，或许会成为一种诱惑，看似很宏大但相对于自己意义不大。例如：挣它一个亿。</li>\n<li>长期的目标：源于自身生活经历，明确意义设定长期目标。</li>\n</ul>\n<h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><ul>\n<li><p><code>54321倒计时法则</code></p>\n<ul>\n<li>将目标分为短期、中期、长期</li>\n<li><p>左边空白两页，左页是你的个人目标，右页是你的职业目标页；每个页面分 5 栏，5 栏依上往下是 5 年内目标、4 月内目标、3 周内目标、2 日内目标以及 1 小时内目标。</p>\n<blockquote>\n<p>可以采纳作为记事应用的一项特色功能来开发。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">54321倒计时法则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>5 年目标</strong><br>组建家庭<br>购置房产<br>流利掌握一门语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>4 月目标</strong><br>环岛旅行<br>体脂降低10%<br>拜访研究生导师</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>3 周目标</strong><br>捐赠衣物<br>志愿活动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>2 日目标</strong><br>清理衣柜<br>打扫房间<br>激活社保卡</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>1 时目标</strong><br>月度记账<br>给父母打电话</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><code>分清目标轻重主次</code><ul>\n<li>每一栏都分开考虑个人目标和职业目标</li>\n<li>每一栏只考虑一项最先考虑的目标</li>\n</ul>\n</li>\n<li><code>专注于优先事项</code>：注意力残留原则，一次只专注于一件事，专注于实现目标过程。最具价值的也是实现目标的过程，因它占据了大部分的生活，因此提供了大量信息让你成长。</li>\n<li><code>长期目标为冲刺目标</code><ul>\n<li>并不一定要把喜欢的事情变成职业，建议在体验过一段时间后再做决断。</li>\n<li>将长期目标分解一个短期、独立的冲刺目标。类似软件开发的开发周期，即分阶段设立目标。</li>\n</ul>\n</li>\n<li><code>设立冲刺目标的要求</code><ul>\n<li>初始阶段忌设立大障碍目标</li>\n<li>具有清晰可行的任务步骤</li>\n<li>完成时间必须固定在短期内</li>\n</ul>\n</li>\n<li><code>头脑风暴</code>：在分解目标前，我们必须认识考虑，思考要做什么和为什么做？<ul>\n<li>目标为什么会激起我的好奇心？</li>\n<li>是什么鼓励我为这个目标费时费力？</li>\n<li>我要达成什么目标？</li>\n<li>有什么要求？</li>\n<li>在这个目标上，成功的定义是？</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循序渐进\"><a href=\"#循序渐进\" class=\"headerlink\" title=\"循序渐进\"></a>循序渐进</h3><ul>\n<li><code>PDCA 循环</code>：Plan -&gt; Do -&gt; Check -&gt; Act<ul>\n<li>计划 / Plan：发现机会，制定改进计划</li>\n<li>执行 / Do：执行计划，测试改进结果</li>\n<li>检查 / Check：分析测试结果，确认学习成果</li>\n<li>行动 / Act：按照学习成果行动<ul>\n<li>没有改进：换一个计划重新开始，循环上述步骤</li>\n<li>取得改进：结合所学执行新计划，循环上述步骤</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>达成小成就</code>：找到任何一种成就，即使微小都无所谓，降低标准保证切实可行，然后以任务子弹的形式写进子弹笔记，完成它以达成成就。</li>\n</ul>\n<h3 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h3><ul>\n<li>时间箱管理：把任务完成时间规定在一定范围内，其意图是把百分百的注意力按照规定的时间限制投入一事物上。<ul>\n<li>两个关键激励因素：条理感和紧迫感</li>\n</ul>\n</li>\n<li>勿拖延请置顶：找出自己最高效、最专注的时候，事情从难到易排序，以制定执行计划。</li>\n<li>勿忘死亡：人固有一死，珍惜生命一分一秒。</li>\n</ul>\n<h3 id=\"感恩\"><a href=\"#感恩\" class=\"headerlink\" title=\"感恩\"></a>感恩</h3><ul>\n<li>反思完成一项任务对自己的影响？什么感觉，有何价值？</li>\n<li>自我庆祝：根据自己心理预期，对所有事项设定奖励机制，有意识地创造动力以形成良性循环。</li>\n<li>感恩子集：创建 <code>感恩记录</code>，并每天写下至少一件让你感恩的事，养成习惯。因为你对生活的留心观察，微小的幸福汇将促成更美好的生活。</li>\n</ul>\n<h3 id=\"掌控\"><a href=\"#掌控\" class=\"headerlink\" title=\"掌控\"></a>掌控</h3><ul>\n<li>我们无法掌控外部的世界、人和事，但我们能控制自己的内心世界。</li>\n<li>应对与回应：若与他人有冲突之时，冷静分析现状，千万不要有过激行为，毕竟恐惧或愤怒的回应只会加深对方和自身的创伤，失去相互理解、解决问题的机会。因此，需要每日反思重新审视这件事。</li>\n<li><p>过程与结果：</p>\n<ul>\n<li>在进行日反思与夜反思以及月度迁移时，遍历一遍任务列表，试着找出在你掌握之内以及之外的事情。</li>\n</ul>\n</li>\n<li><p>观察这条任务是侧重结果，还是侧重于过程。尽管目标带来方向，若目标过于侧重结果，往往结果是不可控的。</p>\n<blockquote>\n<p>例：减脂 10%、雅思 6.5、做一个很棒的汇报等。</p>\n</blockquote>\n<ul>\n<li>对于过于庞大的目标，尝试把目标分解成一个个可执行的小步骤。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"辐射力\"><a href=\"#辐射力\" class=\"headerlink\" title=\"辐射力\"></a>辐射力</h3><ul>\n<li>坚信你的一言一行所带有的能量会改变周遭世界和其中的人。</li>\n<li>自我怜悯：自我评判与自我反思。</li>\n<li>共同进步：辐射力是双向的，自己与朋友自己都需要时不时接受对方的审视。找一个朋友，两人互相尊重、赏识、关怀，共同成长。</li>\n</ul>\n<h3 id=\"忍耐\"><a href=\"#忍耐\" class=\"headerlink\" title=\"忍耐\"></a>忍耐</h3><ul>\n<li><p>分析记录：不要把注意力放在干活的痛苦一面，我们更应该关注它带来收获的方面。创建一个 <code>分析记录</code>，留意为什么要做这件事情，努力的具体目的是？</p>\n<blockquote>\n<p>例如：付房租 —&gt; 浪费钱？ &lt;—&gt; 学区房 / 通勤时间短 / 朋友相聚 —&gt; 平衡心中的负面情绪 </p>\n</blockquote>\n</li>\n<li><p>追踪进度：不要轻易放弃，但一件事情对于自己目前来说毫无价值，或是付诸努力与结果不成正比，这可能是分散注意力的事，暂且放下它吧。</p>\n<blockquote>\n<p>利用月度迁移定期检查自己的进度。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"拆解\"><a href=\"#拆解\" class=\"headerlink\" title=\"拆解\"></a>拆解</h3><ul>\n<li>五问法：分解大问题为小问题，在子弹笔记中创建一个子集，以问题为标题，以不同维度提出问题，并挖掘潜在的价值。</li>\n</ul>\n<h3 id=\"无力感\"><a href=\"#无力感\" class=\"headerlink\" title=\"无力感\"></a>无力感</h3><ul>\n<li>橡皮鸭调试法：如身边无人聆听，你可以向一只玩具橡皮鸭写一份信，在详细叙述事情的过程中，可能你已经找到应对方法了。<ul>\n<li>你遇到的问题</li>\n<li>出问题的地方</li>\n<li>出问题的原因</li>\n<li>尝试过的方法</li>\n<li>未尝试的方法</li>\n<li>你想要的结果</li>\n</ul>\n</li>\n<li>停顿目标：<ul>\n<li>时间不可多于两周：在不影响主项目进展情况下，停下来歇歇，可走得更远。</li>\n<li>困扰你的项目 / 问题无关：你和主要项目都需要空间。停顿目标不是要脱离主项目，而是享受一些 “自我时光”。</li>\n<li>关键点是要有明确的开头、结尾和过程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"不完美\"><a href=\"#不完美\" class=\"headerlink\" title=\"不完美\"></a>不完美</h3><ul>\n<li>练习不完美</li>\n<li>良好的改变<ul>\n<li>寻求进步的方法，把答案制成任务或目标，记录在子弹笔记中。</li>\n<li>可量化的进步：完成一项任务即得到一段经历。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"肆-艺术创作\"><a href=\"#肆-艺术创作\" class=\"headerlink\" title=\"肆 艺术创作\"></a>肆 艺术创作</h2><h3 id=\"关键概念-1\"><a href=\"#关键概念-1\" class=\"headerlink\" title=\"关键概念\"></a>关键概念</h3><ul>\n<li><p>利用个性化子集延伸子弹笔记的功能</p>\n<blockquote>\n<p>注意：个性化子集应具有目的性，不断更新的子集能给你的生活带来价值，提高生产力的关键在于谨慎地投资你的时间。</p>\n</blockquote>\n</li>\n<li><p>明确你的动机</p>\n</li>\n<li><p>温故而知新</p>\n<blockquote>\n<p>研究的不只是你在做的内容，还有这样做的方法。</p>\n</blockquote>\n</li>\n<li><p>功能大于形式</p>\n</li>\n<li><p>设计应具有长效保质期</p>\n<blockquote>\n<p>设计不仅当下浅显易懂，往后回顾也要清晰明白。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"个性化子集\"><a href=\"#个性化子集\" class=\"headerlink\" title=\"个性化子集\"></a>个性化子集</h3><ul>\n<li>个性化子集的设计意图<ul>\n<li>满足特定的需求</li>\n<li>特定的子集设计，具有主题性，可引发思考</li>\n</ul>\n</li>\n<li><p>个性化子集的来源</p>\n<ul>\n<li>目标：大目标、阶段性目标，需要拆分为 n 个小目标来逐个解决。</li>\n<li>难题：通过不同维度解读、分析难题，得出不同解决方案，并记录你的进步。</li>\n<li><p>任务：大任务、发杂性任务，同样可以细分为小任务。</p>\n<blockquote>\n<p>任务还可以结合甘特图管理时间进度，百分比记录小任务甚至整体任务的完成度。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"清单\"><a href=\"#清单\" class=\"headerlink\" title=\"清单\"></a>清单</h3><ul>\n<li>分清主次：每个事项清单都应有优先级别设定。</li>\n<li>背景信息：清单中可加入 <code>参考元素</code> 以描述背景信息，例如时间维度、空间维度等。<ul>\n<li>时间信息</li>\n<li>地点信息</li>\n<li>成本信息</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伍-拓展阅读\"><a href=\"#伍-拓展阅读\" class=\"headerlink\" title=\"伍 拓展阅读\"></a>伍 拓展阅读</h2><ul>\n<li>豆瓣书评：<a href=\"https://book.douban.com/subject/30395230/\" target=\"_blank\" rel=\"noopener\">赖德·卡罗尔. 子弹笔记. 2018. douban.com</a></li>\n<li>知乎问答：<a href=\"https://www.zhihu.com/question/58521083\" target=\"_blank\" rel=\"noopener\">warfalcon, 吴美丽Vase. luluscl 等. 子弹笔记如何高效使用. zhihu.com</a></li>\n<li><a href=\"https://sspai.com/post/39340\" target=\"_blank\" rel=\"noopener\">maxOS. 子弹笔记 — 你所需要仅仅是笔和本. 2017. sspai.com</a></li>\n<li><a href=\"https://www.jianshu.com/p/cd79a28c9c4f\" target=\"_blank\" rel=\"noopener\">胡红梅River. 子弹笔记：子弹笔记就是本不断更新的自传. 2019. jianshu.com</a></li>\n</ul>\n","categories":["Reading"],"tags":["to-do","手账","规划","备忘"]},{"title":"高级软件工程与导论","url":"/2018/05/Sofeware-Engineering.html","content":"<p>在软工系列课程上，老师常提及的一条等式  <code>软件 = 程序 + 软件工程</code> ( 或 <code>软件 = 程序 + 文档</code>)，即一般情况讨论，一款软件产品的诞生之际总是伴随着一系列的软件过程。</p>\n<p>那么如何充分理解软件工程 (过程)？从本书作者理念出发，我所理解的即应该时刻对软件产品持有 <code>生命周期</code> 的思维模式，将 <code>需求、建模、设计、实现、测试、维护</code> 等工程阶段联系起来，以自身代入案例环境中，去模拟开展软件过程的一系列活动，而非割裂。而这样的动态过程中，不仅仅是枯燥地学习理论、方法，则更像是问题所需、问题导向的理论应用过程。</p>\n<p>当然，软件工程作为一门工程学科，学习过程的最大收获可以说是对 <code>项目思维模式</code> 的掌握。譬如，我们可以抛开软件产品的范畴，谈谈现实生活的实例：假若你需要在一定时限内掌握一门新知识、任务，则我们的做法可以从调研、计划、布局、实施，直至验收，即类似的过程可复用软件工程的方法。</p>\n<p>最后，也是想声明的一点：学习软件工程的过程中，无可避免地将反映本人的一些观点、倾向，当然这也反映该学科需要 <code>多沟通</code> 的特点，若有不恰当、错误之处，欢迎大伙出建议、斧正。</p>\n<a id=\"more\"></a>\n<ul>\n<li>参考书目：<ul>\n<li>《 软件工程 》. Ian Sommerville 著：计算机科学丛书，且是著名软件工程学家 Ian Sommerille 系统介绍软件工程理论的经典教材。</li>\n<li>《 构建之法(第二版) 》: 待整理。贴上本书豆瓣的书评，供朋友评判，做出抉择。<a href=\"https://book.douban.com/subject/26577755/\" target=\"_blank\" rel=\"noopener\">构建之法(第二版)</a> </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><ul>\n<li>2018.05.02：完成初稿；</li>\n<li>2018.05.04：更新正文：导论部分  (第 4 / 8 章)；</li>\n</ul>\n<h2 id=\"零-内容总览\"><a href=\"#零-内容总览\" class=\"headerlink\" title=\"零 内容总览\"></a>零 内容总览</h2><ul>\n<li>软件工程导论<ul>\n<li><a href=\"#壹-软件过程\">壹 软件过程</a></li>\n<li><a href=\"#贰-敏捷软件开发\">贰 敏捷软件开发</a></li>\n<li><a href=\"#叁-需求工程\">叁 需求工程</a></li>\n<li><a href=\"#肆-系统建模\">肆 系统建模</a></li>\n<li><a href=\"#\">伍 体系结构设计</a></li>\n<li><a href=\"#\">陆 设计与实现</a></li>\n<li><a href=\"#\">柒 软件测试</a></li>\n<li><a href=\"#\">捌 软件进化 / 软件维护</a></li>\n</ul>\n</li>\n<li>高级软件工程<ul>\n<li><a href=\"#\">玖 软件复用</a></li>\n<li><a href=\"#\">拾 基于组件的软件工程</a></li>\n</ul>\n</li>\n<li>软件管理<ul>\n<li><a href=\"#\">拾壹 项目管理</a></li>\n<li><a href=\"#\">拾贰 项目规划</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"壹-软件过程\"><a href=\"#壹-软件过程\" class=\"headerlink\" title=\"壹 软件过程\"></a>壹 软件过程</h2><ul>\n<li>学习目标<ul>\n<li>3个一般的 <code>软件过程模型</code>；</li>\n<li>了解软件需求工程、开发、测试和进化中所涉及的 <code>基本过程活动</code>；</li>\n<li>理解为什么软件过程要有效地组织以应对软件需求和设计上的变更；</li>\n<li>Rational 统一过程 (RUP).</li>\n</ul>\n</li>\n<li>软件过程必须具有的基本活动<ul>\n<li>软件描述</li>\n<li>软件设计和实现</li>\n<li>软件有效性验证</li>\n<li>软件进化</li>\n</ul>\n</li>\n<li>没有“理想”的软件过程 — 寻找平衡点<ul>\n<li>计划驱动过程：提前计划好所有的过程活动，再按计划去考核过程的执行。</li>\n<li>敏捷过程：计划是增量式的，且容易根据不断变化的客户需求变更过程。更多详细内容见 <code>第叁章</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"软件过程模型\"><a href=\"#软件过程模型\" class=\"headerlink\" title=\"软件过程模型\"></a>软件过程模型</h3><ul>\n<li>软件过程：产生一个软件系统的一系列活动。</li>\n<li>软件过程的简化表示 (抽象表示)。</li>\n<li><p>每个过程模型都是从一个特定的侧面表现软件过程，所以只提供过程的部分信息。</p>\n<blockquote>\n<p>如过程活动模型表现了这些活动和他们的顺序，但可能表现不出人们在这些活动中的角色。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h4><p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-1.png\" alt=\"图1-1瀑布模型\"></p>\n<center>图 1-1 瀑布模型</center>\n\n<ul>\n<li>计划驱动模型；</li>\n<li>该模型将基本的过程活动、描述、开发、有效性验证和进化，看成是一些界限分明的独立的过程阶段。<ul>\n<li>需求分析和定义：通过咨询系统用户建立系统的服务、约束和目标，并对其详细定义形成系统描述。</li>\n<li>系统和软件设计<ul>\n<li>系统设计 — 建立系统的总体体系结构，将需求区分为硬件需求和软件需求。</li>\n<li>软件设计 — 识别和描述一些基本的软件系统抽象及其之间的关系。</li>\n</ul>\n</li>\n<li>实现和单元测试<ul>\n<li>软件设计实现 — 实现为一组程序或程序单元。</li>\n<li>单元测试 — 验证每个单元是否符合其描述。</li>\n</ul>\n</li>\n<li>集成和系统测试<ul>\n<li>集成 — 集成单个的程序单元或一组程序。</li>\n<li>系统测试 — 评估系统的可靠性；是否满足软件需求。</li>\n</ul>\n</li>\n<li>运行和维护</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增量式开发\"><a href=\"#增量式开发\" class=\"headerlink\" title=\"增量式开发\"></a>增量式开发</h4><p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-2.png\" alt=\"图1-2增量式开发\"></p>\n<center>图 1-2 增量式开发</center>\n\n<ul>\n<li>即可是计划驱动的，也可是敏捷方法的。<ul>\n<li>系统增量是提前定义好的，即为 <code>计划驱动方法</code>。</li>\n<li>最初的增量是定义好的，但往后的增量的开发取决于项目的进展情况及客户的优先选择，即为 <code>敏捷方法</code>。</li>\n</ul>\n</li>\n<li>系统的开发是建立一系列的版本 (增量) 每个版本添加部分功能到先前版本中。</li>\n<li>增量式开发的特性<ul>\n<li>降低了适应用户需求变更的成本。</li>\n<li>开发过程中及时得到用户已做的开发工作的反馈意见。</li>\n<li>更快地交付和部署有用的软件到客户方。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向复用的软件工程\"><a href=\"#面向复用的软件工程\" class=\"headerlink\" title=\"面向复用的软件工程\"></a>面向复用的软件工程</h4><p>基于复用开发的一般过程模型如图 1-3 所示。初始需求描述阶段、有效性验证阶段与其他过程差不多，面向复用过程的中间阶段是不同的。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-3.png\" alt=\"图1-3面向复用的软件工程\"></p>\n<center>图 1-3 面向复用的软件工程</center>\n\n<ul>\n<li>中间阶段：即组件分析、需求修改、使用复用的系统设计、开发和集成阶段。<ul>\n<li>组件分析：需求描述 -&gt; 搜组件 (往往只提供所需的部分功能)。</li>\n<li>需求修改：根据得到组件信息分析需求，再修改需求以反映可得到的组件。</li>\n<li>使用复用的系统设计：设计系统的框架或者重复使用一个已存在的框架。</li>\n<li>开发和集成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"过程活动\"><a href=\"#过程活动\" class=\"headerlink\" title=\"过程活动\"></a>过程活动</h3><h4 id=\"软件描述\"><a href=\"#软件描述\" class=\"headerlink\" title=\"软件描述\"></a>软件描述</h4><ul>\n<li>软件描述或需求工程是理解和定义系统需要提供什么样的服务，以及找出开发和运行中受到哪些约束。</li>\n<li>需求工程过程的主要阶段，如图 1-4 所示。<ul>\n<li>可行性研究</li>\n<li>需求导出和分析</li>\n<li>需求描述</li>\n<li>需求有效性验证</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-4.png\" alt=\"图1-4需求工程过程\"></p>\n<center>图 1-4 需求工程过程</center>\n\n<h4 id=\"软件设计和实现\"><a href=\"#软件设计和实现\" class=\"headerlink\" title=\"软件设计和实现\"></a>软件设计和实现</h4><ul>\n<li>软件设计和实现阶段是把系统描述转换成一个可运行的系统的过程。</li>\n<li>软件设计是对实现软件的结构、系统的数据、系统组件间的接口以及所用的算法的描述。这是一反复、迭代的过程。</li>\n</ul>\n<h4 id=\"软件有效性验证\"><a href=\"#软件有效性验证\" class=\"headerlink\" title=\"软件有效性验证\"></a>软件有效性验证</h4><ul>\n<li>程序测试：用模拟测试数据运行系统。</li>\n<li>测试过程各阶段<ul>\n<li>组件 (单元) 测试：每个组件单独测试；组件可是简单实体，如函数、对象类或这些实体的集合。</li>\n<li>系统测试：集成组件形成完整系统，对组件组成的子系统测试。</li>\n<li>接收测试：客户提供真实数据测试系统。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件进化-软件维护\"><a href=\"#软件进化-软件维护\" class=\"headerlink\" title=\"软件进化/软件维护\"></a>软件进化/软件维护</h4><p>软件工程不再是开发和维护两个独立的过程，而是一个进化过程。即软件在其生命内不断随着需求的变更而变更的进化式过程。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-5.png\" alt=\"图1-5系统进化\"></p>\n<center>图 1-5 系统进化</center>\n\n<h3 id=\"应对变更\"><a href=\"#应对变更\" class=\"headerlink\" title=\"应对变更\"></a>应对变更</h3><ul>\n<li>有效降低变更成本<ul>\n<li>变更避免：预测变更，如 <code>原型系统</code> 的开发，客户试用原型，在花费高额的软件生产成本之前重新定义需求。</li>\n<li>变更容忍：<code>增量开发</code>，即使单个增量(系统一小部分)的修改来适应变更，以较低成本处理变更。</li>\n</ul>\n</li>\n<li>应对变更系统需求的方法<ul>\n<li>系统原型：快速开发一个系统版本或系统一部分，以检验客户需求和某些设计决定的可行性，即它支持 <code>变更避免</code>。</li>\n<li>增量交付：系统增量地交付给用户，给用户评审和试用。即它支持 <code>变更避免</code> 和 <code>变更容忍</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"原型构造\"><a href=\"#原型构造\" class=\"headerlink\" title=\"原型构造\"></a>原型构造</h4><ul>\n<li>原型是一个软件系统的最初版本，用于验证概念、试用设计选项、发现更多的问题和可能的解决方法。</li>\n<li><p>原型开发的过程模型如图 1-6 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-6.png\" alt=\"图1-6原型开发的过程\"></p>\n  <center>图 1-6 原型开发的过程</center>\n\n<blockquote>\n<p>最后一阶段：原型评估，则必须安排用户培训，应根据原型的目标制定一个评估计划。即用户需习惯并适用新系统，一旦他们自然地使用了系统，将可能发现错误和被遗漏的需求。</p>\n</blockquote>\n</li>\n<li><p>不强求原型是可执行的。</p>\n<blockquote>\n<p>基于纸质的模型系统的用户界面，用户和这个界面交互，但他们的请求被传递给一个人，该人员解释此请求并输出相应的响应。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"增量式交付\"><a href=\"#增量式交付\" class=\"headerlink\" title=\"增量式交付\"></a>增量式交付</h4><ul>\n<li><p>增量式开发是软件开发的一种方法，如图 1-7 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-7.png\" alt=\"图1-7增量式交付\"></p>\n  <center>图 1-7 增量式交付</center>\n</li>\n<li><p>增量式开发过程的好处</p>\n<ul>\n<li>早期的增量作为原型，从中获得对后面系统增量的需求经验。</li>\n<li>每一增量会满足他们大多数需求，即软件马上就能使用。</li>\n<li>具有高优先权的服务被首先交付，而后继有增量不断被集成进来，使得最重要的系统服务接受了多次测试。</li>\n</ul>\n</li>\n<li>增量式交付存在的问题<ul>\n<li>软件描述和软件本身一起开发是迭代过程的本质。在增量方法中，直到最后的增量描述完成，才会有完整的系统描述。而许多机构 (如政府) 的采购模型是，系统开发合同中附带完整的系统描述，即相互冲突。</li>\n<li>旧系统的所有功能与新系统的部分功能，多数用户宁可选前者，即获取反馈较困难。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Boehm-的螺旋模型\"><a href=\"#Boehm-的螺旋模型\" class=\"headerlink\" title=\"Boehm 的螺旋模型\"></a>Boehm 的螺旋模型</h4><ul>\n<li>风险驱动的软件过程框架 (螺旋模型)<ul>\n<li>在螺旋线中每个回路表示软件过程的一个阶段，如最里的回路可能与系统可行性研究有关，下一回路与系统需求定义有关等。</li>\n<li>螺旋线中每个回路被分成4部分：<br>1) 目标设置<br>2) 风险评估和规避<br>3) 开发和有效性验证<br>4) 规划  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Rational-统一过程\"><a href=\"#Rational-统一过程\" class=\"headerlink\" title=\"Rational 统一过程\"></a>Rational 统一过程</h3><ul>\n<li>RUP 一般从3个视角描述过程<ul>\n<li>动态视角：给出模型中随时间所经历的各个阶段。</li>\n<li>静态视角：给出所进行的过程活动。</li>\n<li>实践视角：提出在过程中可采用的良好实践建议。</li>\n</ul>\n</li>\n<li><p>RUP 是一阶段化模型，如图 1-8 所示。</p>\n<ul>\n<li>开端  <ul>\n<li>目标是建立系统的一个业务案例。  </li>\n<li>识别所有与系统交互的外部实体 (人和系统) 并定义这些交互。</li>\n<li>适用这些信息评估系统对业务的贡献，若贡献微小，那么项目在此阶段结束。</li>\n</ul>\n</li>\n<li>细化<ul>\n<li>目标是增进对问题域的理解，建立系统的体系框架，给出项目计划并识别关键项目风险。</li>\n<li>输出系统的需求模型 (描述的用例、体系结构描述及开发计划)。</li>\n</ul>\n</li>\n<li>构造：系统设计、编程和测试。</li>\n<li><p>转换：将系统从开发单位转移到用户单位，并使之在真实环境中工作。</p>\n<blockquote>\n<p>1) RUP 中的阶段是紧密与业务关联，而不是与技术层面关联。<br>2) RUP 把 <code>阶段</code> (开端、细化、构造、转换) 和 <code>工作流</code> (需求、分析、设计…) 分离，即各种 RUP 工作流在整个过程的所有阶段都是可能存放的。  </p>\n</blockquote>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-8.png\" alt=\"图1-8Rational统一过程的各阶段\"></p>\n<center>图 1-8 Rational 统一过程的各阶段</center>\n</li>\n</ul>\n</li>\n<li><p>实践视角</p>\n<ul>\n<li>迭代地开发软件；</li>\n<li>对需求的管理：记录并跟踪客户的需求；</li>\n<li>使用基于组件的体系结构，将系统体系结构组织成组件形态；</li>\n<li>可视化地建模软件：UML 模型表现软件的静态、动态视图；</li>\n<li>检验软件质量；</li>\n<li>控制对软件的变更：变更管理系统、配置管理程序和工具来管理软件的变更。</li>\n</ul>\n</li>\n<li><p>静态视角</p>\n<ul>\n<li>聚焦在开发过程中所发生的活动上，这些在 RUP 描述中被称为工作流。</li>\n<li><p>此过程中包含6个核心过程工作流，3个核心支持工作流，见图 1-9 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_1-9.png\" alt=\"图1-9RUP中的静态工作流\"></p>\n<center>图 1-9 RUP 中的静态工作流</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-敏捷软件开发\"><a href=\"#贰-敏捷软件开发\" class=\"headerlink\" title=\"贰 敏捷软件开发\"></a>贰 敏捷软件开发</h2><div class=\"note success\"><p> 开始敏捷开发篇章前，引入一有趣的例子。Jazz Band 模式，跟 “敏捷的开发模式” 类似，同样也可以产生优秀的作品。( 演奏中，Miles Davis 先用小号吹出主题 ( 类比为架构师 )，然之后到一旁抽烟。曲目交由其他人员即兴发挥。最后， Miles Davis 加入演奏，回应主题 )。</p>\n<p>感兴趣的可以观看视频：<a href=\"http://v-wb.youku.com/v_show/id_XMTUzNzUxOTEwNA==.html\" target=\"_blank\" rel=\"noopener\">Miles Davis So What</a> </p></div>\n<ul>\n<li>学习目标<ul>\n<li>理解敏捷软件开发方法的基本原理、核心内涵，以及它与计划驱动软件开发方法的差别；</li>\n<li>极限编程；</li>\n<li>理解敏捷项目管理的 <code>Scrum</code> 方法；</li>\n<li>应用伸缩的敏捷方法时的事项和问题 -&gt; 大型软件系统开发过程.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"敏捷方法\"><a href=\"#敏捷方法\" class=\"headerlink\" title=\"敏捷方法\"></a>敏捷方法</h3><ul>\n<li>敏捷方法是一种专注于快速开发的 <code>增量式开发</code>，<code>频繁地发布软件</code>、<code>降低过程开销</code>、生产高质量代码。他们使用户直接参与到开发过程中。</li>\n<li><p>敏捷方法的基本原理体现在 <code>敏捷宣言</code> 中：</p>\n<ul>\n<li>个体和交互胜过工具和过程；</li>\n<li>编写软件胜过书写详尽文档；</li>\n<li>用户合作胜过合同谈判；</li>\n<li><p>响应变更更胜过遵循计划.</p>\n<blockquote>\n<p>即我们更重视左边的项的价值，虽左右两边的项都有价值。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>大量的软件工程努力维护和进化现有的软件系统，而由敏捷方法的特性可知，敏捷方法维护的问题有：</p>\n<ul>\n<li>软件交付后的主要困难可能是继续让用户参与到过程中。</li>\n<li>保持开发团队的持续性，因没有参考文档可循，若一个敏捷开发团队解散了，则 <code>依赖于团队成员理解系统</code> 的 <code>隐式知识</code> 旧丢失了。</li>\n</ul>\n</li>\n<li>混成方法：敏捷方法嵌入来自计划计划驱动式开发的某些技术。</li>\n</ul>\n<h3 id=\"计划驱动开发和敏捷开发\"><a href=\"#计划驱动开发和敏捷开发\" class=\"headerlink\" title=\"计划驱动开发和敏捷开发\"></a>计划驱动开发和敏捷开发</h3><p>计划驱动和敏捷描述如图 2-1 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_2-1.png\" alt=\"图2-1计划驱动和敏捷描述\"></p>\n<center>图 2-1 计划驱动和敏捷描述</center>\n\n<ul>\n<li>敏捷方法：<ul>\n<li>迭代发生在所有活动间。</li>\n</ul>\n</li>\n<li><p>计划驱动方法：</p>\n<ul>\n<li><p>迭代发生在各个活动中，用 <code>正式文件</code> 在软件过程中各阶段间沟通。</p>\n<blockquote>\n<p><code>正式文件</code>：可视化作为各阶段的输出产物。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>在计划驱动和敏捷方法之间得到平衡，必须回答以下一些技术的、人员的和机构方面的问题。<ul>\n<li>详尽的描述和设计 -&gt; <code>计划驱动开发</code></li>\n<li>交互用户并快速取得反馈 -&gt; <code>敏捷开发</code></li>\n<li>开发系统的规模；</li>\n<li>开发的系统类型，如有复杂时序需求的实时系统，通常需要相当详细的设计来实现分析 -&gt; <code>计划驱动开发</code></li>\n<li>预想的系统寿命有多长；</li>\n<li>什么样的技术支持系统开发 (敏捷方法通常依赖于工具，以跟踪设计进化)；</li>\n<li>开发团队的组织情况；</li>\n<li>影响系统开发的文化问题 (传统的工程机构有计划驱动的文化)；</li>\n<li>开发团队的成员专业水平；</li>\n<li>系统是否受制于外部法规 (如联邦的航空管理局 FAA 核准一个安全性要求极高的航空操作软件)；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"极限编程-XP\"><a href=\"#极限编程-XP\" class=\"headerlink\" title=\"极限编程 (XP)\"></a>极限编程 (XP)</h3><ul>\n<li>极限编程所属敏捷方法，它集成了一系列好的编程经验。例如，频繁地软件发布、连续软件改善和客户参与到软件开发团队。</li>\n<li>XP 中，所有的需求都表示为脚本 (称为用户故事情节)，它将直接实现为一系列任务。</li>\n<li>一个 XP 过程，产生了正在开发的系统的一个增量，具体如图 2-2 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_2-2.png\" alt=\"图2-2极限编程的版本循环\"></p>\n<center>图 2-2 极限编程的版本循环</center>\n\n<ul>\n<li>脚本卡是 XP 规划过程的主要输入。<ul>\n<li>开发团队把每个 <code>脚本</code> 拆分成 <code>任务</code>，并估计实现所需人力资源。</li>\n<li>与客户交谈，定义需求，对脚本进行优先权排序。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"极限编程中的测试\"><a href=\"#极限编程中的测试\" class=\"headerlink\" title=\"极限编程中的测试\"></a>极限编程中的测试</h4><ul>\n<li>很多增量开发方法的测试过程是很不规范的。</li>\n<li>为避免一些测试和系统验证方面的问题，XP 方法更加强调测试过程。</li>\n<li>XP 当中测试的关键特性：<ul>\n<li>测试优先的开发 (先写测试程序再写代码)；</li>\n<li>来自脚本的增量式测试开发；</li>\n<li>用户参与测试开发和有效性验证；</li>\n<li>自动测试系统的使用。将测试写成了可执行的组件，该测试组件是独立的。自动测试框架即是这样的一个系统。譬如 Eclipse 的 JUnit，JUnit 用于单元测试。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结对编程\"><a href=\"#结对编程\" class=\"headerlink\" title=\"结对编程\"></a>结对编程</h4><p>结对编程是有一些质量效益，但却不足以抵消它的开销。但信息共享在结对编程是很重要的，因为当有团队成员离开时，它降低了项目风险。</p>\n<h3 id=\"敏捷项目管理\"><a href=\"#敏捷项目管理\" class=\"headerlink\" title=\"敏捷项目管理\"></a>敏捷项目管理</h3><ul>\n<li>项目管理的标准：计划驱动。</li>\n<li><p>适合增量开发 (敏捷方法) 的管理方法 (框架)：<code>Scrum</code>。</p>\n<ul>\n<li><p>Scrum 的管理过程如图 2-3 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_2-3.png\" alt=\"图2-3Scrum的管理过程\"></p>\n<center>图 2-3 Scrum 的管理过程</center>\n</li>\n<li><p>Scrum 的 3 个阶段</p>\n<ul>\n<li>规划纲要阶段：建立大致的项目目标和设计软件体系结构。</li>\n<li>冲刺循环阶段：<ul>\n<li>每个循环开发出一个系统增量；</li>\n<li>每个循环为一个计划单元，其中的工作有评估、特征选择和开发、软件实现；</li>\n</ul>\n</li>\n<li>项目结束阶段：完善文档，如系统帮助和用户手册。</li>\n<li><p>冲刺循环阶段的特征：</p>\n<ul>\n<li>冲刺有固定长度，一般是 2-4 周，在 XP 过程中对对应与一个系统版本的开发。</li>\n<li>规划的起点，即积压的任务 (Backlog)，也是项目中要完成的工作清单。</li>\n<li>评估阶段：Backlog 需经过审查，并对它们进行优先级排序和风险指派。</li>\n<li>选择阶段：项目所有成员都要参加，和用户一起选择冲刺循环中要开发的特性和功能。</li>\n<li>开发阶段：达成共识将组织进行软件开发，每一天团队开发成员参与段时间会议，回顾开发过程，若有必要重新安排工作。且在此阶段开发团队是隔离于客户和机构的。</li>\n<li><p>冲刺循环阶段结束，对已做工作复查并交付给用户。</p>\n<blockquote>\n<p>所有交流都是通过 <code>Scrum Master</code> 进行，SM 可理解为调解人。体现了 Scrum 的思想，即整个团队被赋予决定的权利。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Scrum 适合分布式的开发环境。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"可扩展的敏捷方法\"><a href=\"#可扩展的敏捷方法\" class=\"headerlink\" title=\"可扩展的敏捷方法\"></a>可扩展的敏捷方法</h3><ul>\n<li>敏捷方法的开发是为同一房间办公与交流的小团队开发使用，因此常被用于小型系统开发。</li>\n<li>可伸缩的敏捷方法也可适用于开发大型系统。</li>\n<li>大型、小型系统开发的区别 (可理解为可扩展的敏捷方法应用于大型系统的挑战)。<ul>\n<li>大型系统经常由独立的、交互的子系统组成。不同团队独立开发不同子系统，且团队可能在不同地点或不同时区工作。</li>\n<li>大型系统包含了一系列的已存在的系统并与它们进行交互，许多系统需求关注这种交互。</li>\n<li>当一个系统由多个系统集成产生时，开发工作中重要部分是系统配置而不是原始代码开发。这不一定与增量式开发和频繁的系统集成兼容。</li>\n<li>大型系统通常具有不同的信息持有者，将不同的信息持有者加入开发流程中是必要的。</li>\n</ul>\n</li>\n<li>伸缩的敏捷方法的两个观点<ul>\n<li>照搬放大，即关注如何将这些方法应用到哪些 <code>小团队</code> 无法开发的 <code>大型项目</code> 中。</li>\n<li>渗透，即关注如何将敏捷方法介绍 <code>推广</code> 到拥有多年开发经验的 <code>大机构</code> 中。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"叁-需求工程\"><a href=\"#叁-需求工程\" class=\"headerlink\" title=\"叁 需求工程\"></a>叁 需求工程</h2><ul>\n<li><p>学习目标</p>\n<ul>\n<li>了解用户需求、系统需求；</li>\n<li>了解功能需求、非功能需求；</li>\n<li>如何在软件需求文档中 <code>机构需求</code>；</li>\n<li>了解需求工程活动的内容及他们之间的关系；</li>\n<li>了解需求管理.</li>\n</ul>\n</li>\n<li><p>一些概念</p>\n<ul>\n<li><p>用户需求：用自然语言加图的形式给出的关于系统 <code>需要提供</code> 哪些服务及系统操作受到哪些 <code>声明的约束</code>。</p>\n<blockquote>\n<p>高层 (抽象) 的概要需求。</p>\n</blockquote>\n</li>\n<li><p>系统需求：详细给出系统 <code>将要提供</code> 的服务及系统所受到的约束。系统的需求文档也称功能描述。</p>\n<blockquote>\n<p>系统应提供哪些服务的详细描述。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"功能需求与非功能需求\"><a href=\"#功能需求与非功能需求\" class=\"headerlink\" title=\"功能需求与非功能需求\"></a>功能需求与非功能需求</h3><ul>\n<li>功能需求<ul>\n<li>描述系统所提供的功能或服务。</li>\n<li>若是用户需求，就要用可以被系统用户理解的一种抽象方法描述功能需求。</li>\n<li>更具体的功能性系统需求则需要详细地描述系统功能、异常、输入和输出。</li>\n</ul>\n</li>\n<li><p>非功能需求</p>\n<ul>\n<li>指那些不直接关系到系统向用户提供的具体服务的一类需求。简言之，他们对 <code>系统实现</code> 定义了 <code>约束</code>，如 I/O 设备的能力、与其他系统接口的数据的表示。</li>\n<li><p>非功能性系统需求：通常会从总体上规范或约束系统的特性。</p>\n<blockquote>\n<p>若一个非功能系统需求没有满足则可能使整个系统无法使用。</p>\n</blockquote>\n</li>\n<li><p>非功能需求分类：表明非功能需求或是来源于所要求的软件特性 (产品需求)，或是来源于开发软件的机构 (机构需求)，或是来源于外部来源。如图 3-1 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_3-1.png\" alt=\"图3-1非功能需求的类型\"></p>\n<center>图 3-1 非功能需求的类型</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"软件需求文档\"><a href=\"#软件需求文档\" class=\"headerlink\" title=\"软件需求文档\"></a>软件需求文档</h3><ul>\n<li>如表 3-1 所示，是基于 IEEE 标准的需求文档的结构。<ul>\n<li>需求文档中内容的详细程序，取决于所要开发的系统的类型及所使用的开发过程。</li>\n</ul>\n</li>\n</ul>\n<center>表 3-1 需求文档结构</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">章节</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">绪言</td>\n<td style=\"text-align:left\">定义文档的读者对象，说明版本的修正历史，包括新版本为什么要创建，每个版本间的变更内容的概要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">引言</td>\n<td style=\"text-align:left\">描述为什么需要该系统，简要描述系统的功能，解释系统是如何与其他系统协同工作的。描述该系统在机构总体业务目标和战略目标中的位置和作用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">术语</td>\n<td style=\"text-align:left\">定义文档中的技术术语和词汇。假设文档读者是不具有专业知识和经验的人</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户需求定义</td>\n<td style=\"text-align:left\">这一部分要描述系统应该提供的服务以及非功能系统需求，该描述可以使用自然语言、图表或者其他各种客户能理解的标记系统。产品和过程必须遵循的标准也要在此定义</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">系统体系结构</td>\n<td style=\"text-align:left\">这一部分要对待建系统给出体系结构框架，该体系结构要给出功能在各个模块中的分布。能被复用的结构中组件要用醒目方式示意出来</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">系统需求描述</td>\n<td style=\"text-align:left\">这一部分要对功能和非功能需求进行详细描述。如有必要，对非功能需求要再进一步描述，例如定义与其他系统间的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">系统模型</td>\n<td style=\"text-align:left\">这一部分要提出一个或多个系统模型，以表达系统组件、系统以及系统环境之间的关系。这些模型可以是对象模型、数据流模型和语义数据模型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">系统进化</td>\n<td style=\"text-align:left\">这一部分要描述系统基于的基本设想和定位以及硬件和用户需求改变时所要做的改变。这部分对系统设计人员来说是有用的，因为这有助于他们避免一些设计决策，这些决策可能会限制未来系统的变更</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">附录</td>\n<td style=\"text-align:left\">这一部分要提供与开发的应用有关的详细、专门的信息。该附录的例子是硬件和数据库的描述，硬件需求定义了系统最小和最优配置，数据库需求定义了系统所用的数据的逻辑结构和数据之间的关系</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">索引</td>\n<td style=\"text-align:left\">可以包括文档的几个索引。除了标准的字母顺序索引外，还可以有图标索引、功能索引等</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h3><ul>\n<li>即在需求文档中写下用户需求和系统需求。<ul>\n<li>用户需求：从用户角度来描述系统功能需求和非功能需求，一般用自然语言、图形叙述。</li>\n<li>系统需求：<ul>\n<li>用户需求的扩展；</li>\n<li>软件工程师开始系统设计的起点；</li>\n<li>解释如何能让系统提供用户需求.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>原则上系统需求应 <code>反描述</code> 系统的 <code>外部行为</code> 和对它的 <code>操作限制</code>，而不是描述系统如何设计、实现。</p>\n<blockquote>\n<p>当然，并不是不提及任何设计信息，这也是不可能的，例如系统初始的体系结构设计。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"自然语言描述\"><a href=\"#自然语言描述\" class=\"headerlink\" title=\"自然语言描述\"></a>自然语言描述</h4><ul>\n<li>在使用自然语言书写需求时，为了尽力 <code>减少误解</code>，应有一些简单的指导原则：<ul>\n<li>设计一个 <code>标准格式</code>，并保证所用的需求定义都遵循此格式书写。</li>\n<li>使用一致性的语言来区分强制性需求和可选性需求。<ul>\n<li>强制性需求：必须支持的，定义时使用 <code>必须</code>。</li>\n<li>可选性需求：不是必要的，定义时使用 <code>应该</code>。</li>\n</ul>\n</li>\n<li>对文本加亮 (粗体、斜体、颜色) 来突出显示关键性需求。</li>\n<li>避免使用专业术语和缩写语 (无法避免时应该在有标注说明)。</li>\n<li>任何情况下，都应尝试把需求原理和每一个用户需求联系起来。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结构化描述\"><a href=\"#结构化描述\" class=\"headerlink\" title=\"结构化描述\"></a>结构化描述</h4><ul>\n<li>使用结构化方法来描述系统需求，则先为需求定义一个或多个的 <code>标准模板</code>，并将模板表示成结构化的表格形式。如表 3-2 所示，是胰岛素泵需求的结构化描述。</li>\n</ul>\n<center>表 3-2 胰岛素泵需求的结构化描述</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目名称</th>\n<th style=\"text-align:left\">胰岛素泵/控制软件/SRS/3.3.2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">功能</td>\n<td style=\"text-align:left\">计算胰岛素剂量；安全的胰岛素水平</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">描述</td>\n<td style=\"text-align:left\">计算所要传输的胰岛素剂量，这是在当前度量的血糖水平处于 3-7 个单位之间这样正常范围之内时的胰岛素计算</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">输入</td>\n<td style=\"text-align:left\">当前血糖读数 (r2)，先前的两个读数 (r0, r1)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">来源</td>\n<td style=\"text-align:left\">来自传感器的当前血糖读数。其他读数来自内存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">输出</td>\n<td style=\"text-align:left\">CompDose：所要传输的胰岛素剂量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">目的地</td>\n<td style=\"text-align:left\">主控制循环</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行动</td>\n<td style=\"text-align:left\">如果血糖水平是稳定的或往下掉或是上升但速率下降，则 CompDose 为 0。若血糖的水平是在上升且上升速率也上升，那么 CompDose 的计算方法是求当前血糖水平和先前血糖水平，再除以 4 并取整。若取整的结果为 0，那么 CompDose 就被设置成可以传输的最小剂量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">需求</td>\n<td style=\"text-align:left\">两个先前的读数，这样血糖变化速率就可以计算出来了</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">前置条件</td>\n<td style=\"text-align:left\">胰岛素池容纳至少是单个传输剂量的最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">后置条件</td>\n<td style=\"text-align:left\">r0 被 r1 替换，然后 r1 被 r2 替换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">副作用</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>标准格式描述功能需求时，应包括下列信息：<ul>\n<li>关于所定义的功能或实体的描述；</li>\n<li>关于输入及输入来源的描述；</li>\n<li>关于输出及输出去向的描述；</li>\n<li>关于计算所需要的信息及系统中所使用的其他实体信息；</li>\n<li>关于所采取的行动的描述；</li>\n<li>如果使用一个功能方法，前置条件、后置条件的设定描述；</li>\n<li>关于操作的副作用，没有则填写无.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"需求工程过程\"><a href=\"#需求工程过程\" class=\"headerlink\" title=\"需求工程过程\"></a>需求工程过程</h3><ul>\n<li>需求工程过程包括4个高层活动：<ul>\n<li>系统可行性研究：评估系统是否对业务有用。</li>\n<li>需求导出和分析：需求发现。</li>\n<li>需求描述：将需求转变为某种标准格式描述。</li>\n<li>需求有效性验证：检验需求是否正确地定义了客户所希望的系统。</li>\n</ul>\n</li>\n<li>在实际需求工程是一个活动相互交错的迭代过程，如图 3-2 体现了这种交错性。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_3-2.png\" alt=\"图3-2需求工程过程的螺旋模型\"></p>\n<center>图 3-2 需求工程过程的螺旋模型</center>\n\n<h3 id=\"需求导出和分析过程\"><a href=\"#需求导出和分析过程\" class=\"headerlink\" title=\"需求导出和分析过程\"></a>需求导出和分析过程</h3><ul>\n<li>反复的过程，也可看做是一种 <code>螺旋式活动</code>。</li>\n<li>需求发现 (需求导出)<ul>\n<li>对准备建立的系统和正使用的系统进行信收集，并从中提取用户需求和系统需求的过程。</li>\n<li>与 <code>信息持有者</code> 通过交谈和观察进行交互，即可使用 <code>用例</code> 和 <code>原型</code> 来帮助对方理解系统。</li>\n</ul>\n</li>\n<li>采访<ul>\n<li>封闭式采访：即信息持有者回答一组 <code>锁定的问题</code>。</li>\n<li>开放式采访：需求工程团队 <code>即兴访问</code>，更深层次了解对方需求是什么。</li>\n</ul>\n</li>\n<li>脚本<ul>\n<li>脚本是对 <code>交互实例片段</code> 的描述。</li>\n<li>脚本开始于一个 <code>交互框架</code>，在导出过程中细节增加，直至产生一完整的交互描述。</li>\n<li>脚本的内容<ul>\n<li>开始部分有一系统和用户期望的描述；</li>\n<li>标准事件流的描述；</li>\n<li>处理错误的描述；</li>\n<li>完成后系统状态的描述.    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用例<ul>\n<li>统一建模语言 (UML) 的基本特征。</li>\n<li>用例的集合代表所有将会在系统需求中出现的交互。过程中的角色可为人、其他系统等。</li>\n<li>UML 对于面向对象模型来说，是一约定俗成的标准，因此基于用例的导出被广泛应用于需求导出中。</li>\n</ul>\n</li>\n<li>深入实际：如图 3-3 所示的需求分析的深入实际方法和原型法。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_3-3.png\" alt=\"图3-3需求分析的深入实际方法和原型法\"></p>\n<center>图 3-3 需求分析的深入实际方法和原型法</center>\n\n<h3 id=\"需求有效性验证\"><a href=\"#需求有效性验证\" class=\"headerlink\" title=\"需求有效性验证\"></a>需求有效性验证</h3><ul>\n<li>有效性检查：任何一组需求都不可避免地要在不同用户之间协商。</li>\n<li>一致性检查：需求不应该彼此冲突。</li>\n<li>完备性检查：需求文档应包括所有系统用户想要的功能和约束。</li>\n<li>真实性检查：检查需求以保证需求能真正实现。</li>\n<li>可检验性检查：检查方法 -&gt; 验证需交付的系统 -&gt; 满足定义的需求。<ul>\n<li>需求评审：主要是错误检查和不一致检查。</li>\n<li>原型建立：提供一可执行的系统模型，客户和最终用户在此基础检查系统。</li>\n<li>测试用例生成。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"需求管理\"><a href=\"#需求管理\" class=\"headerlink\" title=\"需求管理\"></a>需求管理</h3><ul>\n<li>大型软件系统的需求总是在变化的，即开发这些系统需满足某些棘手问题，则这些问题不可能被完全定义。如图 3-4 所示为需求进化的过程。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_3-4.png\" alt=\"图3-4需求进化过程\"></p>\n<center>图 3-4 需求进化过程</center>\n\n<h4 id=\"需求管理规划\"><a href=\"#需求管理规划\" class=\"headerlink\" title=\"需求管理规划\"></a>需求管理规划</h4><ul>\n<li>需求识别：每一需求有 <code>唯一标识码</code>。</li>\n<li>变更管理过程：变更带来的影响和成本的评估活动。</li>\n<li>可追溯策略：<code>策略</code> 定义了需求间和需求与系统设计间的 <code>关系</code>；关系是要记录的，并附有记录的 <code>维护方法</code>。</li>\n<li><p>工具支持</p>\n<ul>\n<li>需求存储</li>\n<li>变更管理：如图 3-5 所示，即变更过程由有效工具来支持。</li>\n<li><p><code>可追溯性</code> 管理：需求间的 <code>关联</code> &lt;- 自然语言处理技术 (NLP)</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_3-5.png\" alt=\"图3-5需求变更管理\"></p>\n<center>图 3-5 需求变更管理</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"需求变更管理\"><a href=\"#需求变更管理\" class=\"headerlink\" title=\"需求变更管理\"></a>需求变更管理</h4><ul>\n<li>问题分析和变更描述：问题或变更 -&gt; 检验有效性 -&gt; 反馈变更请求者 -&gt; 导致两种结果：<ul>\n<li>更加详尽的需求变更、提议；</li>\n<li>取消本次变更.</li>\n</ul>\n</li>\n<li>变更分析和成本计算：需求文档修改、系统设计和实现的成本估算。</li>\n<li>变更实现：与编写程序类似，文档的 <code>可追溯性</code> 即 <code>关联性</code> 是通过最小化外部引用和尽量使之模块化来实现的。</li>\n</ul>\n<h2 id=\"肆-系统建模\"><a href=\"#肆-系统建模\" class=\"headerlink\" title=\"肆 系统建模\"></a>肆 系统建模</h2><ul>\n<li>学习目标<ul>\n<li>如何用图形模型表示软件系统；</li>\n<li>基本的建模角度 (如上下文、交互、结构、行为等)；</li>\n<li>统一建模语言 (UML)；</li>\n<li>模型驱动工程.</li>\n</ul>\n</li>\n<li>系统建模：建立系统抽象模型的过程<ul>\n<li>图形建模；</li>\n<li>形式化建模 (数学模型). </li>\n</ul>\n</li>\n<li>不同角度表述系统 <code>与 第陆章 中的「4+1」视图相仿</code><ul>\n<li><code>外部</code> — 上下文模型：系统上下文；系统环境；</li>\n<li><code>交互</code> — 交互模型：系统与环境之间；系统各组成部分之间；</li>\n<li><code>结构</code> — 结构模型：系统的体系结构；</li>\n<li><code>行为</code> — 行为模型：系统的动态行为和它对事件响应方式.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"上下文模型\"><a href=\"#上下文模型\" class=\"headerlink\" title=\"上下文模型\"></a>上下文模型</h3><ul>\n<li>定义系统边界：定义系统上下文和系统与环境之间的依赖关系。</li>\n<li>上下文模型表示某一环境包括几个其他的自动系统 (忽略子系统之间及待描述的系统与它们之间的关联关系的类型)。</li>\n<li><p>结合业务过程模型 </p>\n<ul>\n<li><p>活动图：如图 4-1 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-1.png\" alt=\"图4-1活动图\"></p>\n<center>图 4-1 活动图</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"交互模型\"><a href=\"#交互模型\" class=\"headerlink\" title=\"交互模型\"></a>交互模型</h3><ul>\n<li>为用户交互建模 -&gt; 识别用户需求。</li>\n<li>为系统各部分之间的交互建模 -&gt; 系统结构能否实现系统所需的功能及其可靠性。</li>\n</ul>\n<h4 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h4><ul>\n<li>用例图：如图 4-2 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-2.png\" alt=\"图4-2用例图\"><br>    <center>图 4-2 用例图</center></p>\n<ul>\n<li>时序图：表示在特定用例中的交互发生顺序。如图 4-3 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-3.png\" alt=\"图4-3时序图\"><br>    <center>图 4-3 时序图</center></p>\n<h3 id=\"结构模型\"><a href=\"#结构模型\" class=\"headerlink\" title=\"结构模型\"></a>结构模型</h3><blockquote>\n<p>课本第 6、18、19 章讲述软件体系结构的不同方面和软件体系结构建模。</p>\n</blockquote>\n<ul>\n<li>静态模型：表示系统设计的结构。</li>\n<li>动态模型：表示系统执行时的构成。</li>\n</ul>\n<h4 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h4><ul>\n<li><p>类图可表示系统中的类和这些类之间的关联。</p>\n<blockquote>\n<p>类与类之间的链接，表示类与类之间具有某种关系。</p>\n</blockquote>\n<ul>\n<li><p>简单类图：如图 4-4 所示。其中一对多关系的类图，类似于语义数据模型，即数据实体、与他们相关的属性。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-4.png\" alt=\"图4-4简单类图\"></p>\n<center>图 4-4 简单类图</center>\n</li>\n<li><p>扩展类图：如图 4-5 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-5.png\" alt=\"图4-5扩展类图\"></p>\n<center>图 4-5 扩展类图</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"泛化\"><a href=\"#泛化\" class=\"headerlink\" title=\"泛化\"></a>泛化</h4><ul>\n<li>推断一些类的成员具有的某些共同特征，针对类的所有成员给出一般性的描述。如图 4-6 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-6.png\" alt=\"图4-6泛化关系\"></p>\n<center>图 4-6 泛化关系</center>\n\n<h4 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h4><ul>\n<li>一个对象 (全体) 可有由其他对象 (部分) 组成。如表示一条病人记录由 Patient 和一个不确定的 Consulation 组成。如图 4-7 所示，表示了一条病人记录由 Patient 和一个不确定的 Consulation 组成。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-7.png\" alt=\"图4-7聚合关系\"></p>\n<center>图 4-7 聚合关系</center>\n\n<h4 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h4><p>如图 4-8 所示，展示了依赖关系。</p>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-8.png\" alt=\"图4-8依赖关系\"></p>\n<center>图 4-8 依赖关系</center>\n\n<h3 id=\"行为模型\"><a href=\"#行为模型\" class=\"headerlink\" title=\"行为模型\"></a>行为模型</h3><ul>\n<li>描述系统运行时的动态行为的模型，表示系统响应于所处环境的刺激所发生或可能发生的事情。</li>\n<li>刺激：<code>数据</code>、<code>事件</code><ul>\n<li>数据：一些数据到达必须由系统处理。</li>\n<li>事件：某些触发系统处理的事件的发生。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据驱动的建模\"><a href=\"#数据驱动的建模\" class=\"headerlink\" title=\"数据驱动的建模\"></a>数据驱动的建模</h4><ul>\n<li><p>数据驱动模型描述一个 <code>动作序列</code>，该动作序列涉及输入数据的处理和相关 <code>输出的产生</code>。</p>\n<blockquote>\n<p><code>输出的产生</code>：指系统的响应。</p>\n</blockquote>\n</li>\n<li><p>处理序列的方法：</p>\n<ul>\n<li><code>时序图</code>：强调系统中的对象。</li>\n<li><code>数据流图</code> (DFD)：关注于功能。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"事件驱动模型\"><a href=\"#事件驱动模型\" class=\"headerlink\" title=\"事件驱动模型\"></a>事件驱动模型</h4><ul>\n<li>事件驱动模型表示系统对内、外部事件的响应方式。</li>\n<li>基于事件的模型表示方法：状态图，表示系统状态和引起状态和引起状态改变的事件。其中状态图的表示如图 4-9 所示。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-9.png\" alt=\"图4-9状态图\"></p>\n<center>图 4-9 状态图</center>\n\n<h3 id=\"模型驱动工程\"><a href=\"#模型驱动工程\" class=\"headerlink\" title=\"模型驱动工程\"></a>模型驱动工程</h3><ul>\n<li>模型驱动工程 (MDE) 起源于模型驱动体系结构 (MDA)，该体系由对象管理组织 (OMG) 提出。</li>\n<li>支持者与反对方：<ul>\n<li><code>支持者</code>：更高的抽象水平上考虑系统，不用关心实现细节，减少出错可能性，加速设计和实现过程，且可复用。</li>\n<li><code>反对方</code>：并不是模型所支持的抽象都是正确的、可实现的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模型驱动体系结构\"><a href=\"#模型驱动体系结构\" class=\"headerlink\" title=\"模型驱动体系结构\"></a>模型驱动体系结构</h4><ul>\n<li>计算独立模型 (CIM) — <code>领域建模</code> — 不同的 CIM 反映系统的不同方面。</li>\n<li>平台独立模型 (PIM) — 表示静态系统结构和系统对内外事件的响应。</li>\n<li>平台特定模型 (PSM) — PIM -&gt; PSM。如图 4-10 所示，为一个复合平台特定模型实例。</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/05/Sofeware-Engineering_4-10.png\" alt=\"图4-10复合平台特定模型\"></p>\n<center>图 4-10 复合平台特定模型</center>\n\n<h4 id=\"可执行-UML：xUML\"><a href=\"#可执行-UML：xUML\" class=\"headerlink\" title=\"可执行 UML：xUML\"></a>可执行 UML：xUML</h4><ul>\n<li>为建立一 UML 可执行子集，模型类型可分为：<ul>\n<li>领域模型：识别出系统的主要关注点，由 UML 的类图定义，包括对象、属性和关联。</li>\n<li>类模型：定义类及它们的属性和操作。</li>\n<li>状态模型：每一状态与一个类相关联，并且用来描述类的生命周期。</li>\n</ul>\n</li>\n</ul>\n","categories":["Reading"],"tags":["软件工程","需求工程","系统建模","UML"]},{"title":"别独自用餐","url":"/2022/10/never-eat-alone.html","content":"<p>人作为群居性动物，自然演变过程让我们有强烈的归属需求。我们既害怕被他人孤立，又有被群体认同的诉求，矛盾对立存在，所以难免会心生焦虑、恐惧社交，但又渴望与人交往。人非孤岛，既然无法逃避人际交往，那么通过 “教科书式” 方法论，刻意练习我们的社交能力很有必要。</p>\n<p>但书本教条终究是冷冰冰的，极大可能掌握了方法技巧，社交能力依然没多少精进。归根结底，任何科学方法都得付诸行动。亲身实践、真诚交友、获得友谊，循环往复积累你的人脉。再具体些，从关系最熟悉的朋友开始吧，思考我能为他人提供什么，动之以情召唤人心，愿你我都能成为受欢迎的人。</p>\n<blockquote>\n<p>补充：推荐一本书籍《<a href=\"https://book.douban.com/subject/35145635/\" target=\"_blank\" rel=\"noopener\">心花怒放的人生</a>》，本书在 “幸福人际” 章节阐述了一些幸福人际交往的价值观念与行动方法，建议互为补充阅读，另外附上 <a href=\"https://www.kofes.cn/2022/07/Live-a-happy-life.html\">思维导图</a> 作为参考。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"思想篇\"><a href=\"#思想篇\" class=\"headerlink\" title=\"思想篇\"></a>思想篇</h2><ul>\n<li>人们合作互助，与所谓的操纵与索取没有半点关系，很少人会计算付出多少或获得多少回报。一旦用这种观点看待人脉的重要性，与他人建立关系便会成为你生活的主旋律。</li>\n<li>在零和游戏中，虽然一方占据了所有利益，但长远来看双方都得不到好处。双赢才是这个联系着的世界不可或缺的东西。</li>\n<li><p>向企业贡献忠诚，企业回馈我们生活保障，这是一种美化了的旧时代奴隶关系。</p>\n<blockquote>\n<p>启示：寻求一种不是对公司的盲目忠诚，而是更私人化的忠诚与慷慨，一种对同事、团队、朋友、客户的忠诚与慷慨。</p>\n</blockquote>\n</li>\n<li><p>关系像是肌肉，使用越频繁，它就越健壮。</p>\n</li>\n<li>对社交资产的运用才会增加社交资产的价值，即关系是需要人为刻意的情感去运营的。</li>\n<li><p>索取前适度慷慨。</p>\n<blockquote>\n<p>启示：索取前先给予适度慷慨，互相之间帮助则欠下了人情，还人情过程便建立起私交。实际上也是帮助你在跨越社交圈或者阶层时最有力的武器。</p>\n</blockquote>\n</li>\n<li><p>以他人角度谈及一些话题，让双方快速熟络起来，也让对方感受到你的诚意。</p>\n</li>\n<li><p>有机会一定要结识各行各业的人脉，比如饭店老板、房产中介、教培老师等。</p>\n<blockquote>\n<p>启示：强联结/弱联结理论，有人的地方就有江湖，不要小看任何人脉的力量！</p>\n</blockquote>\n</li>\n<li><p>付诸行动：承认恐惧、个人并非个例，每一次都努力做到最好。</p>\n</li>\n<li>克服恐惧方法<ul>\n<li>以社牛为榜样</li>\n<li>学会说话：思想内涵、街头智慧、专业知识都需要修炼提升</li>\n<li>接受心理治疗</li>\n</ul>\n</li>\n<li>与陌生人交流箴言<ul>\n<li>表明立场：冷静了当告诉对方你的想法</li>\n<li>表达情感</li>\n<li>告知目的</li>\n<li>开放问题：把要求包装成一个问题；一般对方是对立面，尽量找一些反对或者不行动的理由，从而反证必须赞同的必要性。</li>\n</ul>\n</li>\n<li><p>避免成为 “社交傻瓜”</p>\n<ul>\n<li>蜻蜓点水式社交。</li>\n<li>豪不掩饰自己的野心，只与上级结交，而忽视同级。</li>\n<li><p>把员工同事当作可随意差遣、帮你完成任务的下属。</p>\n<blockquote>\n<p>仆人式领导，对员工怀有同理心、拥有共情时刻、适时适机示弱。毕竟需要专业的人才成就伟大事业，只要愿景目标一致，其他都是小事。</p>\n</blockquote>\n</li>\n<li><p>不要捧高踩底。</p>\n</li>\n<li>不要追求高效率，类似群发节日祝福、群发朋友圈的行为，显得多没有诚意，还不如不发！</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"技巧篇\"><a href=\"#技巧篇\" class=\"headerlink\" title=\"技巧篇\"></a>技巧篇</h2><ul>\n<li>了解一个人，避免不了去了解他遇到的问题和他的需求，获取答案的途径就是提问与倾听。</li>\n<li>与陌生人建立交情第一步，尝试谈论双方或者对方感兴趣、产生共鸣的话题。</li>\n<li>拜访或初识对方，即使吃了闭门羹不要紧，有机会再见面时要积极心态去面对。</li>\n<li>用你的热情做向导，引领你找到正苦苦寻找的活动或项目，用你的爱好去联系新朋友、维系老朋友。</li>\n<li>时刻了解最新时事；培养合适的兴趣，某些冷门的兴趣会给你带来意想不到的巨大收获。</li>\n<li><p>强联结 v.s. 弱联结</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SocialNetworking-Weak-ties.svg\" alt> 强联系 V.S. 弱联系</p>\n</blockquote>\n<ul>\n<li>强联结：与你做同样的事、跟你待同样环境、获取的信息不相上下的人。</li>\n<li>弱联结：身处不同环境的各色人群，可获得大量不同领域的知识及信息。</li>\n<li>启示：如果高效发展弱联系，让社交边际效用最大化？<ul>\n<li>1）不要蜻蜓点水般认识人</li>\n<li>2）结识 “结构洞” 类型的人</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>学会运用非言语交流</p>\n<ul>\n<li>面带微笑</li>\n<li>保持相对平衡的眼神交流</li>\n<li>舒展手臂，不要交叉手臂相对人家</li>\n<li>点头，身体稍向前倾</li>\n<li>学会与对方肢体接触，比如击掌、握手、拍拍肩膀</li>\n</ul>\n</li>\n<li><p>不要将对话变得无趣，更甚变成个人垄断式的独白。要分享你的热情，但不要将它变成说教。</p>\n</li>\n<li><p>成功的沟通取决于与自己联盟的程度以及和我们聊天对象匹配的 <code>乔哈里窗</code> 的大小。</p>\n<blockquote>\n<p>乔哈里窗理论：对人们公开自己程度大小的归纳整理。</p>\n</blockquote>\n</li>\n<li><p>人性最深处的准则就是希望得到别人的赏识。</p>\n<blockquote>\n<p>启示：毫不吝啬对对方的赞美之词，并开口邀请对方继续聊天或见面（是我的荣幸）。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"把交情由浅变深\"><a href=\"#把交情由浅变深\" class=\"headerlink\" title=\"把交情由浅变深\"></a>把交情由浅变深</h2><ul>\n<li><p>世界有三种东西可以让友情变得更深厚，它们就是 <code>健康</code>、<code>孩子</code> 及 <code>财富</code>。</p>\n<blockquote>\n<p>理论依据：马斯洛需求层次模型</p>\n</blockquote>\n<ul>\n<li>只有在满足了必须物品、安全和性这类处于金字塔底端的需求后，人们才有精力集中于高层次的需求之上。</li>\n<li>低层次需求就涵盖了健康、孩子与财富。</li>\n</ul>\n</li>\n<li><p>帮助他人实现最基本需求，让它们有机会在金字塔上更上一层楼，相当于帮助他人完成了两件大事。</p>\n<blockquote>\n<p>比如：关注他人健康、关注他人孩子的读书状况、或是给别人一份赚钱机会。</p>\n</blockquote>\n</li>\n<li><p>面对陌生人，或者许久没有联系的朋友，生日或者纪念日，是破冰行动或者营造交谈话题的灵药。</p>\n<blockquote>\n<p>即使口头不说，人们还是很在意自己的生日。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数字时代的联系\"><a href=\"#数字时代的联系\" class=\"headerlink\" title=\"数字时代的联系\"></a>数字时代的联系</h2><ul>\n<li><p>信任 = 包容度 + 脆弱性 + 责任心 + 公正度</p>\n<ul>\n<li>包容度：不要对某事或个人打磨成光滑的平面，边缘最好保持粗糙。即还原事情本身、或表现真实自己。</li>\n<li>脆弱性：学会适时适机示弱；敢于把失败暴露在公众面前。</li>\n<li>责任心：<ul>\n<li>对自己负责：坚持吾日三省吾身，时刻反省以追求更完善自我。</li>\n<li>对他人负责：你要对任何带有你名字的事物负 100% 的责任，没有借口！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要给自己的计划留点空白，即留出适当放松的时间，去公园散步、约下老同学老同事喝茶等，总之做一些平日少做或者不会去做的事，即使当时看起来在做无用功，但长期来看受益匪浅。</p>\n</li>\n</ul>\n<h2 id=\"付出就会有回报\"><a href=\"#付出就会有回报\" class=\"headerlink\" title=\"付出就会有回报\"></a>付出就会有回报</h2><ul>\n<li>终身学习，无限进步。让别人在组织边界内重新定义你以及你的工作。但前提是你得重新审视、重新定义自己，不要给固定的要求限制你。</li>\n<li>工作做得再优秀，要学会营销自己。</li>\n<li>创建个人品牌，营销自己，也树立了一种个人事业。<ul>\n<li>别人听到或者看到你名字时会想起什么？</li>\n<li>你能提供什么服务？</li>\n<li>找一个最大化发挥它们作用的地方。</li>\n</ul>\n</li>\n<li>你所拥有的这一切思想、经历都是由所接触的人共同促进而成的，即使这些东西是我们亲身经历所得，或通过书籍、电影、音乐、绘画等获得，它们背后都是由人创造出来的。</li>\n<li>下定决心，社交可赋予我们更多，开始积累你的知识、经验以及人脉，为理想目标努力前行吧！</li>\n</ul>\n","categories":["Reading"],"tags":["职场","同理心","人脉","社牛"]},{"title":"图文并茂详解 JVM 核心技术","url":"/2022/08/Thinking-in-JVM.html","content":"<ul>\n<li>JVM 的知识体系包括内存管理机制、虚拟机执行子系统、程序编译与代码优化等，即使它们各部分相互独立、没有必然前后依赖关系，但作为初学者通篇学习难度还是较大的。</li>\n<li>知识既成体系，那么总有它的躯干主线及枝叶部分。本笔记作用是对 JVM 建立一种宏观认知，比如运行时数据区域特征、内存分配、内存回收、垃圾收集算法、垃圾收集器以及类加载机制等，是我们必要掌握的。深入学习 JVM 底层执行原理，有助于我们了解 Java 程序运行本质，对于编译优化以及虚拟机调优也具有启发性意义。</li>\n<li>最后，温馨提示各位朋友，本文大部分内容是基于周志明老师的《深入理解 Java 虚拟机（第三版）》总结整理的，若有讲解含糊或者错误之处请参阅原书（错误之处也请朋友帮忙指正哈）。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"JVM运行时数据区域\"><a href=\"#JVM运行时数据区域\" class=\"headerlink\" title=\"JVM运行时数据区域\"></a>JVM运行时数据区域</h2><ul>\n<li>Java 虚拟机（Java Virtual Machine，JVM）在执行 Java 程序过程中会把它所管理的内存划分为若干不同的数据区域。</li>\n<li><p>这些区域各有用途以及各自创建和销毁的时间。比如，有的区域随着虚拟机进程的启动而存在，有些区域以用户线程的启动而创建、结束而销毁。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-Runtime-DataArea.svg\" alt>  JVM 运行时数据区域（JDK 1.7)</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><ul>\n<li>程序计数器，可看作是当前线程所执行字节码的行号指示器。若执行的是 Java 方法，则记录正在执行的虚拟机字节码指令的地址；若执行的是本地方法则为空。</li>\n<li>Java 的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，任何时刻一个处理器 （多核心处理器是内核）只会执行一条线程中的指令，当某个线程的时间片消耗完毕会自动切换至下一个线程继续执行。</li>\n<li>为此，确保线程切换后能恢复正确的执行位置，每条线程都需要拥有一个独立的程序计数器，以保存当前线程的执行位置，我们称这类内存区域为 <code>线程私有的内存</code>。</li>\n</ul>\n<h3 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h3><ul>\n<li><p>Java 虚拟机栈：<code>线程的私有内存</code>。每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-Runtime-DataArea-Frame.svg\" alt> Java 方法执行时内存模型</p>\n</blockquote>\n</li>\n<li><p>栈帧结构</p>\n<ul>\n<li>操作数栈：字节码执行时使用的栈结构。</li>\n<li>局部变量表：用于定义方法中的局部变量，实际上局部变量表在 class 文件中就已定义好了。</li>\n<li>常量池引用：当前方法调用其他方法时，能够从运行时常量池中找到对应的符号引用，然后将符号引用转换为直接引用，以调用对应方法。这也叫做动态链接。</li>\n<li>方法出口：方法该如何结束（抛出异常或是正常返回）。</li>\n</ul>\n</li>\n<li><p>模拟虚拟机栈的运作流程</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-Runtime-DataArea-Frame-Demo.svg\" alt> 虚拟机栈运作流程</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 主方法执行后会依次执行三个方法再返回结果</span></span><br><span class=\"line\"><span class=\"comment\">// a() -&gt; b() -&gt; c() -&gt; 返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = a();</span><br><span class=\"line\">\t\tSystem.out.println(res);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> b(); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">b</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> c(); &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>该区域可能抛出以下异常：</p>\n<ul>\n<li><p>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常。</p>\n<blockquote>\n<p>比如无限递归。</p>\n</blockquote>\n</li>\n<li><p>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</p>\n</li>\n</ul>\n</li>\n<li><p>可以通过 <code>-Xss</code> 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK 1.5+ 默认为 1M：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xss2M HackTheJava</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</li>\n<li>本地方法一般是用其它语言（C / C++  / 汇编语言）编写的，且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</li>\n</ul>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><ul>\n<li>所有线程共享的内存区域，虚拟机启动时创建。</li>\n<li><code>所有对象</code> 和 <code>数组</code> 都在这里分配内存，是垃圾收集的主要区域（GC 堆，Garbage Collected Heap）。</li>\n<li>现代的垃圾收集器基本都是采用 <code>分代收集算法</code>，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：<ul>\n<li>新生代（Young Generation）</li>\n<li>老年代（Old Generation）</li>\n</ul>\n</li>\n<li><p>堆不需要连续内存（不要求物理上连续的内存空间，逻辑连续即可），并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。可通过 <code>-Xms</code> 和 <code>-Xmx</code> 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xms1M -Xmx2M HackTheJava</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li><p>所有线程共享的内存区域，用于存放已被加载的 <code>类信息</code>、<code>常量</code>、<code>静态变量</code>、<code>编译时生成的常量池</code> 等数据。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-Runtime-DataArea-Method.svg\" alt> 方法区结构</p>\n</blockquote>\n</li>\n<li><p>在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等则放入堆中。</p>\n<ul>\n<li>为了更容易管理方法区，从 JDK 1.8 开始，移除永久代并把方法区移至元空间，它位于本地内存中，而非虚拟机内存。</li>\n<li>方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。</li>\n</ul>\n</li>\n<li>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</li>\n<li>HotSpot 虚拟机把它当成 <code>永久代</code> 来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h3 id=\"元空间\"><a href=\"#元空间\" class=\"headerlink\" title=\"元空间\"></a>元空间</h3><ul>\n<li>类的元信息被存储在元空间（Metaspace）中，元空间没有使用对堆内存，而是使用与堆内存不相连的本地内存区域。</li>\n<li><p>理论上，系统可使用内存有多大，元空间就有多大，为此不会出现永久代存在时的内存溢出问题。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-Runtime-DataArea-MetaArea.svg\" alt> JVM 运行时数据区域（JDK 1.8）</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><ul>\n<li>运行时常量池是方法区的一部分。</li>\n<li>Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。</li>\n<li><p>除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String.intern() -- JDK 1.8</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> 判断这个常量是否存在于常量池 &#123; <span class=\"comment\">// 存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 判断存在内容是引用还是常量 &#123;</span><br><span class=\"line\">        如果是引用，返回引用地址指向堆空间对象</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        如果是常量，直接返回常量池常量</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 不存在</span></span><br><span class=\"line\">    将当前对象引用复制到常量池,并且返回的是当前对象的引用</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[举例] String 类利用常量池进行优化</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Case.01: str1、str2 被存放于常量池中</span></span><br><span class=\"line\">\t\tString str1 = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">\t\tString str2 = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">\t\tString str3 = str1 + str2; <span class=\"comment\">// 思考 str3 又是如何形式的？</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(str1 == str2);\t<span class=\"comment\">// true, 地址比较</span></span><br><span class=\"line\">\t\tSystem.out.println(str1.equals(str2));\t<span class=\"comment\">// true, 字符串比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Case.02: 新建对象 str4、str5 存放于堆中（实参还是存放于常量池中）</span></span><br><span class=\"line\">\t\tString str4 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Naive\"</span>);</span><br><span class=\"line\">\t\tString str5 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Naive\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// false, 对象不同内存地址不同</span></span><br><span class=\"line\">\t\tSystem.out.println(str1 == str2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// Case.03</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一次调用 intern 方法会把堆中字符串复制并放入常量池 </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// JDK 1.7 之后不进行复制操作，而是直接修改指向堆中引用</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 第二次调用 intern 方法会直接返回常量池中字符串的地址</span></span><br><span class=\"line\">\t\tString str6 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">\t\tString str7 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"ab\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// true, 对象不同内存地址不同</span></span><br><span class=\"line\">\t\tSystem.out.println(str6.intern() == str7.intern());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><ul>\n<li>直接内存（也称堆外内存）并不是虚拟机运行时数据区的一部分，也不是 JVM 规范中定义的内存区域。</li>\n<li><p>在 JDK 1.4 中新引入了 <code>NIO</code>（New Input/Output）类，它可以使用 Native 函数库直接分配堆外内存，本质上就是 JVM 通过 C/C++ 调用 malloc 函数申请、释放内存。避免了在堆内存和堆外内存之间来回拷贝数据，在一些场景中显著提高性能。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Unsafe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Unsafe</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tregisterNatives();</span><br><span class=\"line\">\t\tsun.reflect.Reflection</span><br><span class=\"line\">\t\t\t.registerMethodsToFilter(Unsafe.class, \"getUnsafe\");</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 饿汉模式</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe theUnsafe = <span class=\"keyword\">new</span> Unsafe();</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@CallerSensitive</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Unsafe <span class=\"title\">getUnsafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( !VM.isSystemDomainLoader(caller.getClassLoader()) )</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不是 JDK 的类不让用</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SecurityException(<span class=\"string\">\"Unsafe\"</span>);   </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> theUnsafe;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">\t\tField unsafeField = Unsafe.class.getDeclaredFields()[0];</span><br><span class=\"line\">\t\tunsafeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\tUnsafe unsafe = (Unsafe) unsafeField.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 申请 4 字节大小的内存空间并返回地址</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> address = unsafe.allocateMemory(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 在对应地址上设定 int 值</span></span><br><span class=\"line\">\t\tunsafe.putInt(address, <span class=\"number\">123</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取对应地址上的 int 值</span></span><br><span class=\"line\">\t\tSystem.out.println(unsafe.getInt(address));</span><br><span class=\"line\">\t\t<span class=\"comment\">// 释放内存</span></span><br><span class=\"line\">\t\tunsafe.freeMemory(address);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>直接内存虽然不受 Java 堆大小限制，但是作为内存还是受限于载体机器的内存大小。配置堆内存最大值时，注意不要大于物理内存的大小限制，不然会导致动态扩展时抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h2 id=\"垃圾收集算法与工具\"><a href=\"#垃圾收集算法与工具\" class=\"headerlink\" title=\"垃圾收集算法与工具\"></a>垃圾收集算法与工具</h2><ul>\n<li>区别于 C/C++ 手动管理内存，Java 会自动管理和释放内存，JVM 提供了一套全自动的内存管理机制。为此，我们学习 JVM 需要关注的问题：<ul>\n<li>对象所占内存何时被回收</li>\n<li>如何判定对象可以被回收</li>\n<li>如何进行回收工作</li>\n</ul>\n</li>\n<li>垃圾收集（Garbage Collection, GC）主要是针对 <code>堆</code> 和 <code>方法区</code> 进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，随线程结束就会消失，因此不需要对这三个区域进行垃圾回收。</li>\n</ul>\n<h3 id=\"对象存活判定算法\"><a href=\"#对象存活判定算法\" class=\"headerlink\" title=\"对象存活判定算法\"></a>对象存活判定算法</h3><h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><ul>\n<li>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</li>\n<li>判断一个对象是否还需要被使用：<ul>\n<li>每个对象包含一个引用计数器，用于存放引用计数。</li>\n<li>每当有一个地方引用此对象时，引用计数 +1。</li>\n<li>当引用失效，引用计数 -1，比如离开了局部变量的作用域或是引用被设定为 <code>null</code>。</li>\n<li>当引用计数为 0 时，表示此对象不可再被使用，即没有任何方法可得到此对象的引用。</li>\n</ul>\n</li>\n<li><p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行 GC。正是因为循环引用的存在，为此 JVM 不使用引用计数算法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTest a = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\t\tTest b = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">\t\ta.instance = b;</span><br><span class=\"line\">\t\tb.instance = a;</span><br><span class=\"line\">\t\ta = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tb = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 假设在此时发生 GC，a 和 b 能否被回收？</span></span><br><span class=\"line\">\t\tSystem.gc();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>答案是否定的。在上述代码中，a 与 b 引用的对象实例互相持有了对象的引用，即使我们把对 a 对象与 b 对象的引用去除之后，由于两个对象还存在互相之间的引用，导致两个 Test 对象无法被回收。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"可达性分析法\"><a href=\"#可达性分析法\" class=\"headerlink\" title=\"可达性分析法\"></a>可达性分析法</h4><ul>\n<li><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p>\n<blockquote>\n<p>以图论角度解释，即没有一条路径可以让 GC Roots 达到这个对象。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Reachability-Analysis.svg\" alt> 可达性分析算法判断对象是否可回收</p>\n</blockquote>\n</li>\n<li><p>JVM 使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p>\n<ul>\n<li>虚拟机栈中局部变量表中引用的对象， 栈帧的局部变量表，即方法得局部变量 。</li>\n<li>本地方法栈中 JNI 中引用的对象。</li>\n<li>方法区中类静态属性引用的对象。</li>\n<li>方法区中的常量引用的对象。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存活最终判断\"><a href=\"#存活最终判断\" class=\"headerlink\" title=\"存活最终判断\"></a>存活最终判断</h4><ul>\n<li>类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</li>\n<li><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现 “自救”。</p>\n<blockquote>\n<p>自救只能进行一次，若回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h4><ul>\n<li><p>方法区回收：对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但比较难实现且性价比不高。</p>\n<ul>\n<li>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</li>\n<li><p>对常量池的回收和对类的卸载。</p>\n<blockquote>\n<p>为了避免内存溢出，在大量使用反射和动态代理的场景都需虚拟机具备类卸载功能。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>类的卸载条件很多，需要满足以下三个条件：</p>\n<blockquote>\n<p>注意：满足了条件也不一定会被卸载。</p>\n</blockquote>\n<ul>\n<li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li>\n<li>加载该类的 ClassLoader 已经被回收。</li>\n<li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"再谈引用类型\"><a href=\"#再谈引用类型\" class=\"headerlink\" title=\"再谈引用类型\"></a>再谈引用类型</h3><ul>\n<li>无论是通过引用计数法判断对象的引用数量，还是通过可达性分析算法判断对象引用链是否可达，判定对象是否存活都与 <code>引用</code> 有关。</li>\n<li><p>四种 <code>引用强度</code> 依次逐渐减弱：</p>\n<ul>\n<li><p>强引用：被强引用关联的对象不会被回收。当 JVM 内存空间不足时，宁愿抛出 OutOfMemoryError 使得程序异常终止，也不随意回收具备强引用的存活对象。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 new 一个新对象的方式来创建强引用</span></span><br><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>软引用：被软引用关联的对象只有在 JVM 内存不足的情况下才会被回收。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 SoftReference 类来创建软引用</span></span><br><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">SoftReference&lt;Object&gt; sf = <span class=\"keyword\">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class=\"line\">obj = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>弱引用：被弱引用关联的对象一定会被回收，即它只能存活到下一次 GC 发生之前。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 WeakReference 类来创建弱引用</span></span><br><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">WeakReference&lt;Object&gt; wf = <span class=\"keyword\">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class=\"line\">obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [小知识] WeakHashMap：若 Map 中 Key 没有其他引用，则自动丢弃此键值对。</span></span><br><span class=\"line\">WeakHashMap&lt;String, String&gt; w = <span class=\"keyword\">new</span> WeakHashMap&lt;&gt;();</span><br><span class=\"line\">String key = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\">w.put(key, <span class=\"string\">\"World\"</span>);</span><br><span class=\"line\">System.out.println(w);\t<span class=\"comment\">// &#123;Hello=World&#125;</span></span><br><span class=\"line\">key = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">System.gc();</span><br><span class=\"line\">System.out.println(w);\t<span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>虚引用：又称为幽灵引用或者幻影引用，可以随时被回收。一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>\n<blockquote>\n<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 PhantomReference 来创建虚引用</span></span><br><span class=\"line\"><span class=\"comment\">// 类似于 new Object()，并不以任何对象接受它</span></span><br><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">PhantomReference&lt;Object&gt; pf = <span class=\"keyword\">new</span> PhantomReference&lt;Object&gt;(obj, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">obj = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"分代收集机制\"><a href=\"#分代收集机制\" class=\"headerlink\" title=\"分代收集机制\"></a>分代收集机制</h4><ul>\n<li>思考：对堆中每一对象都依次判断是否存活再回收，显然效率是很低的，那么是否有更高效的回收机制？</li>\n<li><p>方案：对堆中的对象进行分代管理。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Generational-Recycling.svg\" alt> JVM 堆内存</p>\n</blockquote>\n<ul>\n<li><p>JVM 将堆内存划分为 <code>新生代</code>、<code>老年代</code> 和 <code>永久代</code>。</p>\n<ul>\n<li>新生代：对象存活率低，使用 <code>复制算法</code>。</li>\n<li>老年代：对象存活率高、没有额外空间对它进行分配担保，使用 <code>标记-清除</code> 算法或 <code>标记-整理</code> 算法。</li>\n<li>永久代：HotSpot 虚拟机的特有概念，在 JDK 1.8 之前方法区是采用永久代作为实现的；JDK 1.8 之后，方法区由元空间实现，并使用本地内存，容量大小取决于物理机实际大小。</li>\n</ul>\n</li>\n<li><p>不同分代内存回收机制也存在一些不同之处，以 HotSpot 虚拟机为例，新生代划分为三块，一块较大的 Eden 空间和两块较小的 Survivor 空间（默认比例为 8:1:1）。</p>\n</li>\n</ul>\n</li>\n<li><p>运作原理：对于在多次垃圾回收时都未被判定为可回收对象，可将这部分对象放在一起，让垃圾收集器减少此区域对象的回收频率。</p>\n<ul>\n<li>首先，所有新创建的对象在一开始都会进入新生代的 Eden 区，若为大对象则放入老年代。对新生代区域进行垃圾回收时，对所有新生代区域的对象进行扫描，并回收那些不再使用对象。</li>\n<li>接着，在一次 GC 之后，Eden 区域没有被回收的对象会放入 Survivor 区。一开始 From 和 To 都是空的，在一次 GC 中，所有 Eden 区域存活的对象都会直接被放入到 From 区。最后，From 和 To 会发生一次交换，即目前存放对象的 From 区变为 To 区，而 To 区变为 From 区。</li>\n<li>依次类推，下一次 GC 与上面是一样的，只是此时 From 区域中已存在对象了。因此，在 Eden 区的存活对象复制到 From 区域之后，所有 To 区域中的对象会进行年龄判定，每经历一轮 GC 年龄 + 1，如果对象的年龄大于 15（默认值）则直接进入到老年代，否则移动到 From 区。</li>\n<li><p>新创建对象 -&gt; Eden -&gt; Survivor，并交换 To 与 From 区，不断重复以上步骤。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Generational-Recycling-Demo.svg\" alt> 分代收集运作原理</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>实现细节：根据 JVM 堆内存的各年代特点，采用最适当的垃圾收集算法。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Generational-Recycling-Implement.svg\" alt> 分代收集算法</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Mark-Clear.svg\" alt> 标记-清除算法</p>\n</blockquote>\n<ul>\n<li>在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。</li>\n<li>在清除阶段，会进行对象回收并取消标志位。另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这两个分块。回收对象就是把对象作为分块，连接到被称为 <code>空闲链表</code> 的单向链表，之后进行分配时只需要遍历这个空闲链表，找到分块即可。</li>\n<li>在分配时，程序会搜索空闲链表寻找空间大于等于新对象大小 size 的块 block。如果它找到的块等于 size，会直接返回这个分块；如果找到的块大于 size，会将块分割成大小为 size 与 (block - size) 的两部分，返回大小为 size 的分块，并把大小为 (block - size) 的块返回给空闲链表。</li>\n<li>不足：<ul>\n<li>标记和清除过程效率都不高；</li>\n<li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Mark-Compact.svg\" alt> 标记-整理算法</p>\n</blockquote>\n<ul>\n<li>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</li>\n<li>优点：不会产生内存碎片。</li>\n<li>不足：需要移动大量对象，处理效率比较低。</li>\n</ul>\n<h4 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-Mark-Copying.svg\" alt> 复制算法</p>\n</blockquote>\n<ul>\n<li>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间全部清理。</li>\n<li>不足：只使用了内存的一半。</li>\n<li>现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。<ul>\n<li>在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。</li>\n<li>HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。我们没有办法保证每次回收都只有不多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"HotSpot-算法实现\"><a href=\"#HotSpot-算法实现\" class=\"headerlink\" title=\"HotSpot 算法实现\"></a>HotSpot 算法实现</h3><h4 id=\"根节点枚举\"><a href=\"#根节点枚举\" class=\"headerlink\" title=\"根节点枚举\"></a>根节点枚举</h4><ul>\n<li><p>使用可达性分析算法，从一系列 GCRoot 对象开始，向下搜索引用链，若一个对象没有与任何 GCRoot 对象关联，这个对象就会被判定为可回收对象。</p>\n<p>  这一过程称为 <code>根节点枚举</code>，也就是垃圾回收中的 <code>标记过程</code>。当前所有的垃圾收集器，在标记阶段都必须停止所有 Java 执行线程（Stop the wrold, STW），以保证对象引用状态不会发生变化。</p>\n</li>\n<li><p>HotSpot 虚拟机使用的是准确式 GC，当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，而是维护了一个专门的映射表 <code>OopMap</code> 记录哪些地方存放着对象引用，来快速完成根节点枚举过程。</p>\n<p>  在类加载完成时，HotSpot 就会把对象内某个偏移位置是否为对象引用记录下来，JIT 编译过程中，也会在特定的位置记录下栈和局部变量表中哪些位置是引用。</p>\n</li>\n</ul>\n<h4 id=\"安全点-SafePoint\"><a href=\"#安全点-SafePoint\" class=\"headerlink\" title=\"安全点 SafePoint\"></a>安全点 SafePoint</h4><ul>\n<li><p>在 OopMap 协助下，HotSpot 可快速且准确地完成 GC Roots 枚举。但是 OopMap 内容变化的指令非常多，如果为每一条指令都生成对应的 OopMap，那么将需要大量的额外空间。为每一个操作记录 OopMap 不现实，为此 HotSpot 虚拟机引入了安全点（SafePoint）的概念。</p>\n</li>\n<li><p>SafePoint 是程序中的某些位置，线程执行到这些位置时，线程中的某些状态是确定的，在 SafePoint 可以记录 OopMap 信息，线程在 SafePoint 停顿，虚拟机进行 GC。</p>\n</li>\n<li><p>对于一个线程来说，可处于 SafePoint 上，也可不处于 SafePoint 上。一个线程在 SafePoint 时，它的状态可以安全地被其他 JVM 线程所操作和观测。</p>\n</li>\n<li><p>SafePoint 如何在 GC 发生时让所有线程（不包括执行 JNI 调用的线程）能执行在最近的安全点上停顿下来，这里有两种方案可供选择：</p>\n<ul>\n<li>抢先式中断（Preemptive Suspension）：JVM 需要 GC 时，中断所有线程，让没有到达 SafePoint 的线程继续执行至 SafePoint 并中断。</li>\n<li>主动式中断（Voluntary Suspension）：在内存中设置标志位，各线程执行时主动式去轮询这个标志，发现中断标志为真时就自己中断挂起。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"安全区-SafeRegion\"><a href=\"#安全区-SafeRegion\" class=\"headerlink\" title=\"安全区 SafeRegion\"></a>安全区 SafeRegion</h4><ul>\n<li>SafePoint 无法解决线程未达到 SafePoint 并处于休眠或等待状态的情况，此时引入安全区域（SafeRegion）的概念。</li>\n<li>SafeRegion 是代码中的一块区域或线程的状态。在 SafeRegion 中，线程执行与否不会影响对象引用的状态。线程进入 SafeRegion 会给自己加标记，告诉虚拟机可以进行GC；线程准备离开 SafeRegion 前会询问虚拟机 GC 是否完成。</li>\n</ul>\n<h3 id=\"垃圾收集器的实现\"><a href=\"#垃圾收集器的实现\" class=\"headerlink\" title=\"垃圾收集器的实现\"></a>垃圾收集器的实现</h3><blockquote>\n<p>以下垃圾收集器是基于 JDK 1.7 展开介绍的。</p>\n</blockquote>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-Grabage-Collectors.svg\" alt> HotSpot 虚拟机的垃圾收集器</p>\n</blockquote>\n<ul>\n<li>若 <code>垃圾收集算法</code> 是内存回收的 <code>方法论</code>，则 <code>垃圾收集器</code> 就是内存回收的 <code>具体实现</code>。</li>\n<li><p>上图展示了 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以 <code>配合使用</code>。</p>\n<blockquote>\n<p><code>配合使用</code>：指的是在限定的使用场景，<code>新生代</code> 和 <code>老年代</code> 各有垃圾收集器专职负责工作。</p>\n</blockquote>\n</li>\n<li><p>开始讨论垃圾收集器的语境中，我们需要了解一些名词概念：</p>\n<ul>\n<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程。</li>\n<li>串行（Serial）：指垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集时需要停顿用户程序。</li>\n<li>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。</li>\n<li><p>并发（Concurrency）：指的是垃圾收集器和用户程序同时执行，用户程序继续运行，垃圾收集器运行于另一个 CPU 上。但不一定是并行，可能交替执行。</p>\n<blockquote>\n<p>除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Serial-收集器\"><a href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"></a>Serial 收集器</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-Serial&amp;SerialOld.svg\" alt> Serial + Serial Old 收集器运行示意图</p>\n</blockquote>\n<ul>\n<li>Serial 翻译为串行，也就是说它以串行的方式执行。</li>\n<li>它是 <code>单线程</code> 的收集器，只会使用一个线程进行垃圾收集工作。</li>\n<li>它是 <code>Client</code> 场景下默认的新生代收集器，因为在该场景下内存一般来说不会很大。它收集 100-200 MB 垃圾的停顿时间可以控制在 100 毫秒内，只要不太频繁停顿，时间是可接受的。</li>\n<li>优点：简单高效，在单个 CPU 环境下，由于没有线程交互开销，因此拥有最高的单线程收集效率。</li>\n</ul>\n<h4 id=\"ParNew-收集器\"><a href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"></a>ParNew 收集器</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-ParNew.svg\" alt> ParNew + Serial Old 收集器运行示意图</p>\n</blockquote>\n<ul>\n<li>它是 Serial 收集器的 <code>多线程</code> 版本。</li>\n<li>它是 <code>Server</code> 场景下默认的新生代收集器，除性能原因外，它还能与 CMS 收集器配合使用。</li>\n</ul>\n<h4 id=\"Parallel-Scavenge-收集器\"><a href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"></a>Parallel Scavenge 收集器</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-ParallelScavenge.svg\" alt> Parallel Scavenge + Parallel Old 收集器运行示意图</p>\n</blockquote>\n<ul>\n<li><p>与 ParNew 一样是 <code>多线程</code> 收集器。</p>\n</li>\n<li><p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为 <code>吞吐量优先</code> 收集器。吞吐量本质是求得 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值。</p>\n<script type=\"math/tex; mode=display\">\n吞吐量 = \\frac{运行用户代码的时间}{(运行用户代码时间 + 垃圾收集时间)}</script></li>\n<li><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。</p>\n<blockquote>\n<p>若需要缩短停顿时间，是以牺牲吞吐量和新生代空间来换取的。新生代空间变小，回收目标减少，但回收变得频繁，间接导致吞吐量下降。 </p>\n</blockquote>\n</li>\n<li><p>通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小、Eden 区与 Survivor 区的比例、晋升老年代对象年龄等细节参数了。JVM 会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最合适的停顿时间或最大吞吐量。</p>\n</li>\n</ul>\n<h4 id=\"Serial-Old-收集器\"><a href=\"#Serial-Old-收集器\" class=\"headerlink\" title=\"Serial Old 收集器\"></a>Serial Old 收集器</h4><ul>\n<li>Serial 收集器的老年代版本，也是给 <code>Client</code> 场景下的虚拟机使用。</li>\n<li>在 Server 场景下：<ul>\n<li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）与 Parallel Scavenge 收集器搭配使用。</li>\n<li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Parallel-Old-收集器\"><a href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"></a>Parallel Old 收集器</h4><ul>\n<li>Parallel Scavenge 收集器的老年代版本。</li>\n<li>在注重吞吐量以及 CPU 资源敏感的场合，可优先考虑 Parallel Scavenge + Parallel Old 组合。</li>\n</ul>\n<h4 id=\"CMS-收集器\"><a href=\"#CMS-收集器\" class=\"headerlink\" title=\"CMS 收集器\"></a>CMS 收集器</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-CMS.svg\" alt> CMS 收集器运行示意图</p>\n</blockquote>\n<ul>\n<li>CMS：Concurrent Mark Sweep，Mark Sweep 指的是 <code>标记-清除</code> 算法。</li>\n<li><p>CMS 运作过程可分为以下四个流程：</p>\n<ul>\n<li><code>初始标记</code>：仅是标记一下 GC Roots 能直接关联到的对象，需要停顿用户线程，但速度很快。</li>\n<li><code>并发标记</code>：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿用户线程。</li>\n<li><code>重新标记</code>：修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿用户线程。</li>\n<li><p><code>并发清除</code>：不需要停顿。</p>\n<blockquote>\n<p>在整个过程中耗时最长的并发标记和并发清除过程中，支持并发，收集器线程与用户线程一起工作。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>吞吐量低：低停顿时间以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li>\n<li><p>无法处理浮动垃圾，可能出现 Concurrent Mode Failure，触发 Full GC。</p>\n<blockquote>\n<p><code>浮动垃圾</code>：指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，为此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，此时 JVM 将临时启用 Serial Old 来替代 CMS。<br><code>Concurrent Mode Failure</code>：执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p>\n</blockquote>\n</li>\n<li><p>标记-清除算法导致的空间碎片，往往出现老年代空间有剩余，但无法找到足够大的连续空间来分配当前对象，不得不提前触发一次 Full GC。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"G1-收集器\"><a href=\"#G1-收集器\" class=\"headerlink\" title=\"G1 收集器\"></a>G1 收集器</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-HotSpot-G1.svg\" alt> G1 收集器运行示意图</p>\n</blockquote>\n<ul>\n<li>G1：Garbage-First，它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</li>\n<li><p>G1 把堆划分成多个大小相等的独立区域（Region），继续保留新生代和老年代的概念，但新生代和老年代不再 <code>物理隔离</code>。</p>\n<ul>\n<li><p>Region：从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-GC-G1-Region.svg\" alt> Region 角色扮演</p>\n</blockquote>\n<ul>\n<li>垃圾回收分为 Minor GC、Major GC 以及 Full GC，它们分别对应新生代、老年代和整个堆内存的垃圾回收。</li>\n<li>G1 巧妙绕开这些约定，将 Java 堆内存划分为 2048 个大小相同且独立的 Region 块，每个块实际大小根据堆内存大小而定，整体控制在 [1 MB, 32 MB] 且满 $2^n$。</li>\n<li>每个 Region 根据需要自由决定扮演哪个角色（Eden / Survivor / 老年代），然后根据对应角色采用不同回收策略。</li>\n<li>此外，G1 还额外存在一个 Humongous 区域，专门用于存放大对象（其大小一般超过 Region 容量一半）。</li>\n</ul>\n</li>\n<li><p>这种划分方法带来了很大的灵活性，使得 <code>可预测的停顿时间模型</code> 成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个 <code>优先列表</code>，每次根据允许的收集时间，优先 <code>回收价值最大</code> 的 Region。</p>\n<blockquote>\n<p>Tips：Garbage-First 名称的由来。</p>\n</blockquote>\n</li>\n<li><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做 <code>可达性分析</code> 的时候就可以 <code>避免全堆扫描</code>。</p>\n</li>\n</ul>\n</li>\n<li><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p>\n<ul>\n<li><code>初始标记</code>：仅是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li>\n<li><code>并发标记</code>：从 GC Root 开始对堆中对象进行 <code>可达性分析</code>，找出存活对象，该阶段耗时较长，但可与用户程序并发执行，不需要停顿。</li>\n<li><code>最终标记</code>：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li>\n<li><code>筛选回收</code>：首先对各个 Region 中的 <code>回收价值和成本进行排序</code>，根据用户所期望的 GC 停顿时间来制定回收计划。可自由选择任意、多个 Region  构成回收集合，然后将回收集合中存活对象复制到空 Region 中，在对回收集合执行全部清理。此阶段涉及存活对象移动，必须暂停用户线程，且由多个收集器线程并行完成。</li>\n</ul>\n</li>\n<li><p>具备如下特点：</p>\n<ul>\n<li><code>分代收集</code>：堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代。而 G1 可以不依赖其他收集器，直接对新生代和老年代一起回收。</li>\n<li><code>空间整合</code>：整体来看是基于 <code>标记-整理算法</code> 实现的收集器，从局部 (两个 Region 之间) 上来看是基于 <code>复制算法</code> 实现的，这意味着运行期间不会产生内存空间碎片。</li>\n<li><code>可预测的停顿</code>：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"垃圾收集器总结\"><a href=\"#垃圾收集器总结\" class=\"headerlink\" title=\"垃圾收集器总结\"></a>垃圾收集器总结</h4><ul>\n<li><p>综上所述，7 种垃圾收集器大致的细节差异，如下表所示：</p>\n  <table>\n      <thead>\n          <tr>\n              <th>收集器</th>\n              <th>架构模式</th>\n              <th>分代收集</th>\n              <th>运行方式</th>\n              <th>线程环境</th>\n              <th>适用场景</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>Serial</td>\n              <td>Client</td>\n              <td>新生代</td>\n              <td>串行</td>\n              <td>单线程</td>\n              <td>--</td>\n          </tr>\n          <tr>\n              <td>ParNew</td>\n              <td>Server</td>\n              <td>新生代</td>\n              <td>并行</td>\n              <td>多线程</td>\n              <td>--</td>\n          </tr>\n          <tr>\n              <td>Parallel Scavenge</td>\n              <td>--</td>\n              <td>新生代</td>\n              <td>并行</td>\n              <td>多线程</td>\n              <td>吞吐量优先<br>CPU 资源敏感场合</td>\n          </tr>\n          <tr>\n              <td>Serial Old</td>\n              <td>Client</td>\n              <td>老年代</td>\n              <td>串行</td>\n              <td>单线程</td>\n              <td>--</td>\n          </tr>\n          <tr>\n              <td>Parallel Old</td>\n              <td>--</td>\n              <td>老年代</td>\n              <td>并行</td>\n              <td>多线程</td>\n              <td>吐量优先<br>CPU 资源敏感场合</td>\n          </tr>\n          <tr>\n              <td>CMS</td>\n              <td>Server</td>\n              <td>老年代</td>\n              <td>并发</td>\n              <td>多线程</td>\n              <td>并发收集、低停顿；<br>会产生内存空间碎片</td>\n          </tr>\n          <tr>\n              <td>G1</td>\n              <td>Server</td>\n              <td>新 / 老</td>\n              <td>并发</td>\n              <td>多线程</td>\n              <td>并发收集、低停顿；<br>会产生内存空间碎片</td>\n          </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h2 id=\"内存分配与回收策略\"><a href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"></a>内存分配与回收策略</h2><h3 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h3><h4 id=\"对象优先在-Eden-分配\"><a href=\"#对象优先在-Eden-分配\" class=\"headerlink\" title=\"对象优先在 Eden 分配\"></a>对象优先在 Eden 分配</h4><ul>\n<li>大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。</li>\n</ul>\n<h4 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h4><ul>\n<li>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</li>\n<li>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</li>\n<li><code>-XX:PretenureSizeThreshold</code>：大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。</li>\n</ul>\n<h4 id=\"长期存活对象进入老年代\"><a href=\"#长期存活对象进入老年代\" class=\"headerlink\" title=\"长期存活对象进入老年代\"></a>长期存活对象进入老年代</h4><ul>\n<li>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</li>\n<li><code>-XX:MaxTenuringThreshold</code>：用来定义年龄的阈值。</li>\n</ul>\n<h4 id=\"动态对象年龄判定\"><a href=\"#动态对象年龄判定\" class=\"headerlink\" title=\"动态对象年龄判定\"></a>动态对象年龄判定</h4><ul>\n<li>虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</li>\n</ul>\n<h4 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h4><ul>\n<li>思考：一种极端情况，在一次 GC 后新生代 Eden 区仍然存在大量的对象，然而存活对象会进入到一个 Survivor 区，但此时极有可能超出 Survivor 区的容量，如何处理？</li>\n<li>方案：空间分配担保机制，把 Survivor 区无法容纳的对象直接送到老年代，让老年代进行分配担保。前提是老年代也得装得下才行，为此会发生一次 Minor GC。</li>\n<li>在发生 Minor GC 之前，JVM 先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果：<ul>\n<li>条件成立，Minor GC 可确认是安全的。</li>\n<li>条件不成立，JVM 会查看 HandlePromotionFailure 的值是否允许担保失败，若允许则继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小。<ul>\n<li>如果大于，将尝试着进行一次 Minor GC；</li>\n<li>如果小于，或者 HandlePromotionFailure 的值不允许冒险，则直接进行一次 Full GC。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内存回收策略\"><a href=\"#内存回收策略\" class=\"headerlink\" title=\"内存回收策略\"></a>内存回收策略</h3><h4 id=\"Minor-Major-Full-GC\"><a href=\"#Minor-Major-Full-GC\" class=\"headerlink\" title=\"Minor / Major / Full GC\"></a>Minor / Major / Full GC</h4><ul>\n<li><p><code>Minor GC</code>·：次要垃圾回收，回收新生代。因新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行速度也比较快。</p>\n<ul>\n<li>触发条件：新生代的 Eden 区容量已满时。</li>\n</ul>\n</li>\n<li><code>Major GC</code>：主要垃圾回收，回收老年代。</li>\n<li><code>Full GC</code>：完全垃圾回收，回收老年代和新生代，因老年代对象存活时间长，因此 Full GC 很少执行，执行速度较 Minor GC 慢很多。<ul>\n<li>触发条件 1：每次晋升到老年代的对象平均大小大于老年代剩余空间。</li>\n<li>触发条件 2：Minor GC 后存活的对象超过了老年代剩余空间。</li>\n<li>触发条件 3：永久代内存不足（JDK 1.8 之前）。</li>\n<li>触发条件 4：手动调用 System.gc() 方法。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"System-gc\"><a href=\"#System-gc\" class=\"headerlink\" title=\"System.gc()\"></a>System.gc()</h4><ul>\n<li><p><code>System.gc()</code>：调用 System.gc() 只是 <code>建议</code> 虚拟机执行 Full GC，但虚拟机不一定真正去执行。</p>\n<blockquote>\n<p>不建议使用这种方式，而是让虚拟机管理内存。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"老年代空间不足\"><a href=\"#老年代空间不足\" class=\"headerlink\" title=\"老年代空间不足\"></a>老年代空间不足</h4><ul>\n<li>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</li>\n<li>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。</li>\n<li>除此之外，可以通过 <code>-Xmn</code> 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。</li>\n<li>还可以通过<code>-XX:MaxTenuringThreshold</code> 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</li>\n</ul>\n<h4 id=\"空间分配担保失败\"><a href=\"#空间分配担保失败\" class=\"headerlink\" title=\"空间分配担保失败\"></a>空间分配担保失败</h4><ul>\n<li><code>空间分配担保失败</code>：使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面 <a href=\"#空间分配担保\">空间分配担保</a>。</li>\n</ul>\n<h4 id=\"永久代空间不足\"><a href=\"#永久代空间不足\" class=\"headerlink\" title=\"永久代空间不足\"></a>永久代空间不足</h4><ul>\n<li>在 JDK 1.7 以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放着 Class 类信息、常量、静态变量等数据。</li>\n<li>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</li>\n<li>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</li>\n<li><code>Concurrent Mode Failure</code>：执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</li>\n</ul>\n<h2 id=\"虚拟机类加载机制\"><a href=\"#虚拟机类加载机制\" class=\"headerlink\" title=\"虚拟机类加载机制\"></a>虚拟机类加载机制</h2><h3 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h3><ul>\n<li>Java 类的加载过程指的是加载、验证、准备、解析和初始化这 5 个阶段。</li>\n<li><p>Java 类的生命周期指的是一个 class 文件从加载到卸载的全过程。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-ClassLoading-Lifecycle.svg\" alt> Java 类的生命周期</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"类的加载过程\"><a href=\"#类的加载过程\" class=\"headerlink\" title=\"类的加载过程\"></a>类的加载过程</h3><ul>\n<li>类是在运行期间第一次使时才动态加载的，而不是一次性加载所有类。比如，加载主类才能运行主类的 main 方法；通过反射数据库驱动类以加载数据库驱动。</li>\n<li><p>类会被触发自动完成加载的情况：</p>\n<ul>\n<li>使用 new 创建对象</li>\n<li><p>使用某个类的静态成员（变量或方法）</p>\n<blockquote>\n<p>注意：final 声明的静态变量，在编译时被放到当前类的常量池中，此种情况不会触发自动加载的。</p>\n</blockquote>\n</li>\n<li><p>使用反射获取类信息</p>\n</li>\n<li><p>加载一个类的子类时</p>\n<blockquote>\n<p>子类或者匿名类会另外创建一个 class 文件，以各自存储类的信息。比如 Main$Solution.class、Main$1.class。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 对应 Main$1.class</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 对应 Main$Solution.class</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Solution &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><ul>\n<li><p>Java 代码编译和加载过程</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-ClassLoading-Processing.svg\" alt> Java 代码编译和加载过程</p>\n</blockquote>\n</li>\n<li><p>加载是类加载过程的一个阶段，加载过程 JVM 需要完成以下三件事：</p>\n<ul>\n<li>通过 <code>类的完全限定名称</code> 获取定义该类的 <code>二进制字节流</code>。</li>\n<li>将该字节流表示的静态存储结构转换为 <code>方法区运行时数据结构</code>。</li>\n<li>在堆内存中生成一个代表该类的 Class 对象，作为方法区中该操作类中各种数据的访问入口。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><ul>\n<li>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</li>\n</ul>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li><p>为类变量（static 修饰）分配内存并设置初始值，使用的是 <code>方法区</code> 的内存。</p>\n<blockquote>\n<p>区分各种概念变量：<br><code>类变量</code>：独立于方法之外的变量，用 static 修饰。也称为静态成员变量。<br><code>实例变量</code>：独立于方法之外的变量，不过没有 static 修饰。<br><code>局部变量</code>：类的方法中的变量。</p>\n</blockquote>\n</li>\n<li><p>实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在 <code>堆</code> 中。实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。</p>\n</li>\n<li><p>初始值一般为 0 值，例如下面的 <code>类变量</code> value 被初始化为 0 而不是 123。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果 <code>类变量</code> 是 <code>常量</code>，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> value = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><ul>\n<li>将常量池的 <code>符号引用</code> 替换为 <code>直接引用</code> 的过程。</li>\n<li>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><ul>\n<li><p>在准备阶段，类变量已经赋过一次系统要求的初始值；而在初始化阶段，开发人员通过程序制定的主观计划去初始化类变量和其它资源。</p>\n<blockquote>\n<p>初始化阶段才真正开始执行类中定义的 Java 程序代码。</p>\n</blockquote>\n</li>\n<li><p>初始化阶段是虚拟机执行类构造器 <clinit> 方法的过程。</clinit></p>\n</li>\n<li><p><clinit> 方法是由编译器自动收集类中所有 <code>类变量的赋值语句</code> 和 <code>静态语句块</code> 中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。</clinit></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\ti = <span class=\"number\">0</span>;                <span class=\"comment\">// 给变量赋值可以正常编译通过</span></span><br><span class=\"line\">\t\tSystem.out.print(i);  <span class=\"comment\">// 这句编译器会提示 “非法向前引用”</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于父类的 <clinit> 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。</clinit></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\tA = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> B = A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(Sub.B);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"类初始化时机\"><a href=\"#类初始化时机\" class=\"headerlink\" title=\"类初始化时机\"></a>类初始化时机</h3><h4 id=\"主动引用\"><a href=\"#主动引用\" class=\"headerlink\" title=\"主动引用\"></a>主动引用</h4><ul>\n<li>虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了 <code>有且只有</code> 下列五种情况必须对类进行初始化 (加载、验证、准备都会随之发生)：<ul>\n<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。生成这 4 条指令的常见场景是：<ul>\n<li>使用 new 关键字实例化对象时；</li>\n<li>读取或设置一个类的静态字段时 (被 final 修饰、已在编译期把结果放入常量池的静态字段除外)；</li>\n<li>以及调用一个类的静态方法时。</li>\n</ul>\n</li>\n<li>使用 java.lang.reflect 包的方法对类进行 <code>反射调用</code> 时，如果类没有进行初始化，则需要先触发其初始化。</li>\n<li>当初始化一个类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类 (包含 main() 方法的类)，虚拟机会先初始化这个主类；</li>\n<li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h4><ul>\n<li><p>以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：</p>\n<ul>\n<li><p>通过子类引用父类的静态字段，不会导致子类初始化。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value 字段在 SuperClass 中定义</span></span><br><span class=\"line\">System.out.println(SubClass.value);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SuperClass[] sca = <span class=\"keyword\">new</span> SuperClass[<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.out.println(ConstClass.HELLOWORLD);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"类与类加载器\"><a href=\"#类与类加载器\" class=\"headerlink\" title=\"类与类加载器\"></a>类与类加载器</h3><ul>\n<li>两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。因为每一个类加载器都拥有一个独立的 <code>类名称空间</code>。</li>\n<li>这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的判定结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。</li>\n</ul>\n<h3 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h3><ul>\n<li>从 JVM 角度，只存在两种类加载器：<ul>\n<li>启动类加载器：使用 C++ 实现，是 JVM 自身一部分；</li>\n<li>所有其它类的加载器：使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader。</li>\n</ul>\n</li>\n<li><p>从 Java 开发人员角度，类加载器可划分为：</p>\n<ul>\n<li><p>启动类加载器（Bootstrap ClassLoader）</p>\n<ul>\n<li><p>此类加载器负责将存放在 <code>&lt;JRE_HOME&gt;\\lib</code> 目录中的，或者被 <code>-Xbootclasspath</code> 参数所指定的路径中的，并且是虚拟机识别的 <code>类库</code> 加载到虚拟机内存中。</p>\n<blockquote>\n<p>仅按照文件名识别，比如 rt.jar。名字不符合的类库即使放在 lib 目录中也不会被加载。</p>\n</blockquote>\n</li>\n<li><p>启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。</p>\n</li>\n</ul>\n</li>\n<li>扩展类加载器（Extension ClassLoader）<ul>\n<li>这个类加载器是由 ExtClassLoader (sun.misc.Launcher$ExtClassLoader) 实现的。</li>\n<li>它负责将 <code>&lt;JAVA_HOME&gt;/lib/ext</code> 或者被 <code>java.ext.dir</code> 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。</li>\n</ul>\n</li>\n<li>应用程序类加载器（Application ClassLoader）<ul>\n<li>这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。</li>\n<li>由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li>如下图所示，展示了类加载器之间的层次关系，即一个类加载器首先将类加载请求转发到父类加载器，只有当顶级加载器加载失败时，则逐级原路交还调用者完成加载，称之为双亲委派模型（Parents Delegation Model）。</li>\n<li><p>应用程序是由三种类加载器互相配合从而实现类加载，此外也可以加入自定义的类加载器。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/JVM/CS-Notes-JVM-ClassLoader-ParentsDelegationModel.svg\" alt> 类加载器间的层次关系</p>\n</blockquote>\n<ul>\n<li>该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。</li>\n<li>这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h4><ul>\n<li><p>防止同一个 class 文件重复被加载，且确保了任意一个类在 JVM 中的唯一性。</p>\n<blockquote>\n<p>原理：两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。</p>\n</blockquote>\n</li>\n<li><p>使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。比如 java.lang.Object 存放在 rt.jar 中，若编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以通过编译。</p>\n<ul>\n<li>由于双亲委派模型的存在，在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高。</li>\n<li>因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。</li>\n<li>rt.jar 中的 Object 优先级更高，保证了程序中所有的 Object 都是这个 Object。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li><p>以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：</p>\n<ul>\n<li>先检查类是否已经加载过，如果没有则让父类加载器去加载。</li>\n<li><p>当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// The parent class loader for delegation</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClassLoader parent;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) </span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve) </span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> ( getClassLoadingLock(name) ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tc = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tc = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// ClassNotFoundException if class not found</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// If still not found, then invoke findClass </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// in order to find the class.</span></span><br><span class=\"line\">\t\t\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">\t\t\t\tresolveClass(c);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) </span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a>自定义类加载器</h3><ul>\n<li><p>继承自 java.lang.ClassLoader，用于加载文件系统上的类。</p>\n<ul>\n<li>它首先根据类的全名在文件系统上查找类的字节代码文件 (.class 文件)；</li>\n<li>然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。</li>\n</ul>\n</li>\n<li><p>java.lang.ClassLoader 的 loadClass 方法实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass 方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String rootDir;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileSystemClassLoader</span><span class=\"params\">(String rootDir)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rootDir = rootDir;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) </span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] classData = getClassData(name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (classData == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ClassNotFoundException();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> defineClass(name, classData, <span class=\"number\">0</span>, </span><br><span class=\"line\">\t\t\t\tclassData.length);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassData(String className) &#123;</span><br><span class=\"line\">\t\tString path = classNameToPath(className);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputStream ins = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">\t\t\tByteArrayOutputStream baos = </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> bufferSize = <span class=\"number\">4096</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> bytesNumRead;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((bytesNumRead = ins.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbaos.write(buffer, <span class=\"number\">0</span>, bytesNumRead);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> baos.toByteArray();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">classNameToPath</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rootDir + File.separatorChar</span><br><span class=\"line\">\t\t\t+ className.replace(<span class=\"string\">'.'</span>, File.separatorChar) </span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://book.douban.com/subject/34907497/\" target=\"_blank\" rel=\"noopener\">周志明. 深入理解 Java 虚拟机 [M]. 第三版. 机械工业出版社, 2019</a></li>\n<li><a href=\"https://book.douban.com/subject/24722612/\" target=\"_blank\" rel=\"noopener\">周志明. 深入理解 Java 虚拟机 [M]. 第二版. 机械工业出版社, 2013</a></li>\n<li><a href=\"http://www.cyc2018.xyz/Java/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.html\" target=\"_blank\" rel=\"noopener\">Cyc2018. Java 虚拟机 [OL]. www.cyc2018.xyz</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Er4y1r7as\" target=\"_blank\" rel=\"noopener\">青空の霞光. Java JVM [OL]. bilibili.com</a></li>\n</ul>\n","categories":["Project"],"tags":["JVM","GC","G1","类加载","垃圾回收","垃圾收集"]},{"title":"概率论与数理统计","url":"/2018/09/probability-and-statistics.html","content":"<p>本笔记是备战考研时，跟着张宇老师的概率论课程学习整理所得。且输出本笔记的主要目的是快速构建概率的基础知识体系，以便于日后复习查阅和问题探究。或是更具体的应用场景，如 <code>机器学习</code>、<code>数据挖掘</code>、<code>经济统计</code> 等领域，概率论作为这些领域的 <code>先修课程</code>，理论基础尤为重要。由此，无论是初入门还是温故知新，学习基础学科为必经阶段，不妨选择张宇老师的概率论课程，这不失一种高效的复习方案。</p>\n<p>当然，笔记仅是对知识点的整理和归纳，并不能代表原本知识点的严谨定义。若有更进阶的需求，还请查阅概率论相关教材，或重温课程。</p>\n<a id=\"more\"></a>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.10.04：完成初稿，并更新「如何处理复杂事件」章节 ( 共 4 节 )；</li>\n</ul>\n<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><ul>\n<li><p>推荐盛骤老师的《概率论与数理统计·第4版》和张宇老师的《带你学概率论与数理统计·浙大4版》。</p>\n<blockquote>\n<p>数学并不是自己擅长的科目，出于这样的考虑，故选择了 <code>大学教材</code> 和 <code>考研辅导书</code>，希望借以习题辅导书复习教材内容，以短时间获得最大成效比。</p>\n</blockquote>\n<ul>\n<li>📖 | 书籍 | <a href=\"https://book.douban.com/subject/3165271/\" target=\"_blank\" rel=\"noopener\">盛骤. 概率论与数理统计·第4版. 高等教育出版社</a></li>\n<li>📖 | 书籍 | <a href=\"https://book.douban.com/subject/26630236/\" target=\"_blank\" rel=\"noopener\">张宇. 带你学概率论与数理统计·浙大4版. 北京理工大学出版社</a></li>\n<li>📺 | 视频 | <a href=\"https://www.bilibili.com/video/av14690558?from=search&amp;seid=2673720085936060940\" target=\"_blank\" rel=\"noopener\">张宇. 2018 考研概率论强化课程. bilibili.com</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h2><ul>\n<li><p>以<code>张宇老师</code> 的概率论课程为框架的，围绕 <code>五大问题</code> 展开学习与探讨：在导课部分就明确了 <code>课程体系</code> 和 <code>学习目标</code>，即学习什么、学了怎么用都在浓缩于五大问题当中。</p>\n<ul>\n<li>如何处理复杂事件 $P(A)$；</li>\n<li>如何求分布 $F(x)$、$F(x, y)$；</li>\n<li>如何求数字特征 $EX$、$DX$、$Cov(x, y)$、$\\rho_{x,y}$；</li>\n<li>如何使用极限定理 ( 大样本， $n \\to \\infty$ );</li>\n<li>如何做估计与评价.</li>\n</ul>\n</li>\n<li><p>前 <code>四大问题</code> 主要讨论的是 <code>概率论</code> 部分的内容，<code>最后一问题</code> 则是 <code>数理统计</code> 的内容探讨。</p>\n</li>\n<li>事不宜迟，定下小目标，让自己赶紧行动起来！</li>\n</ul>\n<h2 id=\"壹-如何处理复杂事件\"><a href=\"#壹-如何处理复杂事件\" class=\"headerlink\" title=\"壹 如何处理复杂事件\"></a>壹 如何处理复杂事件</h2><h3 id=\"随机试验与样本空间\"><a href=\"#随机试验与样本空间\" class=\"headerlink\" title=\"随机试验与样本空间\"></a>随机试验与样本空间</h3><h4 id=\"随机试验\"><a href=\"#随机试验\" class=\"headerlink\" title=\"随机试验\"></a>随机试验</h4><ul>\n<li>随机试验，记作 $E$：<ul>\n<li>同条件下可重复。</li>\n<li>试验结果明确可知，且不止一个。</li>\n<li>试验前不知哪个结果会发生。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><code>试验结果</code> 中每一个最简单、最基本 (不可再分的结果) 叫 <code>样本点</code> (基本事件)，记作 $\\omega$。</li>\n<li>$\\omega$ 的全体叫 <code>样本空间</code>，记作 $\\Omega$。</li>\n<li><code>样本空间的子集</code> 叫 <code>随机事件</code>，记作 $A, B, C, …$，即英文大写字母表示。</li>\n<li>子集中：<ul>\n<li>$\\Omega$ 本身为必然事件。</li>\n<li>$\\emptyset$ 为不可能事件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"古典概型\"><a href=\"#古典概型\" class=\"headerlink\" title=\"古典概型\"></a>古典概型</h3><h4 id=\"概念梳理\"><a href=\"#概念梳理\" class=\"headerlink\" title=\"概念梳理\"></a>概念梳理</h4><ul>\n<li>若随机事件 $E$ 的样本空间 $\\Omega$ 中满足下述两种条件，称其为古典概型：<ul>\n<li>存在 <code>有限个</code> 样本点；</li>\n<li>样本点的发生具有 <code>等可能性</code>.</li>\n</ul>\n</li>\n<li>则其概率表达式为：</li>\n</ul>\n<script type=\"math/tex; mode=display\">\nP(A) = \\frac{A中含样本点个数}{\\Omega 中含样本点总数}\n\\tag{1}</script><ul>\n<li><p>对于概率表达式 (1)，我们侧重关注其 <code>计数方法</code>：</p>\n<ul>\n<li><code>穷举法</code>：个数不多时，直接计数即可。</li>\n<li><p><code>集合对应法</code>：</p>\n<ul>\n<li><code>加法原理</code>：完成一件事有 $n$ 类方法，第一类方法有 $m<em>1$ 种方法，第二类有 $m_2$ 种方法，完成此事共 $\\sum</em>{i = 1}^n m_i$ 种方法。</li>\n<li><code>乘法原理</code>：完成一件事有 $n$ 个步骤，第一步有 $m<em>1$ 种方法，第二步有 $m_2$ 种方法，第 $n$ 步有 $m_n$ 种方法，故完成此事共 $\\prod</em>{i=1}^n m_i$ 种方法。</li>\n<li><p><code>排列</code>：从 $n$ 个不同的元素中取出 $m(\\leq n)$ 个元素，并按照一定顺序排成一列，叫做排序。所有排列的个数叫排列数，记作：</p>\n<script type=\"math/tex; mode=display\">\nA_n^m = n(n-1)···(n - m + 1) = \\frac{n!}{(n - m)!}\n\\tag{2}</script><p><code>全排列</code>：当 $m = n$ 时，$A_n^m = \\frac{n!}{0!} = n!$ 称为全排列。</p>\n</li>\n<li><p><code>组合</code>：从 $n$ 个不同元素中取出 $m(\\leq n)$ 个元素，并成一组，叫组合。所有组合个数叫组合数，记作：</p>\n<script type=\"math/tex; mode=display\">\nC_n^m = \\frac{A_n^m}{m!}\n\\tag{3}</script><blockquote>\n<p>注意：按照欧美规范，对于 $A_n^m$ 或是 $C_n^m$，m 和 n 的上下位置与我们平常见的是相反的，国内的教材以相反为主。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>对立事件思想</code>：若研究对象是复杂的，则转而研究对立事件 $\\overline{A}$，故有：</p>\n<script type=\"math/tex; mode=display\">\nn - n_{\\overline{A}} = n_A\n\\tag{4}</script></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"练习巩固\"><a href=\"#练习巩固\" class=\"headerlink\" title=\"练习巩固\"></a>练习巩固</h4><h5 id=\"例题一\"><a href=\"#例题一\" class=\"headerlink\" title=\"例题一\"></a>例题一</h5><ul>\n<li>[题目] 从 0 到 9 个数字中任取 3 个不同数字，求：  <ul>\n<li>$A_1$ = {三个数中不含 0 和 5}</li>\n<li>$A_2$ = {三个数中不含 0 或 5}</li>\n<li>$A_3$ = {三个数中含 0，但不含 5}</li>\n</ul>\n</li>\n<li><p>[分析]  令含数字 0 的事件为 $B_1$，含数字 5 的事件为 $B_2$：</p>\n<ul>\n<li><p>$P(A<em>1) = \\frac{ C_8^3 }{ C</em>{10}^3 } = \\frac{7}{15}$</p>\n</li>\n<li><p>$P(A<em>2) = \\frac{ C</em>{10}^3 - C<em>1^1·C_1^1·C_8^1 }{ C</em>{10}^3 } = \\frac{14}{15}$</p>\n<blockquote>\n<p>$A_2$ 事件可通 <code>对立事件思想</code> 解题，即所有数字取值可能减去三个数中含 0 且含 5 的情况，即 $A_2 = \\overline{ B_1 \\bigcup B_2 } = \\overline{B_1} \\bigcap \\overline{B_2}$。</p>\n</blockquote>\n</li>\n<li><p>$P(A<em>3) = \\frac{ C_1^1·C_8^2 }{ C</em>{10}^3 } = \\frac{7}{30}$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题二\"><a href=\"#例题二\" class=\"headerlink\" title=\"例题二\"></a>例题二</h5><ul>\n<li>[题目] 袋中有 5 球，3 白 2 黑：<ul>\n<li>先后有放回取 2 球，求 $B_1$ = {至少一白球}</li>\n<li>先后无放回取 2 球，求 $B_2$ = {至少一白球} </li>\n<li>任取 2 球，求 $B_3$ = {至少一白球}</li>\n</ul>\n</li>\n<li><p>[分析] 注意 <code>有放回</code> 和 <code>无放回</code> 的情况，是有区别的：</p>\n<ul>\n<li><p>$P(B_1) = \\frac{ C_5^1·C_5^1 - C_2^1·C_2^1 }{ C_5^1·C_5^1 } = \\frac{21}{25}$</p>\n</li>\n<li><p>$P(B_2) = \\frac{ C_5^1·C_4^1 - C_2^1·C_1^1 }{ C_5^1·C_4^1 } = \\frac{9}{10}$</p>\n</li>\n<li><p>通过 <code>对立事件思想</code> 解题，先求 $\\overline{B_3}$ = {任取两球全黑} 的概率：</p>\n<script type=\"math/tex; mode=display\">\nP(\\overline{B_3}) = \\frac{ C_2^2 }{ C_5^2 } = \\frac{1}{10} \\\\\nP(B_3) = 1 - P(\\overline{B_3}) = \\frac{9}{10}</script></li>\n</ul>\n</li>\n<li><p>我们注意到，$P${先后无放回取，至少一白球} 等于 $P${任取两球，至少一白球} 的概率，即 $P(B_2) = P(B_3)$。</p>\n<ul>\n<li><code>得出结论</code>：<code>P{先后无放回} = P{任取}</code></li>\n<li><p><code>证明方式</code>：分别用 <code>先后无放回取两球</code> 的方式和 <code>任取两球</code> 的方式，求 <code>P{两球全黑}</code>，再通过 <code>1 - P{两球全黑}</code> 求 <code>P{至少一白球}</code>： </p>\n<script type=\"math/tex; mode=display\">\n  p(\\text{先后无放回取得两球全黑}) = \n      \\frac{ C_2^1·C_1^1 }{ C_5^1·C_4^1 } = \\frac{1}{10} \\\\\n  p(\\text{任取两球全黑}) =\n      \\frac{ C_2^2 }{ C_5^2 } = \\frac{1}{10}</script><p>  当然，任取涉及先后顺序问题，应该对任取结果作排列，但由于上下同乘一种顺序故可略去。</p>\n<script type=\"math/tex; mode=display\">\n  \\require{cancel}\n  p(\\text{任取两球全黑}) =\n      \\frac{ C_2^2·\\bcancel{A_2^2} }{ C_5^2 ·\\bcancel{A_2^2} } = \\frac{1}{10}</script></li>\n<li><p>通过此结论，计算 <code>先后无放回</code> 抽取问题会有很大帮助。例如，从 100 个球中，先后无放回取 40 个球，则可理解为 <code>一把抓 40 个球</code>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题三\"><a href=\"#例题三\" class=\"headerlink\" title=\"例题三\"></a>例题三</h5><ul>\n<li>[题目] 袋有 100 个球，40 白 60 黑：<ul>\n<li>先后 <code>无放回</code> 取 20 个球，求 $C_1$ = {15 白 5 黑}</li>\n<li>先后 <code>无放回</code> 取 20 个球，求 $C_2$ = {第 20 次取到白球}</li>\n<li>先后 <code>有放回</code> 取 20 个球，求 $C_3$ = {15 白 5 黑}</li>\n<li>先后 <code>有放回</code> 取 20 个球，求 $C_4$ = {第 20 次取到白球}</li>\n</ul>\n</li>\n<li><p>[分析] 根据例题二的结论，无放回抽取可等同于任意抽取。</p>\n<ul>\n<li><p>$P(C<em>1) = \\frac{ C</em>{40}^{15}·C<em>{60}^5 }{ C</em>{100}^{20} }$</p>\n</li>\n<li><p>$P(C<em>2) = \\frac{C</em>{40}^1·99!}{100!} = \\frac{40}{100}$ </p>\n<ul>\n<li>1) 利用 <code>抓阄模型</code> 进行解题。即在本题中可理解为：袋中装有 100 个“灰球”，按概率摸球，则有 40% 可能摸到白球，60% 可能摸到黑球。</li>\n<li><p>2) 在本题中，我们可把 100 个球想象成 100 个位置，从左往右排列，位置与次数匹配。例如，我们求第 20 次取到白球的概率，即往 20 的位置只考虑放入白球的情况，剩余位置自由排列即可，故有 $C_{40}^1·99!$。</p>\n<p><img src=\"/images/illustration/Reading/2018/10/probability-and-statistics_1-1.png\" alt=\"图1-1抓阄模型演示\"></p>\n<center>图1-1 抓阄模型演示</center>\n</li>\n</ul>\n</li>\n<li><p>$P(C<em>3) = C</em>{20}^{15}·(\\frac{40}{100})^{15}·(\\frac{60}{100})^5$</p>\n<ul>\n<li>符合二项分布，记取到白球的次数为 X (实验无非取到黑/白两种球)，则可根据公式求解：<script type=\"math/tex; mode=display\">P\\{X = k\\} = C_n^k·p^k·(1-p)^{n-k}, k = 0, 1, 2, ..., n</script></li>\n</ul>\n</li>\n<li><p>$P(C_4) = \\frac{40}{100}$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"几何概型\"><a href=\"#几何概型\" class=\"headerlink\" title=\"几何概型\"></a>几何概型</h3><h4 id=\"概念梳理-1\"><a href=\"#概念梳理-1\" class=\"headerlink\" title=\"概念梳理\"></a>概念梳理</h4><ul>\n<li><p>定义 $\\Omega$ 是一个可度量的几何区域，每个样本点的发生具有等可能性。即样本点落入 $\\Omega$ 中的某一可度量子区域 $A$ 的可能性大小与 $A$ 的 <code>几何度量</code> 成正比，而与 $A$ 的位置及形状无关。则称其为 <code>几何概型</code>，记作：</p>\n<script type=\"math/tex; mode=display\">\n  P(A) = \\frac{ A 的测度 }{ \\Omega 的测度 }\n  \\tag{5}</script></li>\n</ul>\n<h4 id=\"练习巩固-1\"><a href=\"#练习巩固-1\" class=\"headerlink\" title=\"练习巩固\"></a>练习巩固</h4><h5 id=\"例题一-1\"><a href=\"#例题一-1\" class=\"headerlink\" title=\"例题一\"></a>例题一</h5><ul>\n<li>[题目] 假设我上午 8:00-9:00 时间段内进入教室：<ul>\n<li>求 $A_1$ = {我在 8:30-9:00 时间段进教室} 的概率</li>\n<li>求 $A_2$ = {我恰好在 8:30 进入教室} 的概率</li>\n</ul>\n</li>\n<li><p>[分析] 如图 1-2 所示，设 8:00-9:00 的时间段为单位 1：</p>\n<ul>\n<li><p>$P(A_1) = \\frac{ \\frac12 }{1} = \\frac12$</p>\n</li>\n<li><p>$P(A_2) = \\frac01 = 0$</p>\n<blockquote>\n<p>在 8:30 这一刻所占长度为 “0”，只是数据研究工具的缺陷，致使测不出来。所以 $P(A) = 0$ 并不能推导 $A_2$ 为不可能事件。</p>\n</blockquote>\n<p><img src=\"/images/illustration/Reading/2018/10/probability-and-statistics_1-2.png\" alt=\"图1-2单位1长时间段\"></p>\n<center>图1-2 单位 1 长时间段</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题二-1\"><a href=\"#例题二-1\" class=\"headerlink\" title=\"例题二\"></a>例题二</h5><ul>\n<li>[题目] 君子有约，9:00-10:00 甲、乙在校门口见面，等 20 分钟即离开：<ul>\n<li>求 $B$ = {甲、乙能见面} 的概率</li>\n</ul>\n</li>\n<li><p>[分析] 设甲出现的时间为 $x$，乙出现的时间为 $y$：</p>\n<ul>\n<li><p>则两方的时间差为 $|x - y| \\leq 20, 0 \\leq x \\leq 60, 0 \\leq y \\leq 60$</p>\n<p><img src=\"/images/illustration/Reading/2018/10/probability-and-statistics_1-3.png\" alt=\"图1-3函数图像\"></p>\n<center>图1-3  $|x - y| \\leq 20$ 的函数图像</center>\n</li>\n<li><p>根据上述函数的图像可得 $P(B) = \\frac{ \\int<em>A }{ \\int</em>\\Omega } = \\frac{ 1 - (\\frac{40}{60})^2 }{1} = \\frac59$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题三-1\"><a href=\"#例题三-1\" class=\"headerlink\" title=\"例题三\"></a>例题三</h5><ul>\n<li>[题目] 在 (0, 1) 内随机取两个数，$P{两数之和小于 \\leq \\frac65}$</li>\n<li><p>[解析] 由题意可得，则有：</p>\n<p>  <img src=\"/images/illustration/Reading/2018/10/probability-and-statistics_1-4.png\" alt=\"图1-4函数图像\"></p>\n  <center>图1-4  $x + y \\leq \\frac65$ 的函数图像</center>\n\n<script type=\"math/tex; mode=display\">P\\{ x + y < \\frac65\\} = \\frac{1 - \\frac45*\\frac45*\\frac12}{1} = \\frac{17}{25}</script></li>\n</ul>\n<h3 id=\"重要公式求概率\"><a href=\"#重要公式求概率\" class=\"headerlink\" title=\"重要公式求概率\"></a>重要公式求概率</h3><h4 id=\"概念梳理-2\"><a href=\"#概念梳理-2\" class=\"headerlink\" title=\"概念梳理\"></a>概念梳理</h4><h5 id=\"对立事件\"><a href=\"#对立事件\" class=\"headerlink\" title=\"对立事件\"></a>对立事件</h5><script type=\"math/tex; mode=display\">\nP(A) = 1- P(\\overline{A})\n\\tag{6}</script><h5 id=\"减法公式\"><a href=\"#减法公式\" class=\"headerlink\" title=\"减法公式\"></a>减法公式</h5><script type=\"math/tex; mode=display\">\nP(A - B) = P(A) - P(AB)\n\\tag{7}</script><h5 id=\"加法公式\"><a href=\"#加法公式\" class=\"headerlink\" title=\"加法公式\"></a>加法公式</h5><ul>\n<li><p>一般情况 ( 通用公式 )：</p>\n<script type=\"math/tex; mode=display\">\n  P(A + B) = P(A) + P(B) - P(AB)\n  \\tag{9}</script><script type=\"math/tex; mode=display\">\n  P(A + B + C) = P(A) + P(B) + P(C) - P(AB) - P(AC) - P(BC) + P(ABC)</script></li>\n<li><p>若 $A_1, A_2, …, A_n (n &gt; 3)$ <code>两两互斥 (互不相容)</code>，则可得：</p>\n<script type=\"math/tex; mode=display\">\n  P(A_1 + A_2 + ... + A_n) = \\sum_{i = 1}^n P(A_i)\n  \\tag{6}</script></li>\n<li><p>若 $A_1, A_2, …, A_n (n &gt; 3)$  <code>相互独立</code>，则可得：</p>\n<script type=\"math/tex; mode=display\">\n  P(A_1 + A_2 + ... + A_n) = 1 - P ( \\overline{A_1 + A_2 + ... + A_n} ) \\\\\n   = 1 - P( \\overline{A_1}·\\overline{A_2}·...·\\overline{A_n} ) = 1 - \\prod_{i=1}^n P(\\overline{A_i})\n  \\tag{10}</script><ul>\n<li><code>相互独立</code>：设 $A<em>1, A_2, …, A_n $，若对其中任意有限个 $A</em>{i<em>1}, A</em>{i<em>2}, …, A</em>{i<em>k}$ 都有 $P(A</em>{i<em>1})·P(A</em>{i<em>2})·…·P(A</em>{i_k})$，则称 $A_1, A_2, …, A_n $ 相互独立。  </li>\n<li><code>妇唱夫随</code>：$n$ 个事件相互独立 $\\Longleftrightarrow$ 它们中任意一部分事件换成其各自的对立事件，所得的 $n$ 个新事件也是相互独立的。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/illustration/Reading/2018/10/probability-and-statistics_1-5.png\" alt=\"图1-5上述公式图解\"></p>\n<center>图 1-5 上述公式图解</center>\n\n<h5 id=\"条件概率公式\"><a href=\"#条件概率公式\" class=\"headerlink\" title=\"条件概率公式\"></a>条件概率公式</h5><blockquote>\n<p>标志性词汇：已知…，当…发生了。</p>\n</blockquote>\n<script type=\"math/tex; mode=display\">\nP(A | B) = \\frac{ P(AB) } { P(B) }, P(B) > 0\n\\tag{11}</script><h5 id=\"乘法公式\"><a href=\"#乘法公式\" class=\"headerlink\" title=\"乘法公式\"></a>乘法公式</h5><script type=\"math/tex; mode=display\">\nP(AB) = P(A | B)·P(B) \\\\\nP(AB) = P(B | A)·P(A)\n\\tag{12}</script><p>一般地，推广至 $P(A_1A_2…A_n)$：</p>\n<script type=\"math/tex; mode=display\">\nP(A_1A_2...A_n) = \\\\\nP(A_n | A_1A_2...A_{n-1})·P(A_{n-1} | A_1A_2...A_{n-2})·...P(A_2 | A_1)·P(A_1)\n\\tag{13}</script><h5 id=\"全集分解公式\"><a href=\"#全集分解公式\" class=\"headerlink\" title=\"全集分解公式\"></a>全集分解公式</h5><blockquote>\n<p>也称 <code>全概率公式</code>，已知第一阶段，求第二阶段。</p>\n</blockquote>\n<ul>\n<li><p>引例：设一个村子和三个小偷，小偷分别为 $A_1、A_2、A_3$，B = {村子失窃}</p>\n<ul>\n<li><p>阶段 (I). 什么人去偷：$A_1, A_2, A_3$</p>\n</li>\n<li><p>阶段 (II). 村子失窃，各小偷去偷的概率：$P(B | A_1) = 0, P(B | A_2) = \\frac12, P(B | A_3) = 1$</p>\n</li>\n<li><p>则村子失窃的概率：</p>\n<script type=\"math/tex; mode=display\">P(B) = P(A_1)·P(B | A_1) + P(A_2)·P(B | A_2) + P(A_3)·P(B | A_3) \\\\\n  = \\frac13 * 0 + \\frac13 * \\frac12 + \\frac13 * 1 = \\frac12</script></li>\n</ul>\n</li>\n<li><p>定义与公式，设一随机事件 $E$ 可分两个阶段：</p>\n<ul>\n<li>阶段 (I) $\\bigcup_{i = 1}^n A_i = \\Omega, A_iA_j = \\emptyset (两两互斥), i \\neq j$，则称 $A_1, A_1,…, A_n$ 为 $\\Omega$ 的一个划分，也叫 <code>完备事件组</code>。</li>\n<li><p>阶段 (II) 事件 $B$ 发生的概率：</p>\n<ul>\n<li>$P(B\\Omega) = P(B·(\\bigcup_{i = 1}^n A_i) )$ 为全集分解过程。</li>\n<li><p>$B$ 为第 (II) 阶段，$A_i$ 为第 (I) 阶段。</p>\n<script type=\"math/tex; mode=display\">\nP(B) = P(B\\Omega) = P(B·(\\bigcup_{i = 1}^n A_i) ) = P( B\\bigcap(A_1 + A_2 + ... + A_n) ) \\\\\n= P(BA_1 + BA_2 + ... + BA_n) = \\sum_{i = 1}^n P(BA_i) \\\\\n= \\sum_{i = 1}^n P(B | A_i)·P(A_i)\n\\tag{13}</script></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"贝叶斯\"><a href=\"#贝叶斯\" class=\"headerlink\" title=\"贝叶斯\"></a>贝叶斯</h5><blockquote>\n<p>也称 <code>逆概率公式</code>，已知第二阶段反推第一阶段 ( 执果索因 )。</p>\n</blockquote>\n<ul>\n<li><p>设一随机事件 $E$ 分成两个阶段：</p>\n<ul>\n<li>阶段 (I) $\\bigcup_{j = 1}^n A_j = \\Omega, A_iA_j = \\emptyset (两两互斥), j \\neq i$，则称 $A_1, A_1,…, A_n$ 为 $\\Omega$ 的一个划分，也叫 <code>完备事件组</code>。</li>\n<li><p>阶段 (II) 已知 $B$ 发生了，求 $P(A_j | B)$：</p>\n<ul>\n<li>$P(B | A_j)$ 是已知的。</li>\n<li><p>一个事件分两个阶段，考虑全概率公式。</p>\n<script type=\"math/tex; mode=display\">\nP(A_j | B) = \\frac{ P(A_jB) }{ P(B) }\n= \\frac{\n  P(B | A_j)·P(A_j)\n}{\n  \\sum_{i = 1}^n P(B | A_i)·P(A_i)\n}\n\\tag{14}</script></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"练习巩固-2\"><a href=\"#练习巩固-2\" class=\"headerlink\" title=\"练习巩固\"></a>练习巩固</h4><h5 id=\"例题一-2\"><a href=\"#例题一-2\" class=\"headerlink\" title=\"例题一\"></a>例题一</h5><ul>\n<li>[题目] 有甲、乙两名射击手，轮流独立射击打靶，甲命中的概率为 $\\alpha$，乙命中的概率为 $\\beta$。甲先射击，谁先命中谁获胜，求 $P$ = {甲获胜} 的概率。</li>\n<li><p>[分析] 记 $A_i = {第 i 次命中}, i = 1, 2, …$，则有：</p>\n<ul>\n<li><p>根据独立互斥条件，结合题意可得：</p>\n<script type=\"math/tex; mode=display\">\nP\\{甲获胜\\} = P\\{ A_1 + \\overline A_1 \\overline A_2 A_3 + \\overline A_1 \\overline A_2 \\overline A_3 \\overline A_4 A_5 + ... \\}\n= P(A_1) + P(\\overline A_1 \\overline A_2 A_3) + P(\\overline A_1 \\overline A_2 \\overline A_3 \\overline A_4 A_5) + ... \\\\\n= P(A_1) + P(\\overline A_1)P(\\overline A_2)P(A_3) + P(\\overline A_1)P(\\overline A_2)P(\\overline A_3)P(\\overline A_4)P(A_5) + ... \\\\\n= \\alpha + (1 - \\alpha)(1 - \\beta)\\alpha + (1 - \\alpha)^2(1 - \\beta)^2\\alpha + ... \\\\</script></li>\n<li><p>观察上述式子，我们可设公比 $q = (1 - \\alpha)(1 - \\beta)$，则公式继续往下推演：</p>\n<script type=\"math/tex; mode=display\">\n\\int_n^{\\infty} \\alpha + \\alpha q + \\alpha q^2 + ... + \\alpha q^{n-1}\n= \\int_n^{\\infty} \\frac{\\alpha (1 - q^n)}{1 - q}\n= \\frac{a}{1 - q} = \\frac{a}{1 - (1 - \\alpha)(1 - \\beta)}</script></li>\n</ul>\n</li>\n<li><p>[注意] $P$ = {甲获胜} 的概率：</p>\n<script type=\"math/tex; mode=display\">\n  P\\{乙获胜\\} = 1 - P\\{甲获胜\\} = \\frac{\\beta (1 - \\alpha)}{1 - (1 - \\alpha)(1 - \\beta)}</script><p>  若 $\\alpha = \\beta = p$，则有：</p>\n<script type=\"math/tex; mode=display\">\n  P\\{甲获胜\\}  = \\frac{p}{1 - (1 - p)^2}, 令 \\, p + q = 1, \\, \n  = \\frac{p}{1-q^2} = \\frac{p}{(1 + q)(1 - q)} = \\frac{1}{1 + q} \\\\\n  P\\{乙获胜\\} = 1 - P\\{甲获胜\\} = \\frac{q}{1 + q}</script><p>  由此可见，<strong>先下手为强</strong>。即谁先射击，谁的胜率高。</p>\n</li>\n</ul>\n<h5 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h5><ul>\n<li>[题目] 某彩票每周开奖一次，中奖概率为十万分之一，且每周开奖相互独立。某人每周买一次，坚持十年 ( 每年 52 周 )，则求 $P$ = {此人从未中奖} 的概率。</li>\n<li><p>[分析] 记 $A_i = {第 i 次中奖}, \\, i. = 1, 2, … 52, 且 \\, p = 10^{-5}$，则有：</p>\n<script type=\"math/tex; mode=display\">\n  P\\{此人从未中奖\\} = \n  P\\{ \\overline A_1 \\overline A_2 ... \\overline A_{52} \\} = \n  (1 - 10^{-5})^{52} = 0.9948</script><p>  由此可见，<strong>天上是不会平白无故掉馅饼</strong>。</p>\n</li>\n</ul>\n<h5 id=\"题目三\"><a href=\"#题目三\" class=\"headerlink\" title=\"题目三\"></a>题目三</h5><ul>\n<li><p>10 份报名表， 3 女 7 男，先后无放回抽取，则:</p>\n<ul>\n<li>(1) $A_1$ = {第三次取到女的报名表} 的概率</li>\n<li>(2) $A_2$ = {第三次才取到女的报名表} 的概率</li>\n<li>(3) $A_3$ = {已知前两次均取到男，第三次才取到女} 的概率</li>\n</ul>\n</li>\n<li><p>[分析] </p>\n<ul>\n<li><p>(1) 由题意可知，利用 <code>抓阄模型</code> 进行解题，即使用 <code>绝对概率</code> 求解：</p>\n<script type=\"math/tex; mode=display\">\n  P(A_1) = \\frac{C_3^1 9!}{10!} = \\frac{3}{10}</script></li>\n<li><p>(2) 由题意可知，使用 <code>积事件概率</code> 求解：</p>\n<script type=\"math/tex; mode=display\">\n  记 A_i = \\{第 i 次取到女的报名表\\}, \\,  i = 1,2, ... \\\\\n  则 P(A_2) = P(\\overline A_1 \\overline A_2 A_3) = \n  P(A_3 | \\overline A_1 \\overline A_2 )P(A_2 | \\overline A_1 )P(A_1)\n  \\\\ = \\frac{3}{8} * \\frac{6}{9} * \\frac{7}{10}= \\frac{7}{40}</script></li>\n<li><p>(3) 由题意可知，使用 <code>条件概率</code> 求解：</p>\n<script type=\"math/tex; mode=display\">\n  P(A_3) = P(A_3 | \\overline A_1 \\overline A_2) = \\frac38</script></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"题目四\"><a href=\"#题目四\" class=\"headerlink\" title=\"题目四\"></a>题目四</h5><ul>\n<li><p>[题目] 设两批数量相同的零件，有一批全部合格，另一批 25% 不合格，75% 合格。从两批产品中任取一件，经检验为合格品，放回原处，并从该处再取一件，求这一件为不合格的概率。</p>\n</li>\n<li><p>[分析] 从两批零件中取得不合格的事件，可分为两个阶段：</p>\n<ul>\n<li>(Ⅰ) 选批次：第一批记作 $H_1$，第二批记作 $H_2$。</li>\n<li><p>(Ⅱ) 取零件：合格记作 $A$，不合格记作 $\\overline A$。</p>\n<p>  由题意可知， $P(H_1) = P(H_2) = \\frac12, P(A | H_1) = 1, P(A | H_2) = \\frac34$</p>\n<p>  首先，从两批产品中任取一件零件为合格品的概率，由全概率公式求得：</p>\n<script type=\"math/tex; mode=display\">\n  P(A) = P(A \\Omega) = P(A | H_1)P(H_1) + P(A | H_2)P(H_2) = \\frac78</script><p>  再者，执因索果，已知第一次所取零件为合格品，则选自第一批、第二批的概率由贝叶斯公式可得：</p>\n<script type=\"math/tex; mode=display\">\n  P(H_1 | A) =\n  \\frac{P(AH_1)}{P(A)} = \\frac{P(A | H_1)P(H_1)}{\\frac78} = \\frac47 \\\\\n  P(H_2 | A) = \n  \\frac{P(AH_2)}{P(A)} = \\frac{P(A | H_2)P(H_2)}{\\frac78} = \\frac37</script><p>  于是，设 $C_i = {第二次是从第 i 批中取得零件的}, i = 1, 2$，则有：</p>\n<script type=\"math/tex; mode=display\">\n  P(C_1) = P(H_1 | A) = \\frac47, \\, P(C_2) = P(H_2 | A) = \\frac37 \\\\</script><p>  则第二次从该处取得不合格零件的概率为：</p>\n<script type=\"math/tex; mode=display\">\n  P(\\overline A) =\n  P(\\overline A | C_1)P(C_1) + P(\\overline A | C_2)P(C_2) = \n  0 * \\frac47 + \\frac14 * \\frac 37 = \\frac{3}{28}</script></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"题目五\"><a href=\"#题目五\" class=\"headerlink\" title=\"题目五\"></a>题目五</h5><ul>\n<li>[题目] 设有两箱同种零件，第一箱 50 件，10 件一等品；第二箱 30 件，18 件一等品。先从中随机挑出一箱，再从该箱中先后无放回取出两个零件，求：<ul>\n<li>(1) $P$ = {第一次取到一等品} 的概率</li>\n<li>(2) $Q$ = {在第一次取出的是一等品的条件下，第二次仍取到一等品} 的概率</li>\n</ul>\n</li>\n<li><p>[分析] 从两箱中取得一等品零件的事件，可分为两个阶段：</p>\n<ul>\n<li>(Ⅰ) 选箱子：第一箱记作 $H_1$，第二箱记作 $H_2$。</li>\n<li><p>(Ⅱ) 取零件：第一次取到一等品记作 $B_1$，第二次取到一等品记作  $B_2$。</p>\n<p>  由题意可知， $P(H_1) = P(H_2) = \\frac12, P(B_1 | H_1) = \\frac{10}{50}, P(B_1 | H_2) = \\frac{18}{30}$</p>\n<p>  (1) 由此可得，$P$ = {第一次取到一等品} 的概率为：</p>\n<script type=\"math/tex; mode=display\">\n  P = P(B_1\\Omega) = P(B_1 | H_1)P(H_1) + P(B_1 | H_2)P(H_2) = \n  \\frac{10}{50} * \\frac12 + \\frac{18}{30} * \\frac12 = \\frac{4}{10}</script><p>  (2) 依题意，可使用条件概率公式求 $P$ = {在第一次取出是一等品的条件下，第二次仍取到一等品}：</p>\n<script type=\"math/tex; mode=display\">\n  P(B_2 | B_1) = \\frac{P(B_1B_2)}{P(B_1)} = \n  \\frac{ P(B_1B_2 | H_1)P(H_1) + P(B_1B_2 | H_2)P(H_2) }{\\frac{4}{10}} \\\\\n  = \\frac{10}{4} * (\n      \\frac{10}{50} * \\frac{9}{49} * \\frac12 + \n      \\frac{18}{30} * \\frac{17}{29} * \\frac12\n  ) = 0.486</script><p>  当然，也可以参照例题四的思路解题 ( 贝叶斯 )：</p>\n<script type=\"math/tex; mode=display\">\n  P(H_1 | B_1) = \\frac{ P(B_1 | H_1)P(H_1)}{P(B_1)} = \n  \\frac{ \\frac{10}{50} * \\frac12 }{ \\frac{4}{10} } = \\frac{1}{4}\\\\\n  P(H_1 | B_1) = \\frac{ P(B_1 | H_2)P(H_2)}{P(B_1)} = \n  \\frac{ \\frac{18}{30} * \\frac12 }{ \\frac{4}{10} } = \\frac34 \\\\\n  P(B_2 | B_1) = P(H_1 | B_1) * \\frac{9}{49} + P(H_2 | B_1) * \\frac{17}{29} = 0.486</script></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"贰-如何求分布\"><a href=\"#贰-如何求分布\" class=\"headerlink\" title=\"贰 如何求分布\"></a>贰 如何求分布</h2><h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"随机变量\"><a href=\"#随机变量\" class=\"headerlink\" title=\"随机变量\"></a>随机变量</h4><h4 id=\"分布函数\"><a href=\"#分布函数\" class=\"headerlink\" title=\"分布函数\"></a>分布函数</h4><h5 id=\"离散型随机变量\"><a href=\"#离散型随机变量\" class=\"headerlink\" title=\"离散型随机变量\"></a>离散型随机变量</h5><h5 id=\"连续型随机变量\"><a href=\"#连续型随机变量\" class=\"headerlink\" title=\"连续型随机变量\"></a>连续型随机变量</h5><h3 id=\"常见一维分布\"><a href=\"#常见一维分布\" class=\"headerlink\" title=\"常见一维分布\"></a>常见一维分布</h3><h4 id=\"两点分布\"><a href=\"#两点分布\" class=\"headerlink\" title=\"两点分布\"></a>两点分布</h4><h4 id=\"二项分布\"><a href=\"#二项分布\" class=\"headerlink\" title=\"二项分布\"></a>二项分布</h4><h4 id=\"几何分布\"><a href=\"#几何分布\" class=\"headerlink\" title=\"几何分布\"></a>几何分布</h4><h4 id=\"超几何分布\"><a href=\"#超几何分布\" class=\"headerlink\" title=\"超几何分布\"></a>超几何分布</h4><h4 id=\"泊松分布\"><a href=\"#泊松分布\" class=\"headerlink\" title=\"泊松分布\"></a>泊松分布</h4><h4 id=\"均匀分布\"><a href=\"#均匀分布\" class=\"headerlink\" title=\"均匀分布\"></a>均匀分布</h4><h4 id=\"指数分布\"><a href=\"#指数分布\" class=\"headerlink\" title=\"指数分布\"></a>指数分布</h4><h4 id=\"正态分布\"><a href=\"#正态分布\" class=\"headerlink\" title=\"正态分布\"></a>正态分布</h4><h3 id=\"一维随机变量及其分布函数\"><a href=\"#一维随机变量及其分布函数\" class=\"headerlink\" title=\"一维随机变量及其分布函数\"></a>一维随机变量及其分布函数</h3><h3 id=\"二维随机变量及其分布函数\"><a href=\"#二维随机变量及其分布函数\" class=\"headerlink\" title=\"二维随机变量及其分布函数\"></a>二维随机变量及其分布函数</h3><h2 id=\"叁-如何求数字特征\"><a href=\"#叁-如何求数字特征\" class=\"headerlink\" title=\"叁 如何求数字特征\"></a>叁 如何求数字特征</h2><h3 id=\"数学期望\"><a href=\"#数学期望\" class=\"headerlink\" title=\"数学期望\"></a>数学期望</h3><h3 id=\"方差\"><a href=\"#方差\" class=\"headerlink\" title=\"方差\"></a>方差</h3><h3 id=\"协方差\"><a href=\"#协方差\" class=\"headerlink\" title=\"协方差\"></a>协方差</h3><h3 id=\"相关系数\"><a href=\"#相关系数\" class=\"headerlink\" title=\"相关系数\"></a>相关系数</h3><h2 id=\"肆-如何使用极限定理\"><a href=\"#肆-如何使用极限定理\" class=\"headerlink\" title=\"肆 如何使用极限定理\"></a>肆 如何使用极限定理</h2><h3 id=\"依概率收敛\"><a href=\"#依概率收敛\" class=\"headerlink\" title=\"依概率收敛\"></a>依概率收敛</h3><h3 id=\"极限定理\"><a href=\"#极限定理\" class=\"headerlink\" title=\"极限定理\"></a>极限定理</h3><h4 id=\"大数定律\"><a href=\"#大数定律\" class=\"headerlink\" title=\"大数定律\"></a>大数定律</h4><h4 id=\"中心极限定理\"><a href=\"#中心极限定理\" class=\"headerlink\" title=\"中心极限定理\"></a>中心极限定理</h4><h2 id=\"伍-如何作估计\"><a href=\"#伍-如何作估计\" class=\"headerlink\" title=\"伍 如何作估计\"></a>伍 如何作估计</h2><h3 id=\"总体与样本\"><a href=\"#总体与样本\" class=\"headerlink\" title=\"总体与样本\"></a>总体与样本</h3><h3 id=\"估计方法\"><a href=\"#估计方法\" class=\"headerlink\" title=\"估计方法\"></a>估计方法</h3><h4 id=\"矩估计\"><a href=\"#矩估计\" class=\"headerlink\" title=\"矩估计\"></a>矩估计</h4><h4 id=\"最大似然估计\"><a href=\"#最大似然估计\" class=\"headerlink\" title=\"最大似然估计\"></a>最大似然估计</h4>","categories":["Reading"],"tags":["贝叶斯","全概率","分布函数","数字特征"]},{"title":"任天堂的体验设计：创造不由自主动人心弦的体验","url":"/2022/10/nintendo-experience-design.html","content":"<p>本书的架构就很贴切地阐述了直觉、惊喜以及故事的设计逻辑。开篇时，留空不全的体验设计框架流程图给读者留下了悬念，让我们产生了往下探索的兴趣。然后，通过我们对任天堂经典游戏的直觉认知，徐徐道来讲熟悉的案例故事，引出观点并总结方法论，当我们掌握了一种方法论就相当于补全了一份缺失的流程地图，边学习边游戏，边收集边成长，由此产生愉悦的、惊喜的有趣体验。</p>\n<p>继续发散思维，体验设计不仅仅应用于游戏领域，也可以运用到各类生活场景中。比如策划一项活动、团体讨论方案、传达演示幻灯片、设计一款产品或是培养人才等。想想谁是你要打动的对象，客户、同事、家人、恋人、朋友？寻找一个目标为出发点，跟随本书开启一场体验设计之旅，你将学习到绝妙体验的设计方法论。</p>\n<ul>\n<li><code>直觉设计</code>：让人不由自主地行动</li>\n<li><code>惊喜设计</code>：让人不由自主地沉迷</li>\n<li><code>故事设计</code>：让人不由自如地叙述</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"理论篇\"><a href=\"#理论篇\" class=\"headerlink\" title=\"理论篇\"></a>理论篇</h2><h3 id=\"不由自主行动\"><a href=\"#不由自主行动\" class=\"headerlink\" title=\"不由自主行动\"></a>不由自主行动</h3><ul>\n<li>直觉设计的本质<ul>\n<li>让用户/玩家自发性地体验认知过程。</li>\n<li>让用户/玩家直观理解体验本身。</li>\n<li>符合条件反射的设计。</li>\n</ul>\n</li>\n<li><p>直觉设计的结构</p>\n<ul>\n<li>假设：自发建立“我要xx”的假设。此时玩家不知道假设是否正确。</li>\n<li>尝试：自发发起“试试xx”的行动。此时玩家不知道尝试是否正确。</li>\n<li><p>高兴：自发确认“事实xx” 是对的。此时玩家第一次确信假设和尝试，由此产生愉悦体验。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Intuitive-Design.svg\" alt> 直觉设计的结构</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>比有趣更重要的事情：游戏一开始，玩家并不是因为有趣才玩的，而是不由自主想到了才玩起来的。我们的大脑总是在寻找假设，并尝试进行验证。这种思考方式，可引用认知心理学的“示能”与“能指”来解释。</p>\n<ul>\n<li>示能（Affordance）：环境赋予动物的意义，即 <code>主动去想</code>。通俗解释就是当你看到某些东西时，脑海中浮现出要做什么的念头。</li>\n<li><p>能指（Signifiers）：为传达示能而被特别处理的信息，即 <code>被动联想</code>。比如《超级马里奥》中，马里奥的样子、所处位置、山、云朵等，正是设计师想要传达“向右走”这一示能。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Signifiers-Affordance.svg\" alt> 能指传达示能</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>比起有趣，让玩家知道游戏规则更重要。让玩家迈出冒险第一步，并让 <code>直觉设计</code> 始终引导玩家通往前方冒险。</p>\n</li>\n<li>直觉设计的延续，是设计游戏体验的基本战略，也是游戏的基本构造。<ul>\n<li>直觉设计必定包含高兴，所以玩家的情绪才会通过直觉体验一点点地提高。情绪超过某一临界值，此时玩家才会意识到 <code>有趣</code>。</li>\n<li>不是因为有趣，玩家才会高兴。而是体验产生高兴而觉得有趣。</li>\n</ul>\n</li>\n<li><p>为了达到以上目标，需要将直觉设计连接起来。设计 <code>连接</code> 的要领：</p>\n<ul>\n<li><p>用多久时间让玩家意识到有趣，请用直觉设计填补该段时间，让玩家不断产生高兴情绪。</p>\n<blockquote>\n<p>思考：玩家会对直觉设计产生疲劳和厌倦，如何弥补直觉设计的缺陷？</p>\n</blockquote>\n</li>\n<li><p>每个直觉设计都是简短的。</p>\n</li>\n<li>提高玩家获得愉悦体验的概率。<ul>\n<li>让体验本身变得简单、容易是绝对的条件。</li>\n<li>因为简单、容易，玩家才愿意假设、尝试。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>另一个直觉设计起点：玩家的 <code>共同记忆</code>，将直觉学习与玩家的生活体验连接起来。每当玩家在游戏中解开谜题，就有一种人生得到肯定的感觉。</p>\n</li>\n<li>利用人们的共同点进行直觉设计：<ul>\n<li>神经反射（先天性）：人们大脑和心灵的特性</li>\n<li>共识常识（后天性）：人们共同的记忆</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"不由自主着迷\"><a href=\"#不由自主着迷\" class=\"headerlink\" title=\"不由自主着迷\"></a>不由自主着迷</h3><ul>\n<li><p>初始效应：在体验或学习开始之时，人们的注意力和学习效率是最高的。</p>\n<blockquote>\n<p>启示：活用初始效应，可以有效传达规则信息。</p>\n</blockquote>\n</li>\n<li><p>不断地学习指令或者专业知识，就像被迫无休无止地学习一样，玩家必然会感到疲劳和厌倦。</p>\n<ul>\n<li>“假设”和“尝试”的体验会给玩家带来压力，即不知道假设的正确性，尝试时会感到不安。所以玩家在体验直觉设计时，心情总是在“不安”与“高兴”之间摇摆。</li>\n<li>对于大脑而言，相同的刺激重复多次，反应会慢慢变弱。心理学称之为“心理饱和”或“心理适应”。</li>\n</ul>\n</li>\n<li>回答上述问题：连续的直觉设计让人产生疲劳和厌倦，那么如何弥补直觉设计的缺陷？“惊喜刺激”正式登场！<ul>\n<li>惊喜刺激只是在玩家特定心理状况下发挥作用，比如涉及一些 <code>禁忌</code> 话题。</li>\n<li>惊喜刺激本质在于出乎意料的体验，即意料之中的情节变成意料之外的结果，玩家会被吸引、情绪变得兴奋。</li>\n</ul>\n</li>\n<li><p>出乎玩家意料的体验设计：有意识背叛两种坚信，让意料之外的强烈体验打动玩家的心，消除疲惫与厌倦，让玩家更沉浸游戏当中。</p>\n<ul>\n<li>要点1：对前提的坚信，事先让玩家做出明确的预测，让玩家做出错误预测。 </li>\n<li><p>要点2：对日常的坚信，坚信日常生活中“禁忌不会出现”。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Surprise-Design-Breach-Belief.svg\" alt> 惊喜刺激的原理</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>惊喜设计的结构</p>\n<ul>\n<li>误解：自发做出“要做xx”的假设。让玩家坚信假设是正确的。</li>\n<li>尝试：自发发起”尝试xx”的行动。让玩家坚信尝试是正确的。</li>\n<li><p>惊讶：自发发现”xx错误”的结果，大吃一惊，此刻玩家才意识到假设、尝试是错误的。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Surprise-Design.svg\" alt> 惊喜设计的结构</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>惊喜设计的步骤</p>\n<ul>\n<li>Step.01：掌握玩家疲劳和厌倦的时机</li>\n<li>Step.02：事先构建让玩家产生误解的游戏主题<ul>\n<li>实操难点：让对方对前提产生误解，就必须花很长时间不断地说谎。让玩家对前提的坚信反复落空，适得其反会让玩家失去耐心，因此要注意惊喜设计的节奏。</li>\n<li>有效方法：不要颠覆对前提的坚信，而是打破对日常的坚信，用“禁忌主题”就能令人振奋惊讶。</li>\n</ul>\n</li>\n<li>Step.03：设计包含“禁忌主题”的游戏剧情。</li>\n</ul>\n</li>\n<li><p>10 种的禁忌主题</p>\n<ul>\n<li><p>积极主题：这个体验，描绘的是人类本能欲望吗？</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Surprise-Design-Tabu-Positive.svg\" alt> 积极的禁忌主题</p>\n</blockquote>\n</li>\n<li><p>消极主题：这个体验，是人们想要回避的东西吗？</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Surprise-Design-Tabu-Negative.svg\" alt> 消极的禁忌主题</p>\n</blockquote>\n</li>\n<li><p>侥幸和偶然：这个体验是否让用户下注并祈祷？</p>\n<blockquote>\n<p>为了延长游戏时间，需要有意识地 <code>剥夺</code> 不断努力、一边学习一边冒险的玩家的 <code>认真感</code>。比如让玩家不知不觉追求幸运的心情，在游戏界被称作 “侥幸”。</p>\n</blockquote>\n</li>\n<li><p>个人隐私：这个体验能否体验出个性？</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Surprise-Design-Tabu-Lucky&amp;Privacy.svg\" alt> 侥幸偶然与个人隐私</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>惊喜设计，一边描绘人类出于本能想要的东西或想要回避的东西，又一边让玩家下注、祈祷，最后让玩家彰显个性或荣誉。</p>\n<blockquote>\n<p>通俗来讲，惊喜设计就是让体验持续下去的必要之恶！</p>\n</blockquote>\n</li>\n<li><p>最后，为了让玩家持续体验下去，必然要在连续的直觉设计中穿插惊喜设计。并且，为了讲述怎样的内容、营造绝妙的体验，惊喜穿插的顺序、比例都是需要反复考量与刻意设计的。</p>\n</li>\n</ul>\n<h3 id=\"不由自主叙述\"><a href=\"#不由自主叙述\" class=\"headerlink\" title=\"不由自主叙述\"></a>不由自主叙述</h3><ul>\n<li>如果游戏有意义，应该怎样设计它的体验，以及体验的意义究竟是什么？接下来便有了故事设计。</li>\n<li>首先，我们得弄明白什么是故事？故事，又被称为叙事，由内容情节与故事叙事两个要素构成。<ul>\n<li>内容情节：发生什么</li>\n<li>故事叙述：如何表达，比如文章、声音、影像等表现形式，语言选择，表达顺序等，它们都会影响故事的趣味性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"吸引\"><a href=\"#吸引\" class=\"headerlink\" title=\"吸引\"></a>吸引</h4><ul>\n<li>运用 <code>五感</code> 和 <code>思考</code> 来叙述故事，这对大脑来说是一种很充实的体验，本书把这种体验称之为 <code>吸引</code>。</li>\n<li><p>故事叙述方式探究</p>\n<ul>\n<li>片段式叙述：<ul>\n<li>环境故事：玩家自发地收集分布在环境中的信息，构筑故事。 </li>\n<li>叙述本能：大脑是讲故事的器官，从眼睛、 鼻子、耳朵等感觉器官收集信息片段进行整合加工，与自己的人生经历对照，推测眼前正在发生什么，然后连接上下文，讲述故事。</li>\n</ul>\n</li>\n<li><p>波浪式叙述：</p>\n<ul>\n<li>在故事场景中，用折线图描述信息量多少与趋势变化。信息过多的被动场景，折线上升，反之下降。</li>\n<li>在每个场景中，包含的信息量、主动性与被动性，两种要素构成了 <code>波浪</code>。如此以来，它让叙述的本能对未来的预测变得简单容易，达到与直觉设计相似的效果。</li>\n<li><p>所有故事内容都应具备这样的结构，被称之为 <code>节奏和对比</code> 的主题。那么用该主题制作波浪的理由是什么？</p>\n<ul>\n<li>1）信息量越少，故事越容易被理解</li>\n<li>2）发展容易预想到，很快形成节奏 </li>\n<li>3）让玩家忘记时间，体验就像一连串波浪一样，愉快地摇摆</li>\n</ul>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Story-Design-Wave-Rhythm-and-Contrast.svg\" alt> 沿时间轴呈现出节奏与对比的波浪</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>未来式叙述：在不知道某个信息的真正含义情况下，先提示，然后利用时间差让对方注意到其真实含义。</p>\n<blockquote>\n<p>隐藏真正含义，埋下暗示内容，称为 <code>伏笔</code>。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Story-Design-Foreshadowing.svg\" alt> 伏笔</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h4><ul>\n<li>思考体验的意义是什么？在游戏中，主人公只是虚构的角色，无论主人公成长多少，对玩家对自身都没有任何影响。所以让玩家的成长，才是游戏的意义所在。</li>\n<li><p>收集和重复</p>\n<ul>\n<li>让玩家意识到空缺，然后引导玩家收集、重复。</li>\n<li>在收集过程中，玩家多次重复同样的体验，就会自然而然地成长起来。</li>\n<li>让玩家不厌其烦地重复某种行为，即有节奏地重复，乐此不疲地收集。</li>\n<li><p>让问题处于未解决状态，保持紧张感。 </p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Collect&amp;Repeat.svg\" alt> 收集和重复</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>选择和斟酌</p>\n<ul>\n<li>富贵险中求：低风险低回报，高风险高回报</li>\n<li><p>依靠直觉进行选择和斟酌，完成自己的冒险</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Approach.svg\" alt> 选择和斟酌</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>成长最佳体验</p>\n<ul>\n<li>玩家可调整游戏难度，这是不可或缺的要素。</li>\n<li><p>游戏让玩家觉得“失败是你的错”是必要的。</p>\n<blockquote>\n<p>玩家根据自身能力做出选择，尽自己最大努力，得到最大限度成长。</p>\n</blockquote>\n</li>\n<li><p>游戏只是用巧妙的方法来表扬或贬低玩家，即虚拟世界中被认可尊重或无成本试错。 </p>\n</li>\n<li>对玩家行为好坏给予评价，在游戏业界被称为 <code>反馈</code>。正是有了反馈，玩家才会体会到选择与斟酌的意义。</li>\n</ul>\n</li>\n<li><p>逆转和共鸣：麻烦的同行者</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Reversal&amp;Empathy.svg\" alt> 逆转和共鸣</p>\n</blockquote>\n<ul>\n<li>同行者行为会给玩家带来某种共同的情感，称之为 <code>共鸣</code>。而同行者往往是闹心的主，不时惹麻烦、不断惹恼玩家。为什么麻烦的同行者会让玩家产生共鸣？</li>\n<li>首先，我们要明白共鸣到底是怎样的一种状态。<ul>\n<li>1）玩家对主人公感兴趣</li>\n<li>2）主人公和自己有同样的想法</li>\n<li>3）用憎恨以外的情感产生共鸣</li>\n</ul>\n</li>\n<li><p>故事一开始，玩家只能通过游戏画面观察主人公，此时两者几乎没有建立联系。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Rresonance-1.svg\" alt> 游戏世界的主人公与现实世界的玩家</p>\n</blockquote>\n</li>\n<li><p>而共鸣的第一条件是引起玩家感兴趣，通过做法是比较“残酷”的，给主人公带来麻烦，使其不幸并遭受打击 。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Rresonance-2.svg\" alt> 引起玩家感兴趣</p>\n</blockquote>\n</li>\n<li><p>通过打击主人公，游戏成功地引起了玩家的兴趣。事实上，玩家和主人公各有各的感受。</p>\n<ul>\n<li>玩家：客观感受“主人公很痛苦、悲伤”</li>\n<li><p>主人公：主观感受“我很痛苦、很悲伤”</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Rresonance-3.svg\" alt> 主观与客观感受不统一</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>主观与客观不统一，心情的方向可能是相反的，更不用说达到共鸣效果。不满足共鸣第二条件，所以玩家的心情必须从客观向主观转变。</p>\n<ul>\n<li><p>此时，麻烦的同行者该登场了！麻烦的同行者会妨碍主人公进行冒险、总是做出不可思议的行动。即麻烦的同行者让玩家与主人公的注意力集中于一个点上，更甚情感绑在一起。 </p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Grow-Rresonance-4.svg\" alt> 统一主观与客观感受</p>\n</blockquote>\n</li>\n<li><p>为什么同行者要制作麻烦呢？理由有两个：</p>\n<ul>\n<li>1）同行者有着不断给主人公制作麻烦的宿命，主人公与玩家都不得不关注他。</li>\n<li><p>2）共鸣的第三条件，用憎恨以外的情感产生共鸣。喜欢上你讨厌的人，这种超越讨厌的情感，产生共鸣、真正成长。</p>\n<blockquote>\n<p>体谅他人的烦恼，为什么会做出令他人憎恨的事，通过化解这种矛盾以建立情感。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"意志\"><a href=\"#意志\" class=\"headerlink\" title=\"意志\"></a>意志</h4><ul>\n<li>游戏叙述的是虚拟故事，一切都是为玩家拥有自己意志的体验，换言之，就是让玩家去书写自己的故事。</li>\n<li><p>故事有始有终，为什么故事最后要回到起点？</p>\n<ul>\n<li><p>这种模式通常以“英雄之旅”模型来进行故事设计。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Design-Hero-Travel.svg\" alt> 英雄之旅</p>\n</blockquote>\n</li>\n<li><p>旅行的本质就是关于旅行的体验。通过旅行这种体验，你会成长变成另外一个人，这是旅行的意义。</p>\n</li>\n<li>玩家通过游戏体验发生改变才有意义，比如游戏过程中遇到逆境和混乱也能冷静应对并生存下去、即使偶发性相遇也会互相体谅、温柔相待等，那么请思考此刻回到起点的我与以前的我还是一样的吗？</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"体验设计本质\"><a href=\"#体验设计本质\" class=\"headerlink\" title=\"体验设计本质\"></a>体验设计本质</h3><ul>\n<li>再次回顾三种体验设计<ul>\n<li><code>直觉设计</code>：让人不由自主地行动，假设 -&gt; 尝试 -&gt; 高兴</li>\n<li><code>惊喜设计</code>：让人不由自主地沉迷，误解 -&gt; 尝试 -&gt; 惊讶</li>\n<li><code>故事设计</code>：让人不由自如地叙述，吸引 -&gt; 成长 -&gt; 意志</li>\n</ul>\n</li>\n<li>体验设计的本质：每一种体验设计都传达出情感（喜怒哀乐悲恐惊），一边营造当时情境，一边打动玩家的心。</li>\n<li><p>对三种体验设计的总结</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Nintendo-experience-design/ExperienceDesign-Stoty-Total.svg\" alt> 三种体验设计总结</p>\n</blockquote>\n<ul>\n<li>直觉设计是最基本的体验设计方法<ul>\n<li>它将老一套体验变成自发性体验，帮助用户凭直觉行动、学习。</li>\n<li>它利用人们的共识常识，以及神经反射，实现设计简易容易的体验。</li>\n<li>让所有用户都抱有假设，并进行尝试；让用户自身发现假设是正确的，从而感到高兴。</li>\n</ul>\n</li>\n<li>然而，连续的直觉体验会给用户带来疲劳和厌倦，让体验嘎然而止。为此，为设计让人“不由自主着迷”的体验，就需要惊喜设计。利用对前提的坚信、对日常的坚信，通过改变用户的预期，让用户大吃一惊。</li>\n<li>结合直觉设计与惊喜设计设计方式，刻意创造直观且不让人倦怠的长时间体验之旅。但是，如果体验没有意义，则不会打动用户的心，由此引入故事设计。故事设计吸引想了解情况的用户， 引导其创造自己的故事，使其成长，赋予体验意义。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"体验设计应用\"><a href=\"#体验设计应用\" class=\"headerlink\" title=\"体验设计应用\"></a>体验设计应用</h3><ul>\n<li>体验就是随时间不断流逝的过程，设计过程就是体验设计本身，而非直接创造出“有趣”的结果。</li>\n<li>观察无聊的体验、不顺畅的体验，发现降低体验价值的心理脉络后，重新设计体验，</li>\n<li>如何选择一种体验设计方式<ul>\n<li>如果问题令人费解，请运用直觉设计。</li>\n<li>如果问题让人疲倦，请运用惊喜设计。</li>\n<li>如果问题没有价值，请运用故事设计。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"思考-策划\"><a href=\"#思考-策划\" class=\"headerlink\" title=\"思考/策划\"></a>思考/策划</h4><blockquote>\n<p>问题：如何想出好点子？</p>\n</blockquote>\n<ul>\n<li>对所有人保密、思考哪些话是不能在别人面前讲的。越是暴露个人隐私、越能让自己或者他人感到惊讶和兴奋。</li>\n<li>从思考碎片的共同点中发现对你来说重要的事情。</li>\n<li>讲述一个你失去重要东西、陷入危机的事情。</li>\n</ul>\n<h4 id=\"讨论-引导\"><a href=\"#讨论-引导\" class=\"headerlink\" title=\"讨论/引导\"></a>讨论/引导</h4><blockquote>\n<p>问题：气氛沉重，谁也说不出话来？</p>\n</blockquote>\n<ul>\n<li><p>不谈好的策划，谈没用的策划。</p>\n<blockquote>\n<p>启示：逆向思维，众多没有用的策划，更加印证好的策划。</p>\n</blockquote>\n</li>\n<li><p>把团队的自我认识当作“我们自己的事情”来谈。</p>\n</li>\n<li>回顾过去发言，提出深层含义是什么。<ul>\n<li>从成员提出的意见中、一度被忽略的主张中找出意义，将其作为伏笔，这就是创造故事的引导技巧。</li>\n<li>从成员过去意见中找出重要性，让该成员成为英雄。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"传达-演示\"><a href=\"#传达-演示\" class=\"headerlink\" title=\"传达/演示\"></a>传达/演示</h4><blockquote>\n<p>问题：听众注意力下降如何破解？</p>\n</blockquote>\n<ul>\n<li><p>如何在演示中保持专注？反过来思考，在演示过程中，什么时候听众的注意力最不集中？</p>\n<blockquote>\n<p>无论内容多么充实，无聊的演示都是无聊的。在故事论中，故事内容不是重点，而是故事叙述。</p>\n</blockquote>\n</li>\n<li><p>预告下一张幻灯片的方法：</p>\n<ul>\n<li>提出疑问</li>\n<li>故意把话说到一半</li>\n<li>告诉对方进入总结阶段</li>\n<li>使用连接词</li>\n</ul>\n</li>\n<li>定期插入禁忌主题，或者沉默片刻。</li>\n<li>最后，再展示演示刚开始时放映的幻灯片。让听众获得 <strong>成长的实在感</strong>。</li>\n</ul>\n<h4 id=\"设计产品\"><a href=\"#设计产品\" class=\"headerlink\" title=\"设计产品\"></a>设计产品</h4><ul>\n<li>优先考虑用户的第一次使用，让其觉得产品简单、易用。</li>\n<li><p>通过回归日常的情节设计，将用户从产品中抽离出来。</p>\n<blockquote>\n<p>刻意让体验停止的设计，产品只不过是用户人生变得更美好的配角，使用与否都是用户的自由。</p>\n</blockquote>\n</li>\n<li><p>提供作弊选项，让用户自由选择。</p>\n</li>\n<li>总言之，无论使用什么产品，用户都能凭直觉使用产品，可随时停止，甚至刻意作弊。</li>\n</ul>\n<h4 id=\"培养-管理\"><a href=\"#培养-管理\" class=\"headerlink\" title=\"培养/管理\"></a>培养/管理</h4><ul>\n<li>故意试错、体验错误。</li>\n<li>教授与被教一起体验未知的事情。</li>\n</ul>\n<h2 id=\"实践篇\"><a href=\"#实践篇\" class=\"headerlink\" title=\"实践篇\"></a>实践篇</h2><ul>\n<li>项目背景：以本博客 2.0 升级改造为例，围绕核心内容、个人品牌（独家内容）以及阅读体验三大方面，审视本博客对于个人意义、对于他人的价值，以体验、服务、交互等多种设计思维重新定义及发布个人的博客品牌。</li>\n<li>指导思想：<ul>\n<li>一目了然了解核心内容是什么（直观、亮点）</li>\n<li>为什么他人愿意阅览分享博文（价值、吸引）</li>\n<li>怎么留住读者读下去或读更多（有用、关联）</li>\n</ul>\n</li>\n<li>独家内容：<ul>\n<li>开源项目：暂定计划是幻灯片演讲助手，只需设定好台词，便可一键实现自动演讲、AI 配音、视频录屏的智能化演讲程序。</li>\n<li>产品服务：记事类 App / 记账类 App</li>\n<li>个人相关：计划发布共同成长相关内容，建立深交关系，以激励自身与他人积极前行。</li>\n</ul>\n</li>\n<li>引流计划：不同类别的内容，受众不一样，引流平台、引流方法都应该区别对待。</li>\n</ul>\n","categories":["Reading"],"tags":["直觉","惊喜","故事","任天堂","体验"]},{"title":"讲座 | 如何轻松有效地预处理数据","url":"/2018/11/the-best-way-to-prepare-a-dataset-easily.html","content":"<div class=\"note default\"><p>作者：Siraj Raval<br>课堂：The Best Way to Prepare a Dataset Easily | <a href=\"https://www.bilibili.com/video/av35419601\" target=\"_blank\" rel=\"noopener\">Bilibili</a> | <a href=\"https://www.youtube.com/watch?v=0xVqLJe9_CY\" target=\"_blank\" rel=\"noopener\">Youtube</a><br>源码：llSourcell.Prepare dataset challenge | <a href=\"https://github.com/llSourcell/prepare_dataset_challenge\" target=\"_blank\" rel=\"noopener\">Github</a>  </p></div>\n<p>本课堂的核心是讲述数据分析前夕的数据预处理过程，包括准备数据阶段和处理数据阶段。再具体以实例：通过大脑扫描公共数据集来建模、分析，预测某人是否在冥想。</p>\n<a id=\"more\"></a>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.11.20：重新整理「数据预处理」章节，细化了预处理的细节，且重新整理了预处理的结构；</li>\n</ul>\n<h2 id=\"准备数据\"><a href=\"#准备数据\" class=\"headerlink\" title=\"准备数据\"></a>准备数据</h2><ul>\n<li><code>准备数据阶段</code>：决定使用何种数据，这跟你试图解决的问题相关。</li>\n<li><code>关于数据来源</code>：能使用公共数据集解决的问题，尽量使用公共数据集。若公共数据集无法满足你的需求，引用毛主席的老话：没有条件便自己创造条件。即我们通过网络爬虫形式，把原始网页中的数据扒取下来，自己来 “创造” 数据集。<ul>\n<li><code>公共数据集</code>：<a href=\"https://www.google.com/advanced_search?hl=zh-CN&amp;fg=1\" target=\"_blank\" rel=\"noopener\">Google 高级搜索</a>、<a href=\"https://www.kaggle.com/\" target=\"_blank\" rel=\"noopener\">Kaggle</a>。</li>\n<li><code>网络爬虫</code>：网站提供 API 接口、Python 扒取网页数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"公共数据集\"><a href=\"#公共数据集\" class=\"headerlink\" title=\"公共数据集\"></a>公共数据集</h3><h4 id=\"谷歌高级搜索\"><a href=\"#谷歌高级搜索\" class=\"headerlink\" title=\"谷歌高级搜索\"></a>谷歌高级搜索</h4><ul>\n<li><code>官方网址</code>：<a href=\"https://www.google.com/advanced_search?hl=zh-CN&amp;fg=1\" target=\"_blank\" rel=\"noopener\">Google 高级搜索</a></li>\n<li><code>使用方式</code>：顾名思义，即通过高级搜索的限制条件去获得更精确的搜索结果。具体地，我们侧重关注以下检索项，可获得意想不到的效果。<ul>\n<li><code>关键字部分</code>：填写问题相关的关键词；</li>\n<li><code>网站或域名</code>：填写 <code>.edu</code>、<code>.gov</code>、<code>.org</code> 等，即为确保数据的权威可靠性，尽可能从教育、政府、组织机构中获取公共数据集；</li>\n<li><code>文件类型</code>：可指定为 csv ( 逗号分隔值 )、xls ( Microsoft Excel ) 等文件类型，Python 对 csv、xls 提供了较好的库支持，为了更便捷进行数据处理，则优先选择此类格式的文件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Kaggle\"><a href=\"#Kaggle\" class=\"headerlink\" title=\"Kaggle\"></a>Kaggle</h4><ul>\n<li><code>官方网址</code>：<a href=\"https://www.kaggle.com/\" target=\"_blank\" rel=\"noopener\">Kaggle</a></li>\n<li><p><code>推荐理由</code>：Kaggle 由 Anthony Goldbloom 创立，主要为开发商和数据科学家提供举办机器学习竞赛、托管数据库、编写和分享代码的平台 ( <a href=\"http://blog.kaggle.com/2017/03/08/kaggle-joins-google-cloud/\" target=\"_blank\" rel=\"noopener\">与谷歌达成合作关系</a> )。由此可见：</p>\n<ul>\n<li>Kaggle 的每个竞赛都是独立的，无需设置项目范围然后收集数据，这让你有时间专注其它技能。</li>\n<li><p>Kaggle 的每个数据集都有要解决的现实问题，要面向参与竞赛的人群，让参赛者更容易掌握业务知识和数据集的结构特征，因此数据集的描述是不可缺少的。</p>\n<blockquote>\n<p>不妨体验下 Kaggle 社区提供的入门案例 <code>泰坦尼克：灾难中的机器学习</code>，其相关的数据集描述：<a href=\"https://www.kaggle.com/c/titanic/data\" target=\"_blank\" rel=\"noopener\">Titanic: Machine Learning from Disaster</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>入门指南</code>：参考文章 <a href=\"https://www.zhihu.com/question/23987009\" target=\"_blank\" rel=\"noopener\">机器之心. Kaggle 如何入门. zhihu.com</a> 整理而得。</p>\n<ul>\n<li><p><code>选择一种编程语言</code>：你是一个毫无经验的新手，推荐 <code>Python</code>，因这是一种通用编程语言，你可以在整个流程中都使用它。</p>\n</li>\n<li><p><code>学习探索数据的基础</code>：加载、浏览和绘制你的数据（<code>即探索性分析</code>）的能力，因为它可以为你将在模型训练过程中做的各种决策提供信息。  </p>\n<p>  若你选择了 Python 路线，推荐使用专门为这个目的设计的 <code>Seaborn</code> 库。其中有高层面的绘图函数，可以绘制许多最常见和有用的图表。可参考资料：</p>\n<ul>\n<li><p><a href=\"https://seaborn.pydata.org/\" target=\"_blank\" rel=\"noopener\">Seaborn 官网</a></p>\n</li>\n<li><p><a href=\"https://elitedatascience.com/python-seaborn-tutorial\" target=\"_blank\" rel=\"noopener\">Seaborn 教程. EliteDataScience.com</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;mid=2650726730&amp;idx=2&amp;sn=89d176a782875afaafc69dd40cbee006&amp;chksm=871b2534b06cac22a9235168a8d8867b97f795d2fba4435a2c7ec18b1039703903e4a79560bd&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">机器之心. 数据科学相关的 Python 库介绍</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>训练你的第一个机器学习模型</code>：将数据集分成独立的训练集和测试集，交叉验证避免过拟合以及使用合适的表现评价指标。对于 Python，最好的通用机器学习库是 Scikit-Learn。可参考资料：</p>\n<ul>\n<li><p><a href=\"https://link.zhihu.com/?target=http%3A//scikit-learn.org/stable/\" target=\"_blank\" rel=\"noopener\">Scikit-Learn 官网</a> | <a href=\"http://sklearn.apachecn.org\" target=\"_blank\" rel=\"noopener\">Scikit-Learn 官方文档中文版</a></p>\n</li>\n<li><p><a href=\"https://elitedatascience.com/python-machine-learning-tutorial-scikit-learn\" target=\"_blank\" rel=\"noopener\">Scikit-Learn 教程. EliteDataScience.com</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;mid=2650724242&amp;idx=1&amp;sn=703d242700e29813d6c482daf6b211c5&amp;chksm=871b13ecb06c9afa28f8aad729496620078985e4eae8a1296fc407dbd70c1d70fabb3b2817fa&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">机器之心. 从零开始掌握 Python 机器学习</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;mid=2650725654&amp;idx=4&amp;sn=505ababb07a6bee5d42a6254a7493a7e&amp;chksm=871b1968b06c907e9f84888ecb2ced8d3f52f0129720872e97f923b94deb34383eacefb4a5cf&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Ben Hamner (Kaggle CTO). 机器学习的八个步骤</a></p>\n</li>\n</ul>\n</li>\n<li><p><code>解决入门级竞赛</code>：<a href=\"https://www.kaggle.com/competitions?sortBy=grouped&amp;group=general&amp;page=1&amp;pageSize=20&amp;category=gettingStarted\" target=\"_blank\" rel=\"noopener\">Getting Started</a> 竞赛非常适合初学者，因为它们给你提供了低风险的学习环境，并且还有很多社区创造的教程。</p>\n<blockquote>\n<p>Kaggle 的竞赛分成四个类别：<br><code>Featured</code>：通常是由公司、组织甚至政府赞助的，奖金池最大。<br><code>Research</code>：研究方向的竞赛，只有很少或没有奖金。它们也有非传统的提交流程。<br><code>Recruitment</code>：这些是由想要招聘数据科学家的公司赞助的。目前仍然相对少见。<br><code>Getting Started</code>：这些竞赛的结构和 Featured 竞赛类似，但没有奖金。它们有更简单的数据集、大量教程和滚动的提交窗口让你可以随时输入。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网络爬虫\"><a href=\"#网络爬虫\" class=\"headerlink\" title=\"网络爬虫\"></a>网络爬虫</h3><h4 id=\"网站-API\"><a href=\"#网站-API\" class=\"headerlink\" title=\"网站 API\"></a>网站 API</h4><ul>\n<li>当公共数据集无法满足我们的需求时，则需要自定义采集数据。而采集数据则通过网络爬虫实现。值得注意的是，并不是所有的网页，都需要我们花费大功夫去扒取获得，而是它们本身就提供了调用数据的 API。</li>\n<li>当然，也有 Github 大神搜集并整理了较实用的 API：<a href=\"https://github.com/TonnyL/Awesome_APIs/blob/master/README-zh.md\" target=\"_blank\" rel=\"noopener\">TonnyL. Awesome APIs</a></li>\n</ul>\n<h4 id=\"网页爬虫\"><a href=\"#网页爬虫\" class=\"headerlink\" title=\"网页爬虫\"></a>网页爬虫</h4><ul>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"noopener\">Beautiful Soup</a>：Beautiful Soup 是一个可以从 HTML 或 XML 文件中提取数据的 <code>Python</code> 库。</li>\n<li><a href=\"http://webmagic.io/\" target=\"_blank\" rel=\"noopener\">Web Magic</a>：Web Magic 是一个简单灵活的 <code>Java</code> 爬虫框架。基于 WebMagic，你可以快速开发出一个高效、易维护的爬虫。</li>\n</ul>\n<h2 id=\"处理数据\"><a href=\"#处理数据\" class=\"headerlink\" title=\"处理数据\"></a>处理数据</h2><ul>\n<li><p>为什么要对数据预处理：确保数据质量，以保证预测的结果更精确。而数据质量涉及许多因素，例如准确性、完整性、一致性、可信性和可解释性，针对不同的特性，都有对应的 <code>处理策略</code>。</p>\n<blockquote>\n<p>注意，数据预处理的主要任务之间存在许多重叠工作，若前面章节有阐述的，后面涉及的则略过。</p>\n</blockquote>\n</li>\n<li><p>数据预处理的主要任务：</p>\n<ul>\n<li><p><code>数据清洗</code>：缺失值处理、光滑噪声数据、识别和删除离群点。</p>\n<blockquote>\n<p>关于数据清洗，也推荐阅读具有实操意义的一篇博文：<a href=\"https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4\" target=\"_blank\" rel=\"noopener\">TowardsDataScience. How to Handle Missing Data</a></p>\n</blockquote>\n</li>\n<li><p><code>数据集成</code>：多个数据源的数据合并，存放于同一个数据仓库中。</p>\n<ul>\n<li><code>实体识别问题</code>：来自多个信息源，各数据源中的实体之间如何匹配，这涉及实体识别问题。如不同数据来源于不同数据库中，现实意义上它们是同一实体，但它们属性的元数据表达却不同 ( 如主键 )。</li>\n<li><code>冗余和相关分析</code>：集成多个数据源，数据中可能有多组属性重复存在。而冗余可被相关分析检测到，如针对分类 ( 标称 ) 属性的卡方检验、数值属性的相关系数、数值属性的方差和协方差。</li>\n<li><code>元组重复</code>：元组级检测重复。</li>\n</ul>\n</li>\n<li><code>数据归约</code>：在尽可能保持数据原貌前提下，最大限度精简数据量。策略包括：<ul>\n<li><code>维归约</code>：也称为特征归约，减少所考虑的属性的个数。方法包括：小波变换、主成分分析、属性子集选择等。当然利用冗余和相关分析也是可行的。</li>\n<li><code>数量归约</code>：用替代的、较小的数据集表示形式替换原数据。方法包括：参数的方法，回归和对数线性模型；非参数的方法，聚类、降维、直方图、抽样和数据立方体聚集。</li>\n</ul>\n</li>\n<li><p><code>数据变换</code>：主要思想是将数据变换或统一成适合数据挖掘的形式。方法可以是数据归一化、数据离散化、概念分层等。</p>\n<ul>\n<li><code>特征构造</code>：由给定的属性构造新的属性并添加至属性集中。</li>\n<li><code>聚集分解</code>：对数据进行 <code>汇总</code> 或者 <code>聚集</code>。如聚集日销售数据。与之相对的是 <code>分解</code>，如常见的 “日期” 属性，不同的需求，我们要解构的粒度是不同的。如预测当日的气温变化，则我们可把年和月份剔除。</li>\n<li><code>归一化</code>：针对每一个特征 ( 维度 )，去均值和方差归一化。即把属性数据按比例缩放，让所有特征在统一数量级上运作，如此一来数据指标之间就有了可比性。</li>\n<li><p><code>离散化</code>：把属性值的原始值用区间标签或者概念标签替换，即这些标签可递归地组织成更高层概念，导致数值属性的 <code>概念分层</code>。</p>\n<blockquote>\n<p>例如，我们    对年龄进行分层：1 to 17 为 Adolescent；18 to 45 为 Adult；46 以上为 Senior。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3><ul>\n<li><p><code>缺失值处理</code>：某些实例数据中属性值为空，我们通过遍历数据集将其剔除。若数据集中存在大量实例含有缺失值的情况，则我们采用 <code>填补缺失值</code> 的方法。值得注意的是，根据不同情况，填补缺失值有多种方式：</p>\n<ul>\n<li>人工填写缺失值。</li>\n<li>使用全局常量填充缺失值：<code>N/A</code> 或者 $\\infty $。</li>\n<li>使用属性的中心度量：若是对称的数据分布，则使用均值；若是倾斜的数据分布，则使用中位数。</li>\n<li><p>使用最可能的值填充缺失值：回归、贝叶斯形式化的推理工具或决策树。</p>\n<blockquote>\n<p>某些情况下，缺失值并不意味数据有错误。例如在申请信用卡时，要求填写申请人的驾驶执照号，没有的人可填写 “无” 或者不填。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>光滑噪声</code>：噪声指数据中存在着错误或异常 ( 偏离期望值 ) 的数据，这些数据对数据的分析造成了干扰。我们可通过 <code>分箱</code>、<code>回归</code>、<code>离群点分析</code> 等噪声光滑技术来消除噪声。</p>\n<ul>\n<li><code>分箱</code>：考察数据的近邻 ( 周围的值 ) 来光滑有序数据值。</li>\n<li><code>回归</code>：用一个函数拟合数据来光滑数据。</li>\n<li><code>离群点分析</code>：五数概括 ( 中位数、四分位数、最大最小观测值 )、箱线图与离群点；或通过聚类来检测离群点。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据集成\"><a href=\"#数据集成\" class=\"headerlink\" title=\"数据集成\"></a>数据集成</h3><ul>\n<li><code>实体识别问题</code>：<ul>\n<li>问题描述：来自多个信息源，各数据源中的实体之间如何匹配，这涉及实体识别问题。如不同数据来源于不同数据库中，现实意义上它们是同一实体，但它们属性的元数据表达却不同 ( 如主键 )。</li>\n<li>解决方法：每个属性的元数据包含名字、含义、数据类型和属性的允许值范围，以及处理空值的空值规则。这样的元数据可帮助我们避免模式集成的错误。</li>\n</ul>\n</li>\n<li><code>冗余和相关分析</code>：这里讨论的冗余是对应于数据的属性 ( 特征 ) 层面讨论的。<ul>\n<li>分类 ( 标称 ) 属性的 <code>卡方检验</code> ( $\\chi^2$ )，发现属性 A、B 之间的相关联系。</li>\n<li>数值数据的 <code>相关系数</code>：计算属性 A、B 之间的相关系数 ( 又称 Pearson 积矩系数 )，估计这两个属性的相关度。</li>\n<li>数值数据的 <code>协方差</code>：协方差和方差是两个类似的度量 ( 方差可理解为协方差的特殊形式 )，其作用是评述两个属性如何一起变化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据归约\"><a href=\"#数据归约\" class=\"headerlink\" title=\"数据归约\"></a>数据归约</h3><ul>\n<li><p><code>维归约</code>：也称为特征归约，减少所考虑的属性的个数。</p>\n<ul>\n<li><p>通俗理解：即从原有的特征中删除不重要或不相关的特征。比如，某些实例数据中属性值与所研究的问题无关，我们可以选择性地剔除。</p>\n<blockquote>\n<p>本课堂实例中，是预测志愿者是否在冥想。而相关数据集呈现三种特征：精神专注度、冷静度以及志愿者的年龄。而志愿者是否发生冥想活动，很明显与性别无关，则可选择性地剔除该属性。</p>\n</blockquote>\n</li>\n<li><p>方法包括：小波变换、主成分分析、属性子集选择等。当然利用冗余和相关分析也是可行的。</p>\n</li>\n</ul>\n</li>\n<li><p><code>数量规约</code>：用替代的、较小的数据表示形式替换原数据。</p>\n<ul>\n<li>通俗理解：即通过对特征进行重组来减少特征的个数。比如，某些实例数据中属性 ( 维度 ) 太多，我们人类大脑是难以理解它的，则我们可通过降维方法以及可视化工具，以二维或者三维的的形式复现数据 ( 的特征 )。</li>\n<li>方法包括：参数的方法，回归和对数线性模型；非参数的方法，聚类、降维、直方图、抽样和数据立方体聚集。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据变换\"><a href=\"#数据变换\" class=\"headerlink\" title=\"数据变换\"></a>数据变换</h3><ul>\n<li><code>归一化</code>：针对每一个特征 ( 维度 )，去均值和方差归一化。即把属性数据按比例缩放，让所有特征在统一数量级上运作，如此一来数据指标之间就有了可比性。</li>\n<li><code>离散化</code>：把值用区间标签或者概念标签替换，即这些标签可递归地组织成更高层概念，导致数值属性的 <code>概念分层</code>。<ul>\n<li><code>数值属性</code>：在实际操作中，即把连续型特征的值离散化，使之成为少量的区间，每个区间映射到一个离散符号。这种技术的好处在于简化了数据描述，并易于理解数据和最终的挖掘结果。</li>\n<li><code>标称 (分类) 属性</code>：标称属性具有有穷多个不同值，且值之间无序。例如地位位置、年龄层次等。对于标称属性，我们需要人工定义概念分层。</li>\n</ul>\n</li>\n<li><p><code>向量化</code>：当我们已基本完成数据处理阶段的工作，得到可供使用的数据集。那么紧接着的步骤，即把实例数据转换成 <code>特征向量</code> ( 向量是特征的数值表示形式 )，所有实例的特征向量组成 <code>特征矩阵</code>。然后，在 <code>Python</code> 中通过 <code>Numpy</code> 和 <code>Pandas</code> 包装，即实际上让 <code>narray</code> 数组成为特征矩阵的存储和运算的媒介。</p>\n<p>  当完成以上流程后，数据预处理阶段即可告一段落，紧接着便可开始开始训练模型了。</p>\n<blockquote>\n<p>由于篇幅的缘故，数据预处理的讨论暂到此为止。当然，数据预处理的内容不仅如此，更详细的理论细节可参详 Jiewei Han 的《数据挖掘：概念与技术》$^{[1]}$。 而数据预处理在 Python 中如何实现，则参考 Keras 之父弗朗索瓦·肖莱的 《Python深度学习》$^{[2]}$。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://book.douban.com/subject/2038599/\" target=\"_blank\" rel=\"noopener\">Jiewei Han, Micheline Kamber and Jian Pei. 数据挖掘 (第三版) [M]. 机械工业出版社, 2018, 56-79.</a></li>\n<li>[2] <a href=\"https://book.douban.com/subject/30293801/\" target=\"_blank\" rel=\"noopener\">弗朗索瓦·肖莱，张亮 (译). Python 深度学习 [M]. 人民邮电出版社, 2018, 80-82.</a></li>\n</ul>\n","categories":["Project"],"tags":["数据挖掘","Kaggle","数据预处理"]},{"title":"论文 | 基于根因分析的报警聚类算法","url":"/2019/08/root-cause-analysis-alarm-clustering.html","content":"<div class=\"note default\"><p>原文：Clustering intrusion detection alarms to support root cause analysis<br>作者：Klaus Julisch<br>来源：ACM Transactions on Information and System Security, 2003, 6(4):443-471.</p></div>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li>系统出现故障时，运维人员一般先查看错误日志定位故障原因。</li>\n<li>业务流量小、逻辑复杂度低时，应用出现故障时错误日志一般较少，运维人员根据错误日志迅速定位到问题。但随着业务逻辑的迭代，系统接入的依赖服务不断增多、引入的组件不断增多，当系统出现故障时，<code>错误日志的量级急剧增加</code>。极端情况下更甚出现 “疯狂报错” 的现象，这时错误日志的内容会存在 <code>相互掩埋</code>、<code>相互影响</code> 的问题，运维人员面对报错一时难以理清逻辑， 失去焦点，没能第一时间解决最核心问题。</li>\n<li>若在报警流出现时，通过处理程序将报警进行聚类，整理出一段时间内的报警摘要。运维人员就可以在摘要信息的帮助下，先对当前的故障有一个大致的轮廓，再结合技术知识与业务知识定位故障的根本原因。</li>\n<li>围绕上面描述的问题，以及对于报警聚类处理的分析假设，本文主要做了以下事情：  <ul>\n<li><code>选定算法</code>：选定聚类算法，简单描述算法基本原理，并给出针对报警日志聚类的一种具体实现方案。  </li>\n<li><code>验证算法</code>：在分布式业务服务的系统下构造了三种不同实验场景，验证了算法的效果，并且对算法的不足进行分析阐述。</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>我们希望这些泛化报警既要具有很强的概括性，同时尽可能地保留细节。这样运维人员在收到报警时，便能快速定位故障的大致方向，从而提高故障排查的效率。</li>\n<li><p>对一段时间内的报警进行聚类处理，将具有相同根因的报警归纳为能够涵盖报警内容的泛化报警，最终形成仅有几条泛化报警的报警摘要，如图 1-1 所示。</p>\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-1.jpg\" alt></p>\n  <center>图 1-1 通过聚类算法泛化报警日志</center>\n\n</li>\n</ul>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>如图 1-2 所示，文章主要分三个部分阐述：提取报警特征、算法实现以及展示报警摘要。</li>\n<li><p>首先，是根据根因分析提取报警关键特征，并生成报警信息的泛化层次结构。其次，则是从泛化层次结构中计算得不同报警对象之间的不相似度度量，以确定最具象化的泛化表示、最大程度涵盖原始报警集合的泛化层次结构。最后，经由聚类算法获得泛化报警簇群，以簇群代表某一类报警信息。</p>\n<blockquote>\n<p>聚类算法还涉及 <code>min_size</code> 与 <code>聚类停止条件</code> 的调参问题，详情见下文描述。</p>\n</blockquote>\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-2.png\" alt></p>\n  <center>图 1-2 文章的章节布局</center>\n\n</li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"泛化初探\"><a href=\"#泛化初探\" class=\"headerlink\" title=\"泛化初探\"></a>泛化初探</h3><ul>\n<li><p>将报警信息抽象表达、逐层分解，形成类似于 <code>树结构</code> 或者 <code>有向无环图</code> 的泛化层次结构。</p>\n<p>  如图 1-3 所示，可将服务器的报警抽象为 “全部服务器 网络调用 故障”，也可以抽象为 “server_room_a 服务器 网络调用 产品信息获取失败” 和 “server_room_b 服务器 RPC 获取产品类型信息失败”。</p>\n<blockquote>\n<p>前者泛化范围较广、抽象层次较高，细节越少；后者包含的范围较小、抽象层次低，则包含的无用信息可能越多。当然不局限于一种层次关系，你也可以用其他层次的抽象来表达这个报警集群。</p>\n</blockquote>\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-3.jpg\" alt></p>\n  <center>图 1-3 服务器的报警泛化初探</center>\n\n</li>\n</ul>\n<h3 id=\"算法定义\"><a href=\"#算法定义\" class=\"headerlink\" title=\"算法定义\"></a>算法定义</h3><ul>\n<li>为了确定报警聚类泛化的程度，我们需要先了解一些定义：<ul>\n<li><code>属性</code> ( Attribute )：构成报警日志的基本信息，如机器、环境、时间等，记作 $A_i$。</li>\n<li><code>值域</code> ( Domain )：属性 $A_i$  的值域 ( 取值范围 )，记作 $Dom(A_i)$。</li>\n<li><code>泛化层次结构</code> ( Generalization Hierarchy )：对于每个属性 $A_i$，都有一个对应的泛化层次结构，记作 $G_i$。</li>\n<li><code>不相似度</code> ( Dissimilarity )：定义为 $d(\\mathcal{a_1}, \\mathcal{a_2})$。它接受两个报警 $\\mathcal{a_1}$、$\\mathcal{a_2}$ 作为输入，并返回一个数值量，表示这两个报警不相似的程度。当 $d(\\mathcal{a_1}, \\mathcal{a_2})$ 较小时，表示报警 $\\mathcal{a_1}$ 和报警 $\\mathcal{a_2}$ 越相似，相反越大则越不相似。为了计算不相似度，则需要用户预先定义好报警信息的 <code>泛化层次结构</code>。</li>\n</ul>\n</li>\n<li><p>计算 $d(\\mathcal{a_1}, \\mathcal{a_2})$，我们先定义两个属性值的不相似度：令 $x_1$、$x_2$ 为 $\\mathcal{a_1}$、$\\mathcal{a_2}$ 某个属性 $A_i$ 的两个不同的值，$x_1、x_2 \\in Dom(A_i)$。</p>\n<ul>\n<li><p>在属性 $A_i$ 的泛化层次结构 $G_i$ 中，通过一个公共点父节点 $p$ 连接 $x_1$、$x_2$ 的最短路径长度。$\\delta(·,·)$ 表示两节点的最短路径长度，把它们累加起来以表示两个属性的不相似度。</p>\n<script type=\"math/tex; mode=display\">\nd(x_1, x_2) := \\min \\left\\{\n \\delta(x_1, p) + \\delta(x_2, p) \\mid \n p \\in G_i, x1 \\trianglelefteq p, x2 \\trianglelefteq p\n\\right\\}\n\\tag{1}</script><blockquote>\n<p>举例：在图 1-3 的泛化层次结构中：<br>d(“Thrift”, “Pigeon”) = d(“RPC”, “Thrift”) + d(“RPC”, “Pigeon”) =  1 + 1 = 2  </p>\n</blockquote>\n</li>\n<li><p>接下来把警报的所有属性都加入计算，累加报警的所有属性的不相似度，即可表示报警的不相似度。对于两个报警 $\\mathcal{a_1}$、$\\mathcal{a_2}$，其不相似度的计算公式为：</p>\n<script type=\"math/tex; mode=display\">\nd(\\mathcal{a_1}, \\mathcal{a_2}) := \n  \\sum_{i=1}^n d(\\mathcal{a_1}[A_i], \\mathcal{a_2}[A_i])\n\\tag{2}</script><blockquote>\n<p>举例：参考图 1-3 的泛化层次结构：<br>$\\mathcal{a_1}$ = (“server_room_b-biz_tag-offline02”, “Thrift”)<br>$\\mathcal{a_2}$ = (“server_room_a-biz_tag-online01”, “Pigeon”)  </p>\n<p>$d(\\mathcal{a_1}, \\mathcal{a_2})$ =<br>d(“server_room_b-biz_tag-offline02”, “server_room_a-biz_tag-online01”) +<br>d(“Thrift”, “Pigeon”)  </p>\n<p>$d(\\mathcal{a_1}, \\mathcal{a_2})$ =<br>d(“server_room_b-biz_tag-offline02”, “服务器”) +<br>d(“server_room_a-biz_tag-online01”, “服务器”) +<br>d(“RPC”, “Thrift”) +<br>d(“RPC”,  “Pigeon”)<br>= 2 + 2 + 1 + 1 = 6</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>对于某个报警聚类来说，我们如何获得既能够涵盖它的集合又有最具象化的泛化表示？回答问题前，我们预先完成一些定义：</p>\n<ul>\n<li>一个警报对象是 n 维属性空间 $dom(A<em>1) \\times dom(A_2) … \\times dom(A_n)$ 上的元组，记作 $\\mathcal{X}</em>{i = 1}^{n} Dom(A_i)$。</li>\n<li><p>我们用 $C$ 表示报警集合，$\\mathbf{g}$ 是 $C$ 的一个泛化表示，满足 $\\forall \\mathcal{a} \\in C, \\mathcal{a} \\trianglelefteq \\mathcal{g}$。</p>\n<blockquote>\n<p>以报警集合 {“dx-trip-package-api02 Thrift get deal list error”, “dx-trip-package-api01 Thrift get deal list error”} 为例，<code>dx服务器 thrift调用 获取产品信息失败</code> 是一个泛化表示，<code>服务器 网络调用 获取产品信息失败</code> 也是一个泛化表示。</p>\n</blockquote>\n</li>\n<li><p>定义 $d_i := d(\\mathcal{g}, a_i), i = 1, 2$，$d_i$ 表示在警报 $a_i$ 中需要多少个属性即可让 $\\mathcal{g}$ 泛化表示 $\\mathcal{a_i}$。当 $d_1 + d_2$ 越小，$\\mathcal{g}$ 从警报 $\\mathcal{a_1}、\\mathcal{a_2}$ 中获得泛化表示的步数越少，说明 $\\mathcal{g}$ 对 $\\mathcal{a_1}、\\mathcal{a_2}$ 覆盖越充分。相反，当 $d_1 + d_2$ 越大，由于过于抽象或者未能有效捕获警报 $\\mathcal{a_1}、\\mathcal {a_2}$ 的详细信息，说明当前 $\\mathcal{g}$ 的覆盖效果不好。</p>\n</li>\n<li><p>因此，明确我们的目标是计算得 <code>最小化的报警不相似度</code> 以获得 <code>最具象化的泛化表示</code>。为了解决这个问题，定义以下两个指标：</p>\n<script type=\"math/tex; mode=display\">\n\\overline{d} (\\mathcal{g}, \\mathcal{C}) := \n  1 / | \\mathcal{C} | \n  \\times \\sum _{\\mathcal{a} \\in C} d (\\mathcal{g}, \\mathcal{a})\n\\tag{3}</script><script type=\"math/tex; mode=display\">\nH(C) := \\min \\left\\{\n  \\overline {d}(\\mathcal{g} , C) \\mid\n  \\mathcal {g} \\in \\mathcal{X}_{i = 1}^{n} Dom(A_i),\n  \\forall \\mathcal {a} \\in C : \\mathcal{a} \\trianglelefteq \\mathcal{g}\n\\right\\} \\tag{4}</script><blockquote>\n<p>$H(C)$ 代表一个报警簇群 $C$ 的相异性度量，$\\overline{d} (\\mathcal{g}, \\mathcal{C})$ 代表一个报警簇群的平均相异性度量。$H(C)$ 值最小时对应的 $\\mathcal{g}$ 就是我们要找的最适合的泛化表示，我们称 $\\mathcal{g}$ 为 $C$ 的覆盖。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>基于以上的概念，将报警日志聚类问题定义为：</p>\n<ul>\n<li>定义 $L$ 为一个日志集合，$G_i(i = 1, 2, 3……n)$ 为属性 $A_i$ 的泛化层次结构，min_size $ \\in \\mathbb{N}$ 为一个预设的常量。</li>\n<li><p>目标是找到一个 $L$ 的子集 $C$，簇群中元素数量满足 $|C| \\geq$ min_size，且 $H(C)$ 值最小。</p>\n<blockquote>\n<p><code>min_size</code> 是用来控制抽象程度的，即一个簇群至少包含的元素个数。若 <code>min_size</code> 与 $L$ 集合的大小一样，那么我们只能使用终极抽象了；若 <code>min_size = 1</code>，则每个报警日志是它自己的抽象。</p>\n</blockquote>\n</li>\n<li><p>找到一个聚类之后，我们可以去除这些元素，然后在 $L$ 剩下的集合里找其他的聚类。</p>\n</li>\n</ul>\n</li>\n<li><p>不幸的是，这是个 NP 完全问题 ( <a href=\"https://en.wikipedia.org/wiki/Clique_problem\" target=\"_blank\" rel=\"noopener\">分团问题</a> )。因此论文 $^{[2]}$ 提出了一种启发式算法，该算法满足 $|C| \\geq$ min_size，使 $H(C)$ 值尽量小 ( 并不一定要最小化的 $H(C)$  )。</p>\n</li>\n</ul>\n<h3 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h3><ul>\n<li><p>启发式 Alarm-Clustering 算法：面向属性归纳的改进算法 (Attribute-oriented induction, AOI) $^{[3]}$。</p>\n<blockquote>\n<p><code>面向属性归纳的改进算法</code>：1) 对比经典的 AOI 算法更保守地概括属性；2) 使用了类似基于密度聚类的聚类终止条件。  </p>\n</blockquote>\n<ul>\n<li><code>Step.01</code>: 算法假设所有的泛化层次结构 $G_i$ 都是树，这样每个报警集群都有一个唯一的、最顶层的泛化结果。</li>\n<li><code>Step.02</code>: 将 $L$ 定义为一个原始的报警日志集合，算法选择一个属性 $A_i$，将 $L$ 中所有报警的 $A_i$ 值替换为 $G_i$ 中 $A_i$ 的父值，通过这一操作不断对报警进行泛化。</li>\n<li><code>Step.03</code>: 持续步骤 2 的操作，直到找到至少可以将原始报警泛化为报警簇群的最小值 min_size。</li>\n<li><code>Step.04</code>: 输出步骤 3 中找到的报警。</li>\n</ul>\n</li>\n<li><p>算法的伪代码描述： </p>\n<ul>\n<li><code>Input</code>：(报警日志集合 $L$，min_size，每个属性的泛化层次结构 $G_1、…、G_n$)</li>\n<li><p><code>Output</code>：(泛化报警日志集合 $L$，min_size，每个属性的泛化层次结构 $G_1、…、G_n$)</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* 将报警日志集合 L 保存至表 <span class=\"literal\">T</span>，且表中每一列代表报警的一项属性 Ai */</span><br><span class=\"line\"><span class=\"literal\">T</span> := L</span><br><span class=\"line\">\t</span><br><span class=\"line\">/* count 是统计当前报警记录数量的变量 (可理解为报警簇群的大小)</span><br><span class=\"line\"> * count 初始化为 <span class=\"number\">1</span> 可理解为当前报警为一个仅且包含它本身的簇群 */</span><br><span class=\"line\"><span class=\"keyword\">for</span> all alarms a <span class=\"keyword\">in</span> <span class=\"literal\">T</span> do a[count] = <span class=\"number\">1</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">/* 开始对报警进行泛化操作 */</span><br><span class=\"line\"><span class=\"keyword\">while</span> ∀a∈<span class=\"literal\">T</span>:a[count] &lt; min_size do &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// Step.1 使用启发算法选择一个属性 Ai</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// Step.2 对 L 中所有报警进行泛化：</span><br><span class=\"line\">\t// 即把报警的属性 Ai 替换为泛化层次结构 Gi 中 Ai 的父值</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> all alarms a <span class=\"keyword\">in</span> <span class=\"literal\">T</span> do &#123;</span><br><span class=\"line\">\t\ta[Ai] := parent of a[Ai] <span class=\"keyword\">in</span> Gi;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t// Step.3 如果 a[Ai] == a’[Ai], i = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"keyword\">...</span>, n</span><br><span class=\"line\">\t// 即报警的所有属性 Ai 都相同</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> identical alarms a, a<span class=\"string\">' exist do &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t// 合并相同警报于同一个泛化报警 a 中并更新泛化警报的计数</span></span><br><span class=\"line\"><span class=\"string\">\t\tSet a[count] := a[count] + a'</span>[count];</span><br><span class=\"line\">\t\t// 完成统计后移除报警记录 a<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">\t\tDelete a'</span> from <span class=\"literal\">T</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"启发式选择属性泛化报警\"><a href=\"#启发式选择属性泛化报警\" class=\"headerlink\" title=\"启发式选择属性泛化报警\"></a>启发式选择属性泛化报警</h4><blockquote>\n<p>其中第 11 行的启发算法为:</p>\n</blockquote>\n<ul>\n<li><p>统计在 $A_i$ 属性上值为 $v$ 的报警的数量，记作 $f_i(v)$：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">fi(v) := <span class=\"keyword\">SELECT</span> <span class=\"keyword\">sum</span>(<span class=\"keyword\">count</span>) <span class=\"keyword\">FROM</span> T <span class=\"keyword\">WHERE</span> Ai = v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>让 $F_i$ 记作每个属性 $A_i$ 的最大值函数 ：</p>\n<script type=\"math/tex; mode=display\">\n  F_i := \\max \\left\\{\n      f_i(v) | v \\in Dom(A_i)\n  \\right\\} \\tag{5}</script></li>\n<li><p>这里的逻辑是：</p>\n<ul>\n<li>若有一个报警 $\\mathcal{a}$ 满足 $\\mathcal{a}[count] \\geq$ min_size，那么对于所有属性 $A_i$ 均能满足 $F_i \\geq f_i(\\mathcal{a}[A_i]) \\geq$ min_size。</li>\n<li><p>相反，如果有一个属性 $A_i$ 的 $F_i &lt;$ min_size，那么 $\\mathcal{a}[count]$ 就不可能大于 min_size。所以选择 $F_i$ 值最小的属性 $A_i$ 进行泛化。</p>\n<blockquote>\n<p>类似于木桶定律，装水量由最短的木板决定。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"DAG-形式的泛化层次结构\"><a href=\"#DAG-形式的泛化层次结构\" class=\"headerlink\" title=\"DAG 形式的泛化层次结构\"></a>DAG 形式的泛化层次结构</h4><ul>\n<li><p>当泛化层次结构是一个有向无环图 (Directed Acyclic Graph, DAG)，而不是一颗树时，结构上的任何一个节点都有可能包含多个父节点，那么一个属性值存在多个父节点将其泛化。</p>\n<p>  针对此问题，基于经典的 AOI 提出两种解决策略：</p>\n</li>\n<li><p><code>选择其一法</code>：基于用户定义的规则解决歧义问题。例如，考虑运行在同一 IP 下的 HTTP 服务器和 FTP 服务器，我们通过附加端口值进行准确泛化。</p>\n  <figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a[Destination-port] = <span class=\"number\">80</span></span><br><span class=\"line\">\tthen generalize ip to HTTP-server </span><br><span class=\"line\"><span class=\"keyword\">else</span> generalize ip to FTP-server;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>探索所有法</code>：并行地探索所有可能的泛化结果 (穷举法)。改写上述代码 16 行即可实现：</p>\n  <figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Step.2 对 L 中所有报警进行泛化</span><br><span class=\"line\"><span class=\"keyword\">for</span> all alarms a <span class=\"keyword\">in</span> <span class=\"literal\">T</span> do &#123;</span><br><span class=\"line\">\t<span class=\"literal\">T</span> := <span class=\"literal\">T</span> \\ &#123;a&#125;;</span><br><span class=\"line\">\t// 由属性 Ai 泛化报警的所有可能性都加入 <span class=\"literal\">T</span> 中</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> all parents p that a[Ai] has <span class=\"keyword\">in</span> Gi do &#123;</span><br><span class=\"line\">\t\ta<span class=\"string\">' := a; </span></span><br><span class=\"line\"><span class=\"string\">\t\ta'</span>[Ai] := p; </span><br><span class=\"line\">\t\t<span class=\"literal\">T</span> := <span class=\"literal\">T</span> ∪ &#123;a<span class=\"string\">'&#125;;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"MINSIZE-参数自适应算法\"><a href=\"#MINSIZE-参数自适应算法\" class=\"headerlink\" title=\"MINSIZE 参数自适应算法\"></a>MINSIZE 参数自适应算法</h4><ul>\n<li>此外，关于 min_size 的选择问题，如果选择了一个过大的 min_size，那么会迫使算法合并具有不同根源的报警。另一方面，如果过小，那么聚类可能会提前结束，具有相同根源的报警可能会出现在不同的聚类中。</li>\n<li>因此，设置一个初始值，可以记作 $ms_0$。定义一个较小的值 $\\varepsilon (0 &lt; \\varepsilon &lt; 1)$，当 min_size 取值为 $ms_0$、$ms_0 \\times (1 - \\varepsilon )$、$ms_0 \\times (1 + \\varepsilon )$ 时的聚类结果相同时，我们就说此时聚类是 $ \\varepsilon$-鲁棒的。</li>\n<li><p>如果不相同，则使 $ms_1 = ms_0 * (1 - \\varepsilon)$，重复这个测试，直到找到一个鲁棒的最小值。</p>\n<blockquote>\n<p>需要注意的是，$ \\varepsilon$-鲁棒性与特定的报警日志相关。因此，给定的最小值，可能相对于一个报警日志来说是鲁棒的，而对于另一个报警日志来说是不鲁棒的。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"案例实现\"><a href=\"#案例实现\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h2><h3 id=\"提取报警特征\"><a href=\"#提取报警特征\" class=\"headerlink\" title=\"提取报警特征\"></a>提取报警特征</h3><ul>\n<li>根据线上问题排查的经验，运维人员通常关注的指标包括时间、机器 ( 机房、环境 )、异常来源、报警日志文本提示、故障所在位置 ( 代码行数、接口、类 )、Case 相关的特殊 ID ( 订单号、产品编号、用户ID ) 等。</li>\n<li>在本案例中，实际应用场景都是线上准实时场景，时间间隔短，因此我们不需要关注时间指标；同时，Case 相关的特殊 ID 不符合抽象描述的要求，因此也无需关注此项指标。</li>\n<li>综上所述，我们选择的特征包括：<code>机房</code>、<code>环境</code>、<code>异常来源</code>、<code>报警日志文本摘要</code>、<code>故障所在位置</code> ( 接口、类 )。</li>\n</ul>\n<h3 id=\"提取关键特征\"><a href=\"#提取关键特征\" class=\"headerlink\" title=\"提取关键特征\"></a>提取关键特征</h3><blockquote>\n<p>我们的数据来源是日志中心已经格式化过的报警日志信息，这些信息主要包含：报警日志产生的时间、服务标记、在代码中的位置、日志内容等。在定义泛化层次结构前夕，我们需要从已知的数据源中梳理出关键特征。</p>\n</blockquote>\n<ul>\n<li><code>机房和环境</code>：提取这两个指标比较简单，在此不做详细赘述。</li>\n<li><code>异常来源</code>：获得故障所在位置后，优先使用此信息确定异常报警的来源；若不能获取，则在日志内容中根据关键字匹配。需要说明的是，两者都需要预先定义词典支持。</li>\n<li><code>报警日志文本摘要</code>：优先查找日志内容中是否有异常堆栈，若存在，则查找最后一个异常 ( 通常为真正的故障原因 )；若不能获取，则在日志中查找是否存在 “code=……, message=……” 这样形式的错误提示；若不能获取，则取日志内容的第一行内容 ( 以换行符为界 )，并去除其中可能存在的 Case 相关的提示信息。</li>\n<li><code>故障所在位置</code>：优先查找是否有异常堆栈，如存在则查找第一个本地代码的位置； 若不存在，则取日志打印位置。</li>\n</ul>\n<h3 id=\"泛化层次结构\"><a href=\"#泛化层次结构\" class=\"headerlink\" title=\"泛化层次结构\"></a>泛化层次结构</h3><ul>\n<li>泛化层次结构，用于记录属性的泛化关系，是泛化时向上抽象的依据，需要预先定义。</li>\n<li><p>根据实验所用项目的实际使用环境，根据 <code>关键特性</code> 定义的 <code>泛化层次结构</code> 如下：</p>\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-4.png\" alt></p>\n  <center>图 1-4 机房泛化层次结构</center>\n\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-5.png\" alt></p>\n  <center>图 1-5 环境泛化层次结构</center>\n\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-6.png\" alt></p>\n  <center>图 1-6 异常来源的泛化层次结构</center>\n\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-7.png\" alt></p>\n  <center>图 1-7 报警日志文本摘要的泛化层次结构</center>\n</li>\n<li><p><code>故障所在位置</code> 此属性无需泛化层次结构，每次泛化时直接按照包路径向上层截断，直到系统包名。</p>\n</li>\n</ul>\n<h3 id=\"报警聚类算法\"><a href=\"#报警聚类算法\" class=\"headerlink\" title=\"报警聚类算法\"></a>报警聚类算法</h3><ul>\n<li><p>算法的执行流程，我们以图 1-8 来表述：</p>\n<p>  <img src=\"/images/illustration/Paper/2019/alarm-clustering_1-8.png\" alt></p>\n  <center>图 1-8 报警日志聚类流程图</center>\n</li>\n<li><p><code>min_size</code> 参数设定：考虑到日志数据中可能包含种类极多，且根据小规模数据实验表明，min_size $= \\frac15 \\times$ 报警日志数量时，算法已经有较好的表现，再高会增加过度聚合的风险，因此我们取 min_size $= \\frac15 \\times$ 报警日志数量，$\\varepsilon$ 参考论文中的实验取 0.05。</p>\n</li>\n<li><p><code>聚类停止条件</code>：考虑到部分场景下，报警日志可能较少，因此 min_size 的值也较少，此时聚类已无太大意义，因此设定聚类停止条件为：聚类结果的报警摘要数量小于等于 20 或已经存在某个类别的 count 值达到 min_size 的阈值，即停止聚类。</p>\n</li>\n</ul>\n<h2 id=\"延伸探究\"><a href=\"#延伸探究\" class=\"headerlink\" title=\"延伸探究\"></a>延伸探究</h2><ul>\n<li><p>在论文中，警报 $\\mathcal{a<em>x}$、$\\mathcal{a_y}$ 的不相似度量定义为 $d(\\mathcal{a_x}, \\mathcal{a_y}) := \\sum</em>{i=1}^n d(\\mathcal{a_x}[A_i], \\mathcal{a_y}[A_i])$，$d(·,·)$ 即把警报 a 中每个属性的不相似度量累加起来。</p>\n<blockquote>\n<p>在现实条件下，警报对象包含的属性值理应是有主次、重要性之分。我们计算警报的不相似度，具体计算不同的属性的不相似度时，是否考虑加入权重计算系统。</p>\n</blockquote>\n</li>\n<li><p>关于泛化层次结构的表现形式包括 <code>有向无环图</code> 和 <code>树</code>。针对有向无环图形式的泛化层次结构，一个结构节点可能存在多个父节点，即一个属性值存在多个父节点将其泛化，故论文基于经典的 AOI 提出两种解决策略，以准确地选择唯一父节点去泛化报警。</p>\n<p>  首先，是结合领域知识的 <code>选择其一法</code>，满足基本要求但需要人为因素干预。而现在问题是，若采取 <code>探索所有法</code> 将所有的泛化报警都加入集合 T 中，然而存在重复加入泛化报警的可能性，那么由原始方法构建簇群将是不正确的 (上述伪代码 23 行)。</p>\n<blockquote>\n<p>原论文描述解决办法：重新扫描原始警报日志，并确定与之匹配的原始警报的数量？细节和意图不明确，是否有替代方案？</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://tech.meituan.com/2019/02/28/root-clause-analysis.html\" target=\"_blank\" rel=\"noopener\">美团技术团队. 根因分析初探：一种报警聚类算法在业务系统的落地实施. 2019. tech.meituan.com</a></li>\n<li>[2] Julisch K . Clustering intrusion detection alarms to support root cause analysis[J]. ACM Transactions on Information and System Security, 2003, 6(4):443-471.</li>\n<li>[3] Jiawei Han 等著; 范明等译. 数据挖掘:概念与技术 (原书第3版) [M]. 机械工业出版社., 2012. 111-116.</li>\n</ul>\n","categories":["Paper"],"tags":["数据挖掘","聚类","根因分析"]},{"title":"大型网站技术架构","url":"/2022/02/mega-web-site-architecture.html","content":"<p>相较于现阶段微服务、网格服务以及无服务等架构，本书介绍的架构模式略显朴素，但是模式本质上是一种思想模式、一种抽象化解决方案，面对系统不同发展阶段以及不同使用场景，每种技术架构都有它的落地场景与参考价值。以演变思维模式看待技术架构的迭代升级，深刻理解高性能、可用性、伸缩性、拓展性、安全性架构特性的核心原理，让我们能够站在较高角度俯瞰全局、权衡利弊、选择取舍，并以全生命周期思维方式设计、开发、部署、运维大型网站系统。</p>\n<a id=\"more\"></a>\n<h2 id=\"本书框架\"><a href=\"#本书框架\" class=\"headerlink\" title=\"本书框架\"></a>本书框架</h2><ul>\n<li>第一篇章：演化、模式、要素三维度，以描述网站整体架构</li>\n<li><p>第二篇章：高性能、可用性、伸缩性、拓展性、安全性五要素，详细介绍网站架构的核心原理</p>\n<blockquote>\n<p>其中负载均衡、异步处理、分布式缓存等技术方案分章节进行详细描述。</p>\n</blockquote>\n</li>\n<li><p>第三篇章：具体案例讲解网站技术架构</p>\n</li>\n<li>第四篇章：以架构师角度复盘技术架构</li>\n</ul>\n<h2 id=\"第1篇-概述\"><a href=\"#第1篇-概述\" class=\"headerlink\" title=\"第1篇 概述\"></a>第1篇 概述</h2><h3 id=\"01-大型网站架构演化\"><a href=\"#01-大型网站架构演化\" class=\"headerlink\" title=\"01 大型网站架构演化\"></a>01 大型网站架构演化</h3><h4 id=\"网站架构演化发展历程\"><a href=\"#网站架构演化发展历程\" class=\"headerlink\" title=\"网站架构演化发展历程\"></a>网站架构演化发展历程</h4><ul>\n<li><p>初始阶段的网站架构：应用程序、数据库、文件等所有资源都集中于一台服务器上。</p>\n</li>\n<li><p>应用与数据服务分离：</p>\n<ul>\n<li>应用和数据分离后，整个网站使用三种服务器，即 <code>应用服务器</code>、<code>文件服务器</code> 和 <code>数据库服务器</code>。</li>\n<li><p>三种服务器对硬件资源的要求不同：</p>\n<ul>\n<li>应用服务器：处理大量业务逻辑，偏向于 CPU 算力。</li>\n<li><p>数据库服务器：磁盘检索和数据缓存，偏向于硬盘读写能力和内存容量。</p>\n<blockquote>\n<p>存在问题：随着用户逐渐增多，数据库读写瓶颈导致访问延迟，从而拖垮整个网站性能。</p>\n</blockquote>\n</li>\n<li><p>文件服务器：存储大量用户上传的文件，偏向于硬盘容量。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缓存改善网站的性能：</p>\n<ul>\n<li>二八定律：80% 的业务集中在 20% 的数据上。将业务访问集中的小部分数据缓存在内存中，可减少数据库的访问压力。</li>\n<li><p>缓存类型</p>\n<ul>\n<li>缓存于应用服务器的 <code>本地缓存</code></li>\n<li><p>缓存于分布式缓存服务器的 <code>远程缓存</code></p>\n<blockquote>\n<p>存在问题：使用缓存使得数据访问压力问题得到有效缓解，但单一应用服务器能够处理的请求连接数有限，应用服务器成为整个的瓶颈。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>应用服务器集群改善网站的并发处理能力</p>\n<ul>\n<li>负载均衡：将用户请求分发到应用服务器集群中任何一台服务器上。若有更多用户加入，在集群中通过增加应用服务器即可（系统可伸缩性）。</li>\n</ul>\n</li>\n<li><p>数据库读写分离</p>\n<ul>\n<li>存在问题：当网站使用缓存后，使得绝大部分数据读操作可不通过数据库即可完成访问，但仍有部分读操作（缓存访问不命中、缓存过期）和写操作需访问数据库，同样会因数据库负载压力过高成为网站瓶颈。</li>\n<li>解决方案<ul>\n<li>数据库的 <code>主从热备份</code> 得以实现数据库读写分离功能。当应用服务器写数据时，访问主数据库；</li>\n<li>主数据库通过 <code>主从复制机</code> 机制将数据更新同步至从数据库。当应用服务器读数据时，访问从数据库即可获得数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>反向代理和 CDN 加速网站响应：它们的基本原理都是 <code>缓存</code>，区别在于：</p>\n<ul>\n<li><code>CDN</code>：部署在网络提供商的机房，用户在请求服务时，可从距离最近的网络提供商机房获取数据。</li>\n<li><code>反向代理</code>：部署在网站的中心机房，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器。若反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户。</li>\n</ul>\n</li>\n<li><p>分布式文件系统和分布式数据库系统</p>\n<ul>\n<li>分布式数据库：在单表规模非常庞大时使用，通常数据库拆分手段是 <code>业务分库</code>，将不同业务的数据库部署于不同物理服务器上。</li>\n</ul>\n</li>\n<li><p>NoSQL 和搜索引擎</p>\n<ul>\n<li>非关系型数据库技术，比如 NoSQL</li>\n<li>非数据查询技术，比如搜索引擎</li>\n</ul>\n</li>\n<li><p>业务拆分</p>\n<ul>\n<li><code>分而治之</code> 的指导思想，将完整网站业务分成不同的产品线，以产品线开发应用，各位单独部署及维护。</li>\n<li>应用之间可通过消息队列进行数据分发，通过访问同一个数据存储系统来构成一个关联的完整系统。</li>\n</ul>\n</li>\n<li><p>分布式服务：每个应用系统都需执行许多相同的业务操作，比如用户管理、商品管理等，将相同公用的业务抽象成可复用的业务、独立部署。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/distributed-server.svg\" alt> 分布式服务架构图</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"网站架构演化的价值观\"><a href=\"#网站架构演化的价值观\" class=\"headerlink\" title=\"网站架构演化的价值观\"></a>网站架构演化的价值观</h4><ul>\n<li>核心价值：随网站所需要灵活应对</li>\n<li>驱动发展：技术发展源于业务发展</li>\n</ul>\n<h4 id=\"网站架构设计误区\"><a href=\"#网站架构设计误区\" class=\"headerlink\" title=\"网站架构设计误区\"></a>网站架构设计误区</h4><ul>\n<li>一味追随大公司的解决方案</li>\n<li>为了技术而技术</li>\n<li>企图用技术解决所有问题：技术解决业务问题，业务问题还需业务手段解决。</li>\n</ul>\n<h3 id=\"02-大型网站架构模式\"><a href=\"#02-大型网站架构模式\" class=\"headerlink\" title=\"02 大型网站架构模式\"></a>02 大型网站架构模式</h3><ul>\n<li>模式：来自建筑学的定义，模式描述了一个在我们周围不断重复发生的问题及该问题解决方案的核心，当遇到适用场景复用该方案即可。</li>\n<li>为解决大型网站面临的 <code>高并发访问</code>、<code>海量数据处理</code>、<code>高可靠运行</code> 等问题与挑战，大型互联网公司在实践中提出了许多解决方案，以实现网站 <code>高性能</code>、<code>高可用</code>、<code>易伸缩</code>、<code>可拓展</code>、<code>安全</code> 等各种技术架构目标。</li>\n</ul>\n<h4 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h4><ul>\n<li>在横向维度将系统切分成几个部分，每个部分负责一部分相较单一的职责，然后通过上下层的依赖和调用组成一个完整系统。</li>\n<li><p>分层可更好地将一个庞大软件系统切分为不同的部分，便于分工合作开发和维护；各层之间具有一定的独立性，只要维持调用接口不变，各层可根据具体问题独立演化发展，其他层不需要做出相应调整。</p>\n<blockquote>\n<p>[例如] 计算机硬件、操作系统、应用软件分层结构；网络的七层协议；网站软件系统抽象为应用层、服务层、数据层，具体如下表所示。</p>\n</blockquote>\n  <table>\n      <thead>\n          <th>层级</th>\n          <th>功能</th>\n          <th>举例</th>\n      </thead>\n      <tbody>\n      <tr>\n          <td>应用层</td>\n          <td>负责具体业务和视图展示</td>\n          <td>网站首页、内容检索、数据统计等</td>\n      </tr>\n      <tr>\n          <td>服务层</td>\n          <td>为应用层提供服务支持</td>\n          <td>用户管理服务、购物车服务等</td>\n      </tr>\n      <tr>\n          <td>数据层</td>\n          <td>提供数据存储访问服务</td>\n          <td>数据库、缓存、文件、搜索引擎等</td>\n      </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>挑战：合理规划层次边界和接口，开发中必须严格遵循分层架构约束，禁止跨层次调用（应用层直接调用数据层）或是逆向调用（数据层调用服务层等）。</p>\n</li>\n<li>实践<ul>\n<li>大的分层结构可细化继续分层，比如应用层细分为视图层和业务逻辑层（前端和后端）。</li>\n<li>分层架构是逻辑层面的，实际上是可以部署于同一台物理机器上。但随着网站业务发展，必须对已分层模块分离部署，即三层结构分别部署在不同服务器上，使得网站拥有更多计算资源以应对越来越多的用户访问。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分割\"><a href=\"#分割\" class=\"headerlink\" title=\"分割\"></a>分割</h4><ul>\n<li><code>分层</code> 是将软件在 <code>横向</code> 方面进行切分；<code>分割</code> 就是在 <code>纵向</code> 方面对软件进行切分。</li>\n<li>将网站不同的 <code>功能</code> 和 <code>服务</code> 分割开来，包装成高内聚低耦合的模块单元，有助于：<ul>\n<li>软件开发和维护；</li>\n<li>不同模块分布式部署，提高网站并发处理能力以及功能拓展能力。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h4><ul>\n<li>分层、分割的主要目的之一是让切分后的模块便于 <code>分布式部署</code>。</li>\n<li>分布式意味着可以使用更多计算机硬件资源完成同样的功能，即处理并发访问量和承载数据量更大，进而为更多用户提供服务。</li>\n<li>分布式解决高并发问题，同时也存在其他问题：<ul>\n<li>服务调用必须通过网络，网络会成为性能瓶颈口；</li>\n<li>服务器越多，服务器宕机概率越大，部分服务器宕机造成的服务不可用可能会导致很多应用不可用；</li>\n<li>数据在分布式环境中保持数据一致性非常困难，同样分布式事务也难以保证。</li>\n</ul>\n</li>\n<li><p>在网站应用中，常用的分布式方案：</p>\n<ul>\n<li><code>分布式应用和服务</code>：将分层 / 分割后的应用和服务的模块分布式部署。</li>\n<li><code>分布式数据和存储</code>：除了传统关系型数据库外，为分布式网站应用而生的各种非关系型数据库，比 如 NoSQL。</li>\n<li><p><code>分布式静态资源</code></p>\n<ul>\n<li>动静分离，静态资源（HTML、JS、CSS）分布式部署可减轻应用服务器的负载压力；</li>\n<li>通过独立域名访问加快浏览器并发加载的速度；</li>\n<li>可由独立前端团队负责界面开发、用户体验维护。</li>\n</ul>\n</li>\n<li><p><code>分布式计算</code>：严格意义上，应用、服务、事实数据处理都是计算，网站除了在线业务要处理，还有后台业务也要处理，比如搜索引擎索引构建、数据仓库的数据分析统计等。</p>\n<blockquote>\n<p>目前网站普遍使用 Hadoop 及其 MapReduce 分布式计算框架进行批处理计算，其特定是移动计算（非移动数据），即将计算程序分发至数据所处位置，以实现加速计算、分布式计算。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><ul>\n<li><p>多台服务器部署相同应用以构成一个集群，通过负载均衡设备（比如 F5）共同对外提供服务。</p>\n<blockquote>\n<p>对于用户访问集中的模块（网站首页等），还需要集群以提供更好的并发特性。</p>\n</blockquote>\n</li>\n<li><p>由于一个应用由多台服务器提供服务，当某台服务器发生故障时，<code>负载均衡设备</code> 或 <code>系统实效转移机制</code> 会将请求转发到集群其他服务器上，使得服务器故障不影响用户正常使用，提高 <code>系统可用性</code>。</p>\n</li>\n</ul>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><ul>\n<li><code>缓存</code>：将数据存放在距离计算最近的位置以加快处理速度。</li>\n<li><code>CDN</code>：内容分发网络，部署于距离终端用户最近的网络服务商，用户网络请求总是先达到他的网络服务商。此处会缓存网站的静态资源（较少变化的数据），可就近以最快速度返回给用户。</li>\n<li><code>反向代理</code>：属于网站前端架构一部分，当用户请求到达网站数据中心时，最先访问的是反向代理服务器。此处缓存网站的静态资源，无需将请求继续转发应用服务器就能返回给用户。</li>\n<li><code>本地缓存</code>：在应用服务器本地缓存数据，应用程序可在本机内存中直接访问数据，而无需访问数据库。</li>\n<li><code>分布式缓存</code>：数据缓存于分布式缓存集群，应用程序通过网络通信访问缓存数据。</li>\n<li>使用缓存需满足以下前提条件：<ul>\n<li>数据访问热点不均衡，某些数据会被频繁访问；</li>\n<li>数据在某时间段内有效，不会短时间过期，否则缓存的数据会因失效而产生脏读，影响结果正确性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><ul>\n<li>异步是系统解耦合的重要手段，业务间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每阶段之间通过共享数据方式异步执行、进行协作。</li>\n<li>单一服务器，内部通过 <code>多线程共享内存队列</code> 实现异步；分布式系统，多个服务器集群通过 <code>分布式消息队列</code> 实现异步。</li>\n<li><p>异步架构是典型的 <code>生产者-消费者</code> 模式，两者不存在直接调用，只需保持数据结构不变，彼此功能实现可随意变化而不相互影响。使用异步消息队列拥有以下特性：</p>\n<blockquote>\n<p>生产者：把数据放到消息队列；消费者：从消息队列里边取数据</p>\n</blockquote>\n<ul>\n<li>提高系统可用性：消费者服务器故障宕机，数据会在消息队列服务器中存储堆积，生产者服务器可继续处理业务请求。</li>\n<li>消除并发访问高峰：生产者服务器将突然增加的访问请求数据放入消息队列，等待消费者服务器依次，以缓解网站负载压力过大问题。</li>\n<li>加快网站响应速度</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"冗余\"><a href=\"#冗余\" class=\"headerlink\" title=\"冗余\"></a>冗余</h4><ul>\n<li>服务器冗余运行、数据库冗余备份，当其中某台服务器宕机时，可将其实的服务和数据访问转移至其他机器上。<ul>\n<li>冷备份：数据库定期备份，存档保存。</li>\n<li>热备份：数据库进行主从分离，实时同步实现热备份。</li>\n<li>部署灾备数据中心。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"自动化\"><a href=\"#自动化\" class=\"headerlink\" title=\"自动化\"></a>自动化</h4><ul>\n<li>发布过程自动化</li>\n<li>自动化代码管理：代码版本控制、代码分支创建/合并等过程自动化</li>\n<li>自动化测试：代码部署至测试环节，自启用测试用例进行测试</li>\n<li>自动化安全测试：代码静态安全扫描、部署到安全测试环节进行安全攻击测试</li>\n<li>自动化部署</li>\n<li>自动化监控：服务器心跳检测</li>\n<li>自动化报警：异常 / 阈值报警</li>\n<li>自动化失效转移：自动隔离失效服务器</li>\n<li>自动化失效恢复：重启服务，同步数据保证数据一致性。</li>\n<li>自动化降级</li>\n<li>自动化分配资源</li>\n</ul>\n<h3 id=\"03-大型网站架构要素\"><a href=\"#03-大型网站架构要素\" class=\"headerlink\" title=\"03 大型网站架构要素\"></a>03 大型网站架构要素</h3><ul>\n<li>架构：通俗说法，高层次的规划，难以改变的决定。</li>\n<li><p>软件架构：有关软件整体结构与组件的抽象描述，用于指导大型软件系统各方面的设计。</p>\n<blockquote>\n<p>系统各个重要组成部分及其关系构成了系统的架构，这些组成部分可以是具体功能模块，也可以是非功能性设计于决策。它们之间相互关联组成一个整体，共同构成软件系统的架构。</p>\n</blockquote>\n</li>\n<li><p>软件架构设计：除了满足当前系统功能需求之外，额外关注 <code>性能</code>、<code>可用性</code>、<code>伸缩性</code>、<code>拓展性</code> 和 <code>安全性</code> 的架构要素。</p>\n</li>\n</ul>\n<h4 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h4><ul>\n<li>代码层面：使用多线程、改善内存管理等手段优化性能。</li>\n<li>浏览器端<ul>\n<li>通过浏览器缓存、使用页面压缩、合理布局页面、减少 Cookie 传输等手段改善性能。</li>\n<li>使用 CDN 将网站静态内容分发至距离用户最近的网络服务商机房，使得用户以最短访问路径获取数据。在网站机房部署反向代理服务器，缓存热点文件，加快请求响应速度，减轻应用服务器负载压力。</li>\n</ul>\n</li>\n<li>应用服务器端<ul>\n<li>缓存：使用服务器本地缓存和分布式缓存，通过缓存在内存中的数据处理用户请求，加快请求处理过程，减轻数据库负载压力。</li>\n<li>异步：通过异步操作将用户请求发送至消息队列等待后续任务处理，而当前请求直接返回响应给用户。</li>\n<li>集群：将多台应用服务器组成一个集群共同对外服务，提高整体处理能力。</li>\n</ul>\n</li>\n<li>数据库服务器端<ul>\n<li>关系型数据库：索引、缓存、SQL 优化。</li>\n<li>非关系型数据库：NoSQL 数据库通过优化数据模型、存储结构、伸缩性等手段提高性能。</li>\n</ul>\n</li>\n<li>衡量网站性能有一系列指标，如响应时间、TPS、系统性能计数器等。通过监控这些指标，可以分析系统瓶颈、预测网站容量，并对异常指标进行报警，以保证系统可用性。</li>\n</ul>\n<h4 id=\"可用性\"><a href=\"#可用性\" class=\"headerlink\" title=\"可用性\"></a>可用性</h4><ul>\n<li>高可用性的主要手段是冗余，应用程序部署于多台服务器上同时提供访问，数据存储在多台服务器上相互备份。</li>\n<li>对于应用服务器：多台应用服务器通过负载均衡设备组成一个集群共同对外提供服务，任何一台服务器宕机，只需把请求切换到其他服务器即可实现应用的高可用。</li>\n<li>对于存储服务器：实时备份数据。</li>\n</ul>\n<h4 id=\"伸缩性\"><a href=\"#伸缩性\" class=\"headerlink\" title=\"伸缩性\"></a>伸缩性</h4><ul>\n<li>衡量网站架构伸缩性的主要标准：<ul>\n<li>是否可以多台服务器构建集群；</li>\n<li>是否容易向集群中添加新的服务器；</li>\n<li>加入新服务器后是否可提供原来无差别的服务；</li>\n<li>集群中可容纳的总服务器数量是否有限制。</li>\n</ul>\n</li>\n<li>对于应用服务器：服务器上不保存数据，所有服务器都是对等的（无状态），通过负载均衡设备向集群不断加入服务器。</li>\n<li>对于缓存服务器集群：加入新的服务器会导致缓存路由失效（虽然缓存数据可通过数据库重新加载），需改进缓存路由算法以保证缓存数据的可访问性，比如分布式缓存的一致性 Hash 算法。</li>\n<li>关系数据库的集群伸缩性必须在数据库之外实现，通过 <code>路由分区</code> 等将部署有多个数据库的服务器组成一个集群。</li>\n</ul>\n<h4 id=\"拓展性\"><a href=\"#拓展性\" class=\"headerlink\" title=\"拓展性\"></a>拓展性</h4><ul>\n<li>衡量网站架构拓展性的主要标准：<ul>\n<li>是否可以对现有产品透明无影响，不需要任何改动或很少改动现有业务功能就可以上线新产品。</li>\n<li>不同产品之间强内聚、弱耦合。</li>\n</ul>\n</li>\n<li>网站可拓展架构主要手段：<code>事件驱动架构</code> 和 <code>分布式服务</code>。<ul>\n<li><code>事件驱动架构</code>：利用 <code>消息队列</code> 实现，将用户请求和其他业务事件构造成消息发布到消息队列，消息消费者从消息队列中获取消息并进行处理。分离消息产生和消息处理过程，可透明地增加新的消息生成者任务或新的消息消费者任务。</li>\n<li><code>分布式服务</code>：将业务和可复用服务分离开来，通过分布式服务框架调用。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第2篇-架构\"><a href=\"#第2篇-架构\" class=\"headerlink\" title=\"第2篇 架构\"></a>第2篇 架构</h2><h3 id=\"04-网站高性能架构\"><a href=\"#04-网站高性能架构\" class=\"headerlink\" title=\"04 网站高性能架构\"></a>04 网站高性能架构</h3><h4 id=\"网站性能测试\"><a href=\"#网站性能测试\" class=\"headerlink\" title=\"网站性能测试\"></a>网站性能测试</h4><h5 id=\"不同视角的网站性能\"><a href=\"#不同视角的网站性能\" class=\"headerlink\" title=\"不同视角的网站性能\"></a>不同视角的网站性能</h5><ul>\n<li><p>用户：网站响应速度快慢，由用户计算机与服务器通信时间、网站服务器处理时间、用户浏览器构造请求、解析响应数据时间所决定。</p>\n<blockquote>\n<p>优化手段：前端架构优化、调整浏览器缓存策略、CDN 服务、反向代理等。</p>\n</blockquote>\n</li>\n<li><p>开发人员：关注应用程序本身及其相关子系统的性能，包括响应延迟、系统吞吐量、并发处理能力、系统稳定性等指标。</p>\n<blockquote>\n<p>优化手段：缓存加速数据读取、使用集群提高吞吐、使用异步消息加快请求响应及 “削峰”。</p>\n</blockquote>\n</li>\n<li><p>运维人员：关注基础设施和资源利用率，比如网络运营商带宽、服务器硬件配置、数据中心网络结构、服务器和网络贷款的资源利用率。</p>\n<blockquote>\n<p>优化手段：建设优化骨干网、利用虚拟化技术优化资源利用等。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"性能测试指标\"><a href=\"#性能测试指标\" class=\"headerlink\" title=\"性能测试指标\"></a>性能测试指标</h5><ul>\n<li><p><code>性能测试指标</code>：不同人员视觉有不同的性能衡量指标，以开发与测试人员为例，网站性能测试的主要指标有响应时间、并发数、吞吐量、性能计数器。</p>\n</li>\n<li><p><code>响应时间</code>：从发出请求开始，到最后响应数据所需要的时间。</p>\n<ul>\n<li>测试程序通过模拟应用程序，记录收到响应和发出请求之间的时间差来计算系统响应时间。</li>\n<li>若测试目标操作本身花费时间较少，则可以通过重复请求，通过求均值方式计算得单次请求的响应时间。</li>\n</ul>\n</li>\n<li><p><code>并发数</code>：系统能够同时处理请求的数量。</p>\n<ul>\n<li>对于网站而言，并发数即网站并发用户数，指同时提交请求的用户数目。</li>\n<li><p>相对应的还有网站在线用户数和网站系统用户数（注册用户），其数量关系为：</p>\n<blockquote>\n<p>网站系统用户数 &gt;&gt; 网站在线用户数 &gt;&gt; 网站并发用户数</p>\n</blockquote>\n</li>\n<li><p>网站产品设计初期需要规划不同发展阶段的网站系统用户数，根据产品特性和运营手段，推算在线用户数和并发用户数。</p>\n</li>\n<li>通过多线程模拟并发用户，以测试系统的并发处理能力。为模拟真实用户行为，不仅仅是启用多线程不断发送请求，而是在请求之间加入一个随机等待时间（也称作 <code>思考时间</code>），以还原真实的高并发场景。</li>\n</ul>\n</li>\n<li><p><code>吞吐量</code>：单位时间内系统处理的请求数量，体现系统的整体处理能力。</p>\n<ul>\n<li>TPS（每秒事务数）；HPS（每秒 HTTP 请求数）；QPS（每秒查询数）</li>\n<li><p>系统并发数由小逐渐增大过程中，当中过程也伴随着服务器系统资源消耗逐渐增大，系统吞吐量逐渐增加，但达到一定极限值时随着并发数增长而下降，系统资源耗尽达到系统崩溃点，吞吐量为零。</p>\n<blockquote>\n<p>系统吞吐量、系统并发数和响应时间的关系可理解为：高速公路的通行情况，吞吐量表示每天通过收费站的车辆数（等价于高速费），正在行驶的车辆数记作并发数，响应时间记作车数。当行驶车辆少时，车数行驶较快，收取高速费相对较少；随着行驶车辆数增加，车速会变慢，但收到的高速费会逐渐增加；行驶车辆数增加超过某极限值后，任何偶然因素都会导致高速路瘫痪，车走不动、收费停滞（资源耗尽）。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>性能计数器</code>：描述服务器或者操作系统性能的数据指标，包括 System Load、对象与线程数、内存使用、CPU使用、磁盘与网络 I/O 等。对指标设定目标阈值，当监控系统发现性能计数器超过阈值时，就向运维及开发人员报送系统异常警报。</p>\n<ul>\n<li>System Load：系统负载，当前正被 CPU 执行和等待 CPU 执行的进程数目总和，反映系统忙闲程度的指标。Load 值等于 CPU 核W数为理想值，表示系统资源被充分利用。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"性能测试方法\"><a href=\"#性能测试方法\" class=\"headerlink\" title=\"性能测试方法\"></a>性能测试方法</h5><ul>\n<li>性能测试：以系统设计初期规划的性能指标为预期目标，对系统不断施压，验证系统再资源可接受范围内。</li>\n<li>负载测试：对系统不断增加并发请求，直到系统某项或者多项性能指标达到安全临界值。若某种资源已呈饱和状态，继续对系统施加压力，系统处理不但不提高反而下降。</li>\n<li>压力测试：超过安全负载的情况下，对系统不断施加压力直至系统崩溃或不能再处理任何请求，以测量得系统最大压力承受能力。</li>\n<li>稳定性测试：不同生产环境、不同时间点的请求压力是不均匀的、呈波浪特性的，为更好地模拟生产环境，稳定性测试过程中也应该不均匀地对系统施加压力。</li>\n</ul>\n<h4 id=\"Web-前端性能优化\"><a href=\"#Web-前端性能优化\" class=\"headerlink\" title=\"Web 前端性能优化\"></a>Web 前端性能优化</h4><h5 id=\"浏览器访问优化\"><a href=\"#浏览器访问优化\" class=\"headerlink\" title=\"浏览器访问优化\"></a>浏览器访问优化</h5><ul>\n<li><p>减少 HTTP 请求：每次 HTTP 请求都需建立通信链路进行数据传输，在服务端需要启动独立线程处理每个 HTTP 请求。减少 HTTP 请求，降低通信、服务器线程开销，可有效提高访问性能的有效手段。</p>\n<blockquote>\n<p>例如：合并 CSS、合并 JavaScript、合并图片等，即减少文件请求加载次数。</p>\n</blockquote>\n</li>\n<li><p>使用浏览器缓存：</p>\n<ul>\n<li><p>CSS、JavaScript、图标等静态资源文件的更新频率都较低，而他们几乎是每次 HTTP 请求都需要的，将文件缓存在浏览器中，可极好地改善性能。</p>\n<blockquote>\n<p>若静态资源文件变化需要及时生效、应用至客户端浏览器，可通过改变文件名实现。</p>\n</blockquote>\n</li>\n<li><p>通过 HTTP Header 中的 Cache-Control 和 Expires 属性来设定浏览器缓存。</p>\n</li>\n</ul>\n</li>\n<li><p>启用压缩：在服务端启用 GZIP 对 HTML、CSS、JavaScript 文件进行压缩，有效减少通信传输的数据量。</p>\n</li>\n<li><p>CSS 前置、JavaScript 后加载：</p>\n<ul>\n<li>遵循浏览器自上而下的页面渲染机制，CSS 先行加载渲染页面；</li>\n<li><p>JavaScript 在加载完成后即执行，有可能会造成阻塞而页面加载显示缓慢，一般后置。</p>\n<blockquote>\n<p>当然具体问题要具体分析，若页面解析需用到 JavaScript 时，代码后置就不合适了。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"CDN-加速\"><a href=\"#CDN-加速\" class=\"headerlink\" title=\"CDN 加速\"></a>CDN 加速</h5><ul>\n<li><p>内容分发网络（Content Distribute Network, CDN）</p>\n<ul>\n<li>网络访问第一跳，即数据缓存在距离用户最近的地方，得以最快速度获取数据。</li>\n<li>CDN 部署在网络运营商机房，同时运营商又是终端用户的网络服务提供商，为此用户请求路由的第一跳即达到 CDN 服务器。</li>\n<li><p>CDN 缓存了浏览器请求的资源时，CDN 直接返回给浏览器，实现最短路径返回响应。</p>\n<blockquote>\n<p>CDN 缓存的一般是静态资源，比如图片、 CSS、JavaScript 脚本等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h5><ul>\n<li>负载均衡：通过负载均衡构建的应用集群以提高系统总体处理能力、改善网站高并发性能。</li>\n<li><p>正向代理 v.s. 反向代理</p>\n<ul>\n<li>正向代理：客户端代理，隐藏的是客户。客户端为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。</li>\n<li><p>反向代理：服务端代理，隐藏的是服务器。以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 Internet 上请求连接的客户端。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Performance-Forward&amp;Reverse-Proxy.svg\" alt> 正向代理 v.s. 反向代理</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"应用服务器性能优化\"><a href=\"#应用服务器性能优化\" class=\"headerlink\" title=\"应用服务器性能优化\"></a>应用服务器性能优化</h4><h5 id=\"分布式缓存\"><a href=\"#分布式缓存\" class=\"headerlink\" title=\"分布式缓存\"></a>分布式缓存</h5><ul>\n<li>网站性能优化第一定律：使用缓存（数据缓存、文件缓存、页面片段缓存）</li>\n<li><p>缓存的基本原理</p>\n<ul>\n<li>存储在访问速度相对较高的存储介质中。</li>\n<li>缓存的数据是经过计算处理得到的，被缓存的数据无需重复计算即可直接使用，例如统计类数据。</li>\n<li><p>缓存本质是一个哈希表（HashTable），以 Key-Value 形成存储在内存 Hash 表中。</p>\n<ul>\n<li>通过 HashCode(Key) 计算 Key 的 HashCode，即对象的唯一标识符。</li>\n<li>通过 HashCode 获得 HashTable 的索引下标，对 Hash 表数组长度求模（余数法），余数即为索引下标。</li>\n<li><p>通过索引下标在 Hash 表数组即可取得 Key-Value 键值对。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/hashtable-sample.svg\" alt> HashTable 存储实例</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分布式缓存架构</p>\n<ul>\n<li>以集群方式提供缓存服务，架构方式有两种：<ul>\n<li>JBoss Cache：需要更新同步的分布式缓存</li>\n<li>Memcached：不互相通信的分布式缓存</li>\n</ul>\n</li>\n<li><p>JBoss Cache 架构</p>\n<ul>\n<li>JBoss Cache 通常将应用程序与缓存部署于同一台服务器上。</li>\n<li>在集群中所有服务器中保存相同的缓存数据。</li>\n<li><p>当某台服务器有缓存数据更新时，会通知集群中其他机器更新缓存数据或清除缓存数据。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/JBoss-Cache.svg\" alt> JBoss Cache 之间的更新同步</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Memcached 架构</p>\n<ul>\n<li>应用程序与缓存分离部署于不同服务器上。</li>\n<li><p>应用程序通过一致性 Hash 等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通信。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Memcached.svg\" alt> 互不通信的 Memcached</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Memcached</p>\n<ul>\n<li><p>简单的通信协议</p>\n<ul>\n<li>通信协议：TCP 协议、UDP 协议</li>\n<li><p>通信序列化协议：基于文本的自定义协议，以一个命令关键字 + 一组命令操作数，例如读取数据的命令协议 <code>get &lt;key&gt;</code>。</p>\n<blockquote>\n<p>通信序列化协议：数据传输的两端必须使用彼此可识别的数据序列化方式才能使通信得以完成，比如 XML、JSON 等文本序列化协议、Google Protobuffer 等二进制序列化协议。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>丰富的客户端程序：C/C++、Java、Python、Perl、Ruby 等。</p>\n</li>\n<li><p>高性能的网络通信：基于 <a href=\"https://baike.baidu.com/item/libevent/2492112?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Libevent</a> 的通信模块，支持事件触发的网络通信程序库。</p>\n<blockquote>\n<p>Libevent：一个用 C 语言编写的、轻量级的开源高性能事件通知库。</p>\n</blockquote>\n</li>\n<li><p>高效的内存管理：固定空间分配 —— 内存管理 ——&gt; 内存碎片管理</p>\n<ul>\n<li><p>将内存空间分为一组 Slab，其中又包含一组 Chunk。同一 Slab 的每个 Chunk 的大小是固定的，拥有相同大小 Chunk 的 Slab 被组织在一起，称为 Slab_class。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Memcached-memory-manager.svg\" alt> Memcached 内存管理</p>\n</blockquote>\n</li>\n<li><p>存储数据根据数据大小，寻找一个最小 Chunk 将数据写入，且内存的分配与释放都以 Chunk 为单位。</p>\n<blockquote>\n<p>数据只能存入一个比它大的 Chunk，且一个 Chunk 只能存一个数据，造成其他内存空间被浪费了。</p>\n</blockquote>\n</li>\n<li><p>采用 LRU 算法是否最近最久未被访问数据占用的空间，并标记释放的 Chunk 为未用。</p>\n</li>\n</ul>\n</li>\n<li><p>互不通信的服务器集群架构</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h5><ul>\n<li>使用 <code>消息队列</code> 将调用 <code>异步化</code>，改善网站的扩展性，也可提升网站系统的性能。 </li>\n<li>消息队列的 <code>削峰作用</code>：通过异步处理，将短时间高并发产生的事务消息存储再消息队列中，从而削平高峰期的并发事务。</li>\n<li>消息队列与业务异步处理注意事项<ul>\n<li>存在问题：数据写入消息队列即返回用户，数据的业务校验、写数据操作可能失败。</li>\n<li>业务流程调整：订单数据写入消息队列，不能立即返回用户订单提交成功，需在消息队列的订单消费者进程真正处理完该订单，甚至业务出库后再通知订单成功，避免交易纠纷。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"使用集群\"><a href=\"#使用集群\" class=\"headerlink\" title=\"使用集群\"></a>使用集群</h5><ul>\n<li>使用 <code>负载均衡</code> 技术为一个应用构建一个由多台服务器组成的服务器集群，将 <code>并发访问请求</code> 分发到多台服务器处理。</li>\n</ul>\n<h5 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h5><ul>\n<li>多线程：I/O 阻塞、多 CPU 利用、线程安全</li>\n<li>资源复用：减少系统资源的创建和销毁，比如数据库连接、网络通信连接、线程、复杂对象等。<ul>\n<li>单例模式（Singleton）：</li>\n<li>对象池模式（Object Pool）：复用对象实例，减少对象创建和资源消耗。</li>\n</ul>\n</li>\n<li>数据结构：不同场景中，灵活组合各种数据结构改善数据读写和计算特性。</li>\n<li>垃圾回收：Young GC、Full GC</li>\n</ul>\n<h4 id=\"存储性能优化\"><a href=\"#存储性能优化\" class=\"headerlink\" title=\"存储性能优化\"></a>存储性能优化</h4><ul>\n<li>缓存解决一部分数据的读压力，但磁盘仍然是系统最严重的瓶颈，磁盘可用性和容错性也是改善网站性能的重要因素。</li>\n</ul>\n<h5 id=\"HDD-SSD\"><a href=\"#HDD-SSD\" class=\"headerlink\" title=\"HDD / SSD\"></a>HDD / SSD</h5><ul>\n<li><p>硬盘驱动器（Hard Disk Drive）：也称机械硬盘。</p>\n<ul>\n<li>其通过马达驱动磁头臂，带动磁头到指定的磁盘位置访问数据。</li>\n<li><p>由于每次访问数据都需移动磁头臂，为此在数据连续访问和随机访问时，移动磁头臂的次数相差巨大，致使性能表现差别也大。</p>\n<blockquote>\n<p><code>连续访问</code>：访问数据存储在连续磁盘空间上；<code>随机访问</code>：访问数据存储在不连续磁盘空间上</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>固态驱动器（Solid State Disk）：也称固态硬盘。数据存储在可持久记忆的硅晶体上，为此可像内存一样快速随机访问。</p>\n</li>\n</ul>\n<h5 id=\"B-Tree-LSM-Tree\"><a href=\"#B-Tree-LSM-Tree\" class=\"headerlink\" title=\"B+ Tree / LSM Tree\"></a>B+ Tree / LSM Tree</h5><ul>\n<li>文件系统或数据库系统通常会对数据排序后存储，以加快数据检索速度。若需要保证数据在不断更新、插入、删除后依然有序，索引的数据结构也有讲究：MySQL 多数采用 B+ 树；NoSQL 多数采用 LSM 树。</li>\n<li>B+ 树：N 叉排序树，以树的节点为单位存储数据，从根开始查找所需数据所在节点编号和磁盘位置，将其加载到内存中。</li>\n<li><p>LSM 树：N 阶合并树，数据写操作（增/删/改）都在内存中进行。</p>\n<ul>\n<li>数据写操作都会创建一个新记录，修改则记录新的数据值，删除则记录一个删除标记。</li>\n<li>数据在内存仍然是一颗排序树，当数据量超过设定内存阈值后，会将该棵排序树和磁盘上最新的排序树合并。</li>\n<li>当数据量也超过设定阈值后，将和磁盘上下一级的排序树合并。</li>\n<li><p>合并过程中，新数据会覆盖旧数据，或者记录为不同版本。</p>\n<blockquote>\n<p>LSM 树上进行更新不需磁盘访问，在内存即可完成。同理，读操作也总是从内存的排序树开始搜索，若没有找到再从磁盘上的排序树顺序查找。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"RAID-HDFS\"><a href=\"#RAID-HDFS\" class=\"headerlink\" title=\"RAID / HDFS\"></a>RAID / HDFS</h5><ul>\n<li>廉价磁盘冗余阵列（RAID）：利用多块磁盘实现数据的并发读写和数据备份，主要为了改善磁盘的访问延迟，增加磁盘的可用性和容错能力。</li>\n<li><p>常见 RAID 技术，其技术原理如下图所示：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/RAID.svg\" alt> 常见 RAID 的技术原</p>\n</blockquote>\n<ul>\n<li><p>RAID 0：根据磁盘将数据分为 n 份，数据同时并发写入 n 快磁盘，使得数据整体写入速度是一块磁盘的 n 倍。同理，RAID 0 也具有极速的读速度。</p>\n<blockquote>\n<p>但 RAID 0 不做数据备份，n 块硬盘中只要有一块损坏，数据完整性即被破环，所有磁盘的速度都会损坏。</p>\n</blockquote>\n</li>\n<li><p>RAID 1：一份数据同时写入两块硬盘，这样任何一块硬盘损坏都不会导致数据丢失，插入一块新磁盘可通过复制数据方式自动修复。</p>\n</li>\n<li><p>RAID 10：将所有磁盘平均分成两份，数据同时在两份磁盘写入（相当与 RAID 1）。但每一份数据在 n/2 块磁盘上，利用 RAID 0 技术并发读写。</p>\n<blockquote>\n<p>结合 RAID 0 和 RAID 1 两种方案，但 RAID 10 磁盘利用率较低（一半磁盘用来备份数据）。</p>\n</blockquote>\n</li>\n<li><p>RAID 3：一般情况，一台服务器不会同时损坏两块磁盘的情况（物理因素除外），假设在只损坏一块磁盘情况下，利用其他磁盘的数据回复损坏磁盘的数据，即保证了可靠性和性能，同时提升了磁盘利用率。</p>\n<p>  将数据分成 n-1 份，并发写入 n-1 块磁盘，并在第 n 块磁盘记录校验数据，任何一块磁盘损坏（包含校验数据磁盘），都可利用其他 n-1 块磁盘恢复数据。</p>\n</li>\n<li><p>RAID 5：原理与 RAID 3 相似，但校验数据不是写入第 n 块磁盘，而是螺旋式地写入所有磁盘中。即检验数据也平均到所有磁盘上，避免了频繁写坏一块磁盘。</p>\n</li>\n<li><p>RAID 6：原理与 RAID 3 相似，数据写入 n-2 块磁盘中，并螺旋式地在两块磁盘中写入校验信息（使用不同算法生成）。</p>\n</li>\n</ul>\n</li>\n<li><p>Hadoop 分布式文件系统（HDFS）：在整个存储集群的多台服务器上进行数据并发读写和备份。</p>\n<ul>\n<li>HDFS 以块（Block）为单位管理文件内容，一个文件被分割成若干 Block。</li>\n<li><p>当应用程序写文件时，每写完一个 Block，HDFS 就将其自动复制至另外两台机器上，以保证每个 Block 有三个副本。</p>\n<blockquote>\n<p>相当于 RAID 1 的数据复制功能。</p>\n</blockquote>\n</li>\n<li><p>当对文件进行处理计算时，通过 MapReduce 并发计算任务框架，启动多个计算子任务（MapReduce Task）同时读取文件的多个 Block。</p>\n<blockquote>\n<p>相当于 RAID 0 的数据并发访问功能。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>HDFS 包括两个重要服务器角色：名称服务节点（NameNode）和数据存储节点（DataNode）</p>\n<ul>\n<li>NameNode 在整个 HDFS 只部署一个实例，提供<code>元数据</code> 服务。相当于操作系统中的文件分配表（FAT），管理文件名 Block 的分配，维护整个文件系统的目录树结构。</li>\n<li>DataNode 部署在 HDFS 集群的单独服务器上，可以部署多个实例，提供 <code>数据存储</code> 服务。</li>\n<li>应用程序（Client）需要写文件时，首先访问 NameNode，请求分配数据块，NameNode 根据管理的 DataNode 服务器的磁盘空间，按照一定的负载均衡策略，分配若干数据块以供 Client 使用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"05-网站高可用架构\"><a href=\"#05-网站高可用架构\" class=\"headerlink\" title=\"05 网站高可用架构\"></a>05 网站高可用架构</h3><blockquote>\n<p>事物总是先求存后发展，保证网站可用、万无一失，任重道远。</p>\n</blockquote>\n<h4 id=\"可用性度量\"><a href=\"#可用性度量\" class=\"headerlink\" title=\"可用性度量\"></a>可用性度量</h4><ul>\n<li><p>网站不可用也称 <code>网站故障</code>，业界通常用 <code>多少个9</code> 来衡量网站的可用性。</p>\n<blockquote>\n<p>例如 QQ 的可用性是 4 个 9，即 99.99%。表示 QQ 服务要保证其在所有运行时间中，只有 0.01% 的时间不可用，大约一年当中最多 53 分钟不可用。</p>\n</blockquote>\n<ul>\n<li>2个9 为基本可用，网站年度不可用时间小于 88 小时；</li>\n<li>3个9 为较高可用，网站年度不可用时间小于 9 小时；</li>\n<li>4个9 为具有自动恢复能力的高可用，网站年度不可用时间小于 53 分钟；</li>\n<li>5个9 为极高可用，网站年度不可用时间小于 5 分钟；</li>\n</ul>\n</li>\n<li><p>网站不可用时间（故障时间）= 故障修复时间点 - 故障发现（报告）时间点</p>\n</li>\n<li>网站年度可用指标 = (1 - 网站不可用时间 / 年度总时间) * 100%</li>\n</ul>\n<h4 id=\"高可用架构\"><a href=\"#高可用架构\" class=\"headerlink\" title=\"高可用架构\"></a>高可用架构</h4><ul>\n<li>高可用架构主要手段是：数据和服务的 <code>冗余备份</code>及 <code>失效转移</code>。<ul>\n<li>冗余备份：磁盘损坏，则从备份的磁盘读取数据。</li>\n<li>失效转移：服务器宕机，将服务切换至其他可用服务器上。</li>\n</ul>\n</li>\n<li><p>网站架构基本分层模型：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/web-hierarchical-model.svg\" alt> 网站架构基本分层模型</p>\n</blockquote>\n<blockquote>\n<p>对于中小型网站，通常应用层和服务层部署在一起；数据层另外部署。</p>\n</blockquote>\n</li>\n<li><p>复杂大型网站结构中，划分力度会更小、更细：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/web-hierarchical-model-details.svg\" alt> 网站架构基本分层模型</p>\n</blockquote>\n<ul>\n<li>位于 <code>应用层</code> 的服务器：为应对高并发的访问请求，通过负载均衡设备将一组服务器组成一个集群共同对外提供服务。<ul>\n<li>负载均衡设备通过 <code>心跳检测</code> 等手段监控应用服务器是否可用。</li>\n<li>遇到不可用的应用服务器时，将其从集群中剔除，并将请求分发到集群其他服务器。</li>\n</ul>\n</li>\n<li>位于 <code>服务层</code> 的服务器：应用层通过分布式服务调用框架访问该些服务器。<ul>\n<li>分布式服务调用框架会在应用层客户端中实现软件负载均衡。</li>\n<li>并且通过 <code>服务注册中心</code> 对提供服务的服务器进行心跳检测，当发现服务不可用时，通知客户端修改服务访问列表，提出不可用服务器。</li>\n</ul>\n</li>\n<li>位于 <code>数据层</code> 的服务器：<ul>\n<li>数据写入时进行数据同步复制，将数据写入多台服务器上，实现数据冗余备份。</li>\n<li>当数据库服务器宕机时，应用程序将访问切换至有备份数据的服务器。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>网站的可用性架构设计，不仅要考虑 <code>实际硬件故障</code> 引起的宕机，而且也要考虑 <code>网站升级发布</code> 引起的宕机。</p>\n</li>\n</ul>\n<h4 id=\"高可用应用\"><a href=\"#高可用应用\" class=\"headerlink\" title=\"高可用应用\"></a>高可用应用</h4><ul>\n<li>应用层也称业务逻辑层，用于处理网站应用的业务逻辑。</li>\n<li>应用层中，应用的显著特定是应用无状态性。<ul>\n<li>无状态的应用指应用服务器不保存业务的 <code>上下文信息</code>，仅根据每次请求提高的数据进行相应的数据进行相应的业务逻辑处理。</li>\n<li>多个服务器实例（服务器）之间 <code>完全对等</code>，请求提交到任意服务器，处理结果都是完全一样的。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"负载均衡进行无状态服务的失效转移\"><a href=\"#负载均衡进行无状态服务的失效转移\" class=\"headerlink\" title=\"负载均衡进行无状态服务的失效转移\"></a>负载均衡进行无状态服务的失效转移</h5><ul>\n<li>所有服务器完全对等，当任意一台或多台服务器宕机，请求可提交集群中任意一台可用机器处理。</li>\n<li><p>实现服务器可用状态实时监测、自动转移失败任务的机制是负载均衡。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availability-with-Load-Balancing.png\" alt> 利用负载均衡实现高可用</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"应用服务器集群的-Session-管理手段\"><a href=\"#应用服务器集群的-Session-管理手段\" class=\"headerlink\" title=\"应用服务器集群的 Session 管理手段\"></a>应用服务器集群的 Session 管理手段</h5><ul>\n<li>Web 应用中将多次请求修改使用的上下文对象称作 <code>会话</code>（Session）。<ul>\n<li>单机环境：Session 可由部署在服务器上的 Web 容器管理，如 JBoss。</li>\n<li>集群环境 ：Session 复制；Session 绑定；利用 Cookie 记录 Session；Session 服务器</li>\n</ul>\n</li>\n<li><p>Session 复制</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availability-Session-Coping.png\" alt> 利用 Session 复制实现应用服务器共享 Session</p>\n</blockquote>\n<ul>\n<li>服务器开启 Web 容器的 Session 复制功能，在集群中几台服务器之间同步 Session 对象，使得每台服务器上都保存所有用户的 Session 信息。</li>\n<li>存在问题：<ul>\n<li>1) 集群规模较大时，集群服务器需大量通信进行 Session 复制，占用服务器和网络资源；</li>\n<li>2) 所有用户的 Session 在每台服务器都拥有备份，当出现大量用户访问时会致使服务器内存不够 Session 开销。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Session 绑定</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availability-Session-Binding.png\" alt> 利用负载均衡的会话黏滞机制将请求绑定到特定服务器</p>\n</blockquote>\n<ul>\n<li>利用负载均衡的源地址 Hash 算法实现，负载均衡服务器总是将来源于同一 IP 的请求分发到同一台服务器上，或根据 Cookie 将同一用户的请求总是分发到同一台服务器上。</li>\n<li>Session 绑定于某台特定服务器上，保证 Session 总能从这台服务器上获取，这种方法又称作 <code>会话黏滞</code>。</li>\n<li>存在问题：当某台服务器宕机，存在于机器上的 Session 就不复存在，用户请求切换至其他机器因没有 Session 而无法完成业务处理。</li>\n</ul>\n</li>\n<li><p>利用 Cookie 记录 Session</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availability-Session-Cookie.png\" alt> 利用 Cookie 记录 Session 信息</p>\n</blockquote>\n<ul>\n<li>Session 记录在客户端；网站则利用浏览器 Cookie 记录 Session。</li>\n<li>存在问题：<ul>\n<li>1) 受 Cookie 大小限制，记录信息有限。</li>\n<li>2) 每次请求响应都需传输 Cookie。</li>\n<li>3) 用户关闭 Cookie，访问会不正常。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Session 服务器</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availability-Session-Server.png\" alt> 利用 Session 服务器共享 Session</p>\n</blockquote>\n<ul>\n<li>独立部署 Session 服务器（集群）统一管理 Session，应用服务器每次读写 Session 时都访问 Session 服务器。</li>\n<li><p>该方案事实上是将应用服务器的状态分离，即 <code>无状态应用服务器</code> 和 <code>有状态 Session 服务器</code>，然后针对这两种服务器的不同特性分别设计其架构。</p>\n<blockquote>\n<p>有状态 Session 服务器的应用场景：单点登录（SSO）、用户服务等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"高可用服务\"><a href=\"#高可用服务\" class=\"headerlink\" title=\"高可用服务\"></a>高可用服务</h4><blockquote>\n<p>可复用的服务和应用一样，也是无状态的服务，可使用类似负载均衡的失效转移策略实现高可用服务。</p>\n</blockquote>\n<ul>\n<li><code>分级管理</code><ul>\n<li>运维上将服务器进行分级管理。</li>\n<li>服务器部署时进行必要隔离，避免故障的连锁反应。</li>\n</ul>\n</li>\n<li><p><code>超时设置</code>：由于服务器宕机、线程死锁等会导致应用程序对服务端的调用失去响应，用户长时间得不到响应，同时还占用应用程序的资源，不利于及时将访问请求转移到正常服务器上。</p>\n<ul>\n<li>在应用程序中设置服务调用的超时时间，一旦超时通信框架就抛出异常。</li>\n<li>应用程序根据服务调度策略，可继续重试或将请求转移到提供相同服务的其他服务器上。</li>\n</ul>\n</li>\n<li><p><code>异步调用</code>：应用对服务的调用通过消息队列等异步方式完成。</p>\n<blockquote>\n<p>注意：并不是所有服务调用都适用异步调用，对于获取用户信息此类调用，异步方法会延长响应时间；对于必须确认服务调用成功才能继续下一步操作的应用也不适合使用异步调用。</p>\n</blockquote>\n</li>\n<li><p><code>服务降级</code>：拒绝服务和关闭服务</p>\n<ul>\n<li>拒绝服务：<ul>\n<li>拒绝低优先级应用的调用，减少服务调用并发数，确保核心应用正常使用。</li>\n<li>随机拒绝部分请求调用，让部分请求成功，避免大家一起死的 “惨状”。</li>\n</ul>\n</li>\n<li><p>关闭服务：关闭部分不重要的服务或者服务内部不重要的功能，以节约系统开销。 </p>\n<blockquote>\n<p>淘宝在每年双十一促销中，会在系统最繁忙时段关闭 ”评价“、”确认收货“ 等非核心服务。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>幂等性设计</code>：服务层保证服务重复调用和调用一次产生的结果相同，即服务具有幂等性。</p>\n</li>\n</ul>\n<h4 id=\"高可用数据\"><a href=\"#高可用数据\" class=\"headerlink\" title=\"高可用数据\"></a>高可用数据</h4><ul>\n<li><p>CAP 原理：数据一致性（Consistency）、数据可用性（Availibility）、数据伸缩性（Partition Tolerance）。</p>\n<ul>\n<li>高可用数据的含义<ul>\n<li>数据持久性：写入数据持久性存储，数据多份副本存放在不同物理设备上。</li>\n<li>数据可访问性：一个数据存储设备损坏，切换访问数据源，时间要足够短即终端用户无感知性。</li>\n<li>数据以一致性：多份数据副本，由于网络、服务器或者软件故障导致部分副本写入成功、部分写入失败，造成各副本间的数据不一致。</li>\n</ul>\n</li>\n<li><p>CAP原理认为，一个提供数据服务的存储系统无法同时满足以上三个条件。</p>\n<blockquote>\n<p>通常在大型网站中会强化分布式存储系统的可用性 (A) 和伸缩性 (P)，某程度弱化或放弃一致性 (C)。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>数据备份</p>\n<ul>\n<li>冷备份：定期拷贝数据至某种存储介质上物理存档保管。</li>\n<li><p>热备份：异步热备、同步热备</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Hight-Availibility-Async-Backup.svg\" alt> <img src=\"/images/CS/Website-Tech-Framework/Hight-Availibility-Sync-Backup.svg\" alt> 异步热备 v.s. 同步热备</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>失效转移</p>\n<ul>\n<li>失效确认：心跳检测和应用程序访问失败报告</li>\n<li>访问转移<ul>\n<li>完全对等存储的服务器：应用程序根据配置直接切换到对等服务器上。</li>\n<li>不对等存储的服务器：重新计算路由，重新选择服务器。</li>\n</ul>\n</li>\n<li>数据恢复：服务器宕机，为此数据存储副本数减少，必须将副本数目恢复至系统设定值。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件质量保证\"><a href=\"#软件质量保证\" class=\"headerlink\" title=\"软件质量保证\"></a>软件质量保证</h4><blockquote>\n<p>为了保证网站线上系统的可用性，需要采取有别于传统软件开发的 <code>质量保证手段</code>。</p>\n</blockquote>\n<ul>\n<li><p>网站发布：事实上，网站发布过程和服务器宕机效果相当，即关闭应用再重新部署启动应用。</p>\n</li>\n<li><p>自动化测试</p>\n<ul>\n<li><p>引入原因：代码上线前需进行严格测试；为保证系统没有引入始料未及的 BUG，还需对整个网站系统（至少上下文关联的系统模块）进行全面回归测试。</p>\n<blockquote>\n<p>使用人工测试，基于成本、时间、效果以及测试覆盖率都不尽理想。</p>\n</blockquote>\n</li>\n<li><p>解决方案：为此，引入 Web 自动化测试工具。</p>\n<blockquote>\n<p>比如 Selenium 可在浏览中模拟用户操作进行测试。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>预发布验证</p>\n<ul>\n<li>引入原因：即使通过严格的测试，应用部署到线上服务器仍然会出现各种问题，更甚无法启动服务器。主要原因是生产与测试环境不一致导致的，比如数据库、缓存、第三方服务接口等。</li>\n<li><p>解决方案：在预发布服务器上预发布验证。预发布服务器与正式服务器都部署在相同的物理环境，同一数据源、相同生产配置、依赖 相同外部服务等。区别于正式服务器， 唯一区别是没有配置在负载均衡服务器上，外部用户无法访问。</p>\n<blockquote>\n<p>注意：预发布服务器连接的是真实生产环境、真实数据库，所有预发布验证操作都是真实有效的数据，这些操作也许会引起不可预期的问题。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>代码控制：代码控制核心问题是代码管理，既保证代码发布版本稳定正确，同时保证不同团队开发互不影响。</p>\n<ul>\n<li>主干开发，分支发布：一个分支一个发布版本，该版本有BUG继续在该分支上修改发布，待验证稳定时合并回主干。</li>\n<li>分支开发，主干发布：开发新功能或修复BUG，从主干拉取一个分支进行，开发测试通过后合并回主干，由主干进行发布。主干上的代码永远是最新发布版本。</li>\n</ul>\n</li>\n<li><p>自动化发布：火车发布模型</p>\n<blockquote>\n<p>很多网站选择周四作为发布日，这样周一至周三准备上线工作，周五留有余地以挽回错误。而选择周五发布，发现问题周末就得凉凉了。</p>\n</blockquote>\n</li>\n<li><p>灰度发布</p>\n<ul>\n<li>将服务器分成若干部分，每天只发布一部分服务器，观察运行是否稳定无故障。</li>\n<li>持续几天逐渐把整个集群全部发布完毕。</li>\n<li><p>期间若发现问题，只需要回滚已发布的部分服务器。</p>\n<blockquote>\n<p>灰度发布也常用于用户测试（AB测试），即部分服务器上新版本应用，其余服务器保持老版本。然后监控用户操作行为，收集用户体验报告，比较用户对两个版本的满意度，以确定最终发布版本。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网站运行监控\"><a href=\"#网站运行监控\" class=\"headerlink\" title=\"网站运行监控\"></a>网站运行监控</h4><blockquote>\n<p>盲人骑瞎马，夜半临深池。不允许没有监控的系统上线，没有指标可循，提高可用性、减少故障率就无从做起了。</p>\n</blockquote>\n<h5 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h5><ul>\n<li><p>用户行为日志收集：用户在浏览器的所有操作、操作系统与浏览器版本信息、IP 地址、页面访问路径、页面停留时间等。</p>\n<blockquote>\n<p>获得以上数据，可用于 PV/UV 指标、分析用户行为、优化网站设计、个性化推荐与营销等。</p>\n</blockquote>\n<ul>\n<li>客户端浏览器日志收集：利用页面嵌入 JavaScript 脚本收集用户真实的操作行为，比如百度统计、腾讯统计等。</li>\n<li>服务端日志收集：Web 服务器的日志记录功能。 </li>\n</ul>\n</li>\n<li><p>服务器性能监控：内存占比、磁盘I/O、网络 I/O 等。</p>\n</li>\n</ul>\n<h5 id=\"监控管理\"><a href=\"#监控管理\" class=\"headerlink\" title=\"监控管理\"></a>监控管理</h5><ul>\n<li>系统报警：给监控指标设定报警阈值。</li>\n<li>失效转移：主动通知应用，应用及时进行失效转移。</li>\n<li>自动优雅降级：访问高峰期间，主动关闭部分非核心功能，释放部分系统资源。</li>\n</ul>\n<h3 id=\"06-网站伸缩性架构\"><a href=\"#06-网站伸缩性架构\" class=\"headerlink\" title=\"06 网站伸缩性架构\"></a>06 网站伸缩性架构</h3><ul>\n<li>网站伸缩性：不需要改变网站的软硬件设计，仅通过改变部署的服务器数量就可扩大或缩小网站的服务处理能力。</li>\n</ul>\n<h4 id=\"网站架构的伸缩性设计\"><a href=\"#网站架构的伸缩性设计\" class=\"headerlink\" title=\"网站架构的伸缩性设计\"></a>网站架构的伸缩性设计</h4><ul>\n<li><p>网站伸缩性设计分类</p>\n<ul>\n<li><p>不同功能进行物理分离实现伸缩：即按照不同服务分类，比如应用部署、数据存储、数据缓存等。</p>\n<ul>\n<li>纵向分离（服务分层后分离）：系统服务分离，将业务处理流程的不同部分分离部署，实现伸缩性。</li>\n<li>横向分离（业务分割后分离）：业务模块分离，将不同业务模块分离部署，实现伸缩性。</li>\n</ul>\n</li>\n<li><p>单一功能通过集群规模实现伸缩：集群内多台服务器部署相同的服务。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-Server-Physical-Separation.svg\" alt> 网站伸缩性实现方式</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>一个具有良好伸缩性架构设计的网站，其架构设计必定走在业务发展前面。当业务剧增时，只需要购买服务器，简单部署实施即可。</p>\n</li>\n</ul>\n<h4 id=\"应用服务器集群的伸缩性设计\"><a href=\"#应用服务器集群的伸缩性设计\" class=\"headerlink\" title=\"应用服务器集群的伸缩性设计\"></a>应用服务器集群的伸缩性设计</h4><ul>\n<li>实现思路：负载均衡（HTTP 重定向、DNS 域名解析、反向代理）</li>\n<li>前提条件：应用服务器应该设计成无状态的，每次用户请求都可以送达集群中任意一台服务器上处理。</li>\n<li><p>负载均衡服务器：实现应用服务器的伸缩性。</p>\n<ul>\n<li>可感知、可配置集群的服务器数量</li>\n<li>向服务器分发请求</li>\n</ul>\n</li>\n<li><p>HTTP 重定向负载均衡</p>\n<ul>\n<li>优势：实现简单</li>\n<li><p>劣势：两次服务器请求完成一次访问；重定向服务器自身处理能力可能成为瓶颈。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-LoadBalancing-HTTP-Redirection.png\" alt> HTTP 重定向负载均衡</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>DNS 域名解析负载均衡：配置多个 @ 记录，DNS 根据 @ 记录和负载均衡算法计算得到 IP 地址。</p>\n<ul>\n<li>优势：将负载均衡的任务转移至 DNS。</li>\n<li><p>劣势：DNS 是多级解析，每一级 DNS 都可能缓存 @ 记录。当下线某台服务器，即使修改了 DNS 的 @ 记录，但由于生效时间限制，若此时域名解析到下线的服务器，将导致用户访问失败。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-LoadBalancing-DNS-Domain.png\" alt> DNS 域名解析负载均衡</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>反向代理负载均衡：在应用程序中分发数据</p>\n<ul>\n<li>优势：缓存资源，改善网站性能。</li>\n<li><p>劣势：所有请求和响应的中转站，代理服务器性能会成为瓶颈。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-LoadBalancing-Reverse-Agent.png\" alt> 反向代理负载均衡</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>IP 负载均衡</p>\n<ul>\n<li>优势：在内核进程中完成数据分发，较反向代理负载均衡有更好性能。</li>\n<li><p>劣势：集群中最大响应数据吞吐量受限制于负载均衡服务器的网卡带宽。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-LoadBalancing-IP-Load.png\" alt> IP 负载均衡</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>数据链路层负载均衡：在通信协议的数据链路层修改 MAC 地址进行负载均衡，又称作直接路由方式。</p>\n<ul>\n<li><p>优势：不需要通过负载均衡服务器进行地址转换，响应数据包直接返回浏览器，以避免负载均衡服务器网卡带宽成为瓶颈。</p>\n<blockquote>\n<p>直接路由方式是目前较为广泛使用的负载均衡手段，相关开源产品 LVS（Linux Virtual Server）。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-LoadBalancing-Data-Link.png\" alt> 数据链路层负载均衡</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式缓存集群的伸缩性设计\"><a href=\"#分布式缓存集群的伸缩性设计\" class=\"headerlink\" title=\"分布式缓存集群的伸缩性设计\"></a>分布式缓存集群的伸缩性设计</h4><ul>\n<li><p>实现目标：因缓存请求必须找到缓存有数据的服务器才能访问，该特点会严重制约分布式缓存集群的伸缩性设计。为此，新加入的缓存服务器应使得整个缓存服务器集权已缓存的数据尽可能还被访问到，这是分布式缓存集群伸缩性设计的主要目标。</p>\n</li>\n<li><p>路由算法：分布式缓存的一致性 Hash 算法</p>\n<ul>\n<li>算法过程<ul>\n<li>Step.01：先构造一个长度为 $2^{32}$ 的整数环（二叉排序树实现，且二叉树的最左叶子节点与最右叶子节点相连接构成环）；</li>\n<li>Step.02：根据节点名称的 Hash 值（Hash $\\in [0, 2^{32}-1]$）将缓存服务器节点放置于 Hash 环上；</li>\n<li>Step.03：计算缓存数据的 Key 值得到 Hash 值，然后在 Hash 环上顺时针查找距离 Key 的 Hash 值最近的缓存服务器节点；</li>\n<li>Step.04：完成 Key 到服务器的 Hash 映射查找。</li>\n</ul>\n</li>\n<li><p>实操演示</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-Hash-Cricle.svg\" alt> 一致性 Hash 算法</p>\n</blockquote>\n<ul>\n<li>假设 Node1 的 Hash = 3594963423，Node2 的 Hash  = 1845328979，而 Key0 的 Hash = 2534256785，那么 Key0在环上顺序针查找最近的节点就是 Node1。</li>\n<li>当缓存服务器集群需要扩容时，只需将新加入节点 Node3 的 Hash 值放入一致性 Hash 环中。由于 Key 是顺时针查找距离最近邻节点，因此新加入的节点只影响整个环中的一小段。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据服务器集群的伸缩性设计\"><a href=\"#数据服务器集群的伸缩性设计\" class=\"headerlink\" title=\"数据服务器集群的伸缩性设计\"></a>数据服务器集群的伸缩性设计</h4><ul>\n<li>缓存的目的是加速数据读取并减轻数据存储服务器的负载压力，部分缓存数据丢失不影响业务的正常运作。</li>\n<li>数据存储服务器必须保证数据的可靠存储，任何情况都必须保证数据的可用性与正确性。</li>\n</ul>\n<h5 id=\"关系数据库集群\"><a href=\"#关系数据库集群\" class=\"headerlink\" title=\"关系数据库集群\"></a>关系数据库集群</h5><ul>\n<li>主从模式<ul>\n<li>数据写操作都在主服务器上，主服务器将数据同步到集群中其他从服务器。</li>\n<li>数据读操作及数据分析等离线操作在从服务器上进行。</li>\n</ul>\n</li>\n<li>业务分割模式：不同业务数据表部署于不同的数据库集群上、同一张表分片储存于多个数据库，及数据库的 <code>分库分表</code>。</li>\n</ul>\n<h5 id=\"NoSQL-数据库\"><a href=\"#NoSQL-数据库\" class=\"headerlink\" title=\"NoSQL 数据库\"></a>NoSQL 数据库</h5><ul>\n<li>引言：先设计数据库然后设计程序，从而导致关系模型绑架对象模型，引申出旷日持久的对象贫血模型与充血模型之争。<ul>\n<li>贫血模型：业务对象仅包含数据而不包含行为，其作用只是数据载体或数据传递介质。系统的业务逻辑全部放到业务逻辑层，会导致业务逻辑层比较庞大。</li>\n<li>充血模型：业务对象既包含数据又包含行为，他的作用不再只是数据的载体而是一个真正有行为的对象。</li>\n</ul>\n</li>\n<li>问题：关系数据库难以克服的缺陷，即糟糕的海量数据处理能力以及僵硬的设计约束。</li>\n<li>方案：Not Only SQL（NoSQL），指非关系的、分布式数据库设计模式。但 NoSQL 只是关系数据库的补充而非替代方案。</li>\n<li><p>HBase</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Website-Tech-Framework/Scalability-HBase-Architecture.svg\" alt> HBase 架构</p>\n</blockquote>\n<ul>\n<li>其伸缩性主要依赖于分裂的 HRegion 以及可伸缩的分布式文件系统 HDFS。</li>\n<li>HRegion：数据以 HRegion 为单位进行管理，当应用程序访问数据时，必须先找到 HRegion，然后将读/写操作提交给 HRegion，由 HRegion 完成存储层面的数据操作。<ul>\n<li>每个 HRegionServer 上启用多个 HRegion 实例；</li>\n<li>每个 HRegion 中存储一段 Key 值区间的数据，比如 [key1, key2) ；</li>\n<li>每当 HRegion 写入数据达到配置阈值时，触发分裂机制变成两个 HRegion，并在集群中进行迁移使得 HRegionServer 负载均衡。</li>\n</ul>\n</li>\n<li>HMaster：用于存储 HRegion 信息（Key 值区间、所在 HRegionServer 地址、访问端口等）。<ul>\n<li>为提高高可用性，HBase 启用多个 HMaster，并通过 Zookeeper 管理（需选出一个主服务器）。</li>\n<li>通过 Zookeeper 获得主 HMaster 地址，输入 Key 值获得所在 HRegionServer 地址，最后请求 HRegionServer 上的 HRegion 获得数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"07-网站可扩展架构\"><a href=\"#07-网站可扩展架构\" class=\"headerlink\" title=\"07 网站可扩展架构\"></a>07 网站可扩展架构</h3><ul>\n<li><p>扩展性与伸缩性的误用</p>\n<ul>\n<li>扩展性（Extensibility）：软件层面，基础设施稳定不需要经常变更，应用之间较少依赖耦和耦合，对需求变更可敏捷响应。</li>\n<li><p>伸缩性（Scalability）：硬件层面，能够通过增加或减少自身资源规模的方式增强或减少自己计算处理事务的能力。</p>\n<blockquote>\n<p>在网站架构设计中，通常指利用集群方式增加服务器数量，以提高系统的整体事务吞吐能力。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>网站可扩展性架构的核心思想是模块化，在此基础上降低模块间的耦合性，提高模块的复用性。</p>\n</li>\n<li>利用分层和分割方式将应用系统分割为若干个低耦合的独立组件模块，组件模块间通过消息传递及依赖调用方式聚合成一个完整系统。模块分布式部署后具体聚合方式有 <code>分布式消息队列</code> 与 <code>分布式服务</code>。</li>\n</ul>\n<h4 id=\"利用分布式消息队列降低系统耦合性\"><a href=\"#利用分布式消息队列降低系统耦合性\" class=\"headerlink\" title=\"利用分布式消息队列降低系统耦合性\"></a>利用分布式消息队列降低系统耦合性</h4><blockquote>\n<p>通过消息对象来降低系统耦合性。</p>\n</blockquote>\n<ul>\n<li><p>事件驱动架构（Event Driven Architecture）：在低耦合的模块之间传输事件消息，并借助事件消息的通信完成模块间合作。常用实现手段是分布式消息队列。</p>\n<blockquote>\n<p>典型 EDA 架构就是生产者-消费者模式。</p>\n</blockquote>\n</li>\n<li><p>分布式消息队列：发布-订阅模式，类似 “队列” 的数据结构，先进先出（FIFO）对消息进行存取操作；应用程序通过远程访问接口实现分布式的异步调用。</p>\n<blockquote>\n<p>常见的消息队列产品有 Kafka、RabbitMQ 等，理论上使用数据库也可以实现分布式消息队列的，消息生产者程序将消息记录写入库并为记录附上时间戳。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"利用分布式服务打造可复用业务平台\"><a href=\"#利用分布式服务打造可复用业务平台\" class=\"headerlink\" title=\"利用分布式服务打造可复用业务平台\"></a>利用分布式服务打造可复用业务平台</h4><blockquote>\n<p>通过系统接口来降低系统耦合性。</p>\n</blockquote>\n<ul>\n<li><p>巨无霸应用系统困境</p>\n<ul>\n<li>新增业务困难</li>\n<li>编译部署困难</li>\n<li>数据库连接耗尽</li>\n<li>代码分支管理困难</li>\n</ul>\n</li>\n<li><p>解决方案：拆分模块，独立部署</p>\n<ul>\n<li>纵向拆分：大应用拆成小应用。</li>\n<li>横向拆分：可复用的业务独立部署为分布式服务。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"可扩展数据结构\"><a href=\"#可扩展数据结构\" class=\"headerlink\" title=\"可扩展数据结构\"></a>可扩展数据结构</h4><ul>\n<li>问题：传统关系数据库为保证关系运算的正确性，则需要指定表的字段及数据类型，并遵循特定的范式要求设计数据表。僵硬的数据结构难以面对需求变更带来的挑战，虽可通过冗余字段来应对变化，但糟糕的数据库设计总会有不灵之时。</li>\n<li><p>解决：如何做到可扩展的数据结构设计，无需修改表结构扩展数据字段？</p>\n<blockquote>\n<p>NoSQL 数据库：使用列簇设计（ColumnFamily），一种面向列簇的稀疏矩阵存储格式。它在创建表时，只需指定 ColumnFamily 的名字即可，无须指定字段（Column），在写入数据时再指定。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"08-网站的安全架构\"><a href=\"#08-网站的安全架构\" class=\"headerlink\" title=\"08 网站的安全架构\"></a>08 网站的安全架构</h3><h4 id=\"网站应用攻击与防御\"><a href=\"#网站应用攻击与防御\" class=\"headerlink\" title=\"网站应用攻击与防御\"></a>网站应用攻击与防御</h4><ul>\n<li><p>XSS 攻击：跨站点脚本攻击（Cross Site Script），篡改网页注入 HTML 脚本，在用户浏览网页时控制用户浏览器进行恶意操作。</p>\n<ul>\n<li>反射性：攻击者诱使用户点击一个嵌入恶意脚本的链接，达到攻击目的。</li>\n<li>持久性：攻击者提高含有恶意脚本的请求，保存在被攻击的 Web 站点的数据库中，用户浏览网页时，恶意脚本包含在正常的内容页上。</li>\n<li>消毒手段<ul>\n<li>对 HTML 危险字符转义，比如 <code>&gt;</code> 转换为 <code>&amp;gt;</code>、<code>&lt;</code> 转换为 <code>&amp;lt;</code>。</li>\n<li>浏览器禁止页面 JavaScript 访问带有 HttpOnly 属性的 Cookie。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>注入攻击</p>\n<ul>\n<li><p>SQL 注入：在 HTTP 请求中注入恶意 SQL，服务器用请求参数构造数据库 SQL 时被一起构造并执行。</p>\n<blockquote>\n<p>注：关注错误回显功能，即服务器内部 500 错误回显，容易暴露数据库表结构。</p>\n</blockquote>\n</li>\n<li><p>OS 注入：OS 命令</p>\n</li>\n<li>消毒手段：SQL 预编译和参数绑定</li>\n</ul>\n</li>\n<li><p>CSRF 攻击：跨站点请求伪造（Cross Site Request Forgery），核心是利用了浏览器 Cookie 或者服务器 Session 策略，盗取用户身份进行跨站请求、非法操作。常见防范手段：</p>\n<ul>\n<li>Token 校验：每次请求都需附带时效性 Token 发起请求，且通过注册机制获得 Token。</li>\n<li>验证码校验：人机交互方式。</li>\n</ul>\n</li>\n<li><p>错误码： 服务端未处理异常堆栈信息，而是直接输出客户端浏览器，该方式虽然对调试和错误报告友好但对攻击者提供了可乘之机。</p>\n<blockquote>\n<p>拦截异常要处理、对错误码进行拦截处理。</p>\n</blockquote>\n</li>\n<li><p>文件上传：建立文件白名单机制，限制文件类型。</p>\n</li>\n<li><p>路径遍历：在请求 URL 中使用相对路径，遍历系统未开放的目录和文件。比如 <code>../</code>。</p>\n</li>\n</ul>\n<h4 id=\"信息加密及密钥管理\"><a href=\"#信息加密及密钥管理\" class=\"headerlink\" title=\"信息加密及密钥管理\"></a>信息加密及密钥管理</h4><ul>\n<li><p>单向散列加密：输入不同长度的信息进行散列计算，得到固定长度的输出，具有不可逆性。比如 MD5、SHA 算法。</p>\n<ul>\n<li>对密码进行单向散列加密，密码密文存入数据库；</li>\n<li>密码验证时，同样对密码明文散列计算，与数据库比对。</li>\n</ul>\n</li>\n<li><p>对称加密：加密、解密使用同一密钥，比如 DES、RC、SM4 算法。</p>\n</li>\n<li><p>非对称加密：使用两个密钥来进行加密和解密，一个是对外公开的公钥（Public key）和私钥（Private key）。比如 RSA、ECC、SM2 算法。</p>\n</li>\n<li><p>密钥安全管理</p>\n<ul>\n<li>保证线上线下环境配置不同的密钥，密钥写在配置文件中，且使用密文形式保存。</li>\n<li>加解密算法放在应用系统，密钥存放于独立服务器，且密钥实际存储时被切割为数片，加密存储于不同存储介质上。</li>\n</ul>\n</li>\n</ul>\n","categories":["Reading"],"tags":["分布式","缓存","异步","集群","高性能","高可用"]},{"title":"扛得住的 MySQL 数据库性能优化","url":"/2022/06/mysql-architect.html","content":"<p>遵循“先抽象后具体，先软件后硬件”原则，通过数据库结构设计、SQL 优化、存储引擎、操作系统以及服务器硬件等方面，设计方案以优化数据库性能。</p>\n<a id=\"more\"></a>\n<h2 id=\"数据库性能分析\"><a href=\"#数据库性能分析\" class=\"headerlink\" title=\"数据库性能分析\"></a>数据库性能分析</h2><ul>\n<li>数据库性能优化顺序：原则是先抽象后具体，先软件后硬件。<ul>\n<li>Case.01：数据库结构设计与 SQL 优化</li>\n<li>Case.02：存储引擎选型</li>\n<li>Case.03：操作系统选型</li>\n<li>Case.04：服务器硬件升级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据库结构设计\"><a href=\"#数据库结构设计\" class=\"headerlink\" title=\"数据库结构设计\"></a>数据库结构设计</h3><ul>\n<li>过分的范式化设计会造成太多表关联，影响查询效率。过分的反范式化设计会造成表中太多冗余列。在项目当中要以实际场景出发合理设计数据表。</li>\n<li>避免在 OLTP 环境中使用不恰当的分区表。</li>\n<li>使用外键保证了数据完整性，但对于表维护等操作的效率影响是尤为明显的。</li>\n</ul>\n<h3 id=\"数据库存储引擎\"><a href=\"#数据库存储引擎\" class=\"headerlink\" title=\"数据库存储引擎\"></a>数据库存储引擎</h3><ul>\n<li><p>围绕事务、备份、锁粒度等方面选择合适的数据库存储引擎。</p>\n<blockquote>\n<p>MySQL 如何选择合适的存储引擎：<a href=\"#存储引擎\">存储引擎</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"服务器硬件\"><a href=\"#服务器硬件\" class=\"headerlink\" title=\"服务器硬件\"></a>服务器硬件</h3><h4 id=\"CPU-方案\"><a href=\"#CPU-方案\" class=\"headerlink\" title=\"CPU 方案\"></a>CPU 方案</h4><ul>\n<li>对于高并发场景，CPU 多核心数量比 CPU 单核心频率更重要。</li>\n<li>对于复杂 SQL 以及 CPU 密集型场景，CPU 单核心频率更重要。</li>\n</ul>\n<h4 id=\"内存方案\"><a href=\"#内存方案\" class=\"headerlink\" title=\"内存方案\"></a>内存方案</h4><ul>\n<li>理论上，内存大小、内存频率的选型方案以硬件支持的最大性能输出最好。</li>\n</ul>\n<h4 id=\"磁盘方案\"><a href=\"#磁盘方案\" class=\"headerlink\" title=\"磁盘方案\"></a>磁盘方案</h4><ul>\n<li><p>使用 RAID 增强传统机械硬盘性能：磁盘冗余阵列（RAID），利用多块磁盘实现数据的并发读写和数据备份，主要为了改善磁盘的访问延迟，增加磁盘的可用性和容错能力。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-RAID.svg\" alt>  RAID</p>\n</blockquote>\n<ul>\n<li><p>RAID 0：根据磁盘将数据分为 n 份，数据同时并发写入 n 快磁盘，使得数据整体写入速度是一块磁盘的 n 倍。同理，RAID 0 也具有极速的读速度。</p>\n<blockquote>\n<p>但 RAID 0 不做数据备份，n 块硬盘中只要有一块损坏，数据完整性即被破环，所有磁盘的速度都会损坏。</p>\n</blockquote>\n</li>\n<li><p>RAID 1：一份数据同时写入两块硬盘，这样任何一块硬盘损坏都不会导致数据丢失，插入一块新磁盘可通过复制数据方式自动修复。</p>\n</li>\n<li><p>RAID 10：将所有磁盘平均分成两份，数据同时在两份磁盘写入（相当与 RAID 1）。但每一份数据在 n/2 块磁盘上，利用 RAID 0 技术并发读写。</p>\n<blockquote>\n<p>结合 RAID 0 和 RAID 1 两种方案，但 RAID 10 磁盘利用率较低（一半磁盘用来备份数据）。</p>\n</blockquote>\n</li>\n<li><p>RAID 3：一般情况，一台服务器不会同时损坏两块磁盘的情况（物理因素除外），假设在只损坏一块磁盘情况下，利用其他磁盘的数据回复损坏磁盘的数据，即保证了可靠性和性能，同时提升了磁盘利用率。</p>\n<p>  将数据分成 n-1 份，并发写入 n-1 块磁盘，并在第 n 块磁盘记录校验数据，任何一块磁盘损坏（包含校验数据磁盘），都可利用其他 n-1 块磁盘恢复数据。</p>\n</li>\n<li><p>RAID 5：原理与 RAID 3 相似，但校验数据不是写入第 n 块磁盘，而是螺旋式地写入所有磁盘中。即检验数据也平均到所有磁盘上，避免了频繁写坏一块磁盘。</p>\n</li>\n<li><p>RAID 6：原理与 RAID 3 相似，数据写入 n-2 块磁盘中，并螺旋式地在两块磁盘中写入校验信息（使用不同算法生成）。</p>\n</li>\n</ul>\n</li>\n<li><p>使用固态存储 SSD 与 PCIe 卡</p>\n<ul>\n<li>较于机械磁盘有较好随机读写性能</li>\n<li>解决单线程负载 I/O 性能瓶颈问题</li>\n</ul>\n</li>\n<li><p>使用网络存储 NAS 与 SAN：两种外部文件存储设备加载到服务器上的方法</p>\n<ul>\n<li>NAS（Network-Attached Storage）：NAS 设备使用标准以太网连接，NAS 通过基于文件协议来访问数据，比如 NFS / SMB 协议。</li>\n<li><p>SAN（Storage Area Network）：SAN 设备通过光纤连接，SAN 在块级别存储数据。</p>\n<blockquote>\n<p>通俗理解，SAN 是网络上的硬盘，NAS 则是网络上的文件系统。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据库结构设计-1\"><a href=\"#数据库结构设计-1\" class=\"headerlink\" title=\"数据库结构设计\"></a>数据库结构设计</h2><h3 id=\"设计的目的\"><a href=\"#设计的目的\" class=\"headerlink\" title=\"设计的目的\"></a>设计的目的</h3><ul>\n<li><p>尽量避免数据维护中出现更新、插入以及删除异常。</p>\n  <table>\n      <thead>\n          <tr>\n              <th>学号</th>\n              <th>姓名</th>\n              <th>年龄</th>\n              <th>课程号</th>\n              <th>课程</th>\n              <th>学分</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>1</td>\n              <td>张三</td>\n              <td>20</td>\n              <td>C1</td>\n              <td>马克思基本原理概论</td>\n              <td>3.0</td>\n          </tr>\n          <tr>\n              <td>2</td>\n              <td>张三</td>\n              <td>20</td>\n              <td>C2</td>\n              <td>数据结构</td>\n              <td>5.0</td>\n          </tr>\n          <tr>\n              <td>3</td>\n              <td>李四</td>\n              <td>21</td>\n              <td>C3</td>\n              <td>高等数学</td>\n              <td>5.0</td>\n          </tr>\n          <tr>\n              <td>4</td>\n              <td>王五</td>\n              <td>19</td>\n              <td>C2</td>\n              <td>数据结构</td>\n              <td>5.0</td>\n          </tr>\n      </tbody>\n  </table>\n\n<ul>\n<li><p>插入异常：表中某个实体随着另一个实体而存在。</p>\n<blockquote>\n<p>比如：插入一门新课程 (C4, 论文写作, 2.0)，但此课程并暂没有学生选修，此时会报 “ ‘学号’ doesn’t have a default value” 异常。</p>\n</blockquote>\n</li>\n<li><p>更新异常：更改表中某个实体的单独属性时，需对多行进行更新。</p>\n<blockquote>\n<p>比如：修改课程 “数据结构” 的学分为 4.5，则多条数据更新异常。</p>\n</blockquote>\n</li>\n<li><p>删除异常：删除表中某一实体则会导致其他实体消失。</p>\n<blockquote>\n<p>比如：删除 “学号=4” 的记录，”高等数学” 这门课随之删除。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>减少数据冗余</p>\n</li>\n<li><p>提高查询效率</p>\n</li>\n<li><p>节省存储空间</p>\n</li>\n</ul>\n<h3 id=\"设计的步骤\"><a href=\"#设计的步骤\" class=\"headerlink\" title=\"设计的步骤\"></a>设计的步骤</h3><ul>\n<li>需求分析：存储需求、数据处理需求、数据的安全性以及完整性</li>\n<li>逻辑设计：设计数据的逻辑存储结构<ul>\n<li>数据实体之间的逻辑关系，解决数据冗余和数据维护异常</li>\n<li>范式设计准则</li>\n</ul>\n</li>\n<li>物理设计：根据所使用的数据库特征进行表结构设计</li>\n<li>维护优化：索引、存储结构优化等</li>\n</ul>\n<h3 id=\"范式设计\"><a href=\"#范式设计\" class=\"headerlink\" title=\"范式设计\"></a>范式设计</h3><h4 id=\"范式化设计\"><a href=\"#范式化设计\" class=\"headerlink\" title=\"范式化设计\"></a>范式化设计</h4><ul>\n<li>第一范式（1NF）：<ul>\n<li>属性不可分，即数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。</li>\n<li>单一属性列由基本的数据类型所构成。</li>\n</ul>\n</li>\n<li><p>第二范式（2NF）：</p>\n<ul>\n<li>表中只具有一个主键。</li>\n<li><p>每个非主属性完全函数依赖于键码，而不能存在非主属性部分依赖于键码。</p>\n<blockquote>\n<p>比如，复合主键中常包括两种实体，如上述例子中的学生实体与课程实体，它们各自的属性依赖于各实体的主键。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>第三范式（3NF）：</p>\n<ul>\n<li><p>非主属性即不部分依赖，也不传递函数依赖于键码。</p>\n<blockquote>\n<p>简而言之，第三范式就是属性不依赖于其它非主属性。</p>\n</blockquote>\n</li>\n<li><p>上述的关系中存在以下传递函数依赖：学号 $\\to$ 课程 $\\to$ 学分。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反范式设计\"><a href=\"#反范式设计\" class=\"headerlink\" title=\"反范式设计\"></a>反范式设计</h4><ul>\n<li>反范式化：鉴于性能和读取效率考量，适当违反数据库范式设计要求，允许少量数据冗余。</li>\n<li><p>优劣比较</p>\n  <table>\n      <thead>\n          <tr>\n              <th>优劣</th>\n              <th>范式化</th>\n              <th>反范式化</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>优势</td>\n              <td>1) 可尽量减少数据冗余<br>2) 更新操作较反范式化快</td>\n              <td>1) 减少表关联查询<br>2) 更好进行索引优化</td>\n          </tr>\n          <tr>\n              <td>劣势</td>\n              <td>1) 多表关联查询<br>2) 难以进行索引优化</td>\n              <td>1) 存在数据冗余及数据维护异常</td>\n          </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h3 id=\"物理设计\"><a href=\"#物理设计\" class=\"headerlink\" title=\"物理设计\"></a>物理设计</h3><h4 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h4><ul>\n<li><p>选择合适的存储引擎</p>\n  <table>\n      <thead>\n          <tr>\n              <th>存储引擎</th>\n              <th>事务</th>\n              <th>锁粒度</th>\n              <th>忌用</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>MyISAM</td>\n              <td>不支持</td>\n              <td>支持并发插入的表级锁</td>\n              <td>读写操作频繁</td>\n          </tr>\n          <tr>\n              <td>Innodb</td>\n              <td>支持</td>\n              <td>行级锁</td>\n              <td>--</td>\n          </tr>\n          <tr>\n              <td>Archive</td>\n              <td>不支持</td>\n              <td>支持并发插入的表级锁</td>\n              <td>随时读取、更新、删除</td>\n          </tr>\n          <tr>\n              <td>Ndb Cluster</td>\n              <td>支持</td>\n              <td>行级锁</td>\n              <td>--</td>\n          </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>InnoDB</p>\n<ul>\n<li>MySQL 默认的事务型存储引擎，只有在它不支持某些特性时，才考虑其它存储引擎。</li>\n<li>实现了四个标准的隔离级别，默认级别是可重复读 (REPEATABLE READ)。在可重复读隔离级别下，通过多版本并发控制 (MVCC) + Next-Key Locking 防止幻影读。</li>\n<li><p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>\n<blockquote>\n<p>聚簇与非聚簇的区别在于：数据文件与索引文件是否分开存储。比如非聚簇索引，索引文件的叶子节点的 data 域仅保存数据记录地址。</p>\n</blockquote>\n</li>\n<li><p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>\n</li>\n<li>支持真正的 <code>在线热备份</code>。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</li>\n</ul>\n</li>\n<li><p>MyISAM</p>\n<ul>\n<li>管理非事务表，是 ISAM (Indexed Sequential Access Method，有索引的顺序访问方法) 的扩展格式。</li>\n<li>不是事务安全的，且不支持外键。</li>\n<li>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入。</li>\n<li>可手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><p>整数类型</p>\n<table>\n    <thead>\n        <tr>\n            <th>描述</th>\n            <th>列类型</th>\n            <th>存储空间</th>\n            <th width=\"30%\">显示宽度（默认值 M）</th>\n            <th width=\"30%\">取值范围</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>标准整型</td>\n            <td>int</td>\n            <td>4 字节</td>\n            <td>int(11)</td>\n            <td>有符号：[-2^{31},  2^{31}-1]<br>无符号：[0,  2^{32}]</td>\n        </tr>\n        <tr>\n            <td>大整型</td>\n            <td>bigint</td>\n            <td>8 字节</td>\n            <td>int(20)</td>\n            <td>有符号：[-2^{63},  2^{63}-1]<br>无符号：[0,  2^{64}]</td>\n        </tr>\n    </tbody>\n</table>\n\n\n</li>\n</ul>\n<ul>\n<li>显示宽度和数据类型的取值范围是没有任何关系的，显示宽度指 MySQL 最大可能显示的数字个数，数值位数小于指定宽度时由空格填充。</li>\n<li>若插入大于显示宽度的值，只要该值不超过该类型的取值范围，数值依然可以插入。</li>\n</ul>\n<ul>\n<li><p>浮点类型</p>\n<table>\n    <thead>\n        <tr>\n            <th>描述</th>\n            <th>列类型</th>\n            <th width=\"25%\">存储空间</th>\n            <th width=\"25%\">显示宽度（默认值 M）</th>\n            <th>取值范围</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>定点数</td>\n            <td>decimal</td>\n            <td>9 个数 / 4 字节<br>小数点占 1 字节</td>\n            <td>decimal(10, 0)</td>\n            <td>--</td>\n        </tr>\n    </tbody>\n</table>\n\n\n</li>\n</ul>\n<ul>\n<li>整个数字长度 M = 小数点左边位数 + 小数点右边位数 D，但不包括负号</li>\n</ul>\n<ul>\n<li><p>字符类型</p>\n  <table>\n      <thead>\n          <tr>\n              <th>描述</th>\n              <th>列类型</th>\n              <th>存储空间</th>\n              <th>取值范围</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>固定长度字符串</td>\n              <td>char</td>\n              <td>255 字符</td>\n              <td>[0, 2^8-1]</td>\n          </tr>\n          <tr>\n              <td>可变长度字符串</td>\n              <td>text</td>\n              <td>65535 字符</td>\n              <td>[0, 2^{16}-1</td>\n          </tr>\n          <tr>\n              <td>非二进制字符串</td>\n              <td>varchar</td>\n              <td>65535 字符</td>\n              <td>[0, 2^{16}-1</td>\n          </tr>\n          <tr>\n              <td>二进制大对象</td>\n              <td>blob</td>\n              <td>--</td>\n              <td>[0, 2^{16}-1</td>\n          </tr>\n      </tbody>\n  </table>\n\n<ul>\n<li>使用比较运算符比较 char 值时，MySQL 不会考虑尾随空格，例如：=，&lt;&gt;，&gt;，&lt; 等。</li>\n<li>当使用模式匹配检索 char 值时，LIKE 运算符会考虑尾随空格。</li>\n</ul>\n</li>\n<li><p>日期类型</p>\n  <table>\n      <thead>\n          <tr>\n              <th>列类型</th>\n              <th>存储空间</th>\n              <th>取值范围</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>date</td>\n              <td>3 字节</td>\n              <td>[0000-01-01, 9999-12-31]</td>\n          </tr>\n          <tr>\n              <td>datetime</td>\n              <td>8 字节</td>\n              <td>YYYY-MM-DD HH:MM:SS</td>\n          </tr>\n      </tbody>\n  </table>\n\n<ul>\n<li>[注意] 原则上不要使用字符串类型存储日期/时间数据！</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据库索引优化\"><a href=\"#数据库索引优化\" class=\"headerlink\" title=\"数据库索引优化\"></a>数据库索引优化</h2><h3 id=\"索引的数理基础\"><a href=\"#索引的数理基础\" class=\"headerlink\" title=\"索引的数理基础\"></a>索引的数理基础</h3><h4 id=\"B-Tree-amp-B-Tree\"><a href=\"#B-Tree-amp-B-Tree\" class=\"headerlink\" title=\"B-Tree &amp; B+Tree\"></a>B-Tree &amp; B+Tree</h4><h5 id=\"引入背景\"><a href=\"#引入背景\" class=\"headerlink\" title=\"引入背景\"></a>引入背景</h5><ul>\n<li>区别于动态查找算法，它们都是在内存中进行的，适用于小规模文件查找。B-Tree/B+Tree 则适用于磁盘等直接存取的设备上组织动态查找。</li>\n<li><p>B-Tree/B+Tree 多应用于数据库索引中，而数据库索引是存储在磁盘的索引文件上的。</p>\n<ul>\n<li>当数据量较大时，整个索引无法全部加载至内存中，只能逐一加载每一个磁盘页（对应索引树的节点）。</li>\n<li><p>换句话说，数据库索引利用磁盘预读原理，把一个 B-Tree/B+Tree 节点大小刚好设为一个页的大小，这样一个树结点只需一次 I/O 即可完成加载。为此，检索目标一次最多需要访问 h 个结点（h 次 I/O 操作）。</p>\n<blockquote>\n<p>对于 B-Tree/B+Tree 的数据结构来说，树的高度可代表 I/O 次数，而 “矮胖” 就是 B-Tree/B+Tree 的阶，阶的大小取决于磁盘页的大小。</p>\n</blockquote>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-BTree-B+Tree.svg\" alt> B 树与 B+树</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h5><ul>\n<li><a href>维基百科. B+树. zh.wikipedia.org</a></li>\n<li><a href=\"https://www.cnblogs.com/nullzx/p/8729425.html\" target=\"_blank\" rel=\"noopener\">Nullzx. B 树和 B+ 树的插入删除图文详解. cnblogs.com</a></li>\n<li><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\" target=\"_blank\" rel=\"noopener\">CodingLabs. MySQL索引背后的数据结构及算法原理. CodingLabs.org</a></li>\n</ul>\n<h5 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h5><ul>\n<li><p>B-Tree（Balanced Tree），一种 <code>平衡</code> 的多路查找树，它或是一棵空树，或满足下列特性的 m 叉树（$m \\geq 3$）：</p>\n<ul>\n<li>树中每个结点至多有 m 棵子树；</li>\n<li>树中非叶子结点至少有两棵子树；</li>\n<li>除根结点与叶子结点外，至少有 $\\lceil m/2 \\rceil$ 棵子树；</li>\n<li><p>每个结点的关键字个数 = ${ n \\, | \\, \\lceil m/2 \\rceil \\leq n \\leq m-1 }$；</p>\n<blockquote>\n<p>1) 根结点至少可以有一个关键字，即关键字个数 = ${ n \\, | \\, 1 \\leq n \\leq m-1 }$。<br>2) 当结点的关键字数量大于等于 m-1 时，则触发结点分裂过程，以结点中间的关键字为中心分裂成左右两部分。</p>\n</blockquote>\n</li>\n<li><p>每个结点中的关键字都按照从小到大排序，每个结点的关键字的左子树中所有关键字都小于它，而右子树中所有关键字都大于它。</p>\n</li>\n<li><p>所有叶子结点都位于同一层，或者说根到每个叶子结点的长度都相同。</p>\n<blockquote>\n<p>在实际应用中，B-Tree 的阶数 m 通常很大（$m \\geq 100$），即使存储大量数据 B-Tree 高度仍然很小。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h5><ul>\n<li><p>B+Tree 是 B-Tree 的一种变形形式，一棵 m 阶的 B+Tree 定义如下： </p>\n<ul>\n<li>树中每个结点至多有 m 棵子树；</li>\n<li>若根结点而非叶子结点，则至少有两棵子树；</li>\n<li><p>除根结点与叶子结点外，至少有 $\\lceil m/2 \\rceil$ 棵子树；</p>\n<ul>\n<li><p>每个结点的关键字个数比它的孩子结点个数少 1；</p>\n<blockquote>\n<p>各种资料上对于 B+Tree 结点的关键字个数定义不同，这里取 Wikipedia 的定义（也可以同步 B-Tree 的关键字个数定义）。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>所有叶子结点包含了全部关键字及相应记录的存储地址，按照从小到大的顺序排序，并存放在同一层的叶子节点中，而且叶子节点以指针进行链接。</p>\n</li>\n<li>所有 <code>非叶子结点</code> 仅起到 <code>索引作用</code>，即结点中的每一个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"两者比较\"><a href=\"#两者比较\" class=\"headerlink\" title=\"两者比较\"></a>两者比较</h5><ul>\n<li>对于 <code>范围查找</code> 来说，B+Tree 只需 <code>遍历叶子节点链表</code> 即可，B-Tree 却需要重复地 <code>中序遍历整棵树</code>。</li>\n<li>B+Tree 只有叶子结点存储数据，非叶子结点只起到索引作用；B-Tree 的所有结点都存储数据。</li>\n</ul>\n<h4 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h4><ul>\n<li>B-Tree (平衡树, Balance Tree)：也称为 <code>多路平衡查找树</code>，并且所有叶子节点位于同一层。</li>\n<li><p>B+Tree：</p>\n<ul>\n<li>它不仅具有 B-Tree 的平衡性，并且可通过 <code>顺序访问指针</code> 来提高 <code>区间查询</code> 的性能。</li>\n<li>在 B+Tree 中，一个节点中的 key 从左到右非递减排列，若某个指针的 $key<em>i$ 左右相邻分别是 $key</em>{i-1}$ 和 $key<em>{i+1}$，且不为 null，则该指针指向节点的所有 key 满足 $key</em>{i-1} \\leq key<em>i \\leq key</em>{i+1}$。</li>\n<li><p>B+Tree 与 B-Tree 最大区别是，B+Tree 的非叶子结点不保存数据，只用于索引，所有数据都保存在叶子结点中。而且叶子结点间按照从小到大顺序链接起来。如图 3-1 (b) 所示的为一棵 B+Tree。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-BTree-B+Tree.svg\" alt> B 树与 B+树</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>B-Tree/B+Tree 的增删改查：</p>\n<ul>\n<li><p><code>查找操作</code>：首先在<code>根节点</code>进行 <code>二分查找</code>，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在 <code>叶子节点</code> 上进行 <code>二分查找</code>，找出 key 所对应的 data。</p>\n<blockquote>\n<p>二分查找要求表有序，正好 B-Tree 和 B+Tree 结点中的 key 从左到右非递减有序排列。</p>\n</blockquote>\n</li>\n<li><p><code>增删操作</code>：会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"红黑树方案考量\"><a href=\"#红黑树方案考量\" class=\"headerlink\" title=\"红黑树方案考量\"></a>红黑树方案考量</h4><p>同样是平衡树，红黑树（自平衡的二叉树）也可以用来实现索引。但在文件系统及数据库系统中，普遍采用 B+Tree 作为索引结构，主要有以下两个原因：</p>\n<ul>\n<li><p><code>更少的查找次数</code>：平衡树查找操作的时间复杂度和树高 $h$ 相关，$O(h)=O(log_dN)$，其中 d 为每个节点的出度，即 <code>d叉树的阶</code>。红黑树的出度 d 为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大，查找的次数也就大。</p>\n</li>\n<li><p><code>利用磁盘预读特性</code>：</p>\n<blockquote>\n<p>存储器原理解释推荐阅读：<a href=\"https://wdxtub.com/csapp/thin-csapp-3/2016/04/16/#概念学习\" target=\"_blank\" rel=\"noopener\">小土刀. 读薄CSAPP-内存与缓存. wdxtub.com</a></p>\n</blockquote>\n<ul>\n<li>索引本身也很大，不可能全部存储在内存中，为此索引往往以索引文件的形式存储的磁盘上。索引查找过程中就要产生磁盘I/O消耗，即索引的结构组织要尽量减少查找过程中磁盘 I/O 的存取次数。</li>\n<li>为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会 <code>预读</code>。</li>\n<li><p>预读过程中，即使只需一个字节，磁盘也是从这个位置开始，向后 <code>顺序读取</code> 一定长度的数据放入内存 (预读的长度一般为页的整倍数)。</p>\n<blockquote>\n<p>顺序读取不需要进行 <code>磁盘寻道</code>，只需要很短的磁盘旋转时间。</p>\n</blockquote>\n</li>\n<li><p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。</p>\n<blockquote>\n<p>页是计算机管理存储器的逻辑块。</p>\n</blockquote>\n</li>\n<li><p>数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。并且可以利用预读特性，相邻的节点也能够被预先载入。这样一来，最多花费 h 次 I/O 操作即可检索到目标。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"索引的存取原理\"><a href=\"#索引的存取原理\" class=\"headerlink\" title=\"索引的存取原理\"></a>索引的存取原理</h4><ul>\n<li>磁盘存取原理</li>\n<li>局部性原理与磁盘预读</li>\n</ul>\n<h3 id=\"MySQL-索引\"><a href=\"#MySQL-索引\" class=\"headerlink\" title=\"MySQL 索引\"></a>MySQL 索引</h3><ul>\n<li>索引，在 MySQL 也称为键（Key），是 <code>存储引擎</code> 快速找到记录的一种 <code>数据结构</code>。相当于图书的目录，可根据目录中的页码快速找到所需的内容。</li>\n<li>索引，是 <code>存储引擎层</code> 的概念，所以不同存储引擎具有不同的索引类型和实现。下文主要以 MyISAM 和 InnoDB 两个存储引擎的索引实现方式展开讨论。</li>\n</ul>\n<h4 id=\"索引结构类型\"><a href=\"#索引结构类型\" class=\"headerlink\" title=\"索引结构类型\"></a>索引结构类型</h4><h5 id=\"B-Tree-索引\"><a href=\"#B-Tree-索引\" class=\"headerlink\" title=\"B+Tree 索引\"></a>B+Tree 索引</h5><ul>\n<li>B+Tree 索引是大多数 MySQL 存储引擎的默认索引类型。</li>\n<li><p>InnoDB 的 B+Tree 索引分为 <code>主索引</code>（Primary key）和 <code>辅助索引</code>（Secondary key）。而且 InnoDB 的主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为 <code>聚簇索引</code>。</p>\n<blockquote>\n<p>MyISAM 的索引方式也叫做 <code>非聚集</code> 的。MyISAM 索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。</p>\n</blockquote>\n</li>\n<li><p>因为 B+ Tree 的 <code>有序性</code>，因此可用于 <code>部分查找</code>、<code>范围查找</code>、<code>排序</code> 和 <code>分组</code>。</p>\n</li>\n<li>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。若不是按照索引列的顺序进行查找，则无法使用索引。</li>\n</ul>\n<h5 id=\"Hash-索引\"><a href=\"#Hash-索引\" class=\"headerlink\" title=\"Hash 索引\"></a>Hash 索引</h5><ul>\n<li><p>Hash 索引能以 O(1) 时间进行查找，但是失去了有序性。因此无法用于排序与分组，无法用于部分查找和范围查找，只支持 <code>精确查找</code>。</p>\n<blockquote>\n<p>Hash 索引仅满足 <code>=</code>，<code>IN</code> 和 <code>&lt;=&gt;</code> 查询，不能使用范围查询。因为 Hash 索引比较的是 Hash 运算后的 Hash 值，所以它只能用于等值的过滤。</p>\n</blockquote>\n</li>\n<li><p>InnoDB 存储引擎有一个特殊的功能叫 <code>自适应哈希索引</code>，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p>\n</li>\n</ul>\n<h5 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h5><ul>\n<li>MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</li>\n<li>查找条件使用 <code>MATCH AGAINST</code>，而不是普通的 <code>WHERE</code>。</li>\n<li>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</li>\n<li>InnoDB 存储引擎在 <code>MySQL 5.6.4</code> 版本中也开始支持全文索引。</li>\n</ul>\n<h5 id=\"空间数据索引\"><a href=\"#空间数据索引\" class=\"headerlink\" title=\"空间数据索引\"></a>空间数据索引</h5><ul>\n<li>MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</li>\n<li>必须使用 GIS 相关的函数来维护数据。</li>\n</ul>\n<h4 id=\"MyISAM-索引实现\"><a href=\"#MyISAM-索引实现\" class=\"headerlink\" title=\"MyISAM 索引实现\"></a>MyISAM 索引实现</h4><ul>\n<li>MyISAM 引擎可使用 B+Tree 作为索引结构，叶节点的 data 域存放的是数据记录的地址</li>\n<li><p>MyISAM 索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。如图所示，为 MyISAM 的 B+Tree 主索引结构：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-MyISAM-MainIndex.svg\" alt> MyISAM 的 B+Tree 主索引结构</p>\n</blockquote>\n<blockquote>\n<p>这里假设表一共有三列，以 Col1 为主键，则上图是一个主索引示意图。</p>\n</blockquote>\n</li>\n<li><p>在 MyISAM 中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求 key 是唯一的，而辅助索引的 key 可以重复，比如在 Col2 上建立一个辅助索引，如图所示：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-MyISAM-SecondaryIndex.svg\" alt> MyISAM 的 B+Tree 辅助索引结构</p>\n</blockquote>\n</li>\n<li><p>MyISAM 的索引检索方法是按照 B+Tree 搜索算法实现的，若指定的 key 存在，则取出其 data 域的值，然后以 data 域的值为地址，再以地址读取相应数据记录。</p>\n</li>\n</ul>\n<h4 id=\"InnoDB-索引实现\"><a href=\"#InnoDB-索引实现\" class=\"headerlink\" title=\"InnoDB 索引实现\"></a>InnoDB 索引实现</h4><ul>\n<li>InnoDB 引擎也可使用 B+Tree 作为索引结构，在 InnoDB 中数据文件本身就是按 B+Tree 组织的一个索引结构，这棵树的叶节点 data 域保存了完整的数据记录。</li>\n<li><p>InnoDB 的 B+Tree 主索引结构：索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引结构的。</p>\n<ul>\n<li>因 InnoDB 的数据文件本身要按主键聚集的，为此 InnoDB 要求表必须有主键。</li>\n<li>若没有显式指定，则 MySQL 会自动选择一个可以唯一标识数据记录的列作为主键。</li>\n<li><p>若不存在这种列，则 MySQL 会自动生成一个隐含字段作为主键（字段长度为 6 个字节，类型为长整型）。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-InnoDB-MainIndex.svg\" alt> InnoDB 的 B+Tree 主索引结构</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>InnoDB 的 B+Tree 辅助索引结构：索引 data 域存储相应记录主键的值而不是地址。换句话说，InnoDB 的所有辅助索引都引用主键作为 data 域。如图所示在 Col3 上的一个辅助索引：</p>\n<blockquote>\n<p>使用辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-InnoDB-SecondaryIndex.svg\" alt> InnoDB 的 B+Tree 辅助索引结构</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"索引的优点缺点\"><a href=\"#索引的优点缺点\" class=\"headerlink\" title=\"索引的优点缺点\"></a>索引的优点缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>大大减少了服务器需要扫描的数据行数。</li>\n<li><p>避免服务器进行排序和分组操作，以避免创建 <code>临时表</code>。</p>\n<blockquote>\n<p>B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表。</p>\n</blockquote>\n</li>\n<li><p>将 <code>随机 I/O</code> 变为 <code>顺序 I/O</code>。</p>\n<blockquote>\n<p>B+Tree 索引是有序的，会将相邻的数据都存储在一起。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>索引并不是越多越好，索引固然可以提高相应的 SELECT 的效率，但同时也降低了 INSERT 及 UPDATE 的效率，因为 INSERT 或 UPDATE 时有可能会 <code>重建索引</code>。</li>\n</ul>\n<h3 id=\"索引的设计原则\"><a href=\"#索引的设计原则\" class=\"headerlink\" title=\"索引的设计原则\"></a>索引的设计原则</h3><blockquote>\n<p>从索引的优、缺点考虑索引的设计原则。</p>\n</blockquote>\n<ul>\n<li><code>忌过度索引</code>：索引需要额外的磁盘空间，而且会降低写操作的性能。<ul>\n<li>在修改表内容时，索引会进行更新甚至重构，索引列越多花销时间越长。为此优化检索性能，只保持需要的索引即可。</li>\n<li>经常用在 <code>排列</code>、<code>分组</code> 和 <code>范围搜索</code> 的列适合创建索引，因为索引是有序的。</li>\n<li>经常出现在 <code>WHERE</code> 子句的列，或是 <code>JOIN</code> 连接子句中指定的列适合创建索引。</li>\n</ul>\n</li>\n<li><code>使用短索引</code>：若对长字符串列进行索引，应该指定一个前缀长度，这样能够节省大量索引空间。</li>\n</ul>\n<h3 id=\"索引的优化策略\"><a href=\"#索引的优化策略\" class=\"headerlink\" title=\"索引的优化策略\"></a>索引的优化策略</h3><ul>\n<li><p><code>独立的列</code>：在进行查询时，索引列不能是 <code>表达式</code> 的一部分，也不能是 <code>函数参数</code>，否则无法使用索引。例如下面的查询不能使用 actor_id 列的索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> actor_id <span class=\"keyword\">FROM</span> sakila.actor <span class=\"keyword\">WHERE</span> actor_id + <span class=\"number\">1</span> = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>多列索引</code>：在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> film_id, actor_id <span class=\"keyword\">FROM</span> sakila.film_actor</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> actor_id = <span class=\"number\">1</span> <span class=\"keyword\">AND</span> film_id = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>索引列的顺序</code>：让选择性最强的索引列放在前面。</p>\n<blockquote>\n<p>索引的选择性：不重复的索引值和记录总数的比值最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。</p>\n</blockquote>\n<p>  例如，从下面显示的结果中可知，customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\t<span class=\"keyword\">COUNT</span>(<span class=\"keyword\">DISTINCT</span> staff_id)/<span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> StaffId,</span><br><span class=\"line\">\t<span class=\"keyword\">COUNT</span>(<span class=\"keyword\">DISTINCT</span> customer_id)/<span class=\"keyword\">COUNT</span>(*)  <span class=\"keyword\">AS</span> CustomerId,</span><br><span class=\"line\">\t<span class=\"keyword\">COUNT</span>(*)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> payment;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">-- StaffId: 0.0001</span></span><br><span class=\"line\"><span class=\"comment\">-- CustomerId: 0.0373</span></span><br><span class=\"line\"><span class=\"comment\">-- COUNT(*): 16049</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>前缀索引</code>：对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。前缀长度的选取需要根据索引选择性来确定。</p>\n</li>\n<li><code>覆盖索引</code>：索引包含所有需要查询的字段的值。具有以下优点：<ul>\n<li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</li>\n<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>\n<li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索引的使用场景\"><a href=\"#索引的使用场景\" class=\"headerlink\" title=\"索引的使用场景\"></a>索引的使用场景</h3><ul>\n<li>对于 <code>非常小的表</code>：大部分情况下简单的 <code>全表扫描</code> 比建立索引更高效；</li>\n<li>对于 <code>中大型的表</code>：<code>建立索引</code> 非常有效；</li>\n<li>对于 <code>特大型的表</code>：建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配。例如可以使用 <code>分区技术</code>。</li>\n</ul>\n<h3 id=\"创建与删除索引\"><a href=\"#创建与删除索引\" class=\"headerlink\" title=\"创建与删除索引\"></a>创建与删除索引</h3><ul>\n<li><p>创建表时：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名 (</span><br><span class=\"line\">\t字段名<span class=\"number\">1</span> 数据类型 [完整性约束条件…],</span><br><span class=\"line\">\t字段名<span class=\"number\">2</span> 数据类型 [完整性约束条件…],</span><br><span class=\"line\">\t[<span class=\"keyword\">UNIQUE</span> | FULLTEXT | SPATIAL] <span class=\"keyword\">INDEX</span> | <span class=\"keyword\">KEY</span></span><br><span class=\"line\">\t[索引名] (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CREATE 在已存在的表上创建索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span> | FULLTEXT | SPATIAL] <span class=\"keyword\">INDEX</span> 索引名 </span><br><span class=\"line\"><span class=\"keyword\">ON</span> 表名 (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>]) ;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ALTER TABLE 在已存在的表上创建索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> [<span class=\"keyword\">UNIQUE</span> | FULLTEXT | SPATIAL] <span class=\"keyword\">INDEX</span></span><br><span class=\"line\">索引名 (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>]) ;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> 索引名 <span class=\"keyword\">ON</span> 表名字;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SQL-大查询优化\"><a href=\"#SQL-大查询优化\" class=\"headerlink\" title=\"SQL 大查询优化\"></a>SQL 大查询优化</h2><h3 id=\"使用-EXPLAIN-分析性能\"><a href=\"#使用-EXPLAIN-分析性能\" class=\"headerlink\" title=\"使用 EXPLAIN 分析性能\"></a>使用 EXPLAIN 分析性能</h3><ul>\n<li><p>使用 EXPLAIN 关键字可以模拟执行 SQL 查询语句，从而知道 MySQL 是如何处理 SQL语句的，分析查询语句可知道查询语句的性能瓶颈。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPLAIN</span> <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> mytable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过 EXPLAIN 可以分析出以下结果：</p>\n<ul>\n<li>表的读取顺序</li>\n<li>数据读取操作的操作类型</li>\n<li>哪些索引可以使用</li>\n<li>哪些索引被实际使用</li>\n<li>表之间的引用</li>\n<li>每张表有多少行被优化器查询</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>执行计划中较重要字段含义 ( 详细可参考另一篇文章 <a href=\"https://m.jb51.net/article/38357.htm\" target=\"_blank\" rel=\"noopener\">MySQL 查询优化之 Explain</a> )：<ul>\n<li>select_type : 查询类型，有简单查询、联合查询、子查询等</li>\n<li>key : 使用的索引类型</li>\n<li>rows : 扫描的行数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优化数据访问\"><a href=\"#优化数据访问\" class=\"headerlink\" title=\"优化数据访问\"></a>优化数据访问</h3><ul>\n<li><p><code>减少请求的数据量</code>：</p>\n<ul>\n<li>只返回必要的列：最好不要使用 <code>SELECT *</code> 语句。</li>\n<li>只返回必要的行：使用 <code>LIMIT</code> 语句来限制返回的数据。</li>\n<li>缓存重复查询数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li>\n</ul>\n</li>\n<li><p><code>减少服务器端扫描的行数</code>：最有效的方式是使用索引来覆盖查询。</p>\n</li>\n</ul>\n<h3 id=\"重构查询方式\"><a href=\"#重构查询方式\" class=\"headerlink\" title=\"重构查询方式\"></a>重构查询方式</h3><h4 id=\"切分大查询\"><a href=\"#切分大查询\" class=\"headerlink\" title=\"切分大查询\"></a>切分大查询</h4><ul>\n<li><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小而重要的查询任务。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大查询 SQL：删除历史数据的任务</span></span><br><span class=\"line\"><span class=\"comment\"># Delete from messages Where created_time &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH);</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决方案：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1）一次删除一万行一般来说是一个比较高效而且对服务器影响也最小的方案</span></span><br><span class=\"line\"><span class=\"comment\"># 2）执行一次删除任务建议暂停一会再执行任务，还可以大大减少删除时锁的持有时间。</span></span><br><span class=\"line\">rows_affected = 0</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\trows_affected = do_query(</span><br><span class=\"line\">\t\t<span class=\"string\">\"Delete from Messages created_time &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000\"</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> rows_affected &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"分解大连接\"><a href=\"#分解大连接\" class=\"headerlink\" title=\"分解大连接\"></a>分解大连接</h4><ul>\n<li><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：</p>\n<ul>\n<li>减少锁的竞争</li>\n<li><p>缓存效率更高</p>\n<blockquote>\n<p>对于连接查询，若其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然不影响使用。</p>\n</blockquote>\n</li>\n<li><p>减少冗余记录的查询：单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</p>\n</li>\n<li><p>高性能和可拓展查询：在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可拓展。</p>\n<blockquote>\n<p>例如，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机连接要更高效。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 大连接查询示例</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tag</span><br><span class=\"line\">\t<span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> tag_post <span class=\"keyword\">ON</span> tag_post.tag_id = tag.id</span><br><span class=\"line\">\t<span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> post <span class=\"keyword\">ON</span> tag_post.post_id = post.id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> tag.tag = <span class=\"string\">'mysql'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分解大连接</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tag <span class=\"keyword\">WHERE</span> tag = <span class=\"string\">'mysql'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tag_post <span class=\"keyword\">WHERE</span> tag_id = <span class=\"number\">1234</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> post <span class=\"keyword\">WHERE</span> post.id <span class=\"keyword\">IN</span> (<span class=\"number\">123</span>, <span class=\"number\">456</span>, <span class=\"number\">567</span>, <span class=\"number\">9098</span>, <span class=\"number\">8904</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"巧用临时表\"><a href=\"#巧用临时表\" class=\"headerlink\" title=\"巧用临时表\"></a>巧用临时表</h4><ul>\n<li><p>临时表：顾名思义，临时表只是在当前连接可见，当关闭连接时，MySQL 会自动删除临时表并释放存储空间。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建临时表：表结构与数据存放于内存</span></span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Temporary</span> <span class=\"keyword\">Table</span> tmp_user (</span><br><span class=\"line\">\tusername <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span></span><br><span class=\"line\">\tage <span class=\"built_in\">int</span>(<span class=\"number\">3</span>) <span class=\"literal\">NULL</span></span><br><span class=\"line\">\tuser_status <span class=\"built_in\">char</span>(<span class=\"number\">2</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1'</span></span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span> = MyISAM <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tmp_user <span class=\"keyword\">values</span>(<span class=\"string\">'Kofe'</span>, <span class=\"number\">26</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建内存表：表结构存放于磁盘上，数据存放于内存</span></span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Temporary</span> <span class=\"keyword\">Table</span> tmp_user (</span><br><span class=\"line\">\t<span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> t_user</span><br><span class=\"line\">) <span class=\"keyword\">TYPE</span> ＝ <span class=\"keyword\">HEAP</span> <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">MEMORY</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询直接创建临时表</span></span><br><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">Temporary</span> <span class=\"keyword\">Table</span> tmp_user (</span><br><span class=\"line\">\t<span class=\"keyword\">Select</span> * <span class=\"keyword\">from</span> t_user</span><br><span class=\"line\">)；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除临时表</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> tmp_user;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>使用场景：大查询或者关联查询频繁关联一些中间大结果集的子集，使用临时表可提高此类场景的查询效率。</li>\n</ul>\n<h2 id=\"高可用架构设计\"><a href=\"#高可用架构设计\" class=\"headerlink\" title=\"高可用架构设计\"></a>高可用架构设计</h2><h3 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h3><h4 id=\"参考资料-1\"><a href=\"#参考资料-1\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://tech.meituan.com/2016/11/18/dianping-order-db-sharding.html\" target=\"_blank\" rel=\"noopener\">美团技术团队. 大众点评订单系统分库分表实践 [OL]. tech.meituan.com</a></li>\n<li><a href=\"https://crossoverjie.top/2019/07/24/framework-design/sharding-db-03/\" target=\"_blank\" rel=\"noopener\">CrossoverJie. 一次难得的分库分表实践 [OL]. crossoverjie.top</a></li>\n<li><a href=\"https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/database-shard.md\" target=\"_blank\" rel=\"noopener\">Doocs. 面试题:为什么要分库分表 [OL]. github.com</a></li>\n</ul>\n<h4 id=\"水平切分\"><a href=\"#水平切分\" class=\"headerlink\" title=\"水平切分\"></a>水平切分</h4><ul>\n<li><p>水平切分：将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，水平切分是必然选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-Sharding-Horizontal.svg\" alt> 水平切分</p>\n</blockquote>\n</li>\n<li><p>切分方式</p>\n<ul>\n<li>Range：根据一定范围进行分发。比如：根据时间范围，一个月内的数据存储为一张表，或者根据用户 ID 这种自增序列，用户 ID 在 000001 至 100000 范围的存一张表、100001 至200000 范围的存一张表等。<ul>\n<li>优势是数据扩容时方便。</li>\n<li>不足是容易产生数据热点问题。</li>\n</ul>\n</li>\n<li><p>Hash：通过一次哈希运算然后取余（分表数量-1）的方式确定数据要存的表位置。</p>\n<blockquote>\n<p>比如：根据用户姓名进行 Hash 分发。用户姓名小明，计算 hashcode，得到754703，预先确定分表数量为 8，再取余 7 得到 3，即分发到索引为 3 表位置上。</p>\n</blockquote>\n<ul>\n<li>优势是数据分发均匀，不会产生数据热点问题。</li>\n<li>不足是扩容时候非常不方便，还需要重新计算数据的哈希值。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"垂直切分\"><a href=\"#垂直切分\" class=\"headerlink\" title=\"垂直切分\"></a>垂直切分</h4><ul>\n<li>垂直切分：将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分。<ul>\n<li>利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中，让数据库可以以更少字段缓存更多的行，进而带来性能的提升。</li>\n<li>数据库的三大范式设计其实也是一种垂直切分。</li>\n</ul>\n</li>\n<li><p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/MySQL-Architect/MySQL-Architecture-Sharding-Vertical.svg\" alt> 垂直切分</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"分表分库中间件\"><a href=\"#分表分库中间件\" class=\"headerlink\" title=\"分表分库中间件\"></a>分表分库中间件</h4><blockquote>\n<p>不同的分库分表（包括水平以及垂直切分）中间件都有什么优点和缺点？</p>\n</blockquote>\n<ul>\n<li>Mycat：基于 java 语言编写的数据库中间件，是一个实现了 MySQL 协议的服务器。<ul>\n<li>基于 Cobar 改造的、同属于 proxy 层方案。</li>\n<li>前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问。</li>\n<li>后端使用 MySQL 原生协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信，其核心功能是分库分表。配合数据库的主从模式还可实现读写分离。</li>\n</ul>\n</li>\n<li>Sharding-jdbc：属于 ShardingSphere 的 client 层方案。ShardingSphere 还提供 proxy 层的方案 Sharding-Proxy。因为 SQL 语法支持也比较多，没有太多限制，支持分库分表、读写分离、分布式 ID 生成、柔性事务（最大努力送达型事务、TCC 事务等）。</li>\n</ul>\n<h3 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h3><h4 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h4><ul>\n<li><p>主从复制：主要涉及三个线程</p>\n<ul>\n<li><p>Binlog 线程 ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</p>\n<blockquote>\n<p>二进制日志：记录了所有对 MySQL 数据库修改，不限于数据增删改查、表结构修改等事件。</p>\n</blockquote>\n</li>\n<li><p>I/O 线程 ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</p>\n</li>\n<li>SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li>\n</ul>\n</li>\n<li><p>二进制日志格式：比如同一 SQL 修改 1000 条数据</p>\n<ul>\n<li>基于行 <code>binlog_format = ROW</code>，日志记录 1000 条执行语句。</li>\n<li>基于段 <code>binlog_format = STATEMENT</code>，日志只记录该 SQL 语句。</li>\n<li>混合日志格式 <code>binlog_format = MIXED</code>，由系统决定是基于端还是基于行方式记录日志。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"读写分离\"><a href=\"#读写分离\" class=\"headerlink\" title=\"读写分离\"></a>读写分离</h4><ul>\n<li>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</li>\n<li>读写分离能提高性能的原因在于：<ul>\n<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>\n<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li>\n<li>增加冗余，提高可用性。</li>\n<li>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</li>\n</ul>\n</li>\n</ul>\n","categories":["Project"],"tags":["数据库","MySQL","架构","索引"]},{"title":"多套软件解决方案助你提高生产力","url":"/2018/11/software-solution.html","content":"<p>在输出本博文之初，意图是很纯粹的，即把平日里体验佳、少折腾、踩过坑的种种软件整理成册，以便于日后装机或朋友间安利、分享。</p>\n<p>再者，在平日的工作、娱乐环境中，单一的软件远远不够满足我们的需求。软件虽然一定程度上解放了我们的生产力，而随着个人的需求日益增长、消费水平升级，享受的服务逐渐被分散细化，我们的工作效率提升了，但人与软件更密切的交互让我们紧密地捆绑在一起，似乎我们并没有被真正意义地 “解放” 出来？其次，每款软件终究是一个体，一些连贯性的交互需求，它们是很难或无法独自完成的，故我们需要更高阶的完整软件解决方案。例如，智能路由系统 ( 网络中心 + 控制中心 )、个人博客 ( 笔记 + 储存 + 分享 )、个人私有云 ( 储存 + 远程 + 共享 )、智能家居控制中心 ( 跨平台 + 控制中心 )、家庭影院中心等。即我们通过专职的服务器，运作相应的操作系统和应用程序，以提供完整的软件解决方案。</p>\n<p>最后，谈起专职的服务器便是组装一台 <code>家用服务器</code>。在服务器中，我们可通过 <code>虚拟机</code> 实现私有云、智能路由系统、Web 服务器、代码托管服务器等，把以上系统方案整合到 N in 1 的服务器中，既充分重利用了硬件资源，同时也节约了房间的物理空间。<br><a id=\"more\"></a></p>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.10.22：完成初稿；</li>\n<li>2018.10.25：完成系统解决方案的「 个人博客解决方案 」章节内容；</li>\n<li>2018.11.02：更新「 常备软件清单 」章节内容；</li>\n<li>2018.11.03：更新「浏览器插件」章节内容；</li>\n<li>2018.11.05：完成系统解决方案的「代码托管方案：Svn」章节内容；</li>\n<li>2019.01.28：新增「信仰装机 」章节内容；</li>\n<li>2019.02.20：更新「信仰装机 」章节内容；</li>\n<li>2019.08.07：更新「办公利器 」和「浏览器插件」章节内容；</li>\n</ul>\n<h2 id=\"办公利器：常备软件清单\"><a href=\"#办公利器：常备软件清单\" class=\"headerlink\" title=\"办公利器：常备软件清单\"></a>办公利器：常备软件清单</h2><h3 id=\"开篇引言\"><a href=\"#开篇引言\" class=\"headerlink\" title=\"开篇引言\"></a>开篇引言</h3><ul>\n<li><code>选应用的意图</code>：常备软件清单，覆盖了办公、开发、设计、写作、影音、系统等几大类别的应用，且选应用的意图都是很明确的，即办公类应用，应尽可能地提升效率以提高生产力；娱乐类应用，应更便捷地交互体验以提升幸福感；系统类应用，应融洽地接入系统以焕发 Mac 本该拥有的强大本质。</li>\n<li><code>选应用的方法</code>：再者，为什么推荐这些应用，主要考虑因素是：<ul>\n<li><code>方案一</code>：一方面是针对平台优化的独占平台应用，另一方面则是个人的主战装备是 Macbook Pro，故推荐应用以 <code>MacOS</code> 先入为主，再考虑替代方案；</li>\n<li><code>方案二</code>：则是 <code>全平台通用</code> 的方案。</li>\n<li><code>方案三</code>：总有功能性应用是独占平台的，遇到此情况则提供 <code>退阶方案</code>，即寻找同类功能的优秀应用作为替代方案。</li>\n</ul>\n</li>\n<li><code>选应用的准则</code>：其次，我们秉承 <code>免费开源</code> 的理念来寻找高质量应用，但并不会一味追求免费而错过或放弃收费的应用。由于方案初制定，后期会不断补充内容，造成不便请谅解。</li>\n</ul>\n<h3 id=\"影音媒体\"><a href=\"#影音媒体\" class=\"headerlink\" title=\"影音媒体\"></a>影音媒体</h3><h4 id=\"IINA\"><a href=\"#IINA\" class=\"headerlink\" title=\"IINA\"></a>IINA</h4><ul>\n<li>应用类型：📺 | 媒体播放器</li>\n<li>是否收费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://lhc70000.github.io/iina/zh-cn/\" target=\"_blank\" rel=\"noopener\">IINA 中文</a> | <a href=\"https://lhc70000.github.io/iina/\" target=\"_blank\" rel=\"noopener\">IINA 英文</a> | <a href=\"https://github.com/lhc70000/iina\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费  ( GPLv3 )；</li>\n<li>在线字幕搜索和智能本地字幕匹配；</li>\n<li>满足你关于视频、音频、字幕等相关的基本功能；</li>\n<li>基于 MPV ( 神级开源解码工具 ) 的媒体播放器，支持几乎所有常用媒体播放，且稳定解码并输出高质量的影像。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"MPV\"><a href=\"#MPV\" class=\"headerlink\" title=\"MPV\"></a>MPV</h4><ul>\n<li>应用类型：📺 | 媒体播放器</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code> | <code>Android</code></li>\n<li>官方地址：<a href=\"https://mpv.io/\" target=\"_blank\" rel=\"noopener\">MPV 介绍</a> | <a href=\"https://mpv.io/installation/\" target=\"_blank\" rel=\"noopener\">MPV 下载</a> | <a href=\"https://mpv.io/manual/master/\" target=\"_blank\" rel=\"noopener\">MPV 手册</a> | <a href=\"https://github.com/mpv-player/mpv\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费 ( GPLv2 或更高版本 )；</li>\n<li>IINA 的退阶产品，MPV 的特性与前者相仿，但支持多平台使用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"媒体编辑\"><a href=\"#媒体编辑\" class=\"headerlink\" title=\"媒体编辑\"></a>媒体编辑</h3><h4 id=\"Permute\"><a href=\"#Permute\" class=\"headerlink\" title=\"Permute\"></a>Permute</h4><ul>\n<li>应用类型：📽 | 格式转换</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://software.charliemonroe.net/permute/\" target=\"_blank\" rel=\"noopener\">Permute 官方</a></li>\n<li>推荐理由：<ul>\n<li>主要与 <a href=\"#Downie\">Downie</a> 配合使用，用于网络流媒体的分段视频拼接、格式转换；</li>\n<li>作为媒体编辑应用，足够应付基本的视频、音频、图片格式转换；</li>\n<li>拖拽方式操作即可实现视频拼接、音轨视频一键合成。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"FFmpeg\"><a href=\"#FFmpeg\" class=\"headerlink\" title=\"FFmpeg\"></a>FFmpeg</h4><ul>\n<li>应用类型：📽 | 格式转换</li>\n<li>是否付费：🆓 | 免费开源</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"http://www.ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">FFmpeg 官方</a> | <a href=\"http://www.ffmpeg.org/download.html\" target=\"_blank\" rel=\"noopener\">FFmpeg 下载</a> | <a href=\"http://www.ffmpeg.org/documentation.html\" target=\"_blank\" rel=\"noopener\">FFmpeg 文档</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费  ( GPLv2 或更高版本、LGPLv2.1 或更高版本 )；</li>\n<li>Permute 的退阶产品，而退阶并不是它功能比前者弱，而是它作为 <code>音视频的完整解决方案</code>，入门成本较高；</li>\n<li>跨平台剪辑、转码、合成音频和视频；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"X-Lossless-Decoder\"><a href=\"#X-Lossless-Decoder\" class=\"headerlink\" title=\"X Lossless Decoder\"></a>X Lossless Decoder</h4><ul>\n<li>应用类型：📽 | 格式转换</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://tmkk.undo.jp/xld/index_e.html\" target=\"_blank\" rel=\"noopener\">XLD 官方</a></li>\n<li>推荐理由：<ul>\n<li>音频发烧友少不了的利器：可解码、转换、播放各种“无损”音频文件 ( flac、oga、ape、wv、tta、m4a、tak、shn、aiff、wav 等 )；</li>\n<li>解码时可借助 <code>cue</code> 光盘映像辅助文件把音频文件分割成若干音轨 ( 单曲 )；</li>\n<li>支持 CD 音轨的抓取，并转换为目标格式 ( wav+cue, flac+cue 等 )；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ArcTime\"><a href=\"#ArcTime\" class=\"headerlink\" title=\"ArcTime\"></a>ArcTime</h4><ul>\n<li>应用类型：🎞 | 媒体编辑</li>\n<li>是否付费：💵 | 增值服务内购</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"http://www.arctime.cn/zh/index.html\" target=\"_blank\" rel=\"noopener\">ArcTime 官方</a> | <a href=\"http://www.arctime.cn/zh/download.html\" target=\"_blank\" rel=\"noopener\">ArcTime 下载</a></li>\n<li>推荐理由：<ul>\n<li>跨平台的字幕制作软件；</li>\n<li>语音识别文字，机器翻译 ( 点击了解 <a href=\"http://arctime.cn/zh/service.html\" target=\"_blank\" rel=\"noopener\">增值服务</a> )；</li>\n<li>导出多种字幕格式，且支持导出面向非编软件的软字幕；</li>\n<li>无缝支持所有主流非编软件的工程文件互导入、导出。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高效办公\"><a href=\"#高效办公\" class=\"headerlink\" title=\"高效办公\"></a>高效办公</h3><h4 id=\"MacDown\"><a href=\"#MacDown\" class=\"headerlink\" title=\"MacDown\"></a>MacDown</h4><ul>\n<li>应用类型：📝 | 文档编辑</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址： <a href=\"http://macdown.uranusjr.com/blog/macdown-help/\" target=\"_blank\" rel=\"noopener\">MacDown 官方</a> | <a href=\"https://github.com/MacDownApp/macdown\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费；</li>\n<li>稳定且渲染速度快；</li>\n<li>纯粹的 Markdown 文本编辑器，支持本地化管理 <code>MD</code> 文档 ( 即功能类似 Windows 的 TXT 文本编辑器 )。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h4><ul>\n<li>应用类型：📝 | 文档编辑</li>\n<li>是否付费：🆓 | 免费应用</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora 官网</a></li>\n<li>推荐理由：<ul>\n<li>纯粹的界面交互设计，没有多余元素的干扰，帮助你沉浸于写作本身。</li>\n<li>支持丰富的 <code>Github Flavored Markdown (GFM)</code> 语法，另外还支持表格、图表、TOC、LaTeX、代码块、任务列表等；</li>\n<li>丰富的 Markdown 导出配置，具体支持有：<code>html</code>、<code>epub</code>、<code>pdf</code>、<code>docx</code> 等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"MWeb\"><a href=\"#MWeb\" class=\"headerlink\" title=\"MWeb\"></a>MWeb</h4><ul>\n<li>应用类型：📝 | 文档编辑</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code> | <code>iOS</code></li>\n<li>官方地址：<a href=\"https://zh.mweb.im/\" target=\"_blank\" rel=\"noopener\">MWeb 官方</a> | <a href=\"https://sspai.com/post/33855\" target=\"_blank\" rel=\"noopener\">少数派评测</a></li>\n<li>推荐理由：<ul>\n<li>苹果全家桶可支持多终端云同步、云办公；</li>\n<li>支持丰富的 <code>Github Flavored Markdown (GFM)</code> 语法，另外还支持表格、TOC、LaTeX、代码块、任务列表、脚注等；</li>\n<li>内建文档分类、文档贴标签功能，即支持快速检索文章内容，也支持一体化的文档管理；</li>\n<li>丰富的 Markdown 导出配置，具体支持有：<code>jpg</code>、<code>html</code>、<code>epub</code>、<code>pdf</code>、<code>rtf</code>、<code>docx</code>；</li>\n<li>支持一键发布功能，直接发布至 <code>Wordpress</code>、<code>印象笔记</code>、<code>Blogger</code> 等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Yu-Writer\"><a href=\"#Yu-Writer\" class=\"headerlink\" title=\"Yu Writer\"></a>Yu Writer</h4><ul>\n<li>应用类型：📝 | 文档编辑</li>\n<li>是否付费：🆓 | 免费应用 / 💵 | Pro 版本付费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code> ( 待上线 )</li>\n<li>官方地址：<a href=\"https://ivarptr.github.io/yu-writer.site/\" target=\"_blank\" rel=\"noopener\">Yu Writer 官网</a></li>\n<li>推荐理由：<ul>\n<li>开源免费 ( 可付费升级至 Pro 版本 )；</li>\n<li>MWeb 的退阶产品，功能几乎与 MWeb 一样，特色是多平台支持。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"设计工具\"><a href=\"#设计工具\" class=\"headerlink\" title=\"设计工具\"></a>设计工具</h3><h4 id=\"Adobe-Series\"><a href=\"#Adobe-Series\" class=\"headerlink\" title=\"Adobe Series\"></a>Adobe Series</h4><ul>\n<li>应用类型：📐 | 设计套件</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code></li>\n<li>推荐理由：Adobe 全家桶，设计师必备套件。</li>\n</ul>\n<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><h4 id=\"Parallels-Desktop\"><a href=\"#Parallels-Desktop\" class=\"headerlink\" title=\"Parallels Desktop\"></a>Parallels Desktop</h4><ul>\n<li>应用类型：🖥 | 虚拟机软件</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://www.parallels.com/cn/\" target=\"_blank\" rel=\"noopener\">PD 官网</a></li>\n<li><p>推荐理由：Mac 上性能首屈一指的虚拟机工具。</p>\n<blockquote>\n<p>在自己的机器上，分别用 VMware 和 PD 测试运行 Windows 10，日常使用强度 ( 编码、浏览网页、看视频等 )。相比于 VMware，PD 运行流畅且发热程度更低。当然，一两台机器的测试结果并不具有参考性，故 PD 在 MacOS 上的优势可自行体验后再决定购入使用 ( 都有试用版本体验 )。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"VMware\"><a href=\"#VMware\" class=\"headerlink\" title=\"VMware\"></a>VMware</h4><ul>\n<li>应用类型：🖥 | 虚拟机软件</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<ul>\n<li><code>MacOS</code>：支持产品 VMware  Fusion</li>\n<li><code>Window、Linux</code>：支持产品 Workstation Pro</li>\n<li><code>Window、Linux</code>：支持产品 Workstation Player</li>\n</ul>\n</li>\n<li>官方地址：<a href=\"https://www.vmware.com/cn/products/fusion.html\" target=\"_blank\" rel=\"noopener\">VMware Fusion</a> | <a href=\"https://www.vmware.com/cn/products/workstation-pro.html\" target=\"_blank\" rel=\"noopener\">Workstation Pro</a> | <a href=\"https://www.vmware.com/cn/products/workstation-player.html\" target=\"_blank\" rel=\"noopener\">Workstation Player</a></li>\n<li>推荐理由： 跨平台虚拟化软件，即它可安装在 Windows、Linux、MacOS 的操作系统上使用。</li>\n</ul>\n<h4 id=\"VirtualBox\"><a href=\"#VirtualBox\" class=\"headerlink\" title=\"VirtualBox\"></a>VirtualBox</h4><ul>\n<li>应用类型：🖥 | 虚拟机软件</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"noopener\">VirtualBox 官网</a> | <a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"noopener\">VirtualBox 下载</a> | <a href=\"https://www.virtualbox.org/wiki/End-user_documentation\" target=\"_blank\" rel=\"noopener\">用户手册</a> | <a href=\"https://www.virtualbox.org/wiki/Technical_documentation\" target=\"_blank\" rel=\"noopener\">开源手册</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费；</li>\n<li>跨平台虚拟化软件，即它可安装在 Windows、Linux、MacOS 的操作系统上使用；</li>\n<li>可虚拟的操作系统包括 Windows、Mac OS X、Linux、OpenBSD、Solaris、IBM OS2、Android 等。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"DBeaver\"><a href=\"#DBeaver\" class=\"headerlink\" title=\"DBeaver\"></a>DBeaver</h4><ul>\n<li>应用类型：🗄 | 数据库管理</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"https://dbeaver.io/\" target=\"_blank\" rel=\"noopener\">DBeaver 官网</a> | <a href=\"https://dbeaver.io/download/\" target=\"_blank\" rel=\"noopener\">DBeaver 下载</a> | <a href=\"https://github.com/dbeaver/dbeaver/\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费 ( 可付费升级 <a href=\"https://dbeaver.com/\" target=\"_blank\" rel=\"noopener\">企业版</a> )；</li>\n<li><code>通用数据库管理工具</code> 和 <code>SQL 客户端</code>，支持 MySQL, PostgreSQL, Oracle, DB2, MSSQL, Sybase, Mimer, HSQLDB, Derby 及兼容 JDBC 的数据库。</li>\n<li>它可以处理任何的 <code>外部数据源</code> ( 数据源包含数据库服务器的名称和位置、数据库驱动程序以及在登录数据库时所需的信息 )。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Sequel-Pro\"><a href=\"#Sequel-Pro\" class=\"headerlink\" title=\"Sequel Pro\"></a>Sequel Pro</h4><ul>\n<li>应用类型：🗄 | 数据库管理</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">Sequel Pro 官网</a> | <a href=\"https://github.com/sequelpro/sequelpro\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费；</li>\n<li>MacOS 平台独占应用，专门管理 <code>MySQL</code> 和 <code>MariaDB</code> 数据库的工具，操作界面非常友好，若仅是处理 MySQL 数据库，Sequel Pro 是你开发的最佳伴侣。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"FileZilla\"><a href=\"#FileZilla\" class=\"headerlink\" title=\"FileZilla\"></a>FileZilla</h4><ul>\n<li>应用类型：📤 | 文件传输</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官网网址：<a href=\"https://filezilla-project.org/\" target=\"_blank\" rel=\"noopener\">FileZilla 官方</a> | <a href=\"https://filezilla-project.org/download.php?type=client\" target=\"_blank\" rel=\"noopener\">FileZilla 客户端</a> | <a href=\"https://filezilla-project.org/download.php?type=server\" target=\"_blank\" rel=\"noopener\">FileZilla 服务端</a> | <a href=\"https://filezilla-project.org/sourcecode.php\" target=\"_blank\" rel=\"noopener\">源代码</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费 ( 可付费升级 <a href=\"https://filezillapro.com/\" target=\"_blank\" rel=\"noopener\">企业版</a> )；</li>\n<li>跨平台的 <code>FTP</code> 解决方案，支持 FTP、FTPS、SFTP 等文件传输协议；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CornerStone\"><a href=\"#CornerStone\" class=\"headerlink\" title=\"CornerStone\"></a>CornerStone</h4><ul>\n<li>应用类型：⌨️ | 代码管理</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://cornerstone.assembla.com/\" target=\"_blank\" rel=\"noopener\">CornerStone 官网</a></li>\n<li>推荐理由：面向 Svn ( 开放源代码的版本控制系统 )，即 CornerStone 是一款拥有界面交互的 Svn 客户端。</li>\n</ul>\n<h4 id=\"TortoiseSVN\"><a href=\"#TortoiseSVN\" class=\"headerlink\" title=\"TortoiseSVN\"></a>TortoiseSVN</h4><ul>\n<li>应用类型：⌨️ | 代码管理</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>Windows</code></li>\n<li>官方地址：<a href=\"https://tortoisesvn.net/\" target=\"_blank\" rel=\"noopener\">TortoiseSVN 官网</a> | <a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">TortoiseSVN  下载</a></li>\n<li>推荐理由：面向 Svn ( 开放源代码的版本控制系统 )，即 TortoiseSVN 是一款拥有界面交互的 Svn 客户端。</li>\n</ul>\n<h4 id=\"Git-GUI-Clients\"><a href=\"#Git-GUI-Clients\" class=\"headerlink\" title=\"Git GUI Clients\"></a>Git GUI Clients</h4><ul>\n<li>应用类型：⌨️ | 代码管理</li>\n<li>是否付费：🆓 | 免费使用</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code> | <code>Android</code> | <code>iOS</code></li>\n<li>官方地址：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git 官网</a> | <a href=\"https://git-scm.com/downloads/guis\" target=\"_blank\" rel=\"noopener\">Git 下载</a></li>\n<li>推荐理由：面向 Git ( 开源的分布式版本控制系统 )，即 Git GUI 是一款拥有界面交互的 Git 客户端。</li>\n</ul>\n<h4 id=\"Dash\"><a href=\"#Dash\" class=\"headerlink\" title=\"Dash\"></a>Dash</h4><ul>\n<li>应用类型：⌨️ | API 文档</li>\n<li>是否付费：🆓 | 付费应用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://kapeli.com/dash\" target=\"_blank\" rel=\"noopener\">Dash 官网</a></li>\n<li>推荐理由： API 文档浏览器以及代码片段管理器，涵盖 200+ 种语言的 APIs（几乎涵盖常见的开发语言），离线查询、阅读，实属开发工具序列的一大 “利器”。</li>\n</ul>\n<h3 id=\"网络工具\"><a href=\"#网络工具\" class=\"headerlink\" title=\"网络工具\"></a>网络工具</h3><h4 id=\"Downie\"><a href=\"#Downie\" class=\"headerlink\" title=\"Downie\"></a>Downie</h4><ul>\n<li>应用类型：📥 |  网络下载</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方下载：<a href=\"https://software.charliemonroe.net/downie.php\" target=\"_blank\" rel=\"noopener\">Downie 官方</a> | <a href=\"https://sspai.com/post/40999\" target=\"_blank\" rel=\"noopener\">少数派评测</a></li>\n<li>推荐理由：<ul>\n<li>超过 1000+ 流媒体网站的视频下载 ( YouTube、Vimeo、Bilibili、优酷、爱奇艺等 )；</li>\n<li>直接拖拽链接即可下载，但注意部分视频源以分片段形式下载，与 <a href=\"#Permute\">Permute</a> 搭配使用即可；</li>\n<li>内置资源搜索功能。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Motrix\"><a href=\"#Motrix\" class=\"headerlink\" title=\"Motrix\"></a>Motrix</h4><ul>\n<li>应用类型：📥 |  网络下载</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code></li>\n<li>官方下载：<a href=\"https://github.com/agalwood/Motrix\" target=\"_blank\" rel=\"noopener\">Motrix 英文</a> | <a href=\"https://github.com/agalwood/Motrix/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">Motrix 中文</a></li>\n<li>推荐理由：<br>  Motrix 是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链、百度网盘等资源。</li>\n</ul>\n<h4 id=\"Free-Download-Manager\"><a href=\"#Free-Download-Manager\" class=\"headerlink\" title=\"Free Download Manager\"></a>Free Download Manager</h4><ul>\n<li>应用类型：📥 |  网络下载</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code></li>\n<li>官方下载：<a href=\"https://www.freedownloadmanager.org/zh/download.htm\" target=\"_blank\" rel=\"noopener\">FDM 官方下载</a> | <a href=\"https://www.iplaysoft.com/fdm.html\" target=\"_blank\" rel=\"noopener\">异次元评测</a></li>\n<li><p>推荐理由：</p>\n<ul>\n<li>老牌的资源下载软件，开源无广告，交互逻辑简单；</li>\n<li>支持 BT、FTP HTTP 的资源下载；</li>\n<li><p>支持批量下载、断点续传、捕获 HTTP 链接、FTP 目录浏览等功能。</p>\n<blockquote>\n<p><code>断点续传</code>：FDM 下载时会自动将文件切割成 N 个区块同时进行多线程下载来显著提高下载速度。即便下载途中遇到断线等问题，通过内建的断点续传机制恢复并接续原来的下载。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"系统补全\"><a href=\"#系统补全\" class=\"headerlink\" title=\"系统补全\"></a>系统补全</h3><h4 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h4><ul>\n<li>应用类型：⚙️ | 系统内置 ( 包含大部分应用所需要的运行环境 )</li>\n<li>是否付费：🆓 | 免费使用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>推荐理由：<ul>\n<li>用于 MacOS 和 iOS 应用程序开发的集成开发工具 ( IDE )；</li>\n<li>既使不以开发者角度考虑，它包含了大部分应用运行所需要的依赖库 ( 运行环境 )，推荐安装。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Automator\"><a href=\"#Automator\" class=\"headerlink\" title=\"Automator\"></a>Automator</h4><ul>\n<li>应用类型：⚙️ | 系统内置</li>\n<li>是否付费：🆓 | 免费使用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://support.apple.com/zh-cn/guide/automator/welcome/mac\" target=\"_blank\" rel=\"noopener\">Automator 官方</a> | <a href=\"https://sspai.com/post/36667\" target=\"_blank\" rel=\"noopener\">少数派评测</a></li>\n<li>推荐理由：iOS 上大名鼎鼎的 <code>Workflow</code>、<code>捷径</code>，相信大伙不会陌生，而作为提升工作效率的神器，在 Mac 端也同样有替代的方案，它就是 <code>Automator</code> ，俗称 “扛炮”。</li>\n</ul>\n<h4 id=\"iStatistic\"><a href=\"#iStatistic\" class=\"headerlink\" title=\"iStatistic\"></a>iStatistic</h4><ul>\n<li>应用类型：🌡 | 系统监控</li>\n<li>是否付费：💵 | 付费应用</li>\n<li>支持平台：<code>MacOS</code> | <code>iOS</code></li>\n<li>推荐理由：<ul>\n<li>系统监测软件，包括性能、能耗及温度情况监测；</li>\n<li>动态化、图表化显示数据 ( 支持 Web DashBoard )，喜欢装机的朋友不妨在机箱内挂小屏幕做展示，科技感十足。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"加速大师\"><a href=\"#加速大师\" class=\"headerlink\" title=\"加速大师\"></a>加速大师</h4><ul>\n<li>应用类型：🌡 | 系统优化</li>\n<li>是否付费：🆓 | 免费使用</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：暂无 ( 只能从 <a href=\"https://itunes.apple.com/cn/app/%E5%8A%A0%E9%80%9F%E5%A4%A7%E5%B8%88/id1144825078?mt=12\" target=\"_blank\" rel=\"noopener\">Mac App Store</a> 中下载，请认准小火箭的图标。但后面发现作者以另一款软件 <a href=\"https://itunes.apple.com/cn/app/icare-3/id1142437192\" target=\"_blank\" rel=\"noopener\">iCare 3</a> 更新项目 )</li>\n<li>推荐理由：<ul>\n<li>轻量级系统垃圾清理工具，卸载管理工具，开机自启项管理工具；</li>\n<li>支持性能监测 ( 内存、CPU、网络 I/O ) 和内存释放的功能；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Keka\"><a href=\"#Keka\" class=\"headerlink\" title=\"Keka\"></a>Keka</h4><ul>\n<li>应用类型：📦 | 解压缩工具</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code></li>\n<li>官方地址：<a href=\"https://www.keka.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Keka 官网</a> | <a href=\"https://github.com/aonez/Keka\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费 ( GPL )；</li>\n<li>MacOS 平台独占应用，支持 <code>解、压缩</code> 文件；</li>\n<li>且支持 <code>7z</code> 文件和 <code>Zip 2.0</code> 文件使用 <code>AES-256</code> 加密 ；</li>\n<li>可支持创建 7Z, ZIP, TAR, GZIP, BZIP2, XZ, LZIP, DMG, ISO 格式文件；</li>\n<li>可支持解压 7Z, RAR, TAR, GZIP, BZIP2, XZ, LZIP, DMG, ISO, LZMA, EXE, CAB, WIM, PAX, JAR, APK, APPX, CPGZ, CPIO 格式文件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"7-Zip\"><a href=\"#7-Zip\" class=\"headerlink\" title=\"7-Zip\"></a>7-Zip</h4><ul>\n<li>应用类型：📦 | 解压缩工具</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>Windows</code> | <code>Linux</code></li>\n<li>官方地址：<a href=\"https://www.7-zip.org/\" target=\"_blank\" rel=\"noopener\">7-Zip 官网</a> | <a href=\"https://www.7-zip.org/download.html\" target=\"_blank\" rel=\"noopener\">7-Zip 下载</a></li>\n<li>推荐理由：<ul>\n<li>开源且完全免费 ( LGPL )；</li>\n<li>国内的解压缩工具不敢恭维，不谈性能，内嵌广告行为就是耍流氓；</li>\n<li>可支持解、压缩格式：7z, XZ, BZIP2, GZIP, TAR, ZIP, WIM</li>\n<li>仅可解压格式：ARJ, CAB, CHM, CPIO, CramFS, DEB, DMG, FAT, HFS, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, RAR, RPM, SquashFS, UDF, VHD, WIM, XAR。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"论文写作\"><a href=\"#论文写作\" class=\"headerlink\" title=\"论文写作\"></a>论文写作</h3><h4 id=\"Mathpix-snipping-tool\"><a href=\"#Mathpix-snipping-tool\" class=\"headerlink\" title=\"Mathpix snipping tool\"></a>Mathpix snipping tool</h4><ul>\n<li>应用类型：🔢 | 数学公式</li>\n<li>是否付费：🆓 | 开源免费</li>\n<li>支持平台：<code>MacOS</code> | <code>Windows</code> | <code>Linux</code> | <code>iOS</code> | <code>Android</code></li>\n<li>官方地址：<a href=\"https://mathpix.com/\" target=\"_blank\" rel=\"noopener\">Mathpix 官网</a></li>\n<li><p>推荐理由：</p>\n<ul>\n<li><code>截图</code> 或者 <code>拍照</code> 即可实现数学公式的识别功能，并转化为 <code>LaTeX</code>；</li>\n<li><p>众多大牛的力荐 ( 比较风趣的软件介绍，不要较真哈 )：</p>\n<p>  <img src=\"/images/illustration/Project/2018/11/Software-Solution_mathpix_intro.png\" alt></p>\n  <center>Mathpix 官方介绍</center>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"需求升级：系统解决方案\"><a href=\"#需求升级：系统解决方案\" class=\"headerlink\" title=\"需求升级：系统解决方案\"></a>需求升级：系统解决方案</h2><h3 id=\"开篇引言-1\"><a href=\"#开篇引言-1\" class=\"headerlink\" title=\"开篇引言\"></a>开篇引言</h3><ul>\n<li>完整软件解决方案：运作相应的 <code>操作系统</code> 和 <code>应用程序</code>，以提供完整的软件解决方案。</li>\n<li>下述所有 <code>解决方案</code>，原则上可在一台服务器实现的。实现原理即服务器上多开 <code>虚拟机</code>，让每台虚拟机各司其职，运作相应的 <code>操作系统</code> 和 <code>应用程序</code>，提供相应的功能或服务。</li>\n<li>这也是近些年想达成的小目标：感谢 liuspy 的文章 $^{[1]}$ 启发，才有想法去组一台 <code>家用服务器</code>，实现 <code>个人私有云 (黑群晖)</code>、<code>软路由 (OpenWrt/iKuai)</code>、<code>Web 服务器</code>、<code>代码托管服务器</code> 等。当然，在条件允许情况下，尽量把攒机过程中所做过的调研资料整理并输出文章，以便同样有折腾需求的朋友复用。</li>\n</ul>\n<h3 id=\"路由系统解决方案\"><a href=\"#路由系统解决方案\" class=\"headerlink\" title=\"路由系统解决方案\"></a>路由系统解决方案</h3><ul>\n<li><p>需求定位：突破普通路由器诸多的瓶颈和限制，除了享受高性能的网络体验，且获得更高阶的 <code>服务体验</code> 和 <code>玩法</code>。</p>\n<blockquote>\n<p>关于服务体验和玩法，具体可参考市面上的智能路由产品，它们表现的花样已经足够多了，如 <code>科学上网</code>、<code>去广告</code>、<code>文件服务器 (FTP/SMB)</code>、<code>运行 Python 程序</code> 等，有兴致的朋友可以自行了解详情。</p>\n</blockquote>\n<ul>\n<li><p>路由系统可分为软路由和硬路由，在介绍前夕，先弄明白两者的 <code>概念</code> $^{[2, 3]}$：</p>\n<ul>\n<li><code>软路由</code>：指利用台式机或服务器配合软件 ( 虚拟机 ) 而形成的路由解决方案。简单理解，即 <code>PC + 操作系统 ( Linux / Windows )  + 专用路由程序</code> 组成的路由解决方案；</li>\n<li><code>硬路由</code>：采用特定的硬件设备，基于嵌入式系统架构，以自行开发或是现成的嵌入式操作系统配合自行开发的路由软件，提供专门的路由器功能。当然，也可理解为 <code>厂家推出的整体路由解决方案</code>，例如网件、华硕、华为、小米、TP-LINK 等生产的路由产品。</li>\n</ul>\n</li>\n<li><p>事实上，路由其实没有软、硬之分，任何路由器都由处理器、内存、路由程序存储器、网络接口模块、电源模块、输入输出部分与系统构成的。</p>\n<p>  而区分两者的概念，主要是为了更精确定位，尽量在满足自己性能需求的前提下，最大化地 <code>节约硬件成本</code> 和 <code>运作成本</code> ( 主要是耗电成本 )。</p>\n</li>\n</ul>\n</li>\n<li><p><code>涉及系统</code>：根据路由的形式，硬件架构、系统架构是不同的，故各有自适用的路由系统，选择正确的路由系统以发挥其最大效能。</p>\n<ul>\n<li>针对软路由：<a href=\"https://openwrt.org/start?id=zh/start\" target=\"_blank\" rel=\"noopener\">OpenWrt (LEDE)</a>、<a href>iKuai</a>、<a href=\"http://www.hi-spider.com/zh\" target=\"_blank\" rel=\"noopener\">海蜘蛛</a>、<a href=\"http://firmware.koolshare.cn/LEDE_X64_fw867/\" target=\"_blank\" rel=\"noopener\">梅林 (koolshare)</a></li>\n<li>针对硬路由：<a href=\"https://openwrt.org/start?id=zh/start\" target=\"_blank\" rel=\"noopener\">OpenWrt (LEDE)</a>、<a href=\"http://p4davan.80x86.io/\" target=\"_blank\" rel=\"noopener\">Padavan (荒野无灯)</a>、<a href=\"http://firmware.koolshare.cn/\" target=\"_blank\" rel=\"noopener\">梅林 (支持硬件有限)</a></li>\n</ul>\n</li>\n<li><p><code>涉及硬件</code>：硬路由器的硬件架构则是专为路由器而设计的，而软路由器的硬件架构是通用的，故我们只能针对软路由器的方案制定 <code>硬件需求方案</code>，考虑本章节的主题是路由器，则硬件需求方案将留至 <code>装机篇章</code> 讲述。</p>\n</li>\n<li><p>搭建流程：</p>\n</li>\n</ul>\n<h3 id=\"个人博客解决方案\"><a href=\"#个人博客解决方案\" class=\"headerlink\" title=\"个人博客解决方案\"></a>个人博客解决方案</h3><ul>\n<li><p>需求定位：</p>\n<ul>\n<li>纯粹的图文静态博客，仅以内容即可驱动的博客载体，且不需要额外的运营成本 ( 团队运营、服务器等 )。</li>\n<li>Hexo 博客框架的免费开源性质，官方提供强大的 API，还有丰富的社区资源 ( 教程、插件、主题等 )，基本能满足你的个性化服务和需求。</li>\n<li>Hexo 支持 Markdown，上百页面秒级的渲染速度，一键即可部署至 Github。</li>\n</ul>\n</li>\n<li><p>涉及框架：<code>Hexo</code></p>\n</li>\n<li><p>涉及技术：分布式版本控制系统 <code>Git</code>。而这里，使用到的主要功能是代码托管，而托管平台我们选择 <code>Github</code> ( 当然限于国内的访问速度，你可同时部署多个平台，例如：<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>、<a href=\"https://gitee.com/\" target=\"_blank\" rel=\"noopener\">Gitee</a></p>\n</li>\n<li><p>搭建流程：</p>\n<ul>\n<li>📖 | <a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo. 官方使用文档. hexo.io</a> </li>\n<li>📝 | <a href=\"https://www.kofes.cn/2018/01/Hexo-Installation-Guide.html\">Kofe. 基于 Hexo 框架在 Github 上搭建博客. kofes.cn</a></li>\n<li>📝 | <a href=\"http://baixin.io/2015/08/HEXO搭建个人博客/\" target=\"_blank\" rel=\"noopener\">Panbaixin. Hexo + Github 搭建个人博客. baixin.io</a></li>\n<li>📝 | <a href>C.J.Scarlett. How to Create a Blog with Hexo On Ubuntu. digitalocean.com</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"个人私有云解决方案\"><a href=\"#个人私有云解决方案\" class=\"headerlink\" title=\"个人私有云解决方案\"></a>个人私有云解决方案</h3><p>暂未定更新日期。</p>\n<h3 id=\"跨平台智能家居方案\"><a href=\"#跨平台智能家居方案\" class=\"headerlink\" title=\"跨平台智能家居方案\"></a>跨平台智能家居方案</h3><p>暂未定更新日期。</p>\n<h3 id=\"科学上网解决方案\"><a href=\"#科学上网解决方案\" class=\"headerlink\" title=\"科学上网解决方案\"></a>科学上网解决方案</h3><p>暂未定更新日期。</p>\n<h3 id=\"虚拟专用网络方案\"><a href=\"#虚拟专用网络方案\" class=\"headerlink\" title=\"虚拟专用网络方案\"></a>虚拟专用网络方案</h3><p>暂未定更新日期。</p>\n<h3 id=\"代码托管方案：Svn\"><a href=\"#代码托管方案：Svn\" class=\"headerlink\" title=\"代码托管方案：Svn\"></a>代码托管方案：Svn</h3><ul>\n<li>需求定位：作为 <code>集中式</code> 源代码版本控制系统，其适合于企业内部由项目经理统一协调的多个并行项目的开发。有趣的是，更甚有企业把 Svn 当作云端文件夹，毕竟其入门门槛比较低。而在 Git 盛行的环境下，我们学习 Svn 的理由更多的是适应公司的开发模式。至于 Svn 与 Git 的优劣，还是视具体使用环境而言，有兴趣可以参阅参考文章 [4]，其中描述了 Git 与 Svn 的详细对比，它们各自的优劣心中自有标准。  </li>\n<li>涉及技术：集中式的源代码版本控制系统 <code>Svn</code>。</li>\n<li>涉及软件：<ul>\n<li>服务端：<a href=\"https://www.visualsvn.com/server/download/\" target=\"_blank\" rel=\"noopener\">Widnows Server</a></li>\n<li>客户端：<a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">TortoiseSVN for Windows</a> | <a href=\"https://cornerstone.assembla.com/\" target=\"_blank\" rel=\"noopener\">Cornerstone for MacOS</a></li>\n</ul>\n</li>\n<li>搭建流程：<ul>\n<li>📝 | <a href=\"https://www.kofes.cn/2018/08/building-a-svn-server.html\">Kofe. SVN 环境搭建与使用. kofes.cn</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码托管方案：Git\"><a href=\"#代码托管方案：Git\" class=\"headerlink\" title=\"代码托管方案：Git\"></a>代码托管方案：Git</h3><p>暂未定更新日期。</p>\n<h2 id=\"好马配好鞍：浏览器插件\"><a href=\"#好马配好鞍：浏览器插件\" class=\"headerlink\" title=\"好马配好鞍：浏览器插件\"></a>好马配好鞍：浏览器插件</h2><h3 id=\"Violentmonkey\"><a href=\"#Violentmonkey\" class=\"headerlink\" title=\"Violentmonkey\"></a>Violentmonkey</h3><ul>\n<li>插件性质：辅助</li>\n<li>支持平台：<code>Chrome</code> | <code>Firefox</code> | <code>Opera</code> | <code>Maxthon</code></li>\n<li>官方地址：<a href=\"https://violentmonkey.github.io/\" target=\"_blank\" rel=\"noopener\">Violentmonkey 官网</a> | <a href=\"https://violentmonkey.github.io/get-it/\" target=\"_blank\" rel=\"noopener\">Violentmonkey 下载</a> | <a href=\"https://github.com/violentmonkey/violentmonkey\" target=\"_blank\" rel=\"noopener\">Github 开源</a></li>\n<li><p>推荐理由：开源的用户脚本管理器。</p>\n<blockquote>\n<p>用户脚本是什么：是一段代码，它们能够优化您的网页浏览体验。安装之后，有些脚本能为网站添加新的功能，有些能使网站的界面更加易用，有些则能隐藏网站上烦人的部分内容。</p>\n</blockquote>\n</li>\n<li><p>脚本库：<a href=\"https://greasyfork.org/zh-CN\" target=\"_blank\" rel=\"noopener\">GreasyFork</a> | <a href=\"https://openuserjs.org/\" target=\"_blank\" rel=\"noopener\">OpenUserJs</a></p>\n</li>\n<li><p>优秀脚本推荐：</p>\n<ul>\n<li><a href=\"https://greasyfork.org/zh-CN/scripts/369400-local-youtube-downloader\" target=\"_blank\" rel=\"noopener\">本地 Youtube 下载器</a>：不需要透过第三方的服务就能下载 YouTube 影片。当然，Youtube 的高码率 ( 1080P、1440P、2160P ) 的媒体是音频、视频分体的，具体可使用 <a href=\"#FFmpeg\">FFmpeg</a> 或 Premiere、Final Cut、iMovie 等视频编辑工具合成。</li>\n<li><a href=\"https://greasyfork.org/zh-CN/scripts/18733-网盘提取工具\" target=\"_blank\" rel=\"noopener\">网盘自动提取提取码</a>：网盘自动提取、输入提取码，省心、省力、不折腾。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Tampermonkey\"><a href=\"#Tampermonkey\" class=\"headerlink\" title=\"Tampermonkey\"></a>Tampermonkey</h3><ul>\n<li>插件性质：辅助</li>\n<li>支持平台：<code>Chrome</code> | <code>Firefox</code> | <code>Opera</code> | <code>Edge</code> | <code>Safari</code> | <code>Dolphin</code></li>\n<li>官方地址：<a href=\"https://tampermonkey.net/\" target=\"_blank\" rel=\"noopener\">Tampermonkey 官网</a> | <a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">谷歌应用商店</a></li>\n<li>推荐理由：用户脚本管理器。</li>\n</ul>\n<h3 id=\"广告终结者\"><a href=\"#广告终结者\" class=\"headerlink\" title=\"广告终结者\"></a>广告终结者</h3><ul>\n<li>插件性质：辅助</li>\n<li>支持平台：<code>Chrome</code> | <code>360 浏览器</code> | <code>搜狗浏览器</code> | <code>UC 浏览器</code> | <code>猎豹浏览器</code> | <code>百度浏览器</code></li>\n<li>官方地址：<a href=\"http://www.adtchrome.com/\" target=\"_blank\" rel=\"noopener\">官方网站</a> | <a href=\"https://chrome.google.com/webstore/detail/广告终结者/fpdnjdlbdmifoocedhkighhlbchbiikl?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">谷歌应用商店</a></li>\n<li>推荐理由：<ul>\n<li>可过滤网页中几乎所有的横幅、弹窗、视频广告；</li>\n<li>手动屏蔽网页广告：最喜欢的功能之一，”以氓治氓” 形容也不为过哈。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"谷歌学术搜索按钮\"><a href=\"#谷歌学术搜索按钮\" class=\"headerlink\" title=\"谷歌学术搜索按钮\"></a>谷歌学术搜索按钮</h3><ul>\n<li>插件性质：辅助</li>\n<li>支持平台：<code>Chrome</code></li>\n<li>官方地址：<a href=\"https://chrome.google.com/webstore/detail/google-scholar-button/ldipcbpaocekfooobnbcddclnhejkcpn?utm_source=chrome-ntp-icon\" target=\"_blank\" rel=\"noopener\">谷歌应用商店</a></li>\n<li>推荐理由：快速检索学术论文、文献，一键下载，一键导出多种标准的引用格式；</li>\n</ul>\n<h3 id=\"Youtube-本地下载器\"><a href=\"#Youtube-本地下载器\" class=\"headerlink\" title=\"Youtube 本地下载器\"></a>Youtube 本地下载器</h3><ul>\n<li>插件性质：辅助</li>\n<li><p>支持平台：<code>Chrome</code> | <code>FireBox</code></p>\n<blockquote>\n<p>需要预装用户脚本插件方可使用，比如 <code>Violentmonkey</code>、<code>Tampermonkey</code> 等。</p>\n</blockquote>\n</li>\n<li><p>官方地址：<a href=\"https://greasyfork.org/zh-CN/scripts/369400-local-youtube-downloader\" target=\"_blank\" rel=\"noopener\">Greasy Fork</a></p>\n</li>\n<li><p>推荐理由：</p>\n<ul>\n<li>让你不通过第三方服务来下载 YouTube 影片的简单脚本。</li>\n<li><p>支持下载 1080p、1440p 以及 2160p 画质的影片。</p>\n<blockquote>\n<p>注意： 1080p 以上影片的需要从 <code>Adaptive</code>栏目下载，但自适应 adaptive 的影片和声音是分开的，若要拿到完整的 1080p 影片，你需要自己把它合并。自己平时使用的合成软件是 <code>Premiere</code>，或者使用 <code>FFmpeg</code> 命令行合成影片和音频。    </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"信仰装机：学娱并进-PC\"><a href=\"#信仰装机：学娱并进-PC\" class=\"headerlink\" title=\"信仰装机：学娱并进 PC\"></a>信仰装机：学娱并进 PC</h2><h3 id=\"需求定义\"><a href=\"#需求定义\" class=\"headerlink\" title=\"需求定义\"></a>需求定义</h3><ul>\n<li><p><code>价格</code>：不谈价格选配置，浪费时间不止且无意义。为此，我们控制在 8.0k 到 11.4k 的价格区间内，不追求一步到位，可迭代式升级硬件以达成装机目标。具体地，装机计划以阶段目标执行：</p>\n<ul>\n<li><code>第一阶段</code> (5.3k-8.1k)：机箱 (0.4k-1.0k)，主板 (1.0k-1.5k)，CPU (1.8k-2.3k)，电源 (0.6k-0.8k)，M.2 512GB 固态硬盘 (0.4k-0.8k)，8GB 内存 (0.5k-0.9k)，散热 (0.6k-0.8k)</li>\n<li><code>第二阶段</code> (2.7k-4.0k)：显卡 (2.5k-3.5k)，风扇 (0.2k-0.5k)</li>\n</ul>\n</li>\n<li><p><code>第三阶段</code> (1.5k-2.2k)：屏幕 (1.5k-2.2k)</p>\n<pre><code>  &gt; 提示：各硬件的售卖价格主要参考各硬件的京东旗舰店定价，且有效统计截止于 2019 年 3 月。\n</code></pre></li>\n<li><p><code>外观</code>：基于工作环境的因素考量，首先偏向于 ITX 规格或者适中 M-ATX 规格的机箱；再者是材质方面，钢化玻璃侧透机箱或铝制机箱，且前者可考虑加入 RGB 灯光系统。</p>\n<blockquote>\n<p>机箱规格分别有：ITX，M-ATX，ATX $^{[5]}$。</p>\n</blockquote>\n</li>\n<li><p><code>硬件</code>：</p>\n<ul>\n<li><code>机箱</code>：中等紧凑型，再考虑标准型 ( 兼容 ATX 的小机箱 )；优先考虑钢化玻璃侧透机箱，再到一体成型铝材机箱。</li>\n<li><code>主板</code>：华硕 ROG 系列，没有超频需求；接口支持丰富；包含 WI-FI 以及蓝牙模组；mATX、ITX 规模的主板 ( 从左到右的优先顺序 )。</li>\n<li><code>处理</code>：盒装 CPU ( 主要考虑 CPU 体质问题，买散装还是有一定风险的 )。</li>\n<li><code>电源</code>：充足的功率支持，便于日后升级之需。注意机箱对电源尺寸的硬性要求。</li>\n<li><code>硬盘</code>：M.2 SSD 512GB；2T 希捷机械盘 7200 转。</li>\n<li><code>内存</code>：不限条件，自由选择。功率在 2666-3200 足矣。</li>\n<li><code>散热</code>：尽可能静音；支持华硕 AURA 灯光同步系统。</li>\n<li><code>显卡</code>：限定为 NVDIA ，且 CUDA 程序良好支持、Tensorflow 良好支持的显卡。</li>\n<li><code>屏幕</code>：2k 分辨率，23.8 / 27 尺寸，当然资金充足可考虑 HDR 10。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"装机预习\"><a href=\"#装机预习\" class=\"headerlink\" title=\"装机预习\"></a>装机预习</h3><ul>\n<li><a href=\"https://www.zhihu.com/question/35911743\" target=\"_blank\" rel=\"noopener\">知乎问题. DIY 装机有哪些误区. zhihu.com</a></li>\n<li><a href=\"https://dl.3dmgame.com/patch/paofenruanjian.html\" target=\"_blank\" rel=\"noopener\">3DMGAME. 电脑检测跑分工具大全. 3dmgame.com</a></li>\n<li><a href=\"https://post.smzdm.com/p/106088/\" target=\"_blank\" rel=\"noopener\">卖一手. 台式机电源选购经验篇一：品牌、代工及选购点. 2015. smzdm.com</a></li>\n<li><a href=\"https://www.bilibili.com/video/av25211498\" target=\"_blank\" rel=\"noopener\">子希兄弟. 超详细电脑组装、电脑安装教程教学. 2018. bilibili.com</a></li>\n</ul>\n<h3 id=\"硬件挑选\"><a href=\"#硬件挑选\" class=\"headerlink\" title=\"硬件挑选\"></a>硬件挑选</h3><ul>\n<li><p><code>机箱</code>：</p>\n<ul>\n<li><p>Sunmilo BG2 黑红色版 ( MOD 机箱 )</p>\n<blockquote>\n<p><a href=\"https://item.taobao.com/item.htm?spm=a1z10.1-c.w4004-9691348913.8.65186580AZGN5m&amp;id=538855908500\" target=\"_blank\" rel=\"noopener\">Sunmilo. 官方样张. taobao.com</a> | <a href=\"https://www.chiphell.com/thread-1933774-1-1.html\" target=\"_blank\" rel=\"noopener\">Griffyn. 桌面 show. chiphell.com</a></p>\n</blockquote>\n</li>\n<li><p>乔思伯 RM3 标准版，其中此型号还有炫彩灯光的版本，支持订制铭牌。</p>\n<blockquote>\n<p>关于 RM3 的样机演示可参考官网搜集的评测集：<a href=\"http://www.jonsbo.com/products/qiaosiboRM3ban.html\" target=\"_blank\" rel=\"noopener\">RM3 评测集</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>主板</code>：华硕 ROG B360/Z370/H370 系列 + I/G/F Gaming</p>\n<ul>\n<li><code>选择什么系列</code> $^{[6]}$：主板是衔接所有硬件的媒介，结合需求选择适用的主板。<ul>\n<li>Z370、Z390 是针对是否有超频需求的产品，需求不强则选择 B360。</li>\n<li>H370 主打的是扩展性。其定位很尴尬，若你选择 iTX / mATX 规格的主板，考量性能差距、价格差距则没有必要上 H370。</li>\n</ul>\n</li>\n<li><code>具体型号说明</code>：F 为 ATX 规格主板，含 RGB 灯效模块；I 为 ITX 规格主板，含 RGB 灯效模块；G、H，分别是 mATX 和 ATX 规格主板，但不含 RGB 模块，价格相对最便宜。当然，是否需要 PCIe 拓展槽也是需考量的因素。</li>\n<li><code>明确最终需求</code>：对以上主板型号有了宏观认识后即可挑选具体的主板。<ul>\n<li>首先，明确需要组装机的规格为 ITX / mATX，同样限制了主板尺寸大小；</li>\n<li>其次，我们要打造一套灯光系统，故华硕的 <code>AURA</code> 神光同步是不可缺少的；</li>\n<li>最后，选择 <code>华硕 ROG B360-I Gaming</code> / <code>华硕 TUF Z390M Pro</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>电源</code>：因为小机箱缘故，且要求走背线，故金牌全模组电源是必须的。<ul>\n<li>EVGA G3 金牌全模组 650W</li>\n<li>海韵 550W 金牌全模组 FOCUS+ 550FX</li>\n<li>海盗船 SF600  金牌全模组 600W</li>\n</ul>\n</li>\n<li><code>CPU</code>：Intel i7 8700 </li>\n<li><code>内存</code>：支持 AURA 灯效的内存，频率保持 2666-3200 Hz 水平左右。<ul>\n<li>十铨 DDR4 3200 RGB 灯条 8GB * 2</li>\n<li>芝奇 DDR4 3200 幻光戟 8GB  * 2</li>\n</ul>\n</li>\n<li><code>硬盘</code>：<ul>\n<li><code>固态</code>：浦科特  M9PeG 512GB M.2 NVMe</li>\n<li><code>机械</code>：希捷 ST2000DM008 2TB 7200 SATA</li>\n</ul>\n</li>\n<li><code>散热</code>：<ul>\n<li>利民 银箭 130 Plus + NF-A12  2000 PWM 散热风扇 * 1</li>\n<li>猫头鹰 D15S 石墨烯版本 + NF-A14 1500 PWM 散热风扇 * 1</li>\n</ul>\n</li>\n<li><code>风扇</code>：MOD 定制的机箱，用于机箱的风扇需要 5 个。<ul>\n<li>机箱底进风：猫头鹰 NF-A12x15 散热风扇 * 2</li>\n<li>机箱后排风：猫头鹰 NF-A8 2200 PWM 散热风扇 * 2</li>\n</ul>\n</li>\n<li><p><code>显卡</code>：Nvida GeForce RTX 2070</p>\n<blockquote>\n<p>Nvida RTX 2070 是综合考虑机箱兼容性和颜值的选择，显卡环节可根据自己的需求和经济能力选择合适的。</p>\n</blockquote>\n</li>\n<li><p><code>屏幕</code>：联想 T24h</p>\n</li>\n</ul>\n<h3 id=\"购买渠道\"><a href=\"#购买渠道\" class=\"headerlink\" title=\"购买渠道\"></a>购买渠道</h3><ul>\n<li>基于价格、供货渠道、维修售后保障，选择购买硬件的电商平台：<ul>\n<li>淘宝：机箱、线材</li>\n<li>京东：主板、电源、内存、硬盘、散热、风扇、显示器、CPU、显卡</li>\n<li>闲鱼：显示器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"案例搜集\"><a href=\"#案例搜集\" class=\"headerlink\" title=\"案例搜集\"></a>案例搜集</h3><ul>\n<li>关于装机的案例，主要围绕以下需求进行搜集：<ul>\n<li>基于工作环境的因素考量，首先偏向于 ITX / mATX 规格的案例。</li>\n<li>机箱是钢化玻璃材质侧透机箱，拥有透视内部结构效果，考虑 RGB 灯光系统，且注重 RGB 系统的可控性。</li>\n<li>注重走线工整性，最理想的则是包含安装过程与教程的案例。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ITX-规格\"><a href=\"#ITX-规格\" class=\"headerlink\" title=\"ITX 规格\"></a>ITX 规格</h4><ul>\n<li>案例：<a href=\"https://www.bilibili.com/video/av35835083\" target=\"_blank\" rel=\"noopener\">80it电脑网. 灵魂走线系列19. 2018. bilibili.com</a><ul>\n<li>机箱：迎广 in win A1 ( ITX )</li>\n<li>主板：华硕 Strix ROG Z390-I Gaming ( mini-ITX )</li>\n<li>电源：海盗船 SF600 全模组</li>\n<li>CPU：Intel i7 9700k</li>\n<li>内存：芝奇 Trident Z RGB * 3</li>\n<li>硬盘：三星 M.2 SSD 970 EVO 500GB</li>\n<li>显卡：华硕 Strix ROG 2080 8G 猛禽</li>\n<li>散热：华硕 ROG 龙王 120 ( CPU 散热 )</li>\n<li>风扇：海盗船 LL120 RGB * 3 ( 机箱散热 )</li>\n</ul>\n</li>\n<li>案例：<a href=\"https://www.bilibili.com/video/av41426930\" target=\"_blank\" rel=\"noopener\">ITX实验室. ITX 业界标杆 MK3S &amp; StarWars 主题装机. 2019. bilibili.com</a><ul>\n<li>机箱：MK3S 定制机箱 ( 工期很长，必须有很强信仰才敢买啊 )</li>\n<li>主板：华擎 Z390 ITX 幻影电竞</li>\n<li>电源：海盗船 SF600 全模组</li>\n<li>CPU：Intel i7 9900k</li>\n<li>内存：十铨 王者之剑 夜鹰 RGB</li>\n<li>硬盘：惠普 M.2 SSD EX920 1TB</li>\n<li>显卡：TITAN XP Starwars 限定</li>\n<li>散热：利民 银箭130 + 猫头鹰 NF-F12 industrialPPC-3000 PWM ( CPU 散热 )</li>\n<li>风扇：Tt Luna 8cm RED RGB * 2 ( 机箱散热 )</li>\n</ul>\n</li>\n<li>案例：<a href=\"https://www.bilibili.com/video/av16513351\" target=\"_blank\" rel=\"noopener\">FUSION II. 极限性能TX迷你小钢炮装机摄影. 2017. bilibili.com</a> <ul>\n<li>机箱：NCASE M1 ( ITX )</li>\n<li>主板：微星 Z370I Pro CarBon AC ( mini-ITX )</li>\n<li>电源：海盗船 SF600 全模组</li>\n<li>CPU：Intel i5 8600k</li>\n<li>内存：海盗船 白金统治者 16G 2666MHz * 2</li>\n<li>硬盘：三星 M.2 SSD 960 EVO 250GB</li>\n<li>显卡：EVGA GTX1080TI SC2</li>\n<li>散热：猫头鹰 D9L ( CPU 散热 ) </li>\n<li>风扇：EK Vardar EVO 12cm 2200RPM ( 机箱散热 )</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"mATX-规格\"><a href=\"#mATX-规格\" class=\"headerlink\" title=\"mATX 规格\"></a>mATX 规格</h4><ul>\n<li><p>案例：<a href=\"https://www.bilibili.com/video/av21497419\" target=\"_blank\" rel=\"noopener\">FUSION II. 价值$3300美刀极限性能装机. 2018.bilibili.com</a></p>\n<ul>\n<li>机箱：Meshify C Mini</li>\n<li>主板：华擎 X399M 太极 ( mATX )</li>\n<li>电源：海盗船 SF600 全模组</li>\n<li>CPU：Intel i5 8600k</li>\n<li>内存：海盗船 复仇者 8GB DDR4 3000 MHz * 2</li>\n<li>硬盘：三星 M.2 SSD 960 EVO 250GB</li>\n<li>显卡：EVGA GTX1080TI SC2</li>\n<li>散热：安耐美 LiqTech TR4 240 一体水冷散热器 ( CPU 散热 )</li>\n<li><p>风扇：酷冷至尊 MasterFan Pro 120 RGB 风扇套装 ( 机箱散热 )</p>\n<blockquote>\n<p>本套方案包含安装过程的详细解说以及走线演示，推荐观看。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>案例：<a href=\"https://www.bilibili.com/video/av32759959\" target=\"_blank\" rel=\"noopener\">Okeydokey科技. 超干净的无RGB恩杰装机. 2018.bilibili.com</a></p>\n<ul>\n<li>机箱：恩杰 H400i</li>\n<li>主板：华硕 ROG Strix Z370-G ( mATX )</li>\n<li>电源：海盗船 RM650X 全模组电源</li>\n<li>CPU：Intel i7 8700k</li>\n<li>内存：十铨 DARK PRO 32GB DDR4</li>\n<li>硬盘：三星 M.2 SSD 960 EVO 250GB</li>\n<li>显卡：EVGA GTX 1080 Ti SC2</li>\n<li>散热：EK Coolstream 280mm ( CPU 水冷散热 )</li>\n<li>散热：猫头鹰 NH-U9S + NF-B9 * 2 ( CPU 风冷散热 )</li>\n<li><p>风扇：EK Vardar EVO 120mm * 2 + 140mm * 2 ( 机箱散热 )  </p>\n<blockquote>\n<p>本套方案尝试了两套散热系统，分别是猫头鹰的风冷套装和 EK 的水冷套装。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://post.smzdm.com/p/674680/\" target=\"_blank\" rel=\"noopener\">Liuspy. 千元 DIY 搞定 7*24 小时 N in 1 服务器. smzdm.com</a></li>\n<li>[2] <a href=\"http://blog.51cto.com/likespc/714064\" target=\"_blank\" rel=\"noopener\">周晓锋. 软路由 Vs. 硬路由. 2011. 51cto.com</a></li>\n<li>[3] <a href=\"http://www.maixj.net/ict/ruanluyou-yingluyou-5723\" target=\"_blank\" rel=\"noopener\">云上小悟. 软路由 Vs 硬路由. 2013. maixj.net</a></li>\n<li>[4] <a href=\"http://www.cnblogs.com/dazhidacheng/p/7478438.html\" target=\"_blank\" rel=\"noopener\">跪着行走的boY. Git 和 Svn 的详细对比. cnblogs.com. 2017</a></li>\n<li>[5] <a href=\"http://bbs.zol.com.cn/diybbs/d402_9829.html\" target=\"_blank\" rel=\"noopener\">古方日月已使用. 电脑主板板型怎么选 ATX、ITX还傻傻分不清. 2017. zol.com.cn</a></li>\n<li>[6] <a href=\"http://baijiahao.baidu.com/s?id=1601905877566591798&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">太平洋电脑网. Z370/H370/B360/H310主板怎么选. 2018. baijiahao.baidu.com</a></li>\n</ul>\n","categories":["Technique"],"tags":["博客搭建","软路由","私有云","智能家居","科学上网","代码托管","浏览器插件","mk3s","sunmilo"]},{"title":"Java EE：SSH 框架快速上手教程","url":"/2018/07/J2EE-SSH-SSI-1.html","content":"<p>本文章主要围绕 J2EE 中 SSH ( Spring、Struts、Hibernate ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。</p>\n<a id=\"more\"></a>\n<h2 id=\"教学资源\"><a href=\"#教学资源\" class=\"headerlink\" title=\"教学资源\"></a>教学资源</h2><ul>\n<li>视频 | <a href=\"https://www.bilibili.com/video/av14626440\" target=\"_blank\" rel=\"noopener\">黑马程序员. J2EE 进阶. 4 天精通 Hibernate 框架. 2017. bilibili.com</a></li>\n<li>视频 | <a href=\"https://www.bilibili.com/video/av14839030\" target=\"_blank\" rel=\"noopener\">黑马程序员. J2EE 进阶. 60 集精通 Spring 框架. 2017. bilibili.com</a></li>\n<li><p>视频 | <a href=\"https://www.bilibili.com/video/av13748042\" target=\"_blank\" rel=\"noopener\">黑马程序员. J2EE 进阶. Struts2 框架精品教程. 2017. bilibili.com</a></p>\n<blockquote>\n<p>本框架的学习笔记是基于此系列教学视频所得的。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.07.17：完成初稿，IDE 搭建、框架初识章节；</li>\n<li>2018.07.20：更新 SSH 框架 Hibernate 的内容；</li>\n<li>2018.07.31：更新 SSH 框架 Spring 的内容；</li>\n<li>2018.08.03：整合 SSH 框架 ( 输出基本框架 )；</li>\n<li>2018.08.08：补充 SSH 框架 Struts 部分的内容；</li>\n<li>2018.08.15：重新整理 SSH 框架项目，见版本信息；</li>\n</ul>\n<h2 id=\"IDE-搭建\"><a href=\"#IDE-搭建\" class=\"headerlink\" title=\"IDE 搭建\"></a>IDE 搭建</h2><ul>\n<li>Step.01：安装 JDK；</li>\n<li>Step.02：安装 IDE ( <code>IntelliJ Idea</code> / Eclipse / MyEclipse )；</li>\n<li><p>Step.03：配置 Tomcat 环境；</p>\n<ul>\n<li><p>让 Tomcat 可同时运行多个 Module，即在菜单栏 <code>Run &gt; Run Configurations &gt; Deployment &gt; Application context</code> 下配置目录访问路径即可 ( 一般规范填写项目名 )。</p>\n<p><img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_4-1.jpg\" alt=\"Tomcat 9.0.x Deployment\"></p>\n<center>图 4-1 Tomcat 9.0.x Deployment</center>\n</li>\n<li><p>紧接着，在菜单栏 <code>File &gt; Project Structure &gt; Artifacts</code> 下配置，把对应的 module 的 Available Elements <code>Put into Output Root</code> 到 <code>xxx:war_exploded</code> 下。</p>\n<p><img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_4-2.jpg\" alt=\"Project Structure Artifacts\"></p>\n<center>图 4-2 Project Structure Artifacts</center>\n</li>\n</ul>\n</li>\n<li><p>Step.04：配置 MySQL / SQL Server 数据库；</p>\n<ul>\n<li>命名规范：数据库 <code>db_dbname</code>；数据表 <code>t_tablename</code>；属性 <code>attribute</code></li>\n<li><p>访问外网：若在虚拟机或者本机测试，让数据库允许外网访问，注意得关闭防火墙或添加规则允许某端口的访问权限。</p>\n<blockquote>\n<p>Case.01：本机和服务器端互相 <code>Ping</code> 对方 IP，以检验网络是否畅通、是否拒绝访问。<br>Case.02：若网络畅通、没有拒绝访问，还要留意对应端口是否有权限访问，通过 <code>nc -vz IP 端口</code>  检验，返回 <code>Succeeded</code> 即成功。  </p>\n</blockquote>\n</li>\n<li><p>数据库权限：若 MySQL 通过命令安装，需特别注意的权限问题，即账号和密码是默认配置的，用户可自行修改，具体修改细节见参考 [6] - [8] 中的方法 ( 可能实操过程中还会遇到其他问题，推荐翻阅下参考文章，也许对你有帮助 )。</p>\n<blockquote>\n<p>若有需求远程连接数据库，我们需要创建一个新用户，并赋予访问权限 (当然，你可让你的 root 账户也赋予远程连接数据库的权限)。具体地：<br><code>grant all privileges on *.* to  kofe@&quot;%&quot; identified by &quot;123321&quot; with grant option;</code>.<br>授权完成后，刷新下账户权限即可：<code>flush privileges;</code>。  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Step.05：以 IntelliJ Idea IDE 为参考搭建框架，参考 [1] - [3] 中的方法；</p>\n<ul>\n<li>[1] 中 <code>全注解方式的 SSH 基础框架</code> 的框架整合的思想不错，推荐在你搭建框架时参详。</li>\n<li>[2] - [3] 的搭建方法都是 <code>导 Jar 包形式</code>，但千万要注意相对应的 Jar 包是否已经下载到本地。</li>\n<li>当然，推荐 <code>Maven</code> 管理项目，即它是添加依赖库的方式配置环境的，下述的内容也是基于 Maven 构建框架。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><ul>\n<li><p><strong>基于以下版本，打包的 SSH 框架 ( Maven )</strong>：<a href=\"https://pan.baidu.com/s/11czZlhOzSLNX7gB16t1AtQ\" target=\"_blank\" rel=\"noopener\">SSHFrameComposition.2018.08.15</a></p>\n<blockquote>\n<p>这是基于 Maven 构建的 SSH 框架项目，若有错误的地方还望指正。</p>\n</blockquote>\n</li>\n<li><p>框架版本：</p>\n<ul>\n<li>Struts：2.5.16</li>\n<li>Spring：4.3.x</li>\n<li>Hibernate：5.2.x</li>\n</ul>\n</li>\n<li>其他组件：<ul>\n<li>MySQL：5.7.x / SQL Server：2008 R2</li>\n<li>Tomcat：9.0.x</li>\n<li>Maven：3.3.9</li>\n<li>JDK：1.8</li>\n</ul>\n</li>\n<li><p>构建框架，还需要相关依赖库 ( Jar 包 )，详细请参阅 <a href=\"#IoC-入门案例\">IoC 入门案例</a>。</p>\n<blockquote>\n<p>为便于你下载 Jar 包或校对依赖是否齐全，具体地，以下列举了 SSH 框架所需要的依赖库。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Spring</th>\n<th style=\"text-align:left\">Struts2</th>\n<th style=\"text-align:left\">Hibernate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">spring-core</td>\n<td style=\"text-align:left\">asm</td>\n<td style=\"text-align:left\">antlr</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-beans</td>\n<td style=\"text-align:left\">asm-commons</td>\n<td style=\"text-align:left\">stax2-api</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-context</td>\n<td style=\"text-align:left\">asm-tree</td>\n<td style=\"text-align:left\">geronimo-jta_1.1_spec</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-expression</td>\n<td style=\"text-align:left\">commons-fileupload</td>\n<td style=\"text-align:left\">hibernate-commons-annotation</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-web ( 整合 Web )</td>\n<td style=\"text-align:left\">commons-io</td>\n<td style=\"text-align:left\">hibernate-core</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-aop ( 整合 Aop )</td>\n<td style=\"text-align:left\">commons-lang3</td>\n<td style=\"text-align:left\">hibernate-jpa</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aopalliance ( 整合 Aop )</td>\n<td style=\"text-align:left\">freemarker</td>\n<td style=\"text-align:left\">jandex</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-aspect ( 整合 Aop )</td>\n<td style=\"text-align:left\">javassist</td>\n<td style=\"text-align:left\">javassist</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectjweaver ( 整合 Aop )</td>\n<td style=\"text-align:left\">log4j-api</td>\n<td style=\"text-align:left\">jboss-logging</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-orm</td>\n<td style=\"text-align:left\">log4j-core</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-tx ( 整合事务 )</td>\n<td style=\"text-align:left\">ognl</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spring-jdbc ( 整合 Hibernate )</td>\n<td style=\"text-align:left\">struts-core</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">c3p0 ( 数据库连接池 )</td>\n<td style=\"text-align:left\">&nbsp;</td>\n<td style=\"text-align:left\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">其他依赖库 ( Jar 包 )</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">junit</td>\n<td style=\"text-align:left\">Junit 单元测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mysql-connector-java</td>\n<td style=\"text-align:left\">添加 MySQL 数据库支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">struts2-spring-plugin</td>\n<td style=\"text-align:left\">Struts 整合 Spring 插件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">struts2-junit-plugin</td>\n<td style=\"text-align:left\">便于浏览项目中所有 action 及其与 Jsp View 的映射</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">jstl</td>\n<td style=\"text-align:left\">JSTL 标签库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">taglibs-standard-impl</td>\n<td style=\"text-align:left\">标签库</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"框架初识\"><a href=\"#框架初识\" class=\"headerlink\" title=\"框架初识\"></a>框架初识</h2><h3 id=\"ORM-框架\"><a href=\"#ORM-框架\" class=\"headerlink\" title=\"ORM 框架\"></a>ORM 框架</h3><ul>\n<li>对象关系映射（Object Relational Mapping，O/R Mapping，ORM）是通过使用描述对象和数据库之间映射的 <code>元数据</code>，将面向对象语言程序中的 <code>对象</code> 自动 <code>持久化</code> 到 <code>关系数据库</code> 中。本质上就是将数据从一种形式转换到另外一种形式。 </li>\n<li>让 <code>实体类</code> 和 <code>数据库表</code> 进行一一对应关系 (映射关系)，<code>实体类属性</code> 和 <code>表里面的字段</code> 对应。操作表对应实体类对象，而不需操作数据库表。</li>\n</ul>\n<h3 id=\"SSH-框架\"><a href=\"#SSH-框架\" class=\"headerlink\" title=\"SSH 框架\"></a>SSH 框架</h3><p>SSH 框架：<a href=\"http://spring.io/\" target=\"_blank\" rel=\"noopener\">Spring</a>、<a href=\"http://struts.apache.org/\" target=\"_blank\" rel=\"noopener\">Struts2</a>、<a href=\"http://hibernate.org/\" target=\"_blank\" rel=\"noopener\">Hibernate</a> </p>\n<p>集成 SSH 框架的系统从职责上分为四层：<code>表示层</code>、<code>业务逻辑层</code>、<code>数据持久层</code> 和 <code>域模块层</code>，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的 Web 应用程序。其中使用 <code>Struts</code> 作为 <code>系统的整体基础架构</code>，负责 MVC 的分离，在 Struts 框架的模型部分，控制业务跳转，利用 <code>Hibernate</code> 框架对 <code>持久层</code> 提供支持，<code>Spring</code> 做管理，<code>管理 Struts 和 Hibernate</code>。</p>\n<p>具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的 Java 对象，然后编写基本的 DAO (Data Access Objects) 接口，并给出 Hibernate 的 DAO 实现，采用 Hibernate 架构实现的 DAO 类来实现 Java 类与数据库之间的转换和访问，最后由 Spring 做管理，管理 Struts 和 Hibernate。</p>\n<hr>\n<h4 id=\"Struts\"><a href=\"#Struts\" class=\"headerlink\" title=\"Struts\"></a>Struts</h4><p>主要是用来做 <code>表示层</code>，也就所谓的 <code>界面</code>，和用户直接打交道，用来处理用户的请求和请求后返回给用户的模型数据。 Struts 对 Model，View 和 Controller 都提供了对应的组件。</p>\n<h5 id=\"Struts2-入门\"><a href=\"#Struts2-入门\" class=\"headerlink\" title=\"Struts2 入门\"></a>Struts2 入门</h5><h6 id=\"Struts2-概述\"><a href=\"#Struts2-概述\" class=\"headerlink\" title=\"Struts2 概述\"></a>Struts2 概述</h6><ul>\n<li>Struts2 框架应用在 Java EE 三层结果中的 Web 层框架；</li>\n<li><p>Struts2 解决的问题：</p>\n<p>  <img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-1.png\" alt=\"Struts2解决的问题\"></p>\n<center>图 6-1 Struts2 解决的问题</center>\n\n</li>\n</ul>\n<h6 id=\"Struts2-案例\"><a href=\"#Struts2-案例\" class=\"headerlink\" title=\"Struts2 案例\"></a>Struts2 案例</h6><ul>\n<li><p>创建 Action：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BaseAction.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">// 每次访问 action ，默认执行名称 execute() 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置 Action 类访问路径：需在 Src 根目录下创建核心配置文件 struts.xml，其名称和位置是固定的。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">struts</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://struts.apache.org/dtds/struts-2.3.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | Name 属性值填写 action 访问的名称，例如 BaseAciton.action</span></span><br><span class=\"line\"><span class=\"comment\">         | Class 属性值填写目标 Action 的全路径</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BaseAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span>&gt;</span>/</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>/jsp/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置过滤器：在 web.xml 中添加过滤器</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 过滤器模块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Struts2-底层执行过程\"><a href=\"#Struts2-底层执行过程\" class=\"headerlink\" title=\"Struts2  底层执行过程\"></a>Struts2  底层执行过程</h6><p>如图 6-2 所示，为 Struts 底层执行过程图示。</p>\n<p><img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-2.png\" alt=\"Struts底层执行过程\"></p>\n<center>图 6-2 Struts 底层执行过程</center>\n\n<h6 id=\"Struts2-配置\"><a href=\"#Struts2-配置\" class=\"headerlink\" title=\"Struts2 配置\"></a>Struts2 配置</h6><ul>\n<li><p>Struts 核心配置文件 ( Struts2.5.x 版本 )</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Struts 2.5.x 版本的约束 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">struts</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://struts.apache.org/dtds/struts-2.5.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表单的编码/乱码问题 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定Struts2处于开发阶段，可以进行调试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性：唯一标识 Package</span></span><br><span class=\"line\"><span class=\"comment\">     | Extends 属性：属性固定的的，即 Package 中配置的类具有 action 功能</span></span><br><span class=\"line\"><span class=\"comment\">     | Namespace 属性：与 action 标签名构成访问路径</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Struts2.5.x 版本特征，提升安全性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">global-allowed-methods</span>&gt;</span>regex:.*<span class=\"tag\">&lt;/<span class=\"name\">global-allowed-methods</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | Name 属性：唯一标识，与 namespace 构成访问访问路径</span></span><br><span class=\"line\"><span class=\"comment\">         | Class 属性：Action 类的全路径</span></span><br><span class=\"line\"><span class=\"comment\">         | Method 属性：除了 execute() 方法，若绑定 Action 类其他方法则用此属性</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"baseAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofe.action.baseAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"login\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">             | 根据 Action 类中方法的返回值，配置到不同的路径里面</span></span><br><span class=\"line\"><span class=\"comment\">             | Name 属性：与 Action 类对应的方法的返回值一样</span></span><br><span class=\"line\"><span class=\"comment\">             | Type 属性：配置如何到路径中 ( 转发或者重定向 )，默认值为转发</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Add actions here --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Struts2-Action-创建\"><a href=\"#Struts2-Action-创建\" class=\"headerlink\" title=\"Struts2 Action 创建\"></a>Struts2 Action 创建</h6><ul>\n<li><p>创建普通类，不继承任何类，不实现任何接口；</p>\n</li>\n<li><p><del>创建类，实现 Action 接口</del>；</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Action</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String execute <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE; <span class=\"comment\">// SUCCESS、ERROR ( 也可自定义字符串 ) ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建类，继承 ActionSupport；</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String execute <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE; <span class=\"comment\">// SUCCESS、ERROR ( 也可自定义字符串 ) ... </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 自定义方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> SUCCESS; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Struts2-Action-方法访问\"><a href=\"#Struts2-Action-方法访问\" class=\"headerlink\" title=\"Struts2 Action 方法访问\"></a>Struts2 Action 方法访问</h6><ul>\n<li><p>使用 action 标签中的 method 属性，在属性里写执行的 action 的方法名称；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"login\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用通配符方式实现；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 例如，访问路径为 http://192.168.x.x/action_login.action --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"action_*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"&#123;1&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态访问实现；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 动态方法访问 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- strict-method-invocation：是否允许使用通配符 ( 默认开启，不需要关闭 ) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 还可以限制具体哪些方法可以动态访问 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">global-allowed-methods</span>&gt;</span>regex:.*<span class=\"tag\">&lt;/<span class=\"name\">global-allowed-methods</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"login\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见错误：</p>\n<ul>\n<li>若 action 方法有返回值，在配置文件中没有配置，会出现无法找到页面的错误 (404)。</li>\n<li>action 的名称，action 方法的返回值常量，规范使用 <code>驼峰式命名</code> 定义。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Struts2-数据操作\"><a href=\"#Struts2-数据操作\" class=\"headerlink\" title=\"Struts2 数据操作\"></a>Struts2 数据操作</h5><h6 id=\"结果页面配置\"><a href=\"#结果页面配置\" class=\"headerlink\" title=\"结果页面配置\"></a>结果页面配置</h6><ul>\n<li><p>全局结果页面：若多个 Action，方法的返回值相同，到达页面也是相同，则可使用全局结果页面配置。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>/success.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部结果页面：若配置了全局和局部结果页面，以局部为准。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"login\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Result 标签 的 Type 属性 (值)：</p>\n<ul>\n<li><code>dispatcher</code>：默认值，转发操作。</li>\n<li><code>redirect</code>：重定向操作。</li>\n<li><code>redirectAction</code>：重定向到 action。</li>\n<li><del><code>chain</code>：转发到 action ( 缓存问题 )</del>。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"表单数据操作\"><a href=\"#表单数据操作\" class=\"headerlink\" title=\"表单数据操作\"></a>表单数据操作</h6><ul>\n<li><p>先构造一个表单：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- login.jsp --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>SSH_FRAME_COMP<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   \t    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/form.action\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">            Username：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Age：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Email：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Phone：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"phone\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- struts.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FormOperator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.FormOperator\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"execute\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 若返回 \"success\"，则重定向到另一个 action，即执行登录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>action 获取表单提交数据</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> throw Exception </span>&#123; </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// Case.01.使用 ActionContext 类获取</span></span><br><span class=\"line\">        ActionContext context = ActionContext.getContext();</span><br><span class=\"line\">        <span class=\"comment\">// key 时表单输入项 Name 的属性值，Value 时输入的值 </span></span><br><span class=\"line\">        Map&lt;String, Object&gt; map = context.getParameters();</span><br><span class=\"line\">        Set&lt;String&gt; keys = map.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String key : keys) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 数组形式，考虑有复选框的情况</span></span><br><span class=\"line\">            Object[] obj = (Object[]) map.get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> \t</span><br><span class=\"line\">        <span class=\"comment\">// Case.02.使用 ServletActionContext 类获取</span></span><br><span class=\"line\">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class=\"line\">        String username = request.getParamter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        rerun NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Case.03.使用接口注入方式获取</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletRequestAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Overrride</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">setServletRequest</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.request = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> throw Exception </span>&#123;</span><br><span class=\"line\">        String username = request.getParamter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>action 操作域对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> throw Exception </span>&#123; </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 操作域对象</span></span><br><span class=\"line\">        <span class=\"comment\">// Request 域</span></span><br><span class=\"line\">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class=\"line\">        request.setAttribute(<span class=\"string\">\"requestKey\"</span>, <span class=\"string\">\"requestValue\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Session 域</span></span><br><span class=\"line\">        HttpSession session = request.getSession();</span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">\"sessionKey\"</span>, <span class=\"string\">\"sessionValue\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// ServletContext 域</span></span><br><span class=\"line\">        ServletContext context = ServletActionContext.getServletContext();</span><br><span class=\"line\">        context.setAttribute(<span class=\"string\">\"contextKey\"</span>, <span class=\"string\">\"contextValue\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        rerun NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>struts2 提供获取表单数据方式</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始方式获取表单数据，再封装数据到实体类对象中</span></span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class=\"line\">user.setUsername( request.getParamter(<span class=\"string\">\"username\"</span>) );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 属性封装：获取表单数据到属性中  ( Setter 和 Getter 方法补全即可 )</span></span><br><span class=\"line\"><span class=\"comment\">// 在 action 的成员变量位置定义变量 ( 变量名称和表单输入项的 Name 属性值一样 )</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123; <span class=\"keyword\">this</span>.username = username &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> username; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 以此类推...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模型驱动封装</span></span><br><span class=\"line\"><span class=\"comment\">// Step.01. 实现接口 ModelDriven</span></span><br><span class=\"line\"><span class=\"comment\">// Step.02. 实现接口的方法 getModel()，再把创建对象返回</span></span><br><span class=\"line\"><span class=\"comment\">// Step.03. 在 action 里『创建』实体类对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ModelDriven</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getModel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sring <span class=\"title\">execute</span><span class=\"params\">()</span> throw EXception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表达式封装</span></span><br><span class=\"line\"><span class=\"comment\">// Step.01.在 action 中『声明』实体类；</span></span><br><span class=\"line\"><span class=\"comment\">// Step.02.生成实体类变量的 Setter 和 Getter 方法</span></span><br><span class=\"line\"><span class=\"comment\">// Step.03.再表单输入项的 Name 属性值中填写表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表达式：&lt;input type=\"text\" name=\"user.username\" /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123; <span class=\"keyword\">this</span>.user = user; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> user; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sring <span class=\"title\">execute</span><span class=\"params\">()</span> throw EXception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>使用模型驱动和属性封装是注意事项：在同一个 action 中，获取表单数据可以是模型驱动合作和属性封装，但不能同时使用二者。<code>同时使用只会执行模型驱动</code>。  </p>\n</blockquote>\n<ul>\n<li><p><code>表达式封装</code> 和 <code>模型驱动</code> 比较：  </p>\n<ul>\n<li>相同点：使用表达式封装和模型驱动封装都可把数据封装到实体类对象里。</li>\n<li>不同点：使用模型驱动只能把数据封装到一个实体类对象里。而表达式封装没有限制，即通过表达式封装可把数据封装到多个、不同的实体类对象里面。</li>\n</ul>\n</li>\n<li><p>struts2 获取数据封装到集合：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 封装数据到 List 集合 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list[0].username\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list[0].age\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list[1].username\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list[1].age\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 封装数据到 Map 集合 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map['Lucy'].username\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map['Lucy'].age\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map['Mark'].username\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map['Mark'].age\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在实现类中声明 --&gt;</span></span><br><span class=\"line\">public class FormOperator extends ActionSupport &#123;</span><br><span class=\"line\">    private List<span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span> list;</span><br><span class=\"line\">    public void setList(List<span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span> list) &#123; this.list = list; &#125;</span><br><span class=\"line\">    public List<span class=\"tag\">&lt;<span class=\"name\">User</span>&gt;</span> list getUser() &#123; return list; &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    // private Map<span class=\"tag\">&lt;<span class=\"name\">String,</span> <span class=\"attr\">User</span>&gt;</span> map;</span><br><span class=\"line\">    // public void setMap(Map<span class=\"tag\">&lt;<span class=\"name\">String,</span> <span class=\"attr\">User</span>&gt;</span> map) &#123; this.map = map &#125;</span><br><span class=\"line\">    // public Map<span class=\"tag\">&lt;<span class=\"name\">String,</span> <span class=\"attr\">User</span>&gt;</span> getMap() &#123; return map; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Sring execute() throw EXception &#123;</span><br><span class=\"line\">        return NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"案例实操展示\"><a href=\"#案例实操展示\" class=\"headerlink\" title=\"案例实操展示\"></a>案例实操展示</h6><ul>\n<li><p>新建表单操作页面 <code>form.jsp</code> 和数据展示页面 <code>info.jsp</code>：</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- form.jsp --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>SSH_FRAME_COMP<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"loginForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;/form.action\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">            Username：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user.username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Age：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user.age\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Email：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user.email\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            Phone：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user.phone\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- info.jsp --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在 struts.xml 配置文件中添加 action：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- struts.xml --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">struts</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://struts.apache.org/dtds/struts-2.5.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表单的编码/乱码问题 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 动态方法访问 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">global-allowed-methods</span>&gt;</span>regex:.*<span class=\"tag\">&lt;/<span class=\"name\">global-allowed-methods</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用注解创建 FormOperator 对象，直接引用标签值 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"formOperator\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"saveInfo\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"getinfo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirectAction\"</span>&gt;</span>info<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 插入数据后加载数据库 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"info\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"formOperator\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"getInfo\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"listinfo\"</span>&gt;</span>/jsp/info.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在 Action 中实现逻辑处理类：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FormOperator.java</span></span><br><span class=\"line\"><span class=\"comment\">// Action 层：界面交互层</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(value=<span class=\"string\">\"formOperator\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(value = <span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Service 处理业务逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"sampleService\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BaseService service;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sring <span class=\"title\">execute</span><span class=\"params\">()</span> throw EXception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">saveInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        service.saveUserInfo(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"info\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从数据库中加载数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SampleServiceImpl.java</span></span><br><span class=\"line\"><span class=\"comment\">// Servie 层：业务逻辑层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(value = <span class=\"string\">\"sampleService\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"sampleDao\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BaseDao dao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveUserInfo</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> != dao.queryOneTuple(user.getClass(), user.getUid()) ) &#123;</span><br><span class=\"line\">            dao.updateOneTuple(user);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            dao.insertOneTuple(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SampleDaoImpl.java</span></span><br><span class=\"line\"><span class=\"comment\">// Dao 层：数据持久层</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span>(value = <span class=\"string\">\"sampleDao\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"hibernateTemplate\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HibernateTemplate hibernateTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertOneTuple</span><span class=\"params\">(Object entity)</span> </span>&#123;</span><br><span class=\"line\">        hibernateTemplate.save(entity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateOneTuple</span><span class=\"params\">(Object entity)</span> </span>&#123;</span><br><span class=\"line\">        hibernateTemplate.update(entity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">queryOneTuple</span><span class=\"params\">(Class&lt;T&gt; entityClass, Serializable id)</span> </span>&#123;</span><br><span class=\"line\">        T temporary = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != entityClass) &#123;</span><br><span class=\"line\">            temporary = hibernateTemplate.get(entityClass, id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temporary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Struts2-值栈\"><a href=\"#Struts2-值栈\" class=\"headerlink\" title=\"Struts2 值栈\"></a>Struts2 值栈</h5><h6 id=\"值栈概念\"><a href=\"#值栈概念\" class=\"headerlink\" title=\"值栈概念\"></a>值栈概念</h6><ul>\n<li><p>什么是值栈：</p>\n<ul>\n<li>Struts 里本身提供一种存储机制，类似于 <code>域对象</code>。即值栈，可存储数据也可读取数据。</li>\n<li>Striuts 把数据放到值栈里，在 Jsp 页面中获取到值栈数据。</li>\n</ul>\n</li>\n<li><p>Ognl：Web 阶段，EL 表达在 Jsp 中获取域对象中的值。而 Ognl 也是一种表达式。</p>\n<ul>\n<li>Struts 中操作值栈数据，和 <code>Struts 标签</code> 一起使用、操作值栈。</li>\n<li>Ognl 不是 Struts 的一部分，可以单独使用。</li>\n</ul>\n</li>\n<li><p>Struts 标签：虽然标签封装了样式，方便操作，但故样式上会有限制。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在对应的 jsp 页面中引入标签库  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"/struts-tags\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"s\"</span> %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 查看值栈结构和数据 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:debug</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 Ognl + Struts 标签，实现计算字符串长度 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"'str'.length()\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- html 表单标签</span></span><br><span class=\"line\"><span class=\"comment\"> | 1) form：action、method、enctype</span></span><br><span class=\"line\"><span class=\"comment\"> | 2) 输入项：大部分在 input 中封装 type 值实现各种输入项，例如：</span></span><br><span class=\"line\"><span class=\"comment\"> |    text，普通文本输入项</span></span><br><span class=\"line\"><span class=\"comment\"> |    password，密码输入项</span></span><br><span class=\"line\"><span class=\"comment\"> |    radio，单选输入项</span></span><br><span class=\"line\"><span class=\"comment\"> |    checkbox，复选输入项</span></span><br><span class=\"line\"><span class=\"comment\"> |    file，文件上传项</span></span><br><span class=\"line\"><span class=\"comment\"> |    hidden，隐藏项</span></span><br><span class=\"line\"><span class=\"comment\"> |    button，普通按钮</span></span><br><span class=\"line\"><span class=\"comment\"> |    submit，提交按钮</span></span><br><span class=\"line\"><span class=\"comment\"> |    image，图片提交</span></span><br><span class=\"line\"><span class=\"comment\"> |    reset，重置</span></span><br><span class=\"line\"><span class=\"comment\"> | 3) select：下拉输入项</span></span><br><span class=\"line\"><span class=\"comment\"> | 4) textarea：文本域</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"signupForm\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"form.action' method=\"</span><span class=\"attr\">POST</span>\"&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 普通输入项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:textfield</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 密码输入项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:password</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 单选项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:radio</span> <span class=\"attr\">list</span>=<span class=\"string\">\"#&#123;'male':'男', 'female':'女'&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"gender\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 多选项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:checkboxlist</span> <span class=\"attr\">list</span>=<span class=\"string\">\"&#123;'sleep', 'eat'&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"interest\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"interest\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 下拉输入框 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:select</span> <span class=\"attr\">list</span>=<span class=\"string\">\"&#123;'str1', 'str2', 'str3'&#125;\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"sample\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文件上传项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:file</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">label</span>=<span class=\"string\">\"file\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文本域 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:textarea</span> <span class=\"attr\">row</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"description\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  隐藏项 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:hidden</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hiddenContent\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"hidden content is here\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提交按钮 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:submit</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Servlet 和 Action 区别：</p>\n<ul>\n<li>Servlet：默认在第一次访问时创建，仅创建一次。( 单实例 )</li>\n<li>Action：访问时候创建，且每次访问时都会创建 action 对象。( 多实例 )</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"获取值栈对象\"><a href=\"#获取值栈对象\" class=\"headerlink\" title=\"获取值栈对象\"></a>获取值栈对象</h6><ul>\n<li><p>使用 ActionContext 类的方法获取值栈对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FormOperator</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Sring <span class=\"title\">execute</span><span class=\"params\">()</span> throw EXception </span>&#123;</span><br><span class=\"line\">        ActionContext context = ActionContext().getContext();</span><br><span class=\"line\">        ValueStack stack = context.getValueStack();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"值栈内部结构\"><a href=\"#值栈内部结构\" class=\"headerlink\" title=\"值栈内部结构\"></a>值栈内部结构</h6><p>值栈主要分为两部分：</p>\n<ul>\n<li><p>Root：List 集合 <code>Class Compoundroot extends ArrayList { ... }</code></p>\n</li>\n<li><p>Context：Map 集合 <code>Class Compoundroot extends Object implements Map { ... }</code></p>\n<p>  <img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-3.png\" alt=\"Context 存储的对象引用\"></p>\n  <center>图 6-3 Context 存储的对象引用</center>\n\n</li>\n</ul>\n<h6 id=\"向值栈存数据\"><a href=\"#向值栈存数据\" class=\"headerlink\" title=\"向值栈存数据\"></a>向值栈存数据</h6><blockquote>\n<p>结合 <code>&lt;s:debug /&gt;</code> 标签，可浏览值栈的传值情况。</p>\n</blockquote>\n<p>向值栈存数据的多种方式：</p>\n<ul>\n<li>获取值栈对象，调用值栈对象的 set 方法。</li>\n<li>获取值栈对象，调用值栈对象的 push 方法。</li>\n<li><p>在 action 定义变量，生产变量的 get 方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取值栈对象</span></span><br><span class=\"line\">ActionContext context = ActionContext.getContext();</span><br><span class=\"line\">ValueStack stack = context.getValueStack();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向值栈放字符串</span></span><br><span class=\"line\"><span class=\"comment\">// Case.01</span></span><br><span class=\"line\">stack.set(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"AttrSet\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Case.02</span></span><br><span class=\"line\">stack.push(<span class=\"string\">\"PushMethod\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Case.03.声明变量，生成 Getter 方法</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> str; &#125;</span><br><span class=\"line\">str = <span class=\"string\">\"SetStrAttr\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向值栈放对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> user; &#125;</span><br><span class=\"line\"><span class=\"comment\">// user.setXXX();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向值栈放 List 集合</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;User&gt; list;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getList</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> list; &#125;</span><br><span class=\"line\">list = getAllUserInfo(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"从值栈取数据\"><a href=\"#从值栈取数据\" class=\"headerlink\" title=\"从值栈取数据\"></a>从值栈取数据</h6><ul>\n<li><p>从值栈获取数据</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在对应的 jsp 页面中引入 struts 标签库  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">taglib</span> <span class=\"attr\">uri</span>=<span class=\"string\">\"/struts-tags\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"s\"</span> %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在 Jsp 页面中获取属性值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"str\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Jsp 页面中获取对象的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"user.username\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"user.email\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Jsp 页面中获取 List 集合：方式 1 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:iterator</span> <span class=\"attr\">value</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"username\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"age\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"email\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"phone\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:iterator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Jsp 页面中获取 List 集合：方式 2 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">s:iterator</span> <span class=\"attr\">value</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">var</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#user.username\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#user.age\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#user.email\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">s:property</span> <span class=\"attr\">value</span>=<span class=\"string\">\"#user.phone\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h4><p><code>业务逻辑层</code>，是一个轻量级的控制反转 (IoC) 和面向切面 (AOP) 的容器框架。</p>\n<h5 id=\"Spring-概念\"><a href=\"#Spring-概念\" class=\"headerlink\" title=\"Spring 概念\"></a>Spring 概念</h5><ul>\n<li>一站式轻量级开源框架，在 Java EE 三层结构中，每一层提供不同的解决技术。<ul>\n<li><code>Web 层</code>：Spring MVC</li>\n<li><code>Service 层</code>：IoC</li>\n<li><code>DAO 层</code>：Spring 的 JdbcTemplate</li>\n</ul>\n</li>\n<li>AOP：<code>面向切面编程</code>，扩展功能不是通过修改源码实现的，即通过 <code>动态代理技术</code>，把各类通知 / 增强织入到它所约定的流程当中。事实上，是通过引入其他类的方法来实现的。</li>\n<li>IoC：<code>控制反转</code>，例如：对象的创建不通过 new 方式实现，而是通过 Spring 配置创建类对象。</li>\n</ul>\n<h5 id=\"Spring-IoC\"><a href=\"#Spring-IoC\" class=\"headerlink\" title=\"Spring IoC\"></a>Spring IoC</h5><p>控制反转 (IoC)，是一种通过描述 (在 Java 中可以是 XML 或者注解) 并通过第三方去产生或获取特定对象的方式。</p>\n<h6 id=\"IoC-底层原理\"><a href=\"#IoC-底层原理\" class=\"headerlink\" title=\"IoC 底层原理\"></a>IoC 底层原理</h6><ul>\n<li>使用技术：<ul>\n<li>XML 配置文件；</li>\n<li>Dom4j 解析 XML；</li>\n<li>工厂设计模式；</li>\n<li>类的反射.</li>\n</ul>\n</li>\n<li>代码实现：<ul>\n<li>创建 XML 配置文件，配置要创建对象类。</li>\n<li>创建工厂类，使用 Dom4j 解析配置文件，通过反射创建类对象。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"IoC-入门案例\"><a href=\"#IoC-入门案例\" class=\"headerlink\" title=\"IoC 入门案例\"></a>IoC 入门案例</h6><ul>\n<li><p>Maven 中添加依赖库 ( 对应导入 Jar 包 )：</p>\n<blockquote>\n<p>下载 Jar 包：到 <a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">Maven Pository</a> 中搜索目标 Jar 包，在具体页面中的 Files 一栏可下载。例如：<a href=\"http://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/2.11.0\" target=\"_blank\" rel=\"noopener\">log4j-core.2.11.0</a></p>\n</blockquote>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- porm.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Version Control of Jar Dependency  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.3.18.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hibernate.version</span>&gt;</span>5.2.17.Final<span class=\"tag\">&lt;/<span class=\"name\">hibernate.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">struts2.version</span>&gt;</span>2.5.16<span class=\"tag\">&lt;/<span class=\"name\">struts2.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Foundation of SSH ( Spring、Struts 2、Hibernate ) --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-expression<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 以下依赖包为下文所需要的，为方便起见这里统一配置 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- struts2 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.ow2.asm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>asm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.ow2.asm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>asm-commons<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.ow2.asm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>asm-tree<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.23<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javassist<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javassist<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.22.0-GA<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ognl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ognl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.15<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javaee-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>taglibs-standard-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- config-browser-plugin 插件方便浏览项目中的所有 Action 及其与 Jsp View 的映射 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-junit-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hibernate --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate.common<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-commons-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate.javax.persistence<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-jpa-2.1-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.2.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jboss<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jandex<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.5.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jboss.logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jboss-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.2.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>antlr<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>antlr<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.woodstox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>stax2-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.geronimo.specs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>geronimo-jta_1.1_spec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Combining with SSH ( Spring、Struts 2、Hibernate ) framework --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 整合 Hibernate 和事务 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 整合 AOP --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cglib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cglib-nodep<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 整合 Web --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Sturts 2 整合 Spring 框架 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-spring-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;struts2.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Others --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加对 MySQL 数据库的支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加对数据源的支持 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- c3p0数据库连接池的辅助包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mchange-commons-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.2.15<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 日志系统 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.10.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Junit --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建 Spring 配置文件：在 Src 目录下 (建议)，创建 Spring 核心配置文件 applicationContext.xml。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    &lt;bean id=\"</span><span class=\"attr\">operator</span>\" <span class=\"attr\">class</span>=<span class=\"string\">\"cn.entity.UserOperator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再配置创建类，对象创建 (方便演示，以单元测试形式呈现)：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">IoCTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Step.01.加载 Spring 配置文件</span></span><br><span class=\"line\">        ApplicationContext context  = </span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// Step.02. 得到配置创建的对象</span></span><br><span class=\"line\">        UserOperator operator = </span><br><span class=\"line\">            (UserOperator) context.getBean(<span class=\"string\">\"operator\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-Bean-管理-XML\"><a href=\"#Spring-Bean-管理-XML\" class=\"headerlink\" title=\"Spring Bean 管理 (XML)\"></a>Spring Bean 管理 (XML)</h5><h6 id=\"Bean-标签常用属性\"><a href=\"#Bean-标签常用属性\" class=\"headerlink\" title=\"Bean 标签常用属性\"></a>Bean 标签常用属性</h6><ul>\n<li>ID 属性：Bean 标签的名称，要求只含数字和大小写英文字母。</li>\n<li>Class 属性：常见对象所在类的全路径。</li>\n<li>Name 属性：功能和 ID 属性一样，Name 属性可包含特殊字符值。</li>\n<li>Scope 属性：<ul>\n<li><code>singleton</code>：单例的 ( 默认值 )。</li>\n<li><code>prototype</code>：多例的。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"Bean-实例化的方式\"><a href=\"#Bean-实例化的方式\" class=\"headerlink\" title=\"Bean 实例化的方式\"></a>Bean 实例化的方式</h6><ul>\n<li><p>使用类的无参数构造创建对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperator</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserOperator</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用静态工厂创建对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserOperator <span class=\"title\">getOperator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String className = <span class=\"string\">\"classValue\"</span>; <span class=\"comment\">// cn.entity.UserOperator</span></span><br><span class=\"line\">        Class clz = Class.forName(className);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clz.newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>上述实例化方法在 applicationContext.xml 中的配置：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperator\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"singleton\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 静态工厂创建对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getOperator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"属性注入方式\"><a href=\"#属性注入方式\" class=\"headerlink\" title=\"属性注入方式\"></a>属性注入方式</h6><ul>\n<li><p>Set() 方法注入</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String operationType;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String operationType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.operationType = operationType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有参数构造注入</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String operationType;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserOperator</span><span class=\"params\">(String operationType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.operationType = operationType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>注入 <code>对象属性</code> 类型：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.user = user;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        UserOperator operator = (UserOperator) context.getBean(<span class=\"string\">\"operator\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>注入 <code>复杂类型</code> 属性：</p>\n<ul>\n<li>数组</li>\n<li>List 集合</li>\n<li>Map 集合</li>\n<li><p>Properties 类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorXML</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String arrs;\t\t<span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;\t\t<span class=\"comment\">// List 集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map;\t<span class=\"comment\">// Map 集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Properties properties;\t<span class=\"comment\">// Properties 类型</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Setter() 方法此处省略...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = </span><br><span class=\"line\">        \t<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        UserOperatorXML operator =</span><br><span class=\"line\">        \t (UserOperatorXML) context.getBean(<span class=\"string\">\"operator\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>上述 <code>注入方法</code> 在 applicationContext.xml 中的配置：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- -- 有参数构造注入属性 -- --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorXML\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"operationType\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"modify\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- -- Set 方法注入属性 -- --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorXML\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"operationType\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"modify\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- -- 注入 对象属性 类型 -- --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.User\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorXML\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性值：类里面的定义属性的名称</span></span><br><span class=\"line\"><span class=\"comment\">     | Ref 属性：定义属性在 Bean 标签中的 ID 值</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"user\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- -- 注入 复杂类型 属性 -- --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"complex\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorXML\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数组、List 集合适用 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arrs\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>Arrs0<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>Arrs1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>Arrs2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Map 集合 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"seq1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"str1\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"seq2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"str2\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"seq3\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"str3\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Properties：例如我们要配置数据库 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"driverclass\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"password\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Spring-DI\"><a href=\"#Spring-DI\" class=\"headerlink\" title=\"Spring DI\"></a>Spring DI</h6><p>IoC 与 DI 的区别</p>\n<ul>\n<li><code>IoC</code>：<code>控制反转</code>，把对象创建交给 Spring 进行配置。</li>\n<li><p><code>DI</code>：<code>依赖注入</code>，向类中的属性设置属性值。</p>\n<blockquote>\n<p>关系：依赖注入不能单独存在，需在 IoC 基础之上完成操作。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"Spring-Bean-管理-注解\"><a href=\"#Spring-Bean-管理-注解\" class=\"headerlink\" title=\"Spring Bean 管理 (注解)\"></a>Spring Bean 管理 (注解)</h5><ul>\n<li>注解格式：<code>@注解名称(value=&quot;属性值&quot;)</code> 或者 <code>@注解名称(&quot;属性值&quot;)</code> </li>\n<li><p><code>@Component(&quot;user&quot;)</code> 相当于 <code>&lt;bean id=&quot;user&quot; class=&quot;&quot; /&gt;</code>，其三个衍生注解为：</p>\n<ul>\n<li>@Controller：Web 层，相当于 Struts 中的 Action 层。</li>\n<li>@Service：业务层 ，业务逻辑处理。</li>\n<li><p>@Repository：持久层，标注数据访问组件，即 DAO 组件。</p>\n<blockquote>\n<p>功能目前来说是一致的，即创建对象。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>@Scope(&quot;prototype&quot;)</code> 或 <code>@Scope(&quot;singleton&quot;)</code>：即配置的对象是单实例还是多实例。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(<span class=\"string\">\"BaseAction\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAction</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h6><ul>\n<li>使用注解创建对象</li>\n<li>使用注解注入对象</li>\n<li>xml 和注解方式混合使用</li>\n</ul>\n<h6 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h6><ul>\n<li><p>创建类和方法</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123; <span class=\"comment\">/* 省略实体类的属性 */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123; <span class=\"comment\">/* 省略实体类的属性 */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Firm</span> </span>&#123; <span class=\"comment\">/* 省略实体类的属性 */</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Spring 配置文件，并引入约束 (在上述 applicationContext.xml 中追加)</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context-2.5.xsd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解扫描：扫描属性上面的注解 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 注解扫描：到包里扫描类、方法、属性上面的注解，</span></span><br><span class=\"line\"><span class=\"comment\">     | 即使用 Annotation 自动注册 Bean</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.kofes\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"cn.kofes.entity\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>注解中创建对象</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此方式相当于 &lt;bean id=\"user\" class=\"cn.kofes.entity.User\" /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(value=<span class=\"string\">\"user\"</span>)  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// 省略实体类的属性...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorAnn</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = </span><br><span class=\"line\">        \t<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        System.out.println(user);\t <span class=\"comment\">// 直接调用 user 对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注解注入属性</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实体操作类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorAnn</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 相当于 Set 方法注入属性：</span></span><br><span class=\"line\">    <span class=\"comment\">// @Autowired 或者 @Resource(name = \"user\") </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span>\t</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        System.out.println(user);\t</span><br><span class=\"line\">        System.out.println(customer);\t</span><br><span class=\"line\">        System.out.println(firm);\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>XML 配置文件和注解混合使用</p>\n<ul>\n<li>创建对象操作使用 XML 配置文件方式实现；</li>\n<li><p>注入属性的操作使用注解方式实现.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Start：applicationContext.xml */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"user\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"cn.kofes.entity.User\"</span> /&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"customer\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"cn.kofes.entity.Customer\"</span> /&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"firm\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"cn.kofes.entity.Firm\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* End：applicationContext.xml */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorAnn</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"comment\">// 注解方式注入属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"user\"</span>) </span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"customer\"</span>) </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Customer customer;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"firm\"</span>) </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Firm firm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = </span><br><span class=\"line\">        \t<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        System.out.println(user);\t</span><br><span class=\"line\">        System.out.println(customer);\t</span><br><span class=\"line\">        System.out.println(firm);\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h5><h6 id=\"AOP-概述\"><a href=\"#AOP-概述\" class=\"headerlink\" title=\"AOP 概述\"></a>AOP 概述</h6><p>面向切面编程 (Aspect Oriented Programing，AOP)，扩展功能不通过修改代码实现。AOP 采取 <code>横向抽取机制</code> 取代传统 <code>纵向继承体系</code> 重复性代码。</p>\n<ul>\n<li>纵向继承体系：通过继承获得父类的功能 (方法)。</li>\n<li><p>横向抽取机制：动态代理方式。</p>\n<ul>\n<li>针对有接口的情况，使用 JDK 动态代理。</li>\n<li><p>针对没有接口情况，使用 Cglib 动态代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 具体逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"AOP-相关术语\"><a href=\"#AOP-相关术语\" class=\"headerlink\" title=\"AOP 相关术语\"></a>AOP 相关术语</h6><p>便于理解，引入实体类进行说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>连接点 (Join Point)：指那些被拦截到的点，在 Spring 这些点指的是方法，因 Spring 只支持方法类型的连接点。</p>\n<blockquote>\n<p>类中有哪些方法可被增强，这些方法称为连接点。</p>\n</blockquote>\n</li>\n<li><p><code>切入点 (Pointcut)</code>：指我们要对哪些 <code>Join Point</code> 进行拦截的定义。</p>\n<blockquote>\n<p>类中有很多方法被增强，例如实际操作中，只是增强了类中的 add() 和 update() 方法，即称为切入点。</p>\n</blockquote>\n</li>\n<li><p>引介 (Introduction)：一种特殊的通知在不修改类代码的前提下， Introduction 可为类动态地添加一些方法或 Field。</p>\n</li>\n<li><p><code>通知/增强 (Advice)</code>：指拦截到 <code>Join Point</code> 之后要做的事情就是通知。通知分为前置通知、后置通知、异常通知、最终通知、环绕通知 (切面要完成的功能)。</p>\n<blockquote>\n<p>增强的逻辑称为增强，例如扩展日志功能，这个日志功能称为增强。<br>前置通知，在方法之前执行；后置通知，在方法之后执行；<br>异常通知，方法出现异常；最终通知，在后置之后执行；<br>环绕通知，在方法之前和之后执行.  </p>\n</blockquote>\n</li>\n<li><p>目标对象 (Target)：代理的目标对象 (要增强的类)。</p>\n</li>\n<li><p>织入 (Weaving)：把增强应用到目标的过程，即把 Advice 应用到 Target 的过程。</p>\n</li>\n<li><p><code>切面 (Aspect)</code>：切入点和通知 (引介) 的结合。</p>\n<blockquote>\n<p>把增强应用到具体方法上，此过程称为切面。例如把日志功能写进 add() 方法中。</p>\n</blockquote>\n</li>\n<li><p>代理 (Proxy)：一个类被 AOP 织入增强后，产生一个结果代理类。</p>\n</li>\n</ul>\n<h6 id=\"Spring-AOP-操作\"><a href=\"#Spring-AOP-操作\" class=\"headerlink\" title=\"Spring AOP 操作\"></a>Spring AOP 操作</h6><blockquote>\n<p>(1) 基于 AspectJ 的 Spring AOP 操作。</p>\n</blockquote>\n<p>ASpectJ：面向切面的框架，其扩展了 Java 语言。AspectJ 定义了 AOP 语法，故它有一个专门的编译器来生成遵守 Java 字节编码规范的 Class 文件。 </p>\n<p>AspectJ 并不是 Spring 一部分，和 Spring 一起使用进行 AOP 操作。</p>\n<p>使用 AspectJ 实现 AOP 有两种方式：1) 基于 AspectJ 的 XML 配置；2) 基于 AspectJ 的注解方式。</p>\n<blockquote>\n<p>(2) 操作基本流程 ( XML 方式 )：</p>\n</blockquote>\n<ul>\n<li><p>使用表达式配置切入点</p>\n<ul>\n<li><p>execution( &lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)(异常) )</p>\n<blockquote>\n<p>execution( * cn.kofes.UserOpertor.add(..) )  — UserOperator 类中 add() 方法增强<br>execution( * cn.kofes.UserOperator.*(..) )  — UserOperator 类中所有方法增强<br>execution( * *.*(..) )  — 所有类中所有方法增强<br>execution( * save*(..) ) — 所有 save 开头的方法增强</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>代码实现</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strengthenUserOperator.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">strengthenUserOperator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">strengthenUserOperator</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This's an aspect inserting to the method() the front.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listBeforeOperatorType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the front.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This's an aspect inserting to the method() the front and latter.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proceedingJoinPoint 执行被增强的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listArroundOperatorType</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the front.\"</span>);</span><br><span class=\"line\">        proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the latter.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UserOperatorXML.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOperatorXML</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123; <span class=\"keyword\">this</span>.user = user; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> user; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operatorTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">        UserOperatorXML operator = (UserOperatorXML) context.getBean(<span class=\"string\">\"operator\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 会在用户信息之前输出 “前置增强” 的信息。</span></span><br><span class=\"line\">        System.out.println( operator.getUser() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Spring 配置文件，并引入约束 (在上述 applicationContext.xml 中追加)</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.UserOperatorXML\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"strengthenoperator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.strengthenUserOperator\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置 AOP 操作 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置切入点：匹配 UserOperator 类中所有方法 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcutA\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution( * cn.kofes.UserOperatorXML.*(..))\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置切面：把增强用到方法上面 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"strengthenoperator\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 配置增强类型</span></span><br><span class=\"line\"><span class=\"comment\">             | Aop：增强类型有 before、after、arroud 等</span></span><br><span class=\"line\"><span class=\"comment\">             | Method：增强类里面使用哪个方法作为前置</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"listAllOperatorType\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcutA\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>(3) 操作基本流程 ( 注解方式 )：</p>\n</blockquote>\n<ul>\n<li><p>创建 Spring 配置文件 (在上述 applicationContext.xml 中追加)，XML 配置创建对象，并开启 AOP 操作：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"strengthenoperator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.entity.strengthenUserOperator\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 开启 AOP 操作 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在增强类上面使用注解完成 AOP 操作：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// strengthenUserOperator.java</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">strengthenUserOperator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">strengthenUserOperator</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This's an aspect inserting to the method() the front.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listBeforeOperatorType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the front.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This's an aspect inserting to the method() the front and latter.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proceedingJoinPoint 执行被增强的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(value=<span class=\"string\">\"execution( * cn.kofes.entity.UserOperatorXML.*(..) )\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listArroundOperatorType</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the front.\"</span>);</span><br><span class=\"line\">        proceedingJoinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Inserting to the method() the latter.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-整合-Web-项目\"><a href=\"#Spring-整合-Web-项目\" class=\"headerlink\" title=\"Spring 整合 Web 项目\"></a>Spring 整合 Web 项目</h5><p><code>诉求</code>：在 Spring 运作中，首先加载 Spring 核心配置文件，再创建对象。而创建对象可通过 New 的方式创建，但效率太低，则我们可以把加载配置文件和创建对象过程，在服务器启动时完成。</p>\n<h6 id=\"问题引入\"><a href=\"#问题引入\" class=\"headerlink\" title=\"问题引入\"></a>问题引入</h6><ul>\n<li>Action 调用 Service，Service 调用 Dao。而每次 Action 时都会加载 Spring 配置文件，影响性能。</li>\n</ul>\n<h6 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h6><ul>\n<li>ServletContext 对象</li>\n<li>监听器 (观察者模式)</li>\n</ul>\n<h6 id=\"操作简叙\"><a href=\"#操作简叙\" class=\"headerlink\" title=\"操作简叙\"></a>操作简叙</h6><ul>\n<li>在服务器启动时，为每个项目创建一 ServletContext 对象；</li>\n<li>在 ServletContext 对象创建时，使用监听器监听 ServletContext 对象在什么时创建；</li>\n<li>监听到 ServletContext 对象创建时，加载 Spring 配置文件，把配置文件配对象创建；</li>\n<li>把创建的对象放置 ServletContext 域对象里；</li>\n<li>到 ServletContext 域中，通过 getAttribute() 方法获取对象。</li>\n</ul>\n<h6 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h6><ul>\n<li><p>在 <code>web.xml</code> 配置文件中添加监听器，并指定 Spring 配置文件 的位置。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 指定 Spring 配置文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 监听器模块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-JdbcTemplate-操作\"><a href=\"#Spring-JdbcTemplate-操作\" class=\"headerlink\" title=\"Spring JdbcTemplate 操作\"></a>Spring JdbcTemplate 操作</h5><ul>\n<li>Spring 对不同的持久化层技术都进行了封装：<ul>\n<li><code>Jdbc</code></li>\n<li><code>Hibernate 5.x</code></li>\n<li><code>iBatis / MyBatis</code></li>\n<li><code>JPA</code></li>\n</ul>\n</li>\n<li>JdbcTemplate 对 Jdbc 进行了封装，以下为实际操作介绍。</li>\n</ul>\n<h6 id=\"JdbcTemplate-增删改查\"><a href=\"#JdbcTemplate-增删改查\" class=\"headerlink\" title=\"JdbcTemplate 增删改查\"></a>JdbcTemplate 增删改查</h6><ul>\n<li>Step.01.创建对象，设置数据库信息</li>\n<li>Step.02.创建 jdbcTemplate 对象，设置数据源</li>\n<li><p>Step.03.调用 jdbcTemplate 对象，实现其中的方法实现增、删、改、查操作。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jdbc 模板依赖连接池获得数据库连接，所以必须先构造连接池</span></span><br><span class=\"line\">DriverManagerDataSource dataSource = <span class=\"keyword\">new</span> DriverManagerDataSource();</span><br><span class=\"line\">dataSource.setDriverClassName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">dataSource.setUrl(<span class=\"string\">\"jdbc:mysql://192.168.x.x/db_testdb\"</span>);</span><br><span class=\"line\">dataSource.setUsername(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">dataSource.setPassword(<span class=\"string\">\"123456\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 创建 Jdbc 模板</span></span><br><span class=\"line\">JdbcTemplate jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(dataSource);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 建表 SQL 语句</span></span><br><span class=\"line\">String sql_create = <span class=\"string\">\"CREATE TABLE \"</span> + </span><br><span class=\"line\">\t<span class=\"string\">\"t_user(id int primary key auto_increment, username varchar(20), password varchar(20))\"</span>;</span><br><span class=\"line\">String sql_insert = <span class=\"string\">\"INSERT INTO t_user VALUES(?, ?, ?)\"</span>;</span><br><span class=\"line\">String sql_update = <span class=\"string\">\"UPDATE t_user password = ? WHERE username = ?\"</span>;</span><br><span class=\"line\">String sql_delete = <span class=\"string\">\"DELETE FROM t_user WHERE username = ?\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JdbcTemplate 实现增、删、改操作</span></span><br><span class=\"line\">jdbcTemplate.execute(sql_create); </span><br><span class=\"line\">jdbcTemplate.update(sql_insert, <span class=\"string\">\"Lucy\"</span>, <span class=\"string\">\"123456\"</span>); </span><br><span class=\"line\">jdbcTemplate.update(sql_update, <span class=\"string\">\"Lucy\"</span>, <span class=\"string\">\"abc123\"</span>);</span><br><span class=\"line\">jdbcTemplate.update(sql_delete, <span class=\"string\">\"Lucy\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JdbcTemplate 实现查询操作，使用 RowMapper 接口，</span></span><br><span class=\"line\"><span class=\"comment\"> * 但 JdbcTemplate 没有针对这个接口提供实现类，得到不同的类型数据需要进行数据封装</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询返回某一个值 </span></span><br><span class=\"line\">sql_select_certain = <span class=\"string\">\"SELECT count(*) FROM t_user\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// args0：SQL 语句，args1：返回类型 Class</span></span><br><span class=\"line\">jdbcTemplate.queryForObject(sql_select_certain, Integer<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 查询返回 list 集合</span></span><br><span class=\"line\">sql_select_all = <span class=\"string\">\"SELECT * FROM t_user\"</span>;</span><br><span class=\"line\">List&lt;User&gt; list = jdbcTemplate.query( sql_select_all, <span class=\"keyword\">new</span> MyRowMapper() );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询返回 list 集合，需要创建类实现 RowMapper 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRowMapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">RowMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">mapRow</span><span class=\"params\">(ResultSet rs, <span class=\"keyword\">int</span> num)</span> <span class=\"keyword\">throws</span> SQLExpection </span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setUsername( rs.getString(<span class=\"string\">\"username\"</span>) );</span><br><span class=\"line\">        user.setPassword( rs.getString(<span class=\"string\">\"password\"</span>) );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-配置连接池\"><a href=\"#Spring-配置连接池\" class=\"headerlink\" title=\"Spring 配置连接池\"></a>Spring 配置连接池</h5><ul>\n<li><p>创建 Spring 配置文件，配置连接池：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 为便于修改配置，可在根目录下新建文件 c3p0.properties，填写格式如下：</span></span><br><span class=\"line\"><span class=\"comment\"> | datasource.driverClass=com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"> | datasource.jdbcUrl=jdbc:mysql://192.168.x.x:3306/db_testdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"comment\"> | datasource.user=root</span></span><br><span class=\"line\"><span class=\"comment\"> | ...</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:c3p0.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Data Connection Setting --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引用 c3p0.properties 的键值对即可 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.driverClass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.jdbcUrl&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.minPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.initialPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdleTime\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxIdleTime&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxStatements&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireIncrement\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.acquireIncrement&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"checkoutTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.checkoutTimeout&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"idleConnectionTestPeriod\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.idleConnectionTestPeriod&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- JdbcTemplate 类中封装了 DataSource 类，以 XML 配置形式注解关系即可 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.core.JdbcTemplate\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>代码引用：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"jdbcTemplate\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT * FROM t_user\"</span>;</span><br><span class=\"line\">    List&lt;User&gt; list = jdbcTemplate.query(sql, <span class=\"keyword\">new</span> MyRowMapper());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-事务管理\"><a href=\"#Spring-事务管理\" class=\"headerlink\" title=\"Spring 事务管理\"></a>Spring 事务管理</h5><h6 id=\"编程式事务管理\"><a href=\"#编程式事务管理\" class=\"headerlink\" title=\"编程式事务管理\"></a>编程式事务管理</h6><p>此部分省略。</p>\n<h6 id=\"声明式事务管理\"><a href=\"#声明式事务管理\" class=\"headerlink\" title=\"声明式事务管理\"></a>声明式事务管理</h6><ul>\n<li><p>创建 Service 类和 Dao 类，再添加注入关系：<br>  1) Service 层，又称业务逻辑层；<br>  2) Dao 层，数据持久层，单纯对数据库进行操作.  </p>\n</li>\n<li><p>引入问题：ServiceTest 类中制造的异常，即造成了转账的不一致问题，细节如下：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ServiceTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DaoTest daotest;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDaotest</span><span class=\"params\">(DaoTest daotest)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.daotest = daotest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* @Transactional 注解方式时填写 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">executeUpdateInDB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        GrowUp();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> exception = <span class=\"number\">10</span> / <span class=\"number\">0</span>;\t<span class=\"comment\">// 人为制造异常</span></span><br><span class=\"line\">        Dealth();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GrowUp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        daotest.updateOneTuple(<span class=\"string\">\"UPDATE t_user SET age=age+1 where username = ?\"</span>,</span><br><span class=\"line\">        \t<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"诸葛亮\"</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;Types.VARCHAR&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dealth</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        daotest.updateOneTuple(<span class=\"string\">\"UPDATE t_user SET age=0 where username = ?\"</span>,</span><br><span class=\"line\">        \t<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">\"诸葛亮\"</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;Types.VARCHAR&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DaoTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJdbcTemplate</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sql 插入元组的 SQL 语句</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj 插入的属性值，与 SQL 中填写属性名的顺序相同</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> types 对应属性值的数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateOneTuple</span><span class=\"params\">(String sql, Object[] obj, <span class=\"keyword\">int</span>[] types)</span> </span>&#123;</span><br><span class=\"line\">        jdbcTemplate.update(sql, obj, types);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基于 XML 配置文件形式实现 ( AOP 的思想 )</p>\n<blockquote>\n<p>目前为止，Spring 配置文件中约束添加完毕，以后配置复制此段即可。</p>\n</blockquote>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 目前为止，Spring 配置文件中约束添加完毕，以后的程序复制此段即可 --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- set 方法注入属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"service\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.service.ServiceTest\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"daotest\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dao\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.dao.DaoTest\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用上例的 jdbcTemplate bean 即可 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"jdbcTemplate\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 注入 dataSource  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 做事务操作 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">             | 事务操作方法的匹配规则，若事务操作的方法有规范命名，可以简写为：</span></span><br><span class=\"line\"><span class=\"comment\">             | &lt;tx:method name=\"execute*\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"executeTrading()\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置 AOP 操作 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 切点 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"poitncutB\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution( * cn.kofes.service.ServiceTest.executeTrading(..) )\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 切面 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txadvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcutB\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基于注解形式实现</p>\n<p>  在需要事务操作的类上配置注解 <code>@Transactional</code>，再配置 applicationContext.xml：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在 applicationContext.xml 中配置事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注入 dataSource  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 开启注解事务 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h4><p><code>数据持久层</code>，Hibernate 是一个开放源码的 <code>ORM</code> 持久层框架。简单的说，Hibernate 只是一个将持久化类与数据库表相映射的工具，<code>每个持久化类实例均对应于数据库表中的一个数据行而已</code>。用户只需直接使用面向对象的方法操作此持久化类实例，即可完成对数据库表数据的插入、删除、修改、读取等操作。</p>\n<h5 id=\"Hibernate-配置\"><a href=\"#Hibernate-配置\" class=\"headerlink\" title=\"Hibernate 配置\"></a>Hibernate 配置</h5><ul>\n<li><p>使用配置文件将映射关系对应起来；</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置文件命名规范：*.hbm.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">hibernate-mapping</span> <span class=\"meta-keyword\">PUBLIC</span> </span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 配置类和表相对应：Class 标签</span></span><br><span class=\"line\"><span class=\"comment\">     | name 属性：实体类全路径</span></span><br><span class=\"line\"><span class=\"comment\">     | table 属性：数据库表名称</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.entity.User\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user\"</span>&gt;</span>          </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | 配置实体类 ID 与表 ID 对应：ID 标签</span></span><br><span class=\"line\"><span class=\"comment\">         | Hibernate 要求实体类有一个属性唯一值，且要求表有字段作为唯一值</span></span><br><span class=\"line\"><span class=\"comment\">         | name 属性：实体类的 id 属性名称</span></span><br><span class=\"line\"><span class=\"comment\">         | column 属性：生产的表字段名称</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uid\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"uid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 设置数据库表 id 增长策略：Class 标签</span></span><br><span class=\"line\"><span class=\"comment\">             | 属性有：increment、hilo、squence、identity、native、uuid、guid 等。</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generator</span> <span class=\"attr\">class</span>=<span class=\"string\">\"native\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                   </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置其他属性和表字段对应：Property 标签 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 若使用的是 SQL Server 数据库系统，Property 映射对的顺序要和数据库中列 (属性) 的顺序相对应 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"string\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span> /&gt;</span>       </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>关于映射配置的一些批注：</p>\n</blockquote>\n<ul>\n<li>Note.01：就映射配置来说，这里千万要记住，若访问的是 SQL Server 数据库系统，则 <strong><property> 映射对的顺序要和数据库中列 (属性) 的顺序相对应</property></strong>。( 其他数据库系统没有出现此类问题，鉴于阅读与编程的规范，则不管使用哪种数据库系统驱动，都以此种方式编辑 Property 映射对 )</li>\n<li>Note.02：关于配置中实体类的主键生成策略有多种形式，详细见参考 [4]。</li>\n<li><p>Note.03：User 实体类对象的状态：</p>\n<ul>\n<li><code>瞬时态</code>：对象没有 ID 值，且其与 Session 没有关联。</li>\n<li><code>持久态</code>：对象有 ID 值，且其与 Session 有关联。</li>\n<li><p><code>托管态</code>：对象有 ID 值，但其与 Session 没有关联。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下述代码只列举了细节不同的部分，其他细节见源代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">           </span><br><span class=\"line\"><span class=\"comment\">// 瞬时态：即插入元组</span></span><br><span class=\"line\">user.setUserName(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\">user.setAge(<span class=\"number\">25</span>);</span><br><span class=\"line\">session.saveOrUpdate(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 托管态：对数据表中具体 ID 的元组进行数据修改，即更新元祖</span></span><br><span class=\"line\">user.setUid(attr_id);</span><br><span class=\"line\">user.setUserName(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\">user.setAge(<span class=\"number\">25</span>);</span><br><span class=\"line\">session.saveOrUpdate(user);</span><br><span class=\"line\"><span class=\"comment\">// session.save(user); // 注意：此操作为新增元组，但不是全部属性都修改，会引入空值</span></span><br><span class=\"line\">           </span><br><span class=\"line\"><span class=\"comment\">// 持久态：对数据表中具体 ID 的元组进行数据修改，即更新元祖</span></span><br><span class=\"line\">user = session.get(User<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">attr_id</span>)</span>;</span><br><span class=\"line\">user.setUserName(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\">user.setAge(<span class=\"number\">25</span>);</span><br><span class=\"line\">session.saveOrUpdate(user);</span><br><span class=\"line\">           </span><br><span class=\"line\"><span class=\"comment\">// 启示：从持久态和托管态态的实验结果可知，修改元组，先查再改，防止空值。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>创建 Hibernate 的核心配置文件；</p>\n<p>  核心配置文件格式是 XML，且核心配置文件名称和位置是 <code>固定的</code> ( Src 根目录下，且名称为 <code>hibernate.cfg.xml</code> )。Hibernate 操作过程中，仅加载核心配置文件。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置文件命名规范：hibernate.cfg.xml --&gt;</span></span><br><span class=\"line\">               </span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">hibernate-configuration</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (必填) 配置数据库信息：从 hibernate.property 中获取 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- SQL Server 数据库管理系统的 Driver </span></span><br><span class=\"line\"><span class=\"comment\">        &lt;property name=\"hibernate.connection.driver_class\"&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;property name=\"hibernate.connection.url\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            jdbc:sqlserver://192.168.0.133:1433;DatabaseName=testDB</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/property&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- MySQL 数据库管理系统的 Driver --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span>&gt;</span></span><br><span class=\"line\">            jdbc:mysql://192.168.0.163:3306/testDB?serverTimezone=UTC</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span>&gt;</span>sa<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span>&gt;</span>pztech753<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                   </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (可选) 配置 Hibernate 信息：从 hibernate.property 中获取 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 操作数据库时，向控制台输出 SQL 语句 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 操作数据库时，向控制台输出格式化的 SQL 语句 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Hibernate 配置自动建表：Update，有表更新没表建立 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> =<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">         | 例如，实现分页功能：</span></span><br><span class=\"line\"><span class=\"comment\">         | MySQL 里面使用 LIMIT 关键字，Oracle 中使用 ROWNUM 关键字</span></span><br><span class=\"line\"><span class=\"comment\">         | 让 Hibernate 识别不同数据库中特有的语句</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                   </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/entity/User.hbm.xml\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>关于核心配置的一些批注：</p>\n<p>面对不同的数据库管理系统，对应的配置属性也存在差异，详细见参考 [5]。</p>\n</blockquote>\n<ul>\n<li><p>通过 Session 保存实体类数据到数据库表中；</p>\n<p>  简单演示，详细见下一章节：<a href=\"#Hibernate-使用\">Hibernate 使用</a></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">user.setUsername(<span class=\"string\">\"Lucy\"</span>);</span><br><span class=\"line\">user.setAge(<span class=\"number\">25</span>);</span><br><span class=\"line\">Session.save(user);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Hibernate-使用\"><a href=\"#Hibernate-使用\" class=\"headerlink\" title=\"Hibernate 使用\"></a>Hibernate 使用</h5><ul>\n<li><p>以下代码为 Hibernate 最基本的使用方法，后续将通过优化 Configuration，以及规范事务来优化 Hibernate。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step.01：加载 Hibernate 核心配置文件 hibernate.cfg.xml</span></span><br><span class=\"line\">Configuration cfg = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">cfg.configure();</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// Step.02：创建 SessionFactory 对象；</span></span><br><span class=\"line\"><span class=\"comment\">// 在此过程中，根据映射关系在数据库中把表创建起来</span></span><br><span class=\"line\">SessionFactory sessionFactory = cfg.buildSessionFactory();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step.03：使用 SessionFactory 创建 Session 对象；</span></span><br><span class=\"line\">Session session = sessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step.04：手动开始事务；</span></span><br><span class=\"line\">Transaction trans = session.beginTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step.05：写具体逻辑，例如：增删改查；</span></span><br><span class=\"line\"><span class=\"comment\">// 例如添加操作 ( 不操作数据表，而操作实体类 )</span></span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">user.setUsername(<span class=\"string\">\"Lucy\"</span>);</span><br><span class=\"line\">user.setAge(<span class=\"number\">25</span>);</span><br><span class=\"line\">session.save(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step.06：提交事务；</span></span><br><span class=\"line\">trans.commit();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Step.07：关闭资源；</span></span><br><span class=\"line\">session.close();</span><br><span class=\"line\">sessionFactory.close();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Configuration</p>\n<ul>\n<li>到 Src 目录下加载核心配置文件 <code>hibernate.cfg.xml</code>；</li>\n</ul>\n</li>\n<li><p>SessionFactory</p>\n<ul>\n<li>根据核心配置文件中数据库配置、映射配置，且根据映射关系，到数据库中把表创建起来。</li>\n<li><p>创建 SessionFactory 过程中，特别消耗资源，故应该采取优化措施：</p>\n<p>在 Hibernate 操作中，建议一个项目创建一个 SessionFacotry 对象，以静态的工具类形式封装使用。  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateUtils</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration cfg = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SessionFactory sessionFactory = <span class=\"keyword\">null</span>;            </span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t    cfg = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">\t    cfg.configure();</span><br><span class=\"line\">\t    sessionFactory = cfg.buildSessionFactory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SessionFactory <span class=\"title\">getSessionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> sessionFactory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Session</p>\n<ul>\n<li>类似 Jdbc 中的 Connection，可调用 Session 中的不同方法实现 <code>增、删、改、查</code> 操作。 <ul>\n<li>增加：save()；</li>\n<li>修改：update()；</li>\n<li>删除：delete()；</li>\n<li>查询：get()；</li>\n</ul>\n</li>\n<li><p>Session 为单线程对象，即不能共用，仅自己使用。</p>\n<ul>\n<li><p>Hibernate 已实现本地线程与 Session 的绑定：在 Hibernate 的核心配置文件中，再调用 sessionFactory 的方法得到。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.current_session_context_class\"</span>&gt;</span>thread<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 HibernateUtils 静态工具类中追加静态方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回与本地线程绑定的 Session</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Session <span class=\"title\">getSessionObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sessionFactory.getCurrentSession();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">/* 在其他类中调用该方法 */</span></span><br><span class=\"line\">Session session = HibernateUtils.getSessionObject();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Transaction</p>\n<ul>\n<li>事务概念；</li>\n<li><p>事务特性：原子性、一致性、隔离性、持久性；</p>\n<blockquote>\n<p>隔离性：不考虑隔离性会产生的问题，如脏读、不可重复读和虚读。当然，可以设置隔离的级别来解决问题。</p>\n</blockquote>\n</li>\n<li><p>Hibernate 使用 Transaction 创建事务对象；</p>\n</li>\n<li><p>事务的 commit() 与 rollback() 方法 ( <code>规范用法</code> )；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Session session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">Transaction trans = nu</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sessionFactory = HibernateUtils.getSessionFactory()</span><br><span class=\"line\">    session = sessionFactory.openSession();</span><br><span class=\"line\">    <span class=\"comment\">// 开启事务</span></span><br><span class=\"line\">    trans = session.beginTransaction();</span><br><span class=\"line\">           </span><br><span class=\"line\">    <span class=\"comment\">// 人为制造异常，被除数不能为零</span></span><br><span class=\"line\">    User user = <span class=\"function\">ne0w <span class=\"title\">User</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    user.setAge(<span class=\"number\">50</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">    session.save(user);</span><br><span class=\"line\">           </span><br><span class=\"line\">    <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">    trans.commit();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(Exception ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发生异常</span></span><br><span class=\"line\">    trans.rollback();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    session.close();</span><br><span class=\"line\">    sessionFactory.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Hibernate-优化\"><a href=\"#Hibernate-优化\" class=\"headerlink\" title=\"Hibernate 优化\"></a>Hibernate 优化</h5><h6 id=\"Hibernate-缓存机制\"><a href=\"#Hibernate-缓存机制\" class=\"headerlink\" title=\"Hibernate 缓存机制\"></a>Hibernate 缓存机制</h6><ul>\n<li>一级缓存：默认是打开的，其使用的范围为 Session 创建到关闭的范围，且存储数据必须为持久态数据。</li>\n<li><p>一级缓存的特性：持久态的数据会自动更新数据库 ( 不用 session.update(user)、session.save(user) )，过程细节如下：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get() 操作后，将返回持久态对象 user 存于一级缓存中，</span></span><br><span class=\"line\"><span class=\"comment\">// 及存一份到缓存中的快照区 (副本)。</span></span><br><span class=\"line\">user = session.get(User<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">attr_id</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// setXXX() 操作，同时修改持久态对象的值和一级缓存中的内容。</span></span><br><span class=\"line\">user.setUserName(<span class=\"string\">\"Sample\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 当提交事务时，会比较一级缓存和快照区，</span></span><br><span class=\"line\"><span class=\"comment\">// 若不相同，会触发更新数据库操作。</span></span><br><span class=\"line\">trans.commit();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>二级缓存 (替代技术：<code>redis</code> )：默认关闭，SessionFactroy 的使用范围。</li>\n</ul>\n<h5 id=\"Hibernate-查询\"><a href=\"#Hibernate-查询\" class=\"headerlink\" title=\"Hibernate 查询\"></a>Hibernate 查询</h5><blockquote>\n<p>在 <code>Hibernate 查询方式</code> 小节将详细阐述。</p>\n</blockquote>\n<h6 id=\"Query-对象\"><a href=\"#Query-对象\" class=\"headerlink\" title=\"Query 对象\"></a>Query 对象</h6><blockquote>\n<p>推荐使用</p>\n</blockquote>\n<ul>\n<li><p>使用 Query 对象，不需要写 SQL 语句，以 HQL 替代。</p>\n<blockquote>\n<p>HQL：Hibernate Query Language，有别于 SQL 语句，即：SQL 操作表和表字段，而 HQL 操作实体类和属性。</p>\n</blockquote>\n</li>\n<li><p>Query 对象的使用：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Query 对象</span></span><br><span class=\"line\">Query query = session.createQuery(<span class=\"string\">\"from User\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 调用 query 对象的方法得到结果</span></span><br><span class=\"line\">List&lt;User&gt; list = query.list();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Criteria-对象\"><a href=\"#Criteria-对象\" class=\"headerlink\" title=\"Criteria 对象\"></a>Criteria 对象</h6><ul>\n<li><p>Ceiteria 对象的使用： </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Criteria 对象　</span></span><br><span class=\"line\">Criteria criteria = session.createCriteria(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 调用 criteria 对象的方法得到结果</span></span><br><span class=\"line\">List&lt;User&gt; list = criteria.list();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"SQLQuery-对象\"><a href=\"#SQLQuery-对象\" class=\"headerlink\" title=\"SQLQuery 对象\"></a><del>SQLQuery 对象</del></h6><ul>\n<li><p>SQLQuery 对象的使用：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 SQLQuery 对象</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT * FROM t_user t WHERE t.username= ? AND t.age = ?\"</span>;</span><br><span class=\"line\">SQLQuery sqlQuery = session.createSQLQuery(sql)</span><br><span class=\"line\">    .setParameter(<span class=\"number\">0</span>, <span class=\"string\">\"ABC\"</span>).setParameter(<span class=\"number\">1</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// Case.01. 以数组形式接收结果</span></span><br><span class=\"line\"><span class=\"comment\">// List&lt;Object []&gt; list = sqlQuery.list();</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// Case.02. 返回目标的 User 对象 </span></span><br><span class=\"line\">sqlQuery.addEntity(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">List&lt;User&gt; list = sqlQuery.list();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Hibernate-多表操作\"><a href=\"#Hibernate-多表操作\" class=\"headerlink\" title=\"Hibernate 多表操作\"></a>Hibernate 多表操作</h5><ul>\n<li>数据库的多表查询<ul>\n<li>外键<ul>\n<li>指定外键关键字： Foreign Key(列名)</li>\n<li>引用外键关键字： References &lt;主表名&gt;(主表主键)</li>\n</ul>\n</li>\n<li>关系<ul>\n<li>一对一</li>\n<li>一对多</li>\n<li>多对多</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"一对多操作\"><a href=\"#一对多操作\" class=\"headerlink\" title=\"一对多操作\"></a>一对多操作</h6><ul>\n<li><p>一对多映射配置：<code>实体类配置</code></p>\n<ul>\n<li>创建两个实体类，例如：公司和客户 ( 公司是一，客户是多 )；</li>\n<li><p>让两个实体类间互相表示；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// 省略其他属性</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在客户实体类中表示所属公司，一个客户只属于一个公司</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Firm firm;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFirm</span><span class=\"params\">(Firm firm)</span> </span>&#123; <span class=\"keyword\">this</span>.frim = firm; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Firm <span class=\"title\">getFirm</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> firm; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">// 公司实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Firm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他属性</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Set 集合：无序，元素不可重复</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Customer&gt; customerSet = <span class=\"keyword\">new</span> HashSet&lt;Customer&gt;();    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Customer&gt; <span class=\"title\">getCustomerSet</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> customerSet; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCustomerSet</span><span class=\"params\">(Set&lt;Customer&gt; customerSet)</span> </span>&#123; <span class=\"keyword\">this</span>.customerSet = customerSet; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>一对多映射配置：<code>XML 配置文件</code>，一个实体类对应一个映射文件，除了映射文件的基本配置之外，且要在映射文件中配置一对多的关系。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Firm\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_firm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">     | 表示公司的所有客户</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性：属性值写公司实体类里表示客户 Set 集合的对象名称</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customerSet\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | 一对多关系建表，有外键</span></span><br><span class=\"line\"><span class=\"comment\">         | Hibernate 机制，双向维护外键，即在一和多方都配置外键</span></span><br><span class=\"line\"><span class=\"comment\">         | Column 属性：属性值为外键的名称，名称可自定义</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span> <span class=\"attr\">column</span>=<span class=\"string\">\"f_fid\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 公司的所有客户，即 Class 里写客户实体类全路径 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">one-to-many</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.entity.Customer\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- customer.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Customer\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_customer\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 表示客户所属公司</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性：客户实体类中使用 firm 对象表示</span></span><br><span class=\"line\"><span class=\"comment\">     | Class 属性：Firm 实体类的全路径</span></span><br><span class=\"line\"><span class=\"comment\">     | Column 属性：外键名称，名称可自定义</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">many-to-one</span> <span class=\"attr\">name</span>=<span class=\"string\">\"firm\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.entity.Firm\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"c_fid\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>核心配置文件中，加入 customer.bhm.xml 和 firm.bhm.xml。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/entity/firm.hbm.xml\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/entity/customer.hbm.xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>一对多级联的操作实现</p>\n<blockquote>\n<p>在原生数据库中，对包含外键的元组直接删除，是无法成功执行的。正确操作方式为：先删除外键约束，再删除对应元组。但在 Hibernate 中，不用考虑此类问题，因为内置封装了相关功能组件。</p>\n</blockquote>\n<ul>\n<li><p>一对多级联的保存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step.01.建立公司对象和客户对象的关系</span></span><br><span class=\"line\">Firm firm = <span class=\"keyword\">new</span> Firm();</span><br><span class=\"line\">Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\"><span class=\"comment\">// Step.02.把客户对象放到公司对象的 Set 集合里</span></span><br><span class=\"line\">firm.getCustomerSet().add(customer);</span><br><span class=\"line\"><span class=\"comment\">// Step.03.把公司对象放到客户对象里</span></span><br><span class=\"line\">customer.setFirm(firm);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 级联保存：即一方和多方都需配置数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">   </span><br><span class=\"line\">session.save(customer);</span><br><span class=\"line\">session.save(firm);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一对多级联的删除：在一方 ( 与多方对立 ) 即公司对象，修改其配置文件。</p>\n<p>最后，直接在代码中进行删除操作即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Firm\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_firm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 对 Set 标签的 casade 值为 delete --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customerSet\"</span> <span class=\"attr\">cascade</span>=<span class=\"string\">\"delete\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>优化步骤之 <code>Inverse 属性</code></p>\n<blockquote>\n<p>因为 Hibernate 是双向维护外键，在公司和客户里面都需维护外键 ( 从级联删除的执行过程中可体验出来 )。故我们可以设置其中的一方 <code>放弃</code> 维护外键，以优化性能。</p>\n</blockquote>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Firm\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_firm\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t | Inverse 属性</span></span><br><span class=\"line\"><span class=\"comment\">\t | Flase，表示不放弃关系维护</span></span><br><span class=\"line\"><span class=\"comment\">\t | True，表示放弃关系维护</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customerSet\"</span> <span class=\"attr\">cascade</span>=<span class=\"string\">\"save-update, delete\"</span> <span class=\"attr\">inverse</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"多对多操作\"><a href=\"#多对多操作\" class=\"headerlink\" title=\"多对多操作\"></a>多对多操作</h6><ul>\n<li><p>多对多映射配置：实体类配置</p>\n<ul>\n<li>创建两个实体类，例如：用户和角色 ( 一个用户可扮演多个角色，一个角色可由多个用户扮演 )；</li>\n<li><p>让两个实体类间互相表示；  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用户实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> User &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 省略其他属性</span></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;Role&gt; roleSet = <span class=\"keyword\">new</span> HashSet&lt;Role&gt;();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Role&gt; <span class=\"title\">getRoleSet</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> roleSet; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoleSet</span><span class=\"params\">(Set&#123;Role&#125; roleSet)</span> </span>&#123; <span class=\"keyword\">this</span>.roleSet = roleSet; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 角色实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Role &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 省略其他属性</span></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Set&lt;User&gt; userSet = <span class=\"keyword\">new</span> HashSet&lt;User&gt;();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Set&lt;User&gt; <span class=\"title\">getUserSet</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> userSet; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserSet</span><span class=\"params\">(Set&lt;User&gt; userSet &#123; <span class=\"keyword\">this</span>.userSet = userSet; &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>多对多映射配置：<code>XML 配置文件</code>，一个实体类对应一个映射文件，除了映射文件的基本配置之外，且要在映射文件中配置多对多的关系。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- user.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.User\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 在用户中，表示所有的角色</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性：属性值写用户实体类里表角色 Set 集合的对象名称</span></span><br><span class=\"line\"><span class=\"comment\">     | Table 属性：填写多对多时，两实体的联系转化成表 ( 第三张表 )</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"roleSet\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user_role\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | 多对多关系建表，有外键</span></span><br><span class=\"line\"><span class=\"comment\">         | Column 属性：当前用户实体，在第三张表中的外键名称 </span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span> <span class=\"attr\">column</span>=<span class=\"string\">\"u_fid\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">         | Class 属性：填写角色实体类全路径</span></span><br><span class=\"line\"><span class=\"comment\">         | Column 属性：角色实体，在第三张表中的外键名称</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">many-to-many</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.entity.Role\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"r_fid\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- role.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Role\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_role\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | 在角色中，表示所有的用户</span></span><br><span class=\"line\"><span class=\"comment\">     | Name 属性：属性值写角色实体类里表示用户 Set 集合的对象名称</span></span><br><span class=\"line\"><span class=\"comment\">     | Table 属性：填写多对多时，两实体的联系转化成表 ( 第三张表 )</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userSet\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user_role\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | 多对多关系建表，有外键</span></span><br><span class=\"line\"><span class=\"comment\">         | Column 属性：当前角色实体，在第三张表中外键的名称</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span> <span class=\"attr\">column</span>=<span class=\"string\">\"r_fid\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">         | Class 属性：填写用户实体类全路径</span></span><br><span class=\"line\"><span class=\"comment\">         | Column 属性：用户实体，在第三张表中外键的名称</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">many-to-many</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.entity.User\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"u_fid\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>核心配置文件中，加入 customer.bhm.xml 和 firm.bhm.xml。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/entity/user.hbm.xml\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/entity/role.hbm.xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多对多级联的操作实现</p>\n<ul>\n<li><p>多对多级联保存</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和一对多级联操作一样，在用户配置文件 user.hbm.xml 中，</span></span><br><span class=\"line\"><span class=\"comment\">// 对 Set 标签的 casade 值为 save-update</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多对多级联保存</span></span><br><span class=\"line\">User user_1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">User user_2= <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">Role role_1 = <span class=\"keyword\">new</span> Role();</span><br><span class=\"line\">Role role_2 = <span class=\"keyword\">new</span> Role();</span><br><span class=\"line\">Role role_3 = <span class=\"keyword\">new</span> Role();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// user_1 拥有角色 1、2，user_2 拥有角色 2、3</span></span><br><span class=\"line\">user_1.getRoleSet().add(role_1);</span><br><span class=\"line\">user_1.getRoleSet().add(role_2);</span><br><span class=\"line\">user_2.getRoleSet().add(role_2);</span><br><span class=\"line\">user_2.getRoleSet().add(role_3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存用户即可 ( 对应于配置文件中设置了 casade 值的实体 )</span></span><br><span class=\"line\">session.save(user_1);</span><br><span class=\"line\">session.save(user_2);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多对多级联删除 ( 不推荐 )：配置文件；最后，直接在代码中进行删除操作即可。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 和一对多级联操作一样，在用户配置文件 user.hbm.xml 中，</span><br><span class=\"line\">// 对 Set 标签的 casade 值为 delete ( 可以与保存的属性共存 )</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- user.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.User\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"roleSet\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user_role\"</span> <span class=\"attr\">casade</span>=<span class=\"string\">\"save-update, delete\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>维护多对多的关系，通过维护 <code>第三张表</code> ( 两实体的联系转化成的表 ) 实现。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Hibernate-HQL-查询详解\"><a href=\"#Hibernate-HQL-查询详解\" class=\"headerlink\" title=\"Hibernate HQL 查询详解\"></a>Hibernate HQL 查询详解</h5><ul>\n<li><code>OID</code> 查询和 <code>对象导航</code> 查询 </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单元测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSelect1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Session session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Transaction trans = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class=\"line\">            session = sessionFactory.openSession();</span><br><span class=\"line\">            trans = session.beginTransaction();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            <span class=\"comment\">// 需求：根据 ID 查询某个公司，再查询这个公司的所有客户</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">            <span class=\"comment\">// OID 查询：查询 ID 为 1 的公司</span></span><br><span class=\"line\">            Firm firm = session.get(Firm<span class=\"class\">.<span class=\"keyword\">class</span>, 1)</span>; <span class=\"comment\">// </span></span><br><span class=\"line\">            <span class=\"comment\">// 对象导航查询：根据某条记录的 ID，返回对象 (公司的客户)</span></span><br><span class=\"line\">            Set&lt;Customer&gt; customer = firm.getCustomerSet();</span><br><span class=\"line\">            System.out.print( customer.toString() );</span><br><span class=\"line\"></span><br><span class=\"line\">            trans.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception ex) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            transaction.rollback();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            session.close();</span><br><span class=\"line\">            sessionFactory.close();</span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"HQL-查询\"><a href=\"#HQL-查询\" class=\"headerlink\" title=\"HQL 查询\"></a>HQL 查询</h6><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Step.01.创建 Query 对象，写 HQL 语句实现查询</span></span><br><span class=\"line\"><span class=\"comment\">// Step.02.调用 query 对象的方法得到结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询所有</span></span><br><span class=\"line\">Query query = session.createQuery(<span class=\"string\">\"FROM t_user\"</span>);</span><br><span class=\"line\">List&lt;User&gt; list = query.list();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 条件查询</span></span><br><span class=\"line\">String sql_obscure = <span class=\"string\">\"FROM t_user WHERE username LIKE ?\"</span>; <span class=\"comment\">// 模糊查询</span></span><br><span class=\"line\">String sql_accurate = <span class=\"string\">\"FROM t_user WHERE age = ? AND username = ?\"</span>; <span class=\"comment\">// 精确查询</span></span><br><span class=\"line\">Query query = session.createQuery(sql_accurate);</span><br><span class=\"line\"><span class=\"comment\">// arg0 为占位符位置，arg1 为参数</span></span><br><span class=\"line\">query.setParameter(<span class=\"number\">0</span>, <span class=\"number\">25</span>).setParameter(<span class=\"number\">1</span>, <span class=\"string\">\"Lucy\"</span>);</span><br><span class=\"line\">List&lt;User&gt; list = query.list();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 排序查询：ASC，升序 / DESC，降序</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"FROM t_user ORDER BY uid ASC\"</span>; </span><br><span class=\"line\">Query query = session.createQuery(sql);</span><br><span class=\"line\">List&lt;User&gt; list = query.list();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分页查询：LIMIT 关键字</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"FROM t_user\"</span>;</span><br><span class=\"line\">Query query = session.createQuery(sql);</span><br><span class=\"line\">query.setFirstResult(<span class=\"number\">0</span>);</span><br><span class=\"line\">query,.setMaxResults(<span class=\"number\">10</span>);</span><br><span class=\"line\">List&lt;User&gt; list = query.list();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 投影查询</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT username, age FROM t_user\"</span>;</span><br><span class=\"line\">Query query = session.createQuery(sql);</span><br><span class=\"line\">List&lt;Object&gt; list = query.list();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 聚集函数</span></span><br><span class=\"line\"><span class=\"comment\">// COUNT()、SUM()、MAX()、MIN()...</span></span><br><span class=\"line\">String sql = <span class=\"string\">\"SELECT COUNT(*) FROM t_user\"</span>;</span><br><span class=\"line\">Query query = session.createQuery(sql);</span><br><span class=\"line\"><span class=\"comment\">// 将结果以对象形式返回</span></span><br><span class=\"line\">Object obj = query.uniqueResult();</span><br></pre></td></tr></table></figure>\n<h6 id=\"HQL-多表查询\"><a href=\"#HQL-多表查询\" class=\"headerlink\" title=\"HQL 多表查询\"></a>HQL 多表查询</h6><ul>\n<li><p>内连接：连接两个表有关联的数据，忽略两个表中对应不起来的数据。</p>\n<ul>\n<li>SQL：SELECT * FROM t_user AS u, t_role AS r ON  u.uid = r.uid;<ul>\n<li>或者：SELECT * FROM t_user u INNER JOIN t_role r ON  u.uid = r.uid;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>左外链接：左边表所有元组，右边表关联数据。</p>\n<ul>\n<li>若左表与右表没有关联数据，则右边表数据补 NULL 值，多了则删除</li>\n<li>SQL：SELECT * FROM t_user u LEFT OUTER JOIN t_role r ON  u.uid = r.uid;</li>\n</ul>\n</li>\n<li>右外链接：与左外链接同理。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HQL 内连接 ( 左、右外链接同理 )</span></span><br><span class=\"line\">String sql_inner_join = <span class=\"string\">\"FROM t_user u INNER JOIN u.roleSet\"</span>;</span><br><span class=\"line\">Query query = session.createQuery(sql_inner_join);</span><br><span class=\"line\">List list = query.list(); <span class=\"comment\">// list 返回的每部分都是数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HQL 迫切内连接</span></span><br><span class=\"line\">String sql_inner_join_fetch = <span class=\"string\">\"FROM t_user u INNER JOIN FETCH u.roleSet\"</span>;</span><br><span class=\"line\">Query query = session.createQuery(sql_inner_join_fetch);</span><br><span class=\"line\">List list = query.list();  <span class=\"comment\">// list 返回的每部分都是对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HQL 迫切左外连接  ( 没有迫切右外连接 )</span></span><br><span class=\"line\">String sql_inner_join_fetch = <span class=\"string\">\"FROM t_user u LEFT OUTER JOIN FETCH u.roleSet\"</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Hibernate-检索策略\"><a href=\"#Hibernate-检索策略\" class=\"headerlink\" title=\"Hibernate 检索策略\"></a>Hibernate 检索策略</h5><h6 id=\"立即查询\"><a href=\"#立即查询\" class=\"headerlink\" title=\"立即查询\"></a>立即查询</h6><p>根据 ID 查询，调用 get() 方法，则马上发送语句查询数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Debug 方式可检验，即执行代码马上发送 SQL 语句</span></span><br><span class=\"line\">User user = session.get(User<span class=\"class\">.<span class=\"keyword\">class</span>, 1)</span>;</span><br></pre></td></tr></table></figure>\n<h6 id=\"延迟查询\"><a href=\"#延迟查询\" class=\"headerlink\" title=\"延迟查询\"></a>延迟查询</h6><p>根据 ID 查询，调用 load() 方法，不会马上发送语句查询数据库，只有得到对象的值时，才发送语句查询数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 load() 方法之后，并不会马上发送 SQL 语句</span></span><br><span class=\"line\">User user = session.load(User<span class=\"class\">.<span class=\"keyword\">class</span>, 1)</span>;</span><br><span class=\"line\">System.out.println( user.getUid() );</span><br><span class=\"line\"><span class=\"comment\">// 当得到对象里其他值时，即非 ID 值，才发送 SQL 语句进行查询</span></span><br><span class=\"line\">System.out.println( user.getUsername() );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类级别延迟：例如，根据 ID 查询返回实体类对象，调用 load() 方法不会马上发送 SQL 语句。 </li>\n<li><p>关联级别查询：例如上述 <code>对象导航查询</code>，查询某个公司后，再查询这间公司的所有客户，查询公司所有客户的过程是否需要延迟，则称其为关联级别延迟。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\"> | 在配置文件中实现关联级别延迟</span></span><br><span class=\"line\"><span class=\"comment\"> | fetch 属性：select</span></span><br><span class=\"line\"><span class=\"comment\"> | lazy 属性：true / false / extra</span></span><br><span class=\"line\"><span class=\"comment\"> | \t- True，当得到对象里其他值时，即非 ID 值，才发送 SQL 语句进行查询。</span></span><br><span class=\"line\"><span class=\"comment\"> | \t- False，反之，会多执行一次查询 ( getUid() )。</span></span><br><span class=\"line\"><span class=\"comment\"> | \t- Extra，需要什么属性，查询什么属性 ( 仅需少量属性时推荐使用 )</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.User\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"roleSet\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_user_role\"</span> <span class=\"attr\">fetch</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">lazy</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"批量抓取\"><a href=\"#批量抓取\" class=\"headerlink\" title=\"批量抓取\"></a>批量抓取</h6><ul>\n<li><p>例如，我们需要查询所有公司的所有客户，代码实现如下：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Criteria criteria = session.createCriteria(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">List&lt;Firm&gt; list = criteria.list();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Firm firm : list) &#123;</span><br><span class=\"line\">    System.out.println( firm.getId() + <span class=\"string\">\":\"</span> + firm.getName() );</span><br><span class=\"line\">    Set&lt;Customer&gt; customerSet = firm.getCustomerSet();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Customer customer : customerSet) &#123;</span><br><span class=\"line\">        System.out.println( customer.getUid() + <span class=\"string\">\":\"</span> + customer.getUsername() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 但在执行过程中，暴露的问题时：每次循环都执行一次查询，拖沓性能</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>故我们只需要在实体映射配置文件中，对 Set 标签进行设置属性即可：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.entity.Firm\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_firm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- batch-size 的值为整数即可 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customerSet\"</span> <span class=\"attr\">batch-size</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"SSH-框架总结\"><a href=\"#SSH-框架总结\" class=\"headerlink\" title=\"SSH 框架总结\"></a>SSH 框架总结</h4><h5 id=\"Struts-1\"><a href=\"#Struts-1\" class=\"headerlink\" title=\"Struts\"></a>Struts</h5><ul>\n<li>Action 操作<ul>\n<li>Action 创建 (三种方式)：继承 <code>ActionSupport</code> 类。</li>\n<li>Action 访问路径：创建 <code>struts.xml</code> 配置文件，文件名称和位置 ( Src 目录 ) 固定。</li>\n<li>访问 Action 的多个方法：使用 <code>通配符方式</code> 配置。</li>\n<li>Action 获取表单提交数据：<ul>\n<li>获取 Request 对象 ( 使用 <code>ServletAction</code> 类 )；</li>\n<li>属性封装；</li>\n<li>模型驱动；</li>\n</ul>\n</li>\n<li>Action 操作域对象：使用 <code>ServletAction</code> 类。</li>\n<li>配置 Struts2 过滤器。</li>\n</ul>\n</li>\n<li>值栈<ul>\n<li>向值栈放数据：<ul>\n<li>Set 方法；</li>\n<li>Push 方法；</li>\n<li>定义变量，生成 Get 方法.</li>\n</ul>\n</li>\n<li>从值栈获取数据：在 JSP 中使用 Struts2 标签 + Ognl 获取<ul>\n<li><code>&lt;s:property /&gt;</code></li>\n<li><code>&lt;s:iterator /&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拦截器<ul>\n<li>AOP 和责任链模式；</li>\n<li>自定义拦截器：<ul>\n<li>继承 <code>MethodFilterInterceptor</code> 类，并重写类方法；</li>\n<li>配置拦截器和 Action 关联.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Spring-1\"><a href=\"#Spring-1\" class=\"headerlink\" title=\"Spring\"></a>Spring</h5><ul>\n<li>Spring 核心配置文件：<ul>\n<li>名称和位置没有固定要求；</li>\n<li>在 Spring 核心配置文件中引入 Schema 约束.</li>\n</ul>\n</li>\n<li>创建对象：<ul>\n<li>XML 配置方式：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; /&gt;</code>；</li>\n<li>注解方式：<code>@Component</code> 或 <code>@Controller</code> (Web层)、<code>@Service</code> (业务层)、<code>@Repository</code> (持久层).</li>\n</ul>\n</li>\n<li>注入属性:<ul>\n<li>XML 配置方式：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;property name=&quot;&quot; ref=&quot;&quot; /&gt;&lt;/bean&gt;</code>；</li>\n<li>注解方式：<code>@autowired</code>、<code>@Resource(name=&quot;value&quot;)</code>.</li>\n</ul>\n</li>\n<li>使用 ServletContext 对象和监听器实现<ul>\n<li>在服务器启动时，加载 Spring 配置文件，创建对象；</li>\n<li>配置 Spring 的监听器；</li>\n<li>指定 Spring 配置文件位置.</li>\n</ul>\n</li>\n<li>Spring JdbcTemplate </li>\n<li>Spring 事务配置：<ul>\n<li>XML 配置方式；</li>\n<li>注解方式：<code>@Transational</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Hibernate-1\"><a href=\"#Hibernate-1\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h5><ul>\n<li>ORM 思想：<code>对象关系映射</code>，参考 <a href=\"#ORM-框架\">ORM 框架</a>；</li>\n<li>数据库信息配置：MySQL / SQL Server 2008 R2；</li>\n<li><p>Hibernate 信息配置：即配置 Hibernate 核心配置文件 ( <code>hibernate.cfg.xml</code> )。</p>\n<blockquote>\n<p>Hibernate 和 Spring 整合时，配置文件的名称和位置是没有固定要求的。</p>\n</blockquote>\n</li>\n<li><p>映射关系配置：即配置 Hibernate 映射配置文件 ( <code>xxx.hbm.xml</code> )，实体类和数据表映射关系 ( 使用 ORM 思想 )。</p>\n</li>\n<li>Hibernate 操作步骤：Spring 框架对 Hibernate 框架也有封装，即 <code>HibernateTemplate</code> 类。</li>\n</ul>\n<h4 id=\"SSH-框架整合\"><a href=\"#SSH-框架整合\" class=\"headerlink\" title=\"SSH 框架整合\"></a>SSH 框架整合</h4><p><img src=\"/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-4.png\" alt=\"SSH框架整合思想\"></p>\n<center>图 6-4 SSH 框架整合思想</center>\n\n<ul>\n<li><p>Spring 与 Struts 2 框架的整合</p>\n<p>  把 Struts 2 的 Action 对象创建交给 Spring 进行管理。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Spring 与 Hibernate 框架的整合</p>\n<p>  把 Hibernate 的核心配置文件里的数据库配置，直接写在 Spring 配置文件中。且把 SessionFactory 对象创建交给 Spring 管理。</p>\n</li>\n</ul>\n<h4 id=\"SSH-整合演示\"><a href=\"#SSH-整合演示\" class=\"headerlink\" title=\"SSH 整合演示\"></a>SSH 整合演示</h4><h5 id=\"Spring-与-Struts-2-整合\"><a href=\"#Spring-与-Struts-2-整合\" class=\"headerlink\" title=\"Spring 与 Struts 2 整合\"></a>Spring 与 Struts 2 整合</h5><ul>\n<li><p>Action 代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cn.kofes.dao.BaseAction.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"The portion of action has deployed successfully.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NONE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在 Spring  配置文件下整合 Struts：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 整合 Struts：Action 对象的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"BaseAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.kofes.action.BaseAction\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整合 Web，当服务器启动时加载 Spring 配置即初始化，我们需要在 web.xml 下配置监听器：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- web.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载 Spring 的配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 监听器模块：作用就是启动 Web 容器时,自动装配 spring.xml 文件的配置信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 过滤器模块 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>最后，struts.xml 填入以下配置即可：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">struts</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://struts.apache.org/dtds/struts-2.3.dtd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sample\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | Class 属性值不写目标 Action 的全路径，原因是防止二次创建对象</span></span><br><span class=\"line\"><span class=\"comment\">         | 引入 Spring 相对应  Action 的 Bean 标签 ID</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BaseAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"BaseAction\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-与-Hibernate-整合\"><a href=\"#Spring-与-Hibernate-整合\" class=\"headerlink\" title=\"Spring 与 Hibernate 整合\"></a>Spring 与 Hibernate 整合</h5><ul>\n<li><p>在 Spring  配置文件下配置数据库信息，及整合 Hibernate。后者即将 SessionFacotry 交由 Spring 管理：</p>\n<blockquote>\n<p><code>c3p0.properties</code> 和 <code>hibernate.properties</code> 配置文件位于 Src 根目录下，键值分离以便以后修改配置。</p>\n</blockquote>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在根目录下新建文件 c3p0.properties，存储数据库连接信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:c3p0.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Data Connection Settings --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 引用 c3p0.properties 的键值对即可，格式如 $&#123;key.value&#125; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.driverClass&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.jdbcUrl&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.minPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialPoolSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.initialPoolSize&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdleTime\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxIdleTime&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.maxStatements&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"acquireIncrement\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.acquireIncrement&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"checkoutTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.checkoutTimeout&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"idleConnectionTestPeriod\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;datasource.idleConnectionTestPeriod&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 整合 Hibernate：SessionFactory 对象的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (必填信息) 指定数据库 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (可选信息) 配置 Hibernate 信息 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:hibernate.properties\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- (必填信息) 把映射文件放到核心配置文件中 ( 现直接加载到 LocalSessionFactoryBean 类中即可 )  --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingResources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapper/sample.hbm.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建实体类：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Employee.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建实体类映射文件 ( 文件位置没有固定要求，建议统一文件夹存储 )：</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- src/resource/HbmCollection/sample.hbm.xml --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">hibernate-mapping</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-string\">\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">     | name 属性：实体类全路径</span></span><br><span class=\"line\"><span class=\"comment\">     | table 属性：数据库表名称</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cn.kofes.bean.Sample\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"t_sample\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">         | Hibernate 要求实体类有一个属性唯一值，且要求表有字段作为唯一值</span></span><br><span class=\"line\"><span class=\"comment\">         | name 属性：实体类的 id 属性名称</span></span><br><span class=\"line\"><span class=\"comment\">         | column 属性：数据表字段名称</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 设置数据库表 id 增长策略：Class 标签</span></span><br><span class=\"line\"><span class=\"comment\">             | 属性值：increment、hilo、squence、identity、native、uuid、guid 等。</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generator</span> <span class=\"attr\">class</span>=<span class=\"string\">\"native\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置其他属性和表字段对应：Property 标签 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"string\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>核心配置文件</code> 中引入 <code>映射配置文件</code>：</p>\n<blockquote>\n<p>在 Spring 配置文件中已引入映射配置文件，故不需要再单独配置 <code>hibernate.cfg.xml</code>。</p>\n</blockquote>\n</li>\n<li><p>事务配置：在 spring.xml 配置文件中配置并开始事务注解，再到 Service 层添加注解 <code>@Transactional</code>： </p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate5.HibernateTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  开始事务注解 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Spring-分模块开发\"><a href=\"#Spring-分模块开发\" class=\"headerlink\" title=\"Spring 分模块开发\"></a>Spring 分模块开发</h5><ul>\n<li>在 Spring 里配置多个内容，容易造成配置混乱，不利于维护。</li>\n<li><p>把 Spring 核心配置文件中，将一部分配置放到单独的配置文件中，再在 Spring 核心配置文件中引入单独配置文件。</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\"> | 将原 Spring 中的部分配置放置到独立 xml 中，</span></span><br><span class=\"line\"><span class=\"comment\"> | 例如我把 Dao 层的配置独立出来，再到 spring.xml 中引入配置文件 dao.xml 即可。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"classpath:dao.xml\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SSH-框架使用演示\"><a href=\"#SSH-框架使用演示\" class=\"headerlink\" title=\"SSH 框架使用演示\"></a>SSH 框架使用演示</h5><p>SSH 整合工作告一段落，当然你可通过 Maven 打包工程，以便以后复用。</p>\n<h3 id=\"SSM-框架\"><a href=\"#SSM-框架\" class=\"headerlink\" title=\"SSM 框架\"></a>SSM 框架</h3><blockquote>\n<p>当然，随着框架技术的迭代更新，更加科学、合理的新框架也逐渐在项目中使用起来，如 SSM 框架。具体细节可参考：<a href=\"https://www.kofes.cn/2018/08/J2EE-SSM-1.html\">Java EE 之 SSM 框架配置与使用</a></p>\n</blockquote>\n<ul>\n<li><p><code>SSM 框架</code>：Spring MVC、Spring、MyBatis</p>\n<p>  SSM ( Spring + SpringMVC + MyBatis ) 框架集由 Spring、SpringMVC、MyBatis 三个开源框架整合而成，常作为数据源较简单的 Web 项目的框架。</p>\n</li>\n<li><p><code>Spring</code>：是一个轻量级的控制反转 (IoC) 和面向切面 (AOP) 的容器框架。</p>\n<blockquote>\n<p>与本文的 Spring 章节内容相同。</p>\n</blockquote>\n</li>\n<li><p><code>SpringMVC</code>：分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。</p>\n</li>\n<li><code>Mybatis</code>：<a href=\"http://blog.mybatis.org/\" target=\"_blank\" rel=\"noopener\">Mybatis</a> 是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs (Plain Old Java Objects，普通的 Java对象 ) 映射成数据库中的记录。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://blog.csdn.net/u012377333/article/details/50037825\" target=\"_blank\" rel=\"noopener\"> 一枪尽骚 · 魂. 基于全注解方式的SSH基础框架. csdn.net</a></li>\n<li>[2] <a href=\"http://blog.lunhui.ren/archives/225\" target=\"_blank\" rel=\"noopener\">刻下岁月. IntelliJ IDEA 2016.1.2 + Spring + Struts2 + Hibernate ( SSH ). lunhui.ren</a> </li>\n<li>[3] <a href=\"https://www.cnblogs.com/xieyupeng/p/7108141.html\" target=\"_blank\" rel=\"noopener\">kent. JavaEE SSH 三大框架整合 ( Spring + Struts2 + Hibernate ). cnblogs.com</a></li>\n<li>[4] <a href=\"https://www.cnblogs.com/hoobey/p/5508992.html\" target=\"_blank\" rel=\"noopener\">Starskyhu. Hibernate 各种主键生成策略与配置详解. cnblogs.cn</a></li>\n<li>[5] <a href=\"https://blog.csdn.net/chentiefeng521/article/details/58775415\" target=\"_blank\" rel=\"noopener\">陈铁锋. Hibernate 连接三种数据库的配置 ( SQL Server、Oracle、MySQL ). csdn.net</a></li>\n<li>[6] <a href=\"https://www.cnblogs.com/roadofstudy/p/7446690.html\" target=\"_blank\" rel=\"noopener\">RoadOfStudy. MySQL 5.7版本的root用户重置密码问题. cnbolgs.com</a></li>\n<li>[7] <a href=\"https://blog.csdn.net/time_tries_all/article/details/78571984\" target=\"_blank\" rel=\"noopener\">Time Tries All. MySQL 重置密码出现的一系列问题. csdn.net</a></li>\n<li>[8] <a href=\"http://www.souvc.com/?p=915\" target=\"_blank\" rel=\"noopener\">Souvc. 连接虚拟机 (Ubuntu16.04) 的 MySQL 服务器. souvc.com</a></li>\n</ul>\n","categories":["Project"],"tags":["J2EE","JSP","Spring","SSH","Hibernate","Struts"]},{"title":"所长林超的跨学科思维课：打破精神内耗的方法启示","url":"/2022/01/Interdisciplinary-Thinking.html","content":"<ul>\n<li>感谢 <a href=\"https://space.bilibili.com/520155988\" target=\"_blank\" rel=\"noopener\">@所长林超</a> 的《跨学科工具箱》思维课程，长达六个月的精神陪伴，愿称其为个人 2021 年度最具价值投资也不为过。学习常伴随着实践与反思，也许会有人不认同此形式的课程，会觉得课程内容泛泛而谈、道理都懂实践很难、付费课程等同割韭菜等。</li>\n<li>而个人见解，本通识课的核心价值更多是培养一种跨学科思维模式，启发我们要不断地储备不同学科的知识，不要割裂每个课堂所学的知识，要运用跨学科思维分析问题、解决问题。思维碰撞会激发自身更深刻的元认知，循环往复、不断提升我们认知维度、认知水平，促使着我们更深入理解世界。</li>\n<li>其次，方法论提供了一种非常虚幻的 “我学到了” 的感觉，我们不要止步于启发阶段，建议对感兴趣的学科系统化深入学习，储备相关领域知识，以打造属于自己的跨学科工具箱。就如《认知心理学重要模型》一课所启示的，类比认知的形成过程，只有把掌握的知识运用起来才能掌握智慧。为此，本笔记不会照搬课程内容，在基线之下融合更多个人见解及知识补充完成总结。但也因能力有限，若有不正确之处还请伙伴们帮忙指正。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">更新日期</th>\n<th style=\"text-align:left\">更新内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">20221231</td>\n<td style=\"text-align:left\">《回到真实世界》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221218</td>\n<td style=\"text-align:left\">《自我管理重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221217</td>\n<td style=\"text-align:left\">《生理学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221211</td>\n<td style=\"text-align:left\">《投资大师的思维模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221210</td>\n<td style=\"text-align:left\">《会计学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221204</td>\n<td style=\"text-align:left\">《现代哲学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221127</td>\n<td style=\"text-align:left\">《古代哲学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221126</td>\n<td style=\"text-align:left\">《历史学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221115</td>\n<td style=\"text-align:left\">《营销学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221030</td>\n<td style=\"text-align:left\">《信息论重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221029</td>\n<td style=\"text-align:left\">《人类学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20221028</td>\n<td style=\"text-align:left\">《经济学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20220220</td>\n<td style=\"text-align:left\">《概率统计学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20220220</td>\n<td style=\"text-align:left\">《语言表达领域重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20220116</td>\n<td style=\"text-align:left\">《心理学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20220115</td>\n<td style=\"text-align:left\">《金融学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211226</td>\n<td style=\"text-align:left\">《社会网络学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211225</td>\n<td style=\"text-align:left\">《认知心理学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211220</td>\n<td style=\"text-align:left\">《复杂性科学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211119</td>\n<td style=\"text-align:left\">《脑科学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211112</td>\n<td style=\"text-align:left\">《函数重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211109</td>\n<td style=\"text-align:left\">《工程学重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211105</td>\n<td style=\"text-align:left\">《系统论重要模型》笔记初稿</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20211104</td>\n<td style=\"text-align:left\">《热力学重要模型》笔记初稿</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"资料分享\"><a href=\"#资料分享\" class=\"headerlink\" title=\"资料分享\"></a>资料分享</h2><ul>\n<li>[书籍] 斯科特·佩奇. 模型思维 [M]. 浙江:浙江人民出版社, 2019</li>\n<li>[课堂] 陈平教授. 陈平的跨学科思维课 [OL]. Bilibili 付费课堂. 2021</li>\n</ul>\n<h2 id=\"热力学重要模型\"><a href=\"#热力学重要模型\" class=\"headerlink\" title=\"热力学重要模型\"></a>热力学重要模型</h2><ul>\n<li><p>熵：热力学中表征物质状态的参量之一，用符号 S 表示，其物理意义是体系混乱程度的度量。 </p>\n<blockquote>\n<p>S 跟物体或者系统可能的状态数成正相关关系。</p>\n</blockquote>\n</li>\n<li><p>熵与时间的关系：在封闭系统中，熵会随着时间推移而增加。</p>\n<blockquote>\n<p>补充几个概念：<code>孤立系统</code> 是没有物质交换且没有能量交换的系统。<code>封闭系统</code> 是没有物质交换但有能量交换的系统，比如年久失修的游泳池。<code>耗散结构</code> 可以从外界不断吸收能量、信息及物质，自身也可以不断地排出熵，比如河流。</p>\n</blockquote>\n</li>\n<li><p>混乱是常态，有序是需要 <code>刻意营造</code> 的。<code>感知和选择</code> 是可以让系统变得更有序的。在系统中，感知和选择需要输入能量、信息（以及物质），然后排除熵。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Energetics-Perception-Choice.svg\" alt> 系统有序运作的原理</p>\n</blockquote>\n</li>\n<li><p>人本身就是典型的耗散结构。生物学上，人是可以彻底重塑自己的，只不过需要的时间比预想的要长（四到七年）。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Energetics-People-DissipativeStructure.svg\" alt> 人的耗散结构</p>\n</blockquote>\n<ul>\n<li>启示1：管吃不管拉、管睡不管醒。因上努力，果上随缘。接纳熵的存在，不要阻止排出熵。</li>\n<li>启示2：依靠决心和自责是过不好这一生的，我们需要刻意改变耗散结构的输入。</li>\n<li>启示3：接纳抱怨、撒谎、懒惰、拖延，这些都是结果，关键在于改变系统输入，从而影响原因。</li>\n<li>启示4：已跌入封闭系统，如何减少熵？方法是 <code>感知和选择</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统论重要模型\"><a href=\"#系统论重要模型\" class=\"headerlink\" title=\"系统论重要模型\"></a>系统论重要模型</h2><ul>\n<li><p>系统：很多的实体他们通过相互联系，形成一个有运作规律的整体。</p>\n<blockquote>\n<p>比如生物系统、社会系统、机械系统、生态系统</p>\n</blockquote>\n</li>\n<li><p>系统包含三大组件：<code>要素</code>、<code>关系</code>、<code>作用</code>，排列组合得到四种系统模型，分别是良性循环、恶性循环、贤者时刻、回归平庸。</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th>组件</th>\n      <th>要素</th>\n      <th>关系</th>\n      <th>作用</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>正向</td>\n      <td>正要素</td>\n      <td>正关系</td>\n      <td>快作用</td>\n  </tr>\n  <tr>\n      <td>负向</td>\n      <td>负要素</td>\n      <td>负关系</td>\n      <td>慢作用</td>\n  </tr>\n  </tbody>\n  </table>\n\n<ul>\n<li>正要素：正信息（让世界减少不确定性）、正能量、资产</li>\n<li>负要素：负信息（让世界变得更加混乱）、负能量、负债</li>\n<li>快作用：干一件事情立马得到反馈。</li>\n<li>慢作用：在实际生活当中，作用侧重关注慢作用，它具有 <code>滞后效用</code>。</li>\n</ul>\n</li>\n<li><p>四种系统模型（构建系统论的根基）：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SysTheroy-Elements-Permutation-Combination.svg\" alt> 四种系统现象</p>\n<p><img src=\"/images/Reading/Interdisciplinary-Thinking/SysTheroy-Elements-Permutation-Combination-Scene.svg\" alt> 均值回归现象</p>\n</blockquote>\n<ul>\n<li>良性循环：正要素 + 正关系，欧皇模式</li>\n<li><p>恶性循环：负要素 + 正关系，非酋模式</p>\n<blockquote>\n<p>破解恶性循环，方法是寻找杠杆解。</p>\n</blockquote>\n</li>\n<li><p>贤者时刻：负要素 + 负关系</p>\n</li>\n<li><p>回归平庸：正要素 + 负关系</p>\n<blockquote>\n<p>其中，贤者时刻、回归平庸两者属于均值回归现象。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>每个系统都存在一个 <code>命门/胜负手/关键变量</code>。</p>\n<ul>\n<li>突破：寻找杠杆解（抓主要矛盾的主要方面）</li>\n<li>闭环：利用杠杆解改善系统，让系统进入良性循环体系</li>\n</ul>\n</li>\n<li><p>利用杠杆解改善系统：建立仪式，想法落实行动。其中仪式指代 <code>微习惯</code>，即从最小单元、最少起步成本的习惯做起；其次，是非意志力驱动做事，减少大脑意识消耗。</p>\n<blockquote>\n<p>利用 “工程学重要模型” 的拆解思维，微习惯也可以拆解成小目标，小目标还可以继续拆解成最小单元的 <code>Todo List</code>。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SysTheroy-LeverageSolution.svg\" alt> 杠杆解改善系统</p>\n</blockquote>\n</li>\n<li><p>一个拥有 <code>储蓄机制</code> 的良好系统，具备适应力、自组织与层次性三大特征。</p>\n<ul>\n<li><p>适应力：可理解为鲁棒性。</p>\n<blockquote>\n<p>模拟攻击：不断地主动让自己受小伤，留出时间让伤口恢复，再循环往复以训练适应力。比如健身、跳出舒适圈等。</p>\n</blockquote>\n</li>\n<li><p>自组织：非必要干预系统，而是控制系统的输入。</p>\n</li>\n<li><p>层次性：封装大大小小的子系统，模块化、标准化构建子系统。</p>\n<blockquote>\n<p>封装子系统：大事情分解成小事情，实现模块化管理；每一个模块拥有标准化的解决方案（类似设计模式中的模版方法），调度模块时无须再动脑即可执行。</p>\n<p>启示：一个人能长期坚持做自己觉得正确的事情，如何扛过漫长的滞后效应，真实情况并非决心、毅力、打鸡血，而是精神、情感、金钱上未雨绸缪的储蓄池。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工程学重要模型\"><a href=\"#工程学重要模型\" class=\"headerlink\" title=\"工程学重要模型\"></a>工程学重要模型</h2><ul>\n<li><p>艺术的核心是 <code>表达</code>，科学的核心是 <code>发现</code>，工程的核心就是 <code>实现</code>。</p>\n</li>\n<li><p>工程学共通的方法论：</p>\n<ul>\n<li>行胜于言</li>\n<li>分解思维</li>\n<li>量化思维</li>\n<li>清单思维</li>\n<li>取舍思维</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"行胜于言\"><a href=\"#行胜于言\" class=\"headerlink\" title=\"行胜于言\"></a>行胜于言</h3><ul>\n<li>行胜于言，行胜于断（不在大方向做判断）<ul>\n<li>工程学的搬砖思维：战术正确 &gt;&gt; 战略正确</li>\n<li>投资学的风口思维：战术正确 &lt;&lt; 战略正确</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"解构思维\"><a href=\"#解构思维\" class=\"headerlink\" title=\"解构思维\"></a>解构思维</h3><ul>\n<li>任何复杂事情都可拆分成易于操作的简单模块，然后逐项破解。</li>\n<li><p>纵观全局建立全局观（大目标），然后分解并聚焦局部（小目标），高度聚焦让我们更有把握完成事情。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Engineering-Deconstruction-Thinking.svg\" alt> 知行合一</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"量化思维\"><a href=\"#量化思维\" class=\"headerlink\" title=\"量化思维\"></a>量化思维</h3><ul>\n<li><p>关键在于应该计算什么，而不是执着于计算结果。</p>\n<blockquote>\n<p>比如，开一家奶茶店能否盈利？我们可以从假设一个目标开始，先找 <code>最容易</code> 想到的变量（店租、工资、运营成本、售价等），通过 <code>叙事继续找</code> 更多变量（加盟费、设备、原料等），将所有变量构建模型，通过简单 <code>四则运算</code> 即可量化该事情。</p>\n</blockquote>\n</li>\n<li><p>OKR（Object and Key Results）工作法：结合了工程学分解与量化的思想，OKR 模型从上而下分解，大目标越分解越具体；从左到右则是不断做量化，目标就是让它变得可跟踪、可追溯。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Engineering-OKR.svg\" alt> OKR 工作法</p>\n</blockquote>\n</li>\n<li><p>比如，构建个人精气神塑造计划，我们可设立关键结果 KR1 每周运动、KR2 每天按时睡觉、KR3 每周戒糖。KR1 可细分为工作日一次 Keep 简训，周六日有氧无氧结合训练。KR2 可细分工作日 23:45 前强制休息，周六日 01:45 前强制休息。KR3 可细分每周限定主动摄糖机会为两次。当然，实际操作中为了让目标收敛，我还设立了 “惩罚因子”。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Engineering-OKR-sample.png\" alt> OKR 工作法-个人实例</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"清单思维\"><a href=\"#清单思维\" class=\"headerlink\" title=\"清单思维\"></a>清单思维</h3><ul>\n<li><p>清单思维（Check List）</p>\n<ul>\n<li>呈现优先级</li>\n<li>让人专注 — 激光聚焦原理</li>\n<li>利于推敲</li>\n<li>节省脑资源：让费力不讨好的记忆 “外包” 出去</li>\n</ul>\n</li>\n<li><p>个人列清单经验：将日常事务区分为动态清单与静态清单。</p>\n<ul>\n<li>动态清单：又细分为期限清单与周期清单，即有截止期限的任务也有周而复始的任务依时间顺序分布于时间线，区分期限时间与周期时间是方便归档与回顾，我们侧重把精力放于优先次序上，有条不紊地执行时间线任务即可。</li>\n<li>静态清单：更像是不考虑时间因素的 Todo list。</li>\n</ul>\n</li>\n<li><p>当然，列清单是一种思维方法，更多列清单的方法论可参考 <a href=\"https://www.kofes.cn/2020/11/bullet-journal.html\">子弹笔记：书写别样精彩的笔记自传</a></p>\n</li>\n</ul>\n<h3 id=\"取舍思维\"><a href=\"#取舍思维\" class=\"headerlink\" title=\"取舍思维\"></a>取舍思维</h3><ul>\n<li>两点论（主要矛盾与次要矛盾，矛盾的主要方面与次要方面）与重点论（把握主要矛盾的主要方面）</li>\n<li>不可能三角：时间、质量、成本<ul>\n<li>工程师：偏向于低成本与响应快</li>\n<li>艺术家：偏向于高质量</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数重要模型\"><a href=\"#函数重要模型\" class=\"headerlink\" title=\"函数重要模型\"></a>函数重要模型</h2><ul>\n<li><p>函数：把一个变量跟另外一个变量一一对应起来的 <code>图</code>。</p>\n<blockquote>\n<p>数无形时少直觉，几何图形真好用。</p>\n</blockquote>\n</li>\n<li><p>时间函数（时间序列）：提供我们穿透时间，预测未来的上帝视角。</p>\n<blockquote>\n<p>启示：一叶障目，不见泰山。普通人在生活中遇到的最大挑战是短视，近况会极大影响我们对未来的判断。</p>\n</blockquote>\n<ul>\n<li><p>高德纳曲线（Gartner Curve, Hipercircle 模型）：一项新技术出现，世界会因为这个技术过度乐观，但当项目落地一刻大家又会重新陷入过度悲观。随着时间推移，技术逐渐淡出人们视线但它又会逐渐成长起来。</p>\n<blockquote>\n<p>启示：诸如机器学习、区块链等新兴技术，坚信它们对生产力的提升是有帮助的，虽然技术不能一蹴而就、落地马上运作起来，但我们可以拉长战线、长期保持学习。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Fuction_Garther_Default.png\" alt> 新兴技术成熟度曲线</p>\n</blockquote>\n</li>\n<li><p>社会毒打曲线</p>\n<blockquote>\n<p>启示：不要高估短期能发生的变化，不要低估长期能发生的变化。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Fuction_Garther_Social_Temper.png\" alt>  社会毒打曲线</p>\n</blockquote>\n</li>\n<li><p>正（余）弦函数：波动是时间的伴侣，纵观时间线，发现黎明前的黑暗或者黑夜前的黄昏。</p>\n</li>\n</ul>\n</li>\n<li><p>指数函数：$y = a^x, a&gt;0, a \\neq 1$</p>\n<ul>\n<li>开始缓慢，突然爆发。早期发展极其迷惑性。</li>\n<li>若其中一个 <code>关键链路</code> 断掉，整个增长模型即崩溃。</li>\n</ul>\n</li>\n<li><p>对数函数：指数函数的反函数，$y=log_{a^x}, a&gt;0, a \\neq 1$</p>\n<ul>\n<li>先快后慢，出道既巅峰。</li>\n<li>玻璃顶效应<ul>\n<li>时间约束：外卖行业</li>\n<li>空间约束：共享单车行业</li>\n<li>青春约束：模特行业</li>\n<li>内在价值约束： 保健品行业</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>四大人生职业类型：指数函数、对数函数、凸幂函数、凹幂函数</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Fuction_Career.png\" alt> 四大人生职业类型</p>\n</blockquote>\n<ul>\n<li>短期职业境遇：对数型，比如网红</li>\n<li>中期职业境遇：指数型，比如风口创业者</li>\n<li>长期职业境遇：凹凸幂律型，比如学者、专家</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"脑科学重要模型\"><a href=\"#脑科学重要模型\" class=\"headerlink\" title=\"脑科学重要模型\"></a>脑科学重要模型</h2><ul>\n<li><p>三元脑模型：爬行脑、哺乳脑、人类脑</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th>三层模型</th>\n      <th>结构</th>\n      <th>功能</th>\n      <th>备注</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>爬行脑</td>\n      <td>脑干+小脑</td>\n      <td>自动驾驶</td>\n      <td>呼吸 (唯一可自主控制)、心跳、体温、情感、习惯、上瘾</td>\n  </tr>\n  <tr>\n      <td>哺乳脑</td>\n      <td>边缘系统</td>\n      <td>快决策</td>\n      <td></td>\n  </tr>\n  <tr>\n      <td>人类脑</td>\n      <td>新皮质</td>\n      <td>慢决策<br>分析推理</td>\n      <td></td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n<li><p>刻意练习：知行合一和不断进步的关键，在于利用更加容易控制的人类脑去驯化不可控的哺乳脑过程。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Neuroscience-Practise-on-Purpose.svg\" alt>  刻意练习</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"宏观层面理解大脑\"><a href=\"#宏观层面理解大脑\" class=\"headerlink\" title=\"宏观层面理解大脑\"></a>宏观层面理解大脑</h3><ul>\n<li><p>人类脑：人类新皮质四大脑区，额叶、顶叶、枕叶、颞叶</p>\n<ul>\n<li><p><code>额叶</code>（Front lobe）：智慧、分析、判断、推理、社交、自控、学习、语言、洞察</p>\n<ul>\n<li><p><code>前额叶皮质</code>：计划、分析、判断、专注、社交、自控</p>\n<ul>\n<li>大器晚成：一定年龄才能发育成熟（15~25岁高速发展阶段）</li>\n<li><p>此消彼涨：</p>\n<ul>\n<li>人类前额叶皮质变得越来越专注优先发展更高维度的信息处理能力，为了更快更多处理信息，即有大量的神经元被用于理解信息、分析信息、判断信息。</li>\n<li><p>该区域发展自控的神经元资源就会被削减。</p>\n<blockquote>\n<p>启示：自控力发展慢，成熟就晚，越晚成熟对世界理解的维度也就越高。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>布洛卡区</code>：语言表达</p>\n<blockquote>\n<p>启示：布洛卡区也存在大量镜像神经元， 换一维度理解学习语言的本质就是模仿和社交。</p>\n</blockquote>\n</li>\n<li><p><code>威尔尼克尔区</code>：理解语言</p>\n</li>\n<li><p><code>前运动皮质</code> / <code>初级运动皮质</code>：运动区，直接控制脊柱。镜像神经元直接控制运动区。</p>\n</li>\n</ul>\n</li>\n<li><p><code>顶叶</code>（Parietal lobe）：统筹协调、整合信息、空间想象力、数学</p>\n<blockquote>\n<p>具备突然性和天然性，类似开窍、醍醐灌顶、大师我悟了。</p>\n</blockquote>\n</li>\n<li><p><code>枕叶</code>（Occipital lobe）：视觉处理</p>\n<blockquote>\n<p>比如后脑勺被猛敲一下，马上感觉到眼前一黑。</p>\n</blockquote>\n</li>\n<li><p><code>颞叶</code>（Temporal lobe）：语言理解、面部识别、洞察力、学习记忆</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th>部位</th>\n      <th>功能</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>颞上回</td>\n      <td>听觉处理和记忆</td>\n  </tr>\n  <tr>\n      <td>颞中回</td>\n      <td>语言捕捉和记忆</td>\n  </tr>\n  <tr>\n      <td>颞下回</td>\n      <td>人脸识别和记忆</td>\n  </tr>\n  </tbody>\n  </table>\n\n<ul>\n<li>启示1：人类大脑处理视觉的区域有枕叶和颞叶（颞下回），听觉的区域有颞叶（颞上回）。给别人讲大道理是很难听进去的，人言传不如身教，一图胜千言。</li>\n<li><p>启示2：唤醒脑区域越多，知识掌握越深刻，比如 <code>费曼学习法</code>（想要习得某项知识，可以学习教会别人）。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Neuroscience-Feynman.svg\" alt> 费曼学习法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>哺乳脑：边缘系统，负责长期记忆、情绪管理、性唤醒、嗅觉</p>\n<ul>\n<li><code>扣带回</code>：情感、焦虑、痛苦、自我调节、负面想象</li>\n<li><p><code>杏仁核</code>：恐惧、愤怒、兴奋、战/逃</p>\n<ul>\n<li>连接着人类脑、哺乳脑以及爬行脑，三大脑区的交汇点，是 “理性” 和 “本能” 的中转站。</li>\n<li><p>遇到恐惧时会切断人类脑的联系，只留下本能在发挥作用，即恐惧会让一个聪明人瞬间变成 “白痴”。改善方式只能是通过身临其境体验去训练杏仁核的反应模式，别无他法。</p>\n<blockquote>\n<p>比如要向学会炒股，可以先交学费，即亏后不清仓不急于止损（最好是亏到冒冷汗、背脊发凉恐惧的地步），直至熬回本并赚钱。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>基底神经节</code>：操作技巧、习惯养成、奖赏系统、上瘾系统</p>\n</li>\n<li><code>下丘脑</code>：出汗、体温、口渴、血压、心率、饥饿、性、颤抖、养育本能、生物钟</li>\n</ul>\n</li>\n<li><p>爬行脑 —&gt; 小脑：条件反射、保持平衡、身体协调</p>\n<ul>\n<li><code>小脑</code>：条件反射、保持平衡、身体协调</li>\n<li><code>脑干</code>：睡意、警报、呼吸、消化、体温</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微观层面理解大脑\"><a href=\"#微观层面理解大脑\" class=\"headerlink\" title=\"微观层面理解大脑\"></a>微观层面理解大脑</h3><ul>\n<li>神经元：神经元细胞，是神经系统最基本的结构和功能单位，分为细胞体（细胞核、细胞膜、细胞质）和突起（树突和轴突）两部分。</li>\n<li>髓鞘质：如果把大脑突触的轴突部分比喻成导线，那么髓鞘质就好像包裹在导线外层的绝缘体。</li>\n<li><p>已知神经元之间传递信号实际上是一种脉冲状的电化学信号，信号传递会随着距离逐渐衰减。髓鞘质能够大大减少信号的衰减，从而保证信号的传递稳定快速。</p>\n<blockquote>\n<p>若绝缘体越厚，神经元间电信号就能传播得越稳越快。反之，绝缘体破损 “漏电”，神经元间传递信号会漏电，也是造成 <code>注意力不足</code> 的生理因素。</p>\n</blockquote>\n</li>\n<li><p>做一件事情会激发相关联的一批神经元，如果只激活一次则是一次连接而已。若要形成新的技能和习惯，必须不断重复，这样才能让一起被激活的神经元逐渐链接起来，最终形成稳固的链路。</p>\n<ul>\n<li>启示 1：刻意练习，有针对性的重复练习，并且关键步骤放慢速度。原理就是调度更多脑区，观察事物有利形成新的髓鞘质。</li>\n<li><p>启示 2：富兰克林训练法（自我训练方法）— 横轴表示重复程度，纵轴表示选择专注。个人经验，在原方法的表格上多加入一个维度，即当完成某项能力训练时使用圆点打卡，圆点颜色深浅表示完成程度或者满意度，时刻警醒自我既要有量也要有质，防止后期陷入 “计划绑架” 的窘境，纯粹为了打卡而打卡。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Neuroscience-Franklin-Training.svg\" alt> 富兰克林训练法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"复杂性科学重要模型\"><a href=\"#复杂性科学重要模型\" class=\"headerlink\" title=\"复杂性科学重要模型\"></a>复杂性科学重要模型</h2><ul>\n<li>复杂系统：大量个体 <code>聚集</code> 后，通过个体简单运作产生群体复杂行为，并且能通过 <code>进化</code> 产生适应性的一种系统。</li>\n<li>复杂性科学：复杂性科学是运用跨学科方法，研究不同 <code>复杂系统</code> 之中的 <code>涌现</code> 行为和 <code>统一性</code> 规律。</li>\n</ul>\n<h3 id=\"聚集\"><a href=\"#聚集\" class=\"headerlink\" title=\"聚集\"></a>聚集</h3><ul>\n<li><p>聚集并不一定产生复杂系统，但复杂系统必定出现聚集现象。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Complexity-Science-Accumulation.svg\" alt>  复杂系统的聚集现象</p>\n</blockquote>\n</li>\n<li><p>什么样的聚集行为不能产生复杂系统？</p>\n<ul>\n<li>集体智慧（ “1+1&gt;2” 效果 ）：单体简单、规则简单深刻，多元化（互补）从而集体和谐。</li>\n<li><p>集体愚蠢（ “1+1&lt;2” 效果 ）：单体复杂、各有想法，规则复杂肤浅，同质化（内耗）从而集体内卷。</p>\n<blockquote>\n<p>比如塞车现场、大学生求职等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>蚁群算法：单体简单 -&gt; 集体智慧，即简单规则不断重复，一定时间后聚集在最短路径上。</p>\n<ul>\n<li>数量为王：派大量蚂蚁</li>\n<li>规则简单：释放信息素</li>\n<li><p>行为简单：跟踪信息素</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Complexity-Ant-Colony-Algorithms.svg\" alt> 蚁群算法运作原理</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>聚焦四段论：</p>\n<ul>\n<li>Step.01：清理念头 <code>半小时</code></li>\n<li>Step.02：忘我聚焦 <code>两小时</code> — 心流状态</li>\n<li>Step.03：刻意休息 — 来之不易的娱乐时刻，好好规划尽情放松</li>\n<li>Step.04：惯性工作 $x$ 小时</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"涌现\"><a href=\"#涌现\" class=\"headerlink\" title=\"涌现\"></a>涌现</h3><ul>\n<li><p>涌现：随着成员数量增加，链接数会不断增加，而增加的链接度超过某一临界值时，就会出现涌现。</p>\n<ul>\n<li><p>单体数量够多，单体之间有链接，链接数足够多时，才会出现涌现。</p>\n<blockquote>\n<p>比如，大脑中的足够多的神经元（单体）聚集起来，并相互链接，从而产生意识/智慧。</p>\n</blockquote>\n</li>\n<li><p>涌现具有层次性，逐层递进，逐层涌现。</p>\n</li>\n</ul>\n</li>\n<li><p>启示：最小内核决策模型</p>\n<ul>\n<li>投入产出比</li>\n<li>成本收益比</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><ul>\n<li><p>迭代：任何复杂事情，不能一蹴而就，理性接受从一个相对粗糙的版本不断优化变成一个相对完美的版本。</p>\n<blockquote>\n<p>软件开发模式中的快速原型模式。</p>\n</blockquote>\n<ul>\n<li>最小可用产品</li>\n<li>产品市场契合点</li>\n</ul>\n</li>\n<li><p>启示：坚毅的本质和精髓</p>\n<ul>\n<li>钢笔写目标，铅笔画道路</li>\n<li>道路很灵活，目标很坚定</li>\n</ul>\n</li>\n<li><p>启示：现今很多人在画道路的过程中会放弃（原地踏步），理解真实情况的迭代很重要。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Complexity-Iteration.svg\" alt> 真实情况的迭代</p>\n</blockquote>\n</li>\n<li><p>迭代的相反面：顶层设计、大力出奇迹、集中精力办大事</p>\n<blockquote>\n<p>比如中国芯片卡脖子问题。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"适应性\"><a href=\"#适应性\" class=\"headerlink\" title=\"适应性\"></a>适应性</h3><ul>\n<li><p>适应性循环：伤害 -&gt; 恢复 -&gt; 变强，比如锻炼身体、锻炼意志，甚至锻炼一个国家。</p>\n<ul>\n<li><p>走出舒适圈但别走太远：</p>\n<ul>\n<li>厚积薄发：成果圈远小于能力圈</li>\n<li>适度挑战：成长圈大于能力圈，即跳出舒适圈</li>\n<li><p>不要作死：不要越过死亡圈，面临多种挑战，遭受多重失败打击（杠杆过大）</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Complexity-Adt-Comfort-Zone.svg\" alt> 适度走出舒适圈</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>周而复始寻找涌现时刻：人生就是不断在寻找擅长、喜欢以及在市场赚钱的事物，三种事物交汇点就是人生当中既能让你爽又能赚钱，且能发挥自身能力的最佳生活体验。但艰难的是，绝大部分时间我们都在三种状态下左右横条，历经艰辛、不下牌桌，我们终究会将找到最佳平衡状态。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Complexity-Skills-Enjoy-Earning.svg\" alt> 人生需要一个涌现时刻</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"认知心理学重要模型\"><a href=\"#认知心理学重要模型\" class=\"headerlink\" title=\"认知心理学重要模型\"></a>认知心理学重要模型</h2><blockquote>\n<p>参考书籍：罗伯特·索尔所.《认知心理学》[M]. 上海人民出版社, 2019</p>\n</blockquote>\n<ul>\n<li><p>认知心理学：对于自我和世界认知的感觉、记忆、理解以及思考的全过程进行研究的学问。</p>\n</li>\n<li><p>分析框架：人类记忆处理过程模型，人类在接受刺激与产生回应之间的一系列内在处理过程的步骤分解。</p>\n<ul>\n<li>首先，一个外部刺激会通过人类感觉器官进入 <code>短时记忆存储器</code>。</li>\n<li>然后，短时记忆在短时间内得到复述，那么这个记忆有可能进一步保留到 <code>长时记忆存储器</code>；相反，不在短时记忆存储被及时复述，它将进入 <code>消退记忆存储库</code>。</li>\n<li><p>整个过程又受到 <code>控制处理器</code> 的监工，我们的意识、反思以及注意力分配全部都在该功能区域实现的。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-Human-memory-proc.svg\" alt> 人类记忆处理过程模型</p>\n</blockquote>\n<blockquote>\n<p>通常地，长时记忆认为是永久的，短时记忆不超过 30 秒，感觉记忆只有几百毫秒。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"感觉存储\"><a href=\"#感觉存储\" class=\"headerlink\" title=\"感觉存储\"></a>感觉存储</h3><ul>\n<li><p>记忆存储大漏斗</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-Feel-storage.svg\" alt> 感觉存储大漏洞</p>\n</blockquote>\n</li>\n<li><p>语义屏蔽：即选择性充耳不闻、带着有色眼镜看世界</p>\n<blockquote>\n<p>启示：进入新行业、新公司，多使用它们日常生活的常用词汇。比如互联网行业（日活月活转化率、痛点赋能最小闭环）、金融行业（北上南下）等。其中，日常生活词汇可以从行内人士聚会中习得。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"短时记忆\"><a href=\"#短时记忆\" class=\"headerlink\" title=\"短时记忆\"></a>短时记忆</h3><ul>\n<li><p>詹姆斯记忆系统模型</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-James-memory-model.svg\" alt> 詹姆斯记忆系统模型</p>\n</blockquote>\n<blockquote>\n<p>启示：过脑子极简原理，自身不太在意但又不得不记住的事情，可尝试 3 秒内默默进行 1 次复述，然后 12 秒内默默进行 2 次复述。</p>\n</blockquote>\n</li>\n<li><p>首因近因效应 / 雷斯多夫效应：比如背单词</p>\n<ul>\n<li>首因近因效应：总是记住字母表开头（或结束）开头的几个单词，比如 abandon</li>\n<li>雷斯多夫效应：词汇表中较怪异的单词容易被记住</li>\n</ul>\n</li>\n<li><p>峰终定律</p>\n<ul>\n<li>人们对一段体验的评价（好/坏）由两个因素决定，一个是过程中的最强体验，一个是结束前的最终体验。</li>\n<li><p>本质不是平均发力，而是力气要用在刀刃上，营造巅峰体验，同时保证过程中不要捅娄子留下差印象。</p>\n<blockquote>\n<p>启示：安排约会、组织活动、做好一款产品等，侧重设计开头和结尾的仪式感和惊喜感，以及避免中间过程中出现极糟糕的体验。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"控制处理器\"><a href=\"#控制处理器\" class=\"headerlink\" title=\"控制处理器\"></a>控制处理器</h3><ul>\n<li><p>选择性注意：<code>意识控制</code> 着你的感觉系统，<code>刻意聚焦</code> 在一些你关注的东西上的最好表现。</p>\n<blockquote>\n<p>启示：团队管理中如何帮助下属成长 <code>16字要诀</code>。我说你听，你说我听，我做你看，你做我看。</p>\n</blockquote>\n</li>\n<li><p>刻意选择 V.S. 随意选择</p>\n<blockquote>\n<p>启示：每个都可拥有一种 “探照灯” 模式，有人的随处乱摆，也有人类似激光一样长时间、高度聚焦某一处，产生惊人效果。不同探照灯模式很大程度决定了人生效率。</p>\n</blockquote>\n</li>\n<li><p>意识的研究</p>\n<ul>\n<li><p>意识的组成：<code>AWAREness</code> 模型，分别由注意、觉醒、构筑、知识以及感情五个层面构成。</p>\n<ul>\n<li>注意（Attention）：类似 “探照灯”，即有聚焦程度区分（激光聚焦对标刻意选择，远光灯照射对标模糊选择）、也有照射范围的区分（内观、外观）</li>\n<li>觉醒（Wakefulness）：大脑觉醒、清醒的程度</li>\n<li>构筑（Architecture）：承载我们意识的具体大脑位置</li>\n<li><p>知识（Recall of Knowledge）</p>\n<ul>\n<li>自我知识：自我觉察、自我认知（年轻时侧重关注）</li>\n<li><p>世界知识：除了我以外的所有知识</p>\n<blockquote>\n<p><code>现象</code>：学生时代世界知识越丰富、涉猎范围越广，自我知识相对显得匮乏。<br><code>启示</code>：真实的高手不需要什么都知道，他只需非常清晰地知道自己能干好什么以及干不好什么，然后保持高度聚焦。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>感情（Emotion）：意识通常掺杂着情感的底色，我们观察任何事物时都会带着一种原始的厌恶和喜欢的感情在里面，为此情感是意识最不为人知的组成部分。</p>\n</li>\n</ul>\n</li>\n<li><p>意识的功能</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-Awareness-function.svg\" alt> 意识的功能</p>\n</blockquote>\n<ul>\n<li><p>自我监视：元认知（自省），可以无限叠加层次性（套娃 Buff）。系统的每一层次提升就是一次维度的提升，每叠加一个层次都能产生巨大的升级威力。</p>\n<p>  [例] 研究做一张桌子 -&gt; 研究做一张桌子的方法 -&gt; 研究做桌子的方法的方法</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-Metacognition.svg\" alt> 元认知模型</p>\n</blockquote>\n<blockquote>\n<p>启示：提升自省能力的方法 -&gt; 丰田5WHY分析法，了解一件事情发生背后的原因可连问多个为什么（刨根问底）。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"长时记忆\"><a href=\"#长时记忆\" class=\"headerlink\" title=\"长时记忆\"></a>长时记忆</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-Long-term-memory.svg\" alt> 长时记忆</p>\n</blockquote>\n<ul>\n<li><p>外显记忆：陈述性记忆，通常存留在大脑新皮质区域，只能通过实际去做才能知道如何操作。</p>\n<ul>\n<li><p>情景记忆：该类记忆细节很容易改变、容易遗失，随着时间推移，我们有时候会不自觉地替换其中的元素。</p>\n<blockquote>\n<p>启示：经验主义，调度情景记忆，会随着时间推移而越发不靠谱。</p>\n</blockquote>\n</li>\n<li><p>语义记忆：对词汇、概念以及抽象概念的记忆。</p>\n<blockquote>\n<p>启示：凭借方法论做事，调度语义记忆，随着时间推移但一直保持稳定发挥。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>内显记忆：非陈述性记忆，通常存留在大脑的边缘系统和小脑。</p>\n</li>\n<li><p>记忆的漏洞：眼见不一定为实，我们会 “篡改世界”，这也是我们难以客观理解世界的根本原因。</p>\n<ul>\n<li>省略（Dmission）：本能地把不合逻辑或者不符合我们预期的信息省略，比如推卸责任。</li>\n<li>合理化（Rationalization）：不自觉添加信息来帮助解释某些不协调的地方。</li>\n<li>信息转换：把不熟悉的词汇替换成熟悉的词汇。</li>\n<li>顺序转换：把印象深刻的事情提前，把不太熟悉的事情置后了。</li>\n<li><p>个人态度：个人价值观决定回忆的情节。</p>\n<blockquote>\n<p>TVB剧集《大时代》中丁蟹，把该特性表现得淋漓尽致。</p>\n</blockquote>\n</li>\n<li><p>自我记忆图式：记忆偏差，跟 “我” 有关的记忆难度最低。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-PersonalMemoryDiagram.png\" alt> 自我记忆图式</p>\n</blockquote>\n<blockquote>\n<p>启示：想要让自己（对方）记住一个知识点，就要思考怎么把这个知识跟自己（对方）联系在一起。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>遗忘</p>\n<ul>\n<li>艾宾浩曲线</li>\n<li>耶克斯道森法则：倒 U 型曲线，适度承压是唤醒大脑机能的最佳法则。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"认知系统\"><a href=\"#认知系统\" class=\"headerlink\" title=\"认知系统\"></a>认知系统</h3><ul>\n<li><p>认知系统的形成：人类从接触事物到产生智慧中间会出现以下层级</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/CognitivePsychology-CognitiveSys.svg\" alt> 认知系统的形成</p>\n</blockquote>\n<ul>\n<li>启示1：清晰辨别是一切的基础，注意力不集中、诅丧、焦虑、懒散、空虚等，都是我们大脑丧失了清晰辨别的能力，而陷入一种 <code>大脑模糊状态</code>。</li>\n<li>启示2：如何让大脑变得清晰：会谈使人敏捷，书写使人精确。<ul>\n<li>会谈不局限于跟别人谈，也可以跟自己谈</li>\n<li>书写不局限于文字书写，也可以边写边画边记忆（费曼学习法）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"社会网络学重要模型\"><a href=\"#社会网络学重要模型\" class=\"headerlink\" title=\"社会网络学重要模型\"></a>社会网络学重要模型</h2><ul>\n<li><p>三种人类通讯网络模式 — Paul Baran</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SocialNetworking-Communication-network.svg\" alt> 人类通讯网络模式</p>\n</blockquote>\n<ul>\n<li>中心时网络：所有节点指向一个核心节点的网络构成模式。</li>\n<li>分散式网络：所有节点都会指向一个局部中心节点，局部节点再指向最终的中心节点的模式。</li>\n<li>分布式网络</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"结构洞\"><a href=\"#结构洞\" class=\"headerlink\" title=\"结构洞\"></a>结构洞</h3><ul>\n<li><p>结构洞（Structural hole）：两个群体之间缺少联系，中间会出现一种空洞。若有一个人把两团体联系在一起补充该空洞，这个人即占据了结构洞的位置。</p>\n<blockquote>\n<p>启示：作为刚入职的年轻人，有能力、有机会占据传统大机构里面向年轻人沟通的位置，在该机构里会比同龄人得到更多晋升机会。比如中国联通、招商银行的 Bilibili 运营媒体人。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"中心度\"><a href=\"#中心度\" class=\"headerlink\" title=\"中心度\"></a>中心度</h3><ul>\n<li><p>中心度（Centrality）：衡量节点重要性指标</p>\n<ul>\n<li>度中心度：联系数量</li>\n<li><p>特征向量中心度：联系质量</p>\n<blockquote>\n<p>比如：某人 A 中微信好友 100 个都是贷款中介，某人 B 中微信好友 50 个都是私人银行客户，两人链接的财富程度，A 的特征向量中心度较 B 高。</p>\n</blockquote>\n</li>\n<li><p>传播中心度：影响范围</p>\n<blockquote>\n<p>比如：自己是 B 站 Up 主或者认识众多 Up 主，那么后者的传播中心度更大。</p>\n</blockquote>\n</li>\n<li><p>中介中心度：类似结构洞，处于协调网络的独特位置。</p>\n<blockquote>\n<p>比如：黑帮的管理模式，幕后大佬 —&gt; 大头目 —&gt; 小头目。幕后大佬的连接数虽少，但连接质量及影响范围很大。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>中心度的具体量化方法</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SocialNetworking-Centrality-Quantification.svg\" alt> 中心度的具体量化方法</p>\n</blockquote>\n<table>\n<thead align=\"center\">\n    <tr>\n    <th width=\"25%\">度量方式 \\ 节点</th>\n    <th>A</th>\n    <th>B</th>\n    <th>C</th>\n    <th>D</th>\n    <th>E</th>\n    </tr>\n</thead>\n<tbody align=\"center\">\n      <tr>\n    <td>度中心度</td>\n    <td>8</td>\n    <td>2</td>\n    <td>4</td>\n    <td>3</td>\n    <td>2</td>\n      </tr>\n    <tr>\n    <td>特征向量中心度</td>\n    <td>8</td>\n    <td>2</td>\n    <td>4</td>\n    <td>$\\color{green}{11}$</td>\n    <td>$\\color{green}{10}$</td>\n    </tr>\n    <tr>\n    <td>传播中心度</td>\n    <td>8</td>\n    <td>12</td>\n    <td>7</td>\n    <td>6</td>\n    <td>2</td>\n    </tr>\n</tbody>\n</table>\n\n<ul>\n<li>特征向量中心度：将某节点相邻连接的节点权重相加起来。</li>\n<li><p>即传播中心度：将某节点的一二度联系人的数量相加起来。</p>\n<blockquote>\n<p>A -&gt; B：即 A 是 B 的一度联系人；A 的子节点 -&gt; B：A 的子节点是 B 的二度联系人。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示：面对同样的人群，从不同需求的角度来看，对人群中不同人重要性评估也是不一样的。比如加入 xx 微信群，目标不同服务人群也不同。</p>\n<ul>\n<li>发言质量高 &lt;— 了解信息</li>\n<li>最有钱的人 &lt;— 寻找理财客户</li>\n<li>群主 / 位高权重的人 &lt;— 结交人脉</li>\n<li><p><code>?</code> &lt;— 寻找工作机会</p>\n<blockquote>\n<p>思考：结识什么样的人，对寻找工作有帮助？ — <code>弱联系</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"弱联系\"><a href=\"#弱联系\" class=\"headerlink\" title=\"弱联系\"></a>弱联系</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SocialNetworking-Weak-ties.svg\" alt> 强联系 V.S. 弱联系</p>\n</blockquote>\n<ul>\n<li><p>弱联系：认识但不熟（思想、思维碰撞）</p>\n<blockquote>\n<p>关系不强，力量不弱</p>\n</blockquote>\n</li>\n<li><p>强联系：认识且很熟（价值观趋同、亲朋戚友、同事同学）</p>\n<blockquote>\n<p>物以类聚，人以群分</p>\n</blockquote>\n</li>\n<li><p>启示：如何高效发展弱联系，使得边际效用最大化</p>\n<ul>\n<li>不要 “蜻蜓点水” 般认识人</li>\n<li>多结识 “结构洞” 类型的人</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"人际网络\"><a href=\"#人际网络\" class=\"headerlink\" title=\"人际网络\"></a>人际网络</h3><ul>\n<li><p>小世界网络：正是由于小世界现象的发生，结构洞的人才显得尤为重要。</p>\n<blockquote>\n<p>比如，学术圈、币圈、潮玩圈</p>\n</blockquote>\n</li>\n<li><p>无尺度网络：链接呈现幂率分布，而非正态分布，即赢家通吃效应。</p>\n<ul>\n<li>正态分布：大多数节点拥有相同链接数，不存在拥有大量链接的节点。</li>\n<li>幂率分布：大多数节点只拥有少数链接，少数枢纽拥有大量链接。</li>\n</ul>\n</li>\n<li><p>无尺度网络现象的出现条件</p>\n<ul>\n<li><p>处于不断扩张的状态</p>\n<blockquote>\n<p>比如，高速扩张的公司会不断招人、人们领域会不断有论文出现等。</p>\n</blockquote>\n</li>\n<li><p>逐渐链接：新加入的节点会自发性地向高质量节点链接</p>\n<blockquote>\n<p>思考：先发优势节点会成为最大受益方，如何打破赢家通吃的诅咒？<br>方案：<code>适应度模型</code> / <code>价值网络模型</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>适应度模型：进入一个行业想要打破论资排辈的现象、弯道超车，则需要：</p>\n<ul>\n<li>跟前辈维度完全不同的玩法，带来全新吸引力。也就是网络中吸引新进节点，让它们放弃追逐旧节点链接的王者。</li>\n<li><p>这种创新不必从头来过，可跨界融合。</p>\n<blockquote>\n<p>比如，剧本杀=狼人杀+编剧；文和友=餐饮业+博物馆</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>价值网络模型：很多成熟的公司在面临技术变革时会遭受失败，其原因是成熟的上下游关系，越成熟它们的自我保护效应愈加明显。</p>\n<blockquote>\n<p>启示：改变一个节点难以改变整个网络形态，需要同时改变很多重要节点。</p>\n</blockquote>\n</li>\n<li><p>启示：当我们 <code>从无到有</code> 创造新事物来逆袭时</p>\n<ul>\n<li>适应度模型，在微观层面创造体验来逆袭。</li>\n<li>价值网络模型：在宏观层面抓住红利（技术变革、市场变革等）来逆袭。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基本再生数\"><a href=\"#基本再生数\" class=\"headerlink\" title=\"基本再生数\"></a>基本再生数</h3><ul>\n<li>比如疾病传播，感染者会让多少其他人受到新的感染，若基本再生数：<ul>\n<li>大于 1，则疾病会蔓延</li>\n<li>小于 1，则疾病会消亡</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"差序格局\"><a href=\"#差序格局\" class=\"headerlink\" title=\"差序格局\"></a>差序格局</h3><ul>\n<li><p>差序格局：把中国传统社会每个人的社交关系比作一个水波纹、涟漪式扩散的同心圆，越接近中心越亲密，反之则越疏远。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SocialNetworking-Diff-Order-Pattern.svg\" alt> 差序格局</p>\n</blockquote>\n<ul>\n<li>家人连带关系，遵循需求原则</li>\n<li><p>熟人关系，遵循人情原则</p>\n<blockquote>\n<p>启示：现代城市年轻人日常关系里占比最大的一层关系，比如同学关系、同事关系等。处理这一层的关系技巧在于，既要把账算清楚，也要讲情感以兄弟姐妹相称，互相之间相互帮助则欠下了人情，还人情过程便建立起私交。</p>\n</blockquote>\n</li>\n<li><p>认识关系，遵循公平原则</p>\n</li>\n</ul>\n</li>\n<li><p>启示：</p>\n<ul>\n<li>从陌生人发展到认识关系，可遵循公平则，讲究对等交换。</li>\n<li><p>从认识关系发展到熟人关系，超出公平原则，给予对方超额回报，留下人情债。</p>\n<blockquote>\n<p>人情债：<code>索取前</code> 先给予 <code>适度慷慨</code>，实际上是帮助你在跨越社交圈或者阶层时最有力的武器。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"非正式组织\"><a href=\"#非正式组织\" class=\"headerlink\" title=\"非正式组织\"></a>非正式组织</h3><ul>\n<li><p>非正式组织：以情感、兴趣、爱好和需求为中心，没有正式文件规定的自发形成的社会组织。组织成员会自觉维护非正式组织的声誉。</p>\n<blockquote>\n<p>启发：既要看到组织的阳面，也要留意组织的阴面。比如校友群、健身群、没有老板的群等。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"金融学重要模型\"><a href=\"#金融学重要模型\" class=\"headerlink\" title=\"金融学重要模型\"></a>金融学重要模型</h2><h3 id=\"宏观经济\"><a href=\"#宏观经济\" class=\"headerlink\" title=\"宏观经济\"></a>宏观经济</h3><ul>\n<li><p>宏观经济学入门推荐短片：《<a href=\"https://www.bilibili.com/video/av6496369\" target=\"_blank\" rel=\"noopener\">经济机器是怎样运行的</a>》</p>\n</li>\n<li><p>本章节更偏向于 “非专业人士” 的金融入门课</p>\n  <table>\n  <thead align=\"center\">\n      <tr>\n      <th>专业人士</th>\n      <th>非专业人士</th>\n      </tr>\n  </thead>\n  <tbody align=\"center\">\n      <tr>\n      <td>金融机构如何运作<br>金融工具如何开发<br>给专业人士听的课</td>\n      <td>日常生活的金融行为<br>我们所处的金融环境<br>我们应具备的金融思维</td>\n      </tr>\n  </tbody>\n  </table>\n\n</li>\n</ul>\n<h4 id=\"经济增加要素\"><a href=\"#经济增加要素\" class=\"headerlink\" title=\"经济增加要素\"></a>经济增加要素</h4><ul>\n<li><p>经济增加的组成三要素</p>\n<ul>\n<li>生产率的提高</li>\n<li>短期债务周期：5 ~ 8 年</li>\n<li><p>长期债务周期：75 ~ 100 年</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Economic-Composition.png\" alt> 瑞达利欧增长曲线</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"经济运作单元\"><a href=\"#经济运作单元\" class=\"headerlink\" title=\"经济运作单元\"></a>经济运作单元</h4><ul>\n<li>经济运行的最小单位是 <code>交易</code><ul>\n<li>购买方：货币、信用 </li>\n<li>服务方：服务、商品、金融产品 </li>\n</ul>\n</li>\n<li>众多 <code>交易</code> 聚合成 <code>市场</code>，不同市场又聚合在一起形成 <code>经济体</code>。比如医疗市场、教育市场、股票市场、能源市场、消费市场等。<ul>\n<li>它们犹如齿轮，一环扣一环，牵一发动全身</li>\n<li>市场运作经常会出现 <code>过冷或过热</code> 的现象，或者出现 <code>大量资金分配失衡</code> 的现象<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Market-Regulation.svg\" alt> 市场调控</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"市场调控\"><a href=\"#市场调控\" class=\"headerlink\" title=\"市场调控\"></a>市场调控</h4><ul>\n<li>税收：政府减税，企业压力变小、人民可支配收入增多、政府减少基建的投入</li>\n<li>国债：卖给人民、卖给其他国家（美国卖国债实质是剥削全世界的方式之一）</li>\n<li>利率<ul>\n<li>降低：市场上流通的钱变多，经济过热</li>\n<li>升高：市场上流通的钱变少，经济过冷</li>\n</ul>\n</li>\n<li><p>发行货币：俗称 <code>放水</code>。比如央行降低利率；大量印钞，市场钱变多，借钱相对更容易。为此，吸引更多人借贷，进行投资消费和扩大产能。</p>\n<blockquote>\n<p>低息借贷，用来投资高息生意。比如投资房地产，稳赚不赔。</p>\n</blockquote>\n<ul>\n<li>虚假繁荣：拿到贷款的企业拼命贷款到处花钱，导致 “虚假繁荣” 现象。</li>\n<li>推动创业：投资人手头的钱也有很多，有利于推动创业。</li>\n<li>乐观预期：创业更容易拿到投资，做事不在乎成本，更在乎将来收益，形成 “乐观预期”。</li>\n<li><p>过度加杠杆：”乐观预期” 现象更让企业过度借债、过度融资。别人借了我不借就会落下，导致消费和投资的 <code>军备竞赛</code>，群体透支未来，往往超出生产力发展一大截。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Excessive-leverage.png\" alt> 过度加杠杆</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"杠杆\"><a href=\"#杠杆\" class=\"headerlink\" title=\"杠杆\"></a>杠杆</h4><ul>\n<li><p>杠杆：金融工具对于实体经济最大作用是加上杠杆（加倍数），使得四两可以拨千金，让具备生产力的人在短时间内加速发展、弯道超车比自己资本多很多的人。</p>\n<blockquote>\n<p>比如：贷款买房、买车，消费贷款，融资，招帮手做事情，造势等。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Leverage.svg\" alt> 杠杆</p>\n</blockquote>\n</li>\n<li><p>用途：</p>\n<ul>\n<li>不良杠杆：没有提高生产力，无法在未来增加你的收入</li>\n<li>良性杠杆：扩大生产力，换取远高于利息的收益</li>\n</ul>\n</li>\n<li><p>支点：</p>\n<ul>\n<li>好的支点：一个能够稳定地低风险地获得收益的资产或能力</li>\n<li><p>不好支点：看似拥有但实际上能力支配不了</p>\n<blockquote>\n<p>比如：买了某公司的股票，但对于公司的业务逻辑、潜在风险、实际控制人的想法/性格一无所知，最终凭运气赚的钱会凭实力亏回去。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>长度：加杠杆的倍数</p>\n</li>\n<li><p>启示</p>\n<ul>\n<li>不要让债务的增长速度超过自己的收入。</li>\n<li>不要让收入的增长速度超过生产率。</li>\n<li><p>不要拿远超自己能力之外的薪资收入，让薪资收入永远比自己的能力增长慢一拍。</p>\n<blockquote>\n<p>这不就是我们追求的：钱多事少离家近？</p>\n</blockquote>\n<ul>\n<li><p>原因：收入=货币+信用，花钱并不全是我们的钱，还有信用。比如刷信用卡，公司的隐性福利，房价上涨、股票上涨的钱，以为自己赚到但实际没有变现的钱。</p>\n</li>\n<li><p>后果：加在我们身上的杠杆，若自身实力不足（支点不牢固），会使得君子立于为危墙之下。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>尽一切努力提交生产率</strong>。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微观经济\"><a href=\"#微观经济\" class=\"headerlink\" title=\"微观经济\"></a>微观经济</h3><ul>\n<li><p>个人与金融系统之间最简单的关系</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Person&amp;FinancialSys.svg\" alt> 个人与金融系统之间的关系</p>\n</blockquote>\n</li>\n<li><p>金融合约内在运作过程</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Financial-Contract-OperProcess.svg\" alt> 金融合约内在运作过程</p>\n</blockquote>\n<ul>\n<li>风险<ul>\n<li>A 与 B 之间的金融合约：股权类型 / 债券类型？</li>\n<li>A 使用的杠杆是否超出了自身的能力承受范围？</li>\n</ul>\n</li>\n<li>风险时间补偿：资金 2 &gt; 资金 1</li>\n</ul>\n</li>\n<li><p>金融三要素：杠杆、时间、风险</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Finance-3elems.svg\" alt> 金融三要素</p>\n</blockquote>\n<ul>\n<li>启示1：金融可实现 <code>时间轴上移动我们的财富</code>。<ul>\n<li>没钱的时候，从未来更有钱的自己那里借钱，比如 <code>信用卡</code>。</li>\n<li>让现在赚钱能力很强的自己，从现在开始就给未来即将退休的自己存钱，比如 <code>养老保险</code>。</li>\n</ul>\n</li>\n<li>启示2：金融工具可把时间带来的风险和未来的收益进行计价，再打包融进金融合约以加速社会资金在时间轴上流动。 </li>\n<li>启示3：现在有能力或宣称自己有能力的人，可运用杠杆把自己未来的信用投射到现在，让现在可拥有加倍的资源发展。</li>\n</ul>\n</li>\n<li><p>折现值（Present Value, PV）/ 复利：如何给未来定价，即风险和未来收益计价方法。</p>\n<script type=\"math/tex; mode=display\">PV = \\frac{CF_{1}}{(1+r)^1} + \\frac{CF_{2}}{(1+r)^2} + \\text{...} + \\frac{CF_{n}}{(1+r)^n}</script><ul>\n<li>CF：未来某段时间的净现金收入</li>\n<li>r：现在的利率</li>\n<li>n：对应时间段</li>\n</ul>\n</li>\n<li><p>风险：风险收益流动性 — <code>投资不可能三角</code></p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Risk-return-Liquidity.svg\" alt> 投资不可能三角</p>\n</blockquote>\n</li>\n<li><p>风险收益模型</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Risk-Return-Model.png\" alt> 风险收益模型</p>\n</blockquote>\n<ul>\n<li>$\\color{gray}{灰线}$：描述做任何事情，随着风险提高，对应市场通常会给出更高收益。</li>\n<li>$\\color{green}{绿线}$：每一处 <code>正态分布曲线</code> 表示处在金融系统中的人，实际的收益分布概率。<ul>\n<li>高风险高收益是概率问题</li>\n<li>低风险不一定低收益，高风险不一定高收益。极端情况下，A、B 承担风险与收益不匹配</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实际投资中的风险收益模型：金融市场核心玩家高度垄断</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/BankingScience-Act-Risk-Return-Model.png\" alt> 实际投资中的风险收益模型</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"心理学重要模型\"><a href=\"#心理学重要模型\" class=\"headerlink\" title=\"心理学重要模型\"></a>心理学重要模型</h2><h3 id=\"原因论\"><a href=\"#原因论\" class=\"headerlink\" title=\"原因论\"></a>原因论</h3><ul>\n<li>原因论（弗洛依德）：个人成长环境，决定了身上坏习惯、个人性格特点<ul>\n<li>弊端：回忆童年寻找问题根源，促使您探索原生家庭有什么问题、研究自己的成长环境有什么问题等。</li>\n<li>启示：看起来很精彩，但对改变自己并无多大用处。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"目的论\"><a href=\"#目的论\" class=\"headerlink\" title=\"目的论\"></a>目的论</h3><ul>\n<li><p>目的论（阿德勒）：每个人现在的问题之所以会发生，其实是因为它符合你的某种内在目的。</p>\n<blockquote>\n<p>推荐岸见一郎的《被讨厌的勇气》，本书详细讲解了阿德勒的主要思想。</p>\n</blockquote>\n<ul>\n<li>比如：社交恐惧症 —&gt; 找工作不顺利<ul>\n<li>原因论认为，小时候父母没有提供足够的社交环境、在学校被孤立、老师没有正面引导等。</li>\n<li>目的论认为，社恐是为了实现某种目的（逃避失败）。这样就能名正言顺宅在家里，不用面对求职被拒绝的痛苦，朋友、家人坦然接受，成为自己推脱责任的 “挡箭牌”。</li>\n</ul>\n</li>\n<li>局限：太过强调主观能动性，忽略了客观环境的影响。</li>\n<li>启示：任何经历本身不是成功或者失败的原因，我们并非因所谓的心理创伤而痛苦，事实上我们会从 <strong>经历中发现符合自己目的的因素</strong>。决定我们的不是过去的经历，而是 <strong>自我赋予经历的意义</strong>。</li>\n</ul>\n</li>\n<li>自卑感：广义的不满足 —&gt; 推动人类社会进步的动力<ul>\n<li>类型多种多样。</li>\n<li>当我们意识到自己没有其他事物那么强大时，自卑感就会产生。</li>\n<li>自卑会产生不满（现状），不满就会产生改变现状的可能性。</li>\n</ul>\n</li>\n<li><p>自卑情结：一个人面对棘手问题时，感觉自身再努力也没用。顺利成章 <code>逃避</code>，转而把 <code>精力转移</code> 至鸡皮蒜毛的事情上获得 <code>优越感</code>。比如偶像打榜、网上键盘侠、杠精。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Life-Process.svg\" alt> 自卑感 &amp; 自卑情结</p>\n</blockquote>\n</li>\n<li><p>启示：一个人如何改变自己行为，超越自卑，尤其不要变成自卑情结。—&gt; 人类可创造性地重新解读自己 <code>过往经历</code>，改变自己的思想，从而改变自己的行为。</p>\n<ul>\n<li>起点很低，历经磨难更容易产生向上动力。</li>\n<li><p>困扰我们的并不是客观事实，而是我们主观上的解释（发挥主观能动性）。</p>\n<blockquote>\n<p>Tips：人类记忆并不是客观的，而是主观的。相由心生，心念一变或许对同一件事的解读就不一样。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>延伸：身体疾病都有它的目的，比如我有 a 所以我无法做到 b、想到我有 c 对自己有什么 <code>好处</code> 等，即 <strong>人无完人，事无完美</strong>，可理解为一种释怀。</p>\n<blockquote>\n<p>所有 <code>好处</code> 归纳一个共同点：避免在与他人的关系中受伤。</p>\n</blockquote>\n</li>\n<li><p>人际关系：人际关系是一切烦恼和不良情绪的源头。</p>\n<blockquote>\n<p>解决方案：赋予被讨厌的勇气，成为 <code>自由独立</code> 的人，主要代价就是承受被人讨厌的勇气。</p>\n</blockquote>\n</li>\n<li><p>切割人生课题模型</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Life-Subject.svg\" alt> 切割人生课题模型</p>\n</blockquote>\n<ul>\n<li><p>比如：男生向女生表白，男生关注点 100% 放在是否表白上，100% 忽略对方是否接受的要素。</p>\n<ul>\n<li>表白是男方的课题，接受是女方的课题。</li>\n<li><p>男生特别在意女方是否接受表达，即等于试图干预别人的人生课题。</p>\n<blockquote>\n<p>启示：干预别人的人生课题，注定会给自己带来烦恼。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>人生要获得安宁，必须绕过一个 <code>大闭环</code>。然而，他人影响的因素过大，大闭环形成的概率极低。</p>\n<blockquote>\n<p>启示：自己的幸福由自己来闭环。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Happiness-Self-Circulation.svg\" alt> 幸福由自己来闭环</p>\n</blockquote>\n</li>\n<li><p>判断是谁的课题：<code>最终后果由谁承担</code></p>\n<blockquote>\n<p>比如：孩子不好好读书是谁的责任，直接责任是孩子，间接责任是父母。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>共同体：个人跟世界的关系</p>\n<ul>\n<li>原则：以直报怨，以德报德。以 <code>公平合理方式</code> 回报别人对你的 <code>恶行</code>，以 <code>善行</code> 回报别人对你的 <code>善行</code>。</li>\n<li><p>同理心：天然信任感，基于共同体产生的联系感。</p>\n<blockquote>\n<p>启示：既有被讨厌的勇气，也需要敢于信任的勇气。信任他人，持有同理心，可缓解切割课题带来的孤立感。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Human-Community.svg\" alt> 共同体</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"马斯洛需求金字塔\"><a href=\"#马斯洛需求金字塔\" class=\"headerlink\" title=\"马斯洛需求金字塔\"></a>马斯洛需求金字塔</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Hierarchical-theory-of-needs.svg\" alt> 马斯洛需求层次模型</p>\n</blockquote>\n<ul>\n<li><p>自我实现者特征：辩证统一思维</p>\n<ul>\n<li>对现实的感知（洞察力）</li>\n<li>对现实的接受：对于自然现象的坦然接受。</li>\n<li>以问题为中心：生活中总是充斥着需要解决的任务、问题。</li>\n<li>独处能力</li>\n<li>高峰体验</li>\n<li>自主性：独处能力强，强大的内心，不怕孤独感。</li>\n<li>幽默感：喜欢拿自己开玩笑。</li>\n<li>初心</li>\n</ul>\n</li>\n<li><p>启示：正确的反面是谬误，但一种深刻真理的反面，可能是另一种深刻的真理。</p>\n<blockquote>\n<p>衡量一个人是否拥有成熟大脑的最关键标志。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"积极心理学\"><a href=\"#积极心理学\" class=\"headerlink\" title=\"积极心理学\"></a>积极心理学</h3><ul>\n<li><p>积极心理学：让没有疾病的普通人，可以过上更有活力、更有创造力、更加发挥自己潜力的生活。</p>\n<blockquote>\n<p>积极心理学 — 人类的幸福课</p>\n</blockquote>\n</li>\n<li><p>积极心理学领域鱼龙混杂，选择入门的教材非常重要！</p>\n<ul>\n<li>马丁塞利格曼《真实的幸福感》、《活出最乐观的自己》</li>\n<li>米哈里·切克森米哈赖《心流》</li>\n<li>本·沙哈尔《哈佛幸福课》</li>\n<li>彭凯平《活出心花怒放的人生》</li>\n</ul>\n</li>\n<li><p>心流：适度承压，适度发挥</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Onflow.svg\" alt> 心流模型</p>\n</blockquote>\n<ul>\n<li><p>彭凯平</p>\n<ul>\n<li><code>毫无章法</code> 的不闭环工作很难产生心流</li>\n<li><code>有头有尾</code> 的能闭环工作可能产生心流</li>\n<li>启示<ul>\n<li>事情再多也要把它们切割成块，设定清晰目标，一个时间只闭环一件事。</li>\n<li>压力再大也不要想着一次性搞定所有艰难工作。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>米哈里</p>\n<ul>\n<li>精神熵：信息时代对人类最大影响是大量信息冲击，使得失去了内心秩序。</li>\n<li><p>心流状态：心流状态就是人类大脑进入一种持续创造 <code>负精神熵</code> 的状态。</p>\n<blockquote>\n<p>负精神熵：物我两忘，伴随高度兴奋感与充实感。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言表达领域重要模型\"><a href=\"#语言表达领域重要模型\" class=\"headerlink\" title=\"语言表达领域重要模型\"></a>语言表达领域重要模型</h2><h3 id=\"金字塔模型\"><a href=\"#金字塔模型\" class=\"headerlink\" title=\"金字塔模型\"></a>金字塔模型</h3><ul>\n<li><p>金字塔模型：如何分，而非总分总</p>\n<ul>\n<li>最关键信息（中心）</li>\n<li>支撑的项目（论据）</li>\n<li><p>数据 / 图表 / 例子 / 比喻</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Linguistics-Pyramid-Model.svg\" alt> 金字塔模型</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示1：将所有语言浓缩为一个记忆项目（<code>中心思想</code>），并不断对这个核心记忆项目进行 <code>解释和重复</code>，通过 <code>更换角度复述</code> 让它得到强化。</p>\n<blockquote>\n<p>符合大脑固有的理解习惯。</p>\n</blockquote>\n</li>\n<li><p>启示2：金字塔重要原则，先说结论并强调这一结论，然后整场谈话围绕这个核心展开论述，以 <code>显得有逻辑</code>。</p>\n<blockquote>\n<p>注：显得有逻辑，并不一定有逻辑（需要逻辑证明）。</p>\n</blockquote>\n</li>\n<li><p>实操</p>\n<ul>\n<li>拿起纸笔将 <code>零散想法</code> 记录下来；</li>\n<li>思路整理、逻辑推敲，将 <code>混乱信息</code> 分门别类、归纳总结为 <code>有序信息</code>；</li>\n<li>排列组合过程中，通常会发现自己没想到的 <code>逻辑漏洞</code> 或提炼出 <code>新主题</code>。</li>\n</ul>\n</li>\n<li><p>金字塔第三层：让谈话和写作显得丰富、内涵的关键部分</p>\n<ul>\n<li>数据：高度凝练、有美感的内容</li>\n<li>图表：一图胜千言</li>\n<li><p>例子：搞明白对象是谁，用例子走进他们的世界</p>\n<blockquote>\n<p>让对方成为故事的角色，更会加深印象。</p>\n</blockquote>\n</li>\n<li><p>比喻：深入浅出、隐喻</p>\n<blockquote>\n<p>尤其是对方不懂得专业领域，不通过打比方，他人听不懂也听不进去。此方法可借鉴：<br> <a href=\"https://www.bilibili.com/video/BV1K54y1n7sM\" target=\"_blank\" rel=\"noopener\">是俗不可耐. EUV 光刻机是如何造出来的 [OL]. bilibili.com. 2021</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表达顺序\"><a href=\"#表达顺序\" class=\"headerlink\" title=\"表达顺序\"></a>表达顺序</h3><ul>\n<li><p>金字塔第二层：支撑的项目（论据）</p>\n</li>\n<li><p>意群承上启下模型： 12 秒内新概念的 <code>咬合</code> 和 <code>重复</code>，这也符合《认知心理学》的短期记忆运作原理。</p>\n<blockquote>\n<p>疫情创造历史 情况 <strong>严重</strong><br>有多 <strong>严重</strong><br>别的不管用  只有 <strong>隔离</strong> 管用<br><strong>隔离</strong> 打击 <strong>服务业</strong><br><strong>服务业</strong> 对 <strong>经济</strong> 很重要<br>越发达地区 服务业占比越大 <strong>经济</strong> 打击越大<br>结论：第三次世界大战（<strong>严重</strong>）</p>\n</blockquote>\n</li>\n<li><p>铺垫转折模型 — 源自于《手把手教你玩脱口秀》</p>\n<ul>\n<li>铺垫让这个古是似乎要往一个方向走，以产生一个原先的预期。</li>\n<li><p>笑点通常是故事的结尾，给了一个跟预期完全不同的结局。而且结局往往带有 <code>自嘲性质</code>，以显得 <code>主角很悲惨</code>。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Linguistics-Turning-Point.svg\" alt> 铺垫转折模型</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>时间顺序模型：回忆过去，复盘现在，展望未来</p>\n<blockquote>\n<p>给人一种宏大感。</p>\n</blockquote>\n</li>\n<li><p>空间顺序模型：从南到北，从大到小，从内到外</p>\n<ul>\n<li>微观-宏观-宇观 / 微观-中观-宏观</li>\n<li>漫画剖析模型：源自于《理解漫画》，可用于解释任何一个产品的层次结构，比如影视作品、短视频、APP 等。<ul>\n<li>概念：一种核心理念/观念、待解决痛点问题</li>\n<li>形式：文章、图文、视频</li>\n<li>风格：诙谐、严肃、宏大</li>\n<li>结构：内容的骨架、演绎的先后顺序</li>\n<li>工艺：演员会如何演、角色如何画、音乐如何配等</li>\n<li>外观：视觉包装和呈现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>升级递进模型</p>\n<ul>\n<li>比如研究一个人的行为，可从 <code>身体 &gt; 情感 &gt; 思想 &gt; 精神</code> 层面依次逐层递进研究。</li>\n<li>比如研究负油价成因，可从 <code>需求 &gt; 供给 &gt; 库存 &gt; 产业 &gt; 金融 &gt; 政治</code> 方面逐层递进研究。</li>\n</ul>\n</li>\n<li><p>翻转模型：论述证明的事物，作出一个反面论据，同时提出一个疑问然后跳回正面解答该疑问，最后反过来提出新的反面论据。</p>\n<blockquote>\n<p>推荐观看 Bilibili UP 老番茄的视频，他的视频运用翻转技巧可娴熟了 <a href=\"https://space.bilibili.com/546195\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n</blockquote>\n</li>\n<li><p>英雄之旅模型：缘起 -&gt; 危机 -&gt; 高潮 —&gt; 结尾</p>\n</li>\n<li><p>因果模型：图文并茂</p>\n</li>\n</ul>\n<h2 id=\"概率统计学重要模型\"><a href=\"#概率统计学重要模型\" class=\"headerlink\" title=\"概率统计学重要模型\"></a>概率统计学重要模型</h2><ul>\n<li><p>为什么概率这么重要？因为世界充满不确定性，而概率论提供了量化不确定性的科学方法。</p>\n<blockquote>\n<p>比如人工智能领域的统计学习、机器学习等。</p>\n</blockquote>\n</li>\n<li><p>概率论是非常反直觉的，归因是人类进化速度太慢，我们的大脑结构适合解释古代环境里生存成长环境，相反不太适应这个日新月异的现代社会。</p>\n<ul>\n<li><p>[引例] 享延顿舞蹈症：大概每 10 万人会有 4~8 人的病，误诊率 1%</p>\n<blockquote>\n<p>10 人真有病 + 999 人被误诊患病 =&gt; 1009 被诊断有病。张三真实得病概率为 10 / 1009 &lt; 1‰</p>\n</blockquote>\n</li>\n<li><p>启示：<code>幸存者偏差</code>，在很小概率事情上做推断，一定关注推断的错误率。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"贝叶斯公式\"><a href=\"#贝叶斯公式\" class=\"headerlink\" title=\"贝叶斯公式\"></a>贝叶斯公式</h3><ul>\n<li><p>贝叶斯公式：也称 <code>逆概率公式</code>，已知第二阶段反推第一阶段 ( 执果索因 )。</p>\n<script type=\"math/tex; mode=display\">P(B_i|A) = \\frac{\n  P(A|B_i)P(B_i)\n  }{\n  \\sum_{i=1}^{n} P(A|B_i)P(B_i)\n  }</script><ul>\n<li><p>引例：检查运动员是否使用违禁药</p>\n<ul>\n<li><p>$P(B=使用禁药|A=阳性) = \\frac{<br>  P(A=阳性|B=使用禁药)P(B=使用禁药)<br>  }{<br>  P(A=阳性|B=使用禁药)P(B=使用禁药) +<br>  P(A=阳性|B=非使用禁药)P(B=非使用禁药)<br>  }$</p>\n</li>\n<li><p>使用禁药检查为阳性概率 $P(A|B_i)=0.95$，使用禁药的基础概率 $P(B)=0.001$</p>\n<ul>\n<li>0.95 x 0.001 / (0.95 x 0.001 + 0.05 x 0.999) ≈ <code>0.009</code></li>\n<li>0.95 x <code>0.009</code> / (0.95 x <code>0.009</code> + 0.05 x 0.991) ≈ <code>0.079</code></li>\n<li>0.95 x <code>0.079</code> / (0.95 x <code>0.079</code> + 0.05 x 0.921) ≈ <code>0.45</code></li>\n</ul>\n</li>\n<li>即使检查了 3 次，但概率仍小于一半。</li>\n</ul>\n</li>\n<li><p>启示：看到没见很罕见的事情连续发生两次，媒体吹嘘世界变了？而我们要有自我的角度思考问题。</p>\n<ul>\n<li>这个事情被误判的可能性有多大</li>\n<li>这个事情在真实世界里面发生的概率有多小 </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简化贝叶斯公式：$P(B|A)=P(A|B)P(B)/P(A)$</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Probability-Simplied-Bayes.svg\" alt> 简化贝叶斯公式</p>\n</blockquote>\n<ul>\n<li>启示：选择比努力更重要，基础概率会放大你的努力。比如选城市、选学校、选专业、选公司、选赛道等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"均值异常值\"><a href=\"#均值异常值\" class=\"headerlink\" title=\"均值异常值\"></a>均值异常值</h3><ul>\n<li>均值：正态分布</li>\n<li>异常值：与均值偏差超过两倍标准差的数值。<ul>\n<li>处理方式<ul>\n<li>舍弃最值：世界是稳定的、平均的（基础假设）-&gt; 去掉最高分、最低分</li>\n<li>一视同仁：它们跟其他数值一视同仁</li>\n<li>单独集合：世界是不稳定的、不均匀的（基础假设）-&gt; 单独作为一个特别集合研究</li>\n</ul>\n</li>\n<li>启示：结合贝叶斯公式，观察 2020 疫情年后，整个世界变动的基础概率变高了，过去几十年习以为常的秩序都在发生变化。在基础概率逐渐变大的趋势下，异常值影响我们最终判断的程度变高。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"大数定律\"><a href=\"#大数定律\" class=\"headerlink\" title=\"大数定律\"></a>大数定律</h3><ul>\n<li>启示：在小数据阶段，大道理可能毫无参考价值。<ul>\n<li>保持耐心、保持身心健康 -&gt; 目标是 <code>康庄大道</code></li>\n<li>取得更多数据时慢慢总结经验，不要过早给事情贴标签 -&gt; 避免走入 <code>羊肠小道</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"经济学重要模型\"><a href=\"#经济学重要模型\" class=\"headerlink\" title=\"经济学重要模型\"></a>经济学重要模型</h2><ul>\n<li>经济基础（生产力）决定上层建筑（政治制度、法律制度、经济制度等），所以经济学是具有政治目的和政治属性的。选择经济学入门教材很重要，这里分享一门自己学过的、认可的经济学课程，感兴趣的同学可以借鉴学习。<ul>\n<li>[视频] <a href=\"https://www.bilibili.com/cheese/play/ep18504\" target=\"_blank\" rel=\"noopener\">珍大户.认知世界的经济学 [OL]. bilibili.com. 2022</a></li>\n<li>[书籍] <a href=\"https://book.douban.com/subject/35779459/\" target=\"_blank\" rel=\"noopener\">珍大户.认知世界的经济学 [M]. 江苏凤凰文艺出版社. 2021</a></li>\n</ul>\n</li>\n<li>微观经济学与宏观经济学都有一套赚钱方法：<ul>\n<li>微观经济学：洗脑需求、控制供给</li>\n<li>宏观经济学：经济危机、暴涨暴跌</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"供需\"><a href=\"#供需\" class=\"headerlink\" title=\"供需\"></a>供需</h3><ul>\n<li><p>供给需求模型：前提市场是可以自由定价的。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Economics-Supply-and-demand-models.svg\" alt> 供给需求模型</p>\n</blockquote>\n<blockquote>\n<p>启示：如何提高自己的收入，找到能 <code>灵活定价</code> 的市场，在其中做一个 <code>稀缺供给者</code>。 </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"边际\"><a href=\"#边际\" class=\"headerlink\" title=\"边际\"></a>边际</h3><ul>\n<li><p>边际成本：多投入一个单位的增量，会产生新增成本或者收益。比如：</p>\n<ul>\n<li>共享单车、付费软件行业，有相对固定的边际成本。</li>\n<li><p>发型师行业，新增用户，边际服务成本也随之增加。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Economics-Marginal-cost.svg\" alt> 投入产出模型</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>边际收益：比如水与钻石的价格</p>\n<ul>\n<li>水便宜，每增加一杯水，对个人的边际收益较小</li>\n<li>钻石贵，每增一颗钻石，对个人的边际收益较高</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"成本\"><a href=\"#成本\" class=\"headerlink\" title=\"成本\"></a>成本</h3><ul>\n<li>机会成本：放弃的最高价值。但是，现实生活中没有这么清晰的、容易的选型，让我们选择与舍弃。比如：<ul>\n<li>眼界问题</li>\n<li>洗脑问题</li>\n<li>预见性问题：取决于你的想象力、预见性、规划能力，以及你的胆量和野心。</li>\n</ul>\n</li>\n<li>沉没成本：也称为赌徒效应，非经济学的分析方法，表示投入的成本打水漂了。正确分析方法还是机会成本。</li>\n<li>给我们的启示：<ul>\n<li>启示1：决策底线，明白一件事上的机会成本是多少。</li>\n<li>启示2：可选择权，比如陷入完全没有储蓄状况、过早背上房贷等。年轻时过早丧失可选择权是非常可怕的。</li>\n<li>启示3：沉没成本表示我们已经失去的东西，过去是无法改变的，所以没必要盯着过去看。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"选优\"><a href=\"#选优\" class=\"headerlink\" title=\"选优\"></a>选优</h3><ul>\n<li>投入产出模型（ROI）：辩证思考法</li>\n<li><p>比较优势 v.s. 绝对优势</p>\n<ul>\n<li>比较优势：社会分工的真实原理，团队合作以实现利益最大化。</li>\n<li>绝对优势：个人、公司或国家在投入相同单位时间下生产更多数量的商品或服务的能力。</li>\n</ul>\n</li>\n<li><p>激励：人类对经济激励做出了反应，才会产生一系列的经济行为。</p>\n<ul>\n<li>改变绩效考核方式，即可改变人的行为，比如按时/按件计费生产模式是不一样。</li>\n<li>办健身卡激励自己运动，因为人不希望自己的金钱浪费掉。而新经济社会学则认为，即使把金钱压力拿掉，社会压力（私交关系）也会起到督促作用。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"新经济社会学\"><a href=\"#新经济社会学\" class=\"headerlink\" title=\"新经济社会学\"></a>新经济社会学</h3><ul>\n<li>孤立人假设：人类大多数决策都不是独立完成的，而是被身边很多人影响着完成的。</li>\n<li>嵌入式关系：<ul>\n<li>个人行为是紧密嵌入到人际网络关系中的，要理解一个人的经济行为，就必须理解他身边的各种人。</li>\n<li>从小群到亚文化，再到国家文化、民族文化，都跟个人行为有着很大关系。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"中国国情\"><a href=\"#中国国情\" class=\"headerlink\" title=\"中国国情\"></a>中国国情</h3><ul>\n<li>中国国情：重视科技、开放学习、实用为王、不断改革。</li>\n<li>现阶段国情对年轻人的启示：<ul>\n<li>对于出生在小城小镇的同学来讲，学习理工科是突破 <code>圈层</code> 最好的武器。</li>\n<li>大家应该多接触已被证明的、成功的方法论，研究其中可取或者不可取的。</li>\n<li>立足自己实际情况做决策，不要生搬硬套别人的成功经验。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"人类学重要模型\"><a href=\"#人类学重要模型\" class=\"headerlink\" title=\"人类学重要模型\"></a>人类学重要模型</h2><h3 id=\"想象与共识\"><a href=\"#想象与共识\" class=\"headerlink\" title=\"想象与共识\"></a>想象与共识</h3><ul>\n<li><p>灵活协作四象限图</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Humanics-Collaboration-quadrant.svg\" alt> 灵活协作四象限图</p>\n</blockquote>\n<ul>\n<li>蚂蚁：超大规模写作，但模式缺乏变通性，不能与时俱进。</li>\n<li>人类：成千上万人规模协作，还能够不断改变协作规则的物种。</li>\n</ul>\n</li>\n<li><p>人类通过想象达成共识，从古至今贯穿了整个文明史。换句话说，整个人类世界其实是构筑在集体的想象基础，一个很多人都认可的抽象共识。比如，人们为什么相信数学概念、科学技术能改变世界。</p>\n<blockquote>\n<p>启示：实从虚中来，无虚便无实。</p>\n</blockquote>\n</li>\n<li><p>我们对抽象事物的抗拒，以人类进化过程角度解释，人类身体与飞速发展时代之间存在着一个巨大的矛盾，即 “远古的身体，现代的认知”。</p>\n<ul>\n<li>进化迟滞：人类身躯是通过 20 万年原始生活漫长时间筛选出来的，我们的肉身跟不上信息时代发展。</li>\n<li>进化心理：研究人类原始时代的生活状态，可找到现代人行为的内在原因。</li>\n</ul>\n</li>\n<li><p>一个细分心理学学科，推荐戴维·巴斯写的《进化心理学》，有助于我们更好认知人的行为内因。</p>\n<ul>\n<li>比如原始生活中，高热量和甜食是非常罕见的，在自然界中通常供不应求，而当遇到水果、蜂蜜这种不易保存的甜食，于是第一时间就想摄入甜食的行为与欲望便深深地被刻到我们的本能当中。这样解释 “明知吃糖太多不好偏好吃糖” 的逻辑便通了。</li>\n<li><p>远古人类本能是现代人痛苦的根源之一。比如远古时代长期食物稀缺，造成人类对脂肪的强烈偏爱，即使食物丰盛的现代，人们还是长期过度摄入脂肪从而引起心血管疾病等。</p>\n<blockquote>\n<p>解决恶习的方法：了解原理，建立意识，刻意练习</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"幼态持续\"><a href=\"#幼态持续\" class=\"headerlink\" title=\"幼态持续\"></a>幼态持续</h3><ul>\n<li>晚熟<ul>\n<li>一个社会保持儿童时期好奇心状态的能力是这个社会发达程度的一个指标。</li>\n<li>一个成年人保持好奇心和探索欲的能力是决定其能否延长寿命的重要因素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文化人类学\"><a href=\"#文化人类学\" class=\"headerlink\" title=\"文化人类学\"></a>文化人类学</h3><ul>\n<li><p>文化：是一群人通过 <code>习得</code> 对其行为和身边事物意义的 <code>共同认识</code>。</p>\n<blockquote>\n<p>比如东方文化与西方文化差异，西方家庭领养的亚洲孩子长大后的思想行为都是西化的。表明文化是通过后天习得的，文化和人种的生物学特性是解耦的。</p>\n</blockquote>\n</li>\n<li><p>亚文化：一些群体拥有的相对独特的共识。亚文化来源于特定的语言、意见领袖、行为以及符号，比如哔哩哔哩的亚文化圈。</p>\n<ul>\n<li>特定语言：爷青结、高质量男性、芜湖起飞</li>\n<li>特定意见领袖：罗翔老师、老番茄、何同学、稚晖君</li>\n<li>特定行为：一键三连</li>\n<li>特定符号：233 娘、小电视</li>\n</ul>\n</li>\n<li>文化具备的特征<ul>\n<li>文化是历史的产物</li>\n<li>亚文化刻意迅速变迁</li>\n<li>社会价值观会影响亚文化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基因与模因\"><a href=\"#基因与模因\" class=\"headerlink\" title=\"基因与模因\"></a>基因与模因</h3><ul>\n<li>基因（Gene）：生物体遗传的基本单位。</li>\n<li>模因（Meme）：指社会中可被传播和复制的观念、名言与时尚元素。<ul>\n<li>文化的基本单位</li>\n<li>通过模仿得到传递</li>\n</ul>\n</li>\n<li><p>基因与模因的共同特征：遗传性、变异性、选择性</p>\n<blockquote>\n<p>启示：人类延续自己的方式可通过文化创造和传承给下一代。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"信息论重要模型\"><a href=\"#信息论重要模型\" class=\"headerlink\" title=\"信息论重要模型\"></a>信息论重要模型</h2><h3 id=\"信息熵\"><a href=\"#信息熵\" class=\"headerlink\" title=\"信息熵\"></a>信息熵</h3><ul>\n<li>信息熵：描述一个东西的不确定程度的量。</li>\n<li>信息量：用来把信息熵消除掉的信息所需要的能量。衡量信息量的基本单位为比特（Bit）。</li>\n<li><p>信息熵越大（越小），消除它需要提供的信息量越大（越小）。比如外出约饭，双方不知道吃什么、吃什么菜系或者特殊要求，不确定性依次降低、信息熵越小。</p>\n<blockquote>\n<p>启示：不做选择、随波逐流或平均分配注意力，就会增加整个系统的无序性。如何聪明地分配我们的资源和注意力，引入 <code>哈夫曼编码</code> 与 <code>奥卡姆提刀</code>。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"哈夫曼编码\"><a href=\"#哈夫曼编码\" class=\"headerlink\" title=\"哈夫曼编码\"></a>哈夫曼编码</h3><ul>\n<li><p>哈夫曼编码（Huffman coding）：把较短的编码分配给高配出现的词汇，把较长的编码分配给低频出现的词汇。</p>\n<blockquote>\n<p>理解哈夫曼编码，少不了哈夫曼树的构造过程的认识，推荐文章 <a href=\"https://zhuanlan.zhihu.com/p/113389819\" target=\"_blank\" rel=\"noopener\">一文搞懂如何构造哈夫曼树</a>。</p>\n</blockquote>\n</li>\n<li><p>奥卡姆剃刀（Occam’s Razor）：如无必要，勿增实体，即简单有效原理。</p>\n<blockquote>\n<p>启示：大刀阔斧低做减法，围绕关键领域饱和配置。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"帧间压缩算法\"><a href=\"#帧间压缩算法\" class=\"headerlink\" title=\"帧间压缩算法\"></a>帧间压缩算法</h3><ul>\n<li>帧：影像动画最小单位是单幅静止画面，把它们连续播放起来即形成动画。</li>\n<li><p>以一部 2 个小时、25 帧、1080P 的影片为例，不压缩存储所占空间是巨大的。</p>\n<blockquote>\n<p>2 hour * 60 minutes * 60 seconds * 25 frames * (1920*1080) * 3 = 1042.84 GB<br>其中：RGB 三原色，一个像素占用  3 字节；1B = 8bit，1 KB = 1024 B, 1 MB = 1024 KB…</p>\n</blockquote>\n</li>\n<li><p>启示1：通过关注 <code>信息增量</code>，而不是关注 <code>信息存量</code>，来极大 <code>提升效率</code>。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/InformationTheory-Interframe-compression.svg\" alt> 帧间压缩算法</p>\n</blockquote>\n</li>\n<li><p>启示2：关注变化，忽略重复，使得我们学习效率提升数倍，但起步时先花时间把基本功练扎实也是很重要的。</p>\n</li>\n</ul>\n<h3 id=\"互信息\"><a href=\"#互信息\" class=\"headerlink\" title=\"互信息\"></a>互信息</h3><ul>\n<li><p>互信息：一个随机变量中包含的关于另一个随机变量的信息量，或者说是一个随机变量由于已知另一个随机变量而减少的不确定性。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/InformationTheory-Mutual-information.svg\" alt> 互信息示例</p>\n</blockquote>\n<blockquote>\n<p>信息论解释：信春哥到底给不挂科这件事消除多大的不确定性，减少多少信息熵。两个独立事件的相关性可通过严格计算可得，若它们互信息比较高则表可确信它们具有相关性。但是，相关性并不等于因果性。</p>\n</blockquote>\n</li>\n<li><p>信息等价：知道 A 发生的信息，就等同于知道 B 发生的信息。</p>\n<blockquote>\n<p>比如：说废话，今日天气真好 ≈ 蓝条白云、风和日丽、阳光明媚</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"冗余度\"><a href=\"#冗余度\" class=\"headerlink\" title=\"冗余度\"></a>冗余度</h3><ul>\n<li><p>冗余度：资源的重复性，不一定是坏东西，也可以理解为故意安排的策略。</p>\n<blockquote>\n<p>比如：桥墩、大厦的防火安全通道、飞机上的双引擎设计、标点符号等。</p>\n</blockquote>\n</li>\n<li><p>启示1：冗余并不一定是坏东西。</p>\n<ul>\n<li>在工程领域，它可保障系统安全运作。</li>\n<li>在表达层面，它能更好服务于人类的认知习惯。</li>\n</ul>\n</li>\n<li>启示2：时代在进步，人类习惯接受的冗余度也在减少，所以我们越来越需要掌握去除冗余度的方法 — <code>分析框架法</code>。<ul>\n<li>先把关键概念零散罗列出来</li>\n<li>寻找概念卡片间的关联关系</li>\n<li>套用和矫正</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"营销学重要模型\"><a href=\"#营销学重要模型\" class=\"headerlink\" title=\"营销学重要模型\"></a>营销学重要模型</h2><ul>\n<li>物理世界：由物质与能量组成</li>\n<li>商业世界：由生产与营销组成</li>\n<li>在商业社会中，我们总是因一些负面情绪而对营销产生偏见（比如安利、传销），从而选择性地忽视了它的正向价值。请摘掉有色眼镜，以下将从三个线索认识、了解营销学：<ul>\n<li>需求 v.s. 供给</li>\n<li>微观 v.s. 宏观</li>\n<li>国外 v.s. 中国</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li><p>不管是什么职位，绝大部分人在刚起步阶段总会本能地忽略别人的内在需求，比如不懂老师、同事、老板内心深处需要什么，总是把自己的需求当作别人的需求。</p>\n<blockquote>\n<p>启示：懂得换位思考，理解对方的需求。比如写报告、写简历等，首要知道受众是谁，然后多提出一些问题、多做一些调查，需求自然会逐渐明了起来。很多刚出社会的同学（包括自己）都不明白这个道理，活在自己世界里自嗨式工作。</p>\n</blockquote>\n</li>\n<li><p>需求分类：痛点与痒点/爽点</p>\n<ul>\n<li><p>痛点：利用人们的恐惧，因为恐惧可立即激活人脑的杏仁核，劫持整个大脑，让人进入本能行动模式。</p>\n<blockquote>\n<p>比如，教培行业懂得抓住家长恐惧心理，影响孩子一辈子的事情，即使花再多钱也愿意买单。</p>\n</blockquote>\n</li>\n<li><p>痒点：缓解压力带来的动力。比如打游戏、喝奶茶等，目的是缓解身体的压力。</p>\n</li>\n</ul>\n</li>\n<li><p>需求的产生过程</p>\n<ul>\n<li>需要（Need）：生活中需要完成的生存任务。</li>\n<li>想要（Want）：需要找到可以满足它的供给物时，需要变成想要。</li>\n<li><p>需求（Demand）：想要的东西，待我们有能力获得时才会变成需求。</p>\n<blockquote>\n<p>比如：小艾大叔带你看豪宅，大家都需要房子，大豪宅更是想要，但它是大多数人的需求吗？</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示：以个人升职加薪为例</p>\n<ul>\n<li>思考公司、老板现阶段想要什么？</li>\n<li>确保自己能展现出满足这种需要的能力和潜力，把公司的想要转变成需求。</li>\n<li><p>搞清楚公司有没有实力支付你想要的薪酬、有没有资源支撑你以后想取得的更大成就。</p>\n<blockquote>\n<p>不然自己努力争取半天，发现不是自己不行，而是公司不给力。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"供给\"><a href=\"#供给\" class=\"headerlink\" title=\"供给\"></a>供给</h3><ul>\n<li><p>定位理论：<code>占据心智生态位</code>。把一个品牌与一个品类或者一个动作直接画上等号，比如今天中国用户想要搜索就想到百度、外卖就想到美团/饿了么、汉堡就想到麦当劳/肯德基、便宜奶茶就想到蜜雪冰城等。</p>\n<blockquote>\n<p>对于人类大脑而言，通常能记住一个细分市场里，特定品类的第一名及第二名，称之为 <code>二元法则</code>。</p>\n</blockquote>\n</li>\n<li><p>二元法则：市场上任何一个细分市场里，只能留下第一名和第二名，第三名以外就难以被消费者记住了。</p>\n<ul>\n<li>依据：人类大脑追求节省能量，为此对于生活中各种事情通常只会用耗费少量脑资源去处理小事情，比如用什么软件点外卖、网购等。</li>\n<li>影响：用户不怎么关心次要、无足轻重的小事情，一旦养成习惯就不会轻易去改变它们。如此以来，便造就品牌在细分领域 <code>赢家通吃</code> 的局面。</li>\n</ul>\n</li>\n<li><p>打造品牌四步法</p>\n<ul>\n<li>Step.01：看清竞争对手是谁，它们提供的价值是什么？</li>\n<li>Step.02：避开竞争对手的优势领域，找到一个相对空白（蓝海市场）、自身有优势的差异化定位。</li>\n<li>Step.03：围绕这个定位打造一系列的支撑点。</li>\n<li>Step.04：重复再重复，不断向受众呈现第三步打造的支撑点。</li>\n</ul>\n</li>\n<li><p>启示：现代社会人获得内心安宁的一种方式，即找到 <code>独特生态位</code>，它是对抗内卷最好的解药。</p>\n<blockquote>\n<p>独特生态位，个人理解是将自身专长运用到工作实践中的一种能力，比如设计天赋+汇报能力，让做的事情更容易获得客户、领导、同事认可。我们常说的“做得好不如讲 PPT 的好”，其实能说会道也是一种能力、一种优势呢！</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"微观\"><a href=\"#微观\" class=\"headerlink\" title=\"微观\"></a>微观</h3><ul>\n<li><p>引用《<a href=\"https://book.douban.com/subject/35637771/\" target=\"_blank\" rel=\"noopener\">影响力</a>》的六大核心心理模型：互惠、承诺、从众、喜好、权威、稀缺</p>\n<blockquote>\n<p>这正是电商直播刺激消费的法宝呀！比如，看直播产生购物冲动，加上商品的限时限量优惠诱惑，赶紧买了再说，大不了改天退货罢了。其实，这里就利用了群众的从众、稀缺心理。</p>\n</blockquote>\n<ul>\n<li>稀缺：稀缺直接含义是供不应求，稀缺商品价格自然贵。但营销领域，稀缺与稀缺感是两种不同的概念，后者是利用了人的恐惧故意营造出来的，比如限量款、截止日期等。</li>\n<li><p>从众：人以类聚、物以群分。同类人也会对我们产生影响。</p>\n<blockquote>\n<p>小众：小圈子文化、细分领域市场</p>\n</blockquote>\n</li>\n<li><p>喜好：投其所好</p>\n</li>\n<li><p>互惠：接受别人的赠予，会本能想要回报对方。</p>\n<blockquote>\n<p>互欠网：适应机制，人类得以实现劳动分工、交换不同形态的商品和服务、让个体相互依赖、凝结成高效率单位。</p>\n</blockquote>\n</li>\n<li><p>承诺：人类会本能地对自己做出的承诺负责。比如，公开你的目标或者公开承诺，之后你会很自然想去完成承诺。 还有，团队管理中让你写下工作目标，并且让同事看到它，之后你就会自然而然地履行承诺、完成任务。</p>\n</li>\n<li><p>权威：人类会下意识服从来自权威任务的指令。</p>\n<ul>\n<li>对于医生的健康建议我们会莫名信赖、觉得大学教授、博士的观点更加可靠等。从人类学角度来看，权威崇拜更像是一种文化现象而非生物本能。</li>\n<li><p>在一个文明社会里，一个热衷于对抗权威的人，通常生活得比较艰辛。权威服从大多数更多是节约生存成本。</p>\n<blockquote>\n<p>启示：避免权威服从天性被人利用，比如欧美品牌的制高点效应带来得权威溢价、利用公安局的权威实施诈骗等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"宏观\"><a href=\"#宏观\" class=\"headerlink\" title=\"宏观\"></a>宏观</h3><ul>\n<li><p>弱传播假说，舆论世界越弱得东西越好传输，就类似自然界中：</p>\n<ul>\n<li>弱点可用于信号传导，强电可成为动力能源</li>\n<li>风好传播，山不好传播</li>\n<li>花粉好传播，大树不好传播</li>\n</ul>\n</li>\n<li><p>现代舆论世界四条规则 — 邹振东教授</p>\n<ul>\n<li>弱者优势：弱者多，传播广</li>\n<li>情感强势：大众的情绪高于理智</li>\n<li>轻者为重：轻量的信息更好传播</li>\n<li>次者为主：非主流、非正统的内容更引人瞩目。《<a href=\"https://www.kofes.cn/2022/10/nintendo-experience-design.html#不由自主着迷\">任天堂体验设计</a>》中惊喜设计原理正是如此，打破人们对日常生活的坚信，从而让人获得超出预期的惊喜体验。</li>\n</ul>\n</li>\n<li><p>举例：把《咱当兵的人》改成《咱当官的人》，还会有人传唱吗？毕竟在舆论世界里自吹自擂、表现自己很厉害，是很让人反感的。相反，讨人喜欢的 Up 主总是表现的很弱势，他们会羞涩、会自嘲、无攻击性、会搞砸事情，这是符合弱传播假说原理的。</p>\n</li>\n<li><p>为什么现代舆论世界的运作原理是这样的？ — 现代性</p>\n<ul>\n<li>人类远古的身体并未完全适应现代社会的运行节奏，我们的身体既不是为了 996 高强度、高压力的工作，也不是应对各种考试而进化出来的，现在竞争压力会让身体系统产生大量的熵。</li>\n<li>比如观看马保国、蔡坤坤、高质量男性、鬼畜视频，娱乐八卦通常是解压的、可以熵减的，并且在过程中得到优越感。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"品牌\"><a href=\"#品牌\" class=\"headerlink\" title=\"品牌\"></a>品牌</h3><ul>\n<li>品牌是一种心理符号，跟特定国家民族、社会文化、符号资源、语言体系等息息相关的。</li>\n</ul>\n<h4 id=\"国内方法论\"><a href=\"#国内方法论\" class=\"headerlink\" title=\"国内方法论\"></a>国内方法论</h4><ul>\n<li><p>《<a href=\"https://book.douban.com/subject/26870611/\" target=\"_blank\" rel=\"noopener\">超级符号就是超级创意</a>》：打造国货品牌，利用集体潜在意识的符号去创造，而非创新。</p>\n<blockquote>\n<p>好比设计方法中的借物喻意。</p>\n</blockquote>\n</li>\n<li><p>在观念传播过程中，假设传播现代的信号为 1，而传输损耗变成 0.7。通过潜意识设计，而非刻意教授用户，让用户潜意识发生共鸣、激发强烈情感，让 0.7 放大成 10 倍效果。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Marketing-Subconscious-Design.svg\" alt> 潜意识共鸣放大传播效果</p>\n</blockquote>\n<blockquote>\n<p>启示：无论是正式沟通、推销想法或是申请项目，了解清楚  <code>谈话对象的文化背景</code>，其实作用是非常大的。因为传播的信息若是能够跟对方已有的记忆产生共鸣，通过潜意识发挥作用，便会大大增加传播效果。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"国外方法论\"><a href=\"#国外方法论\" class=\"headerlink\" title=\"国外方法论\"></a>国外方法论</h4><ul>\n<li><p>品牌共鸣金字塔：从下而上、由简入繁</p>\n<ul>\n<li>第一层：<code>认知</code>，解答你是谁的问题。用户只需看一眼就知道你是属于什么品类的。</li>\n<li>第二层：<code>联想</code>，解答你是什么的问题。左边是理性，阐述品牌的功效；右边是感性，表达品牌的形象。</li>\n<li>第三层：<code>态度</code>，我认为你如何。即消费者对品牌的评价问题。左边是理性，表示消费者对品牌的质量、信誉、优势、风险的心理评估；右边是感性，就是品牌给消费者自己的整体感觉如何。</li>\n<li><p>第四层：<code>忠诚</code>，你和我的关系。这一层能达到的最高境界是，消费者愿意用品牌来代表自己。</p>\n<blockquote>\n<p>比如，不少奢侈品牌达到类似高度，类似瑜伽服界的 lululemon、数码界的 apple 等。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Marketing-Resonating-Pyramid-of-Brand.svg\" alt> 品牌共鸣金字塔</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"历史学重要模型\"><a href=\"#历史学重要模型\" class=\"headerlink\" title=\"历史学重要模型\"></a>历史学重要模型</h2><blockquote class=\"blockquote-center\"><p>以铜为镜，可以正衣冠。以史为镜，可以知兴替。——《旧唐书·魏徵传》</p>\n</blockquote>\n<ul>\n<li><p>拼图模型</p>\n<ul>\n<li>人类历史发展并不像马路一样笔直向前开，更像拼图东拼一块西拼一块。</li>\n<li><p>当拼图接近完整时，会突然出现某种清晰脉络，仿佛这个趋势或转折点是瞬间到来的。</p>\n<blockquote>\n<p>比如为了实现共同富裕这个目标，精确扶贫、反腐败、限制货币扩张、完善社保机制等不同方面、不起眼的”拼图碎片“早已出现。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>动静循环模型</p>\n<ul>\n<li>静态文明：一个文明繁荣稳定下来就会成为静态文明。<ul>\n<li>处于静态文明之下，生产力水平通常会提高，从而创造出相对丰富的文化成果。</li>\n<li>既得利益者会安逸保守、阶层会固化，文化开始失去活力。</li>\n</ul>\n</li>\n<li>动态文明：一个上升不稳定的文明出现，作为静态文明的挑战者。<ul>\n<li>然而双方不会马上发生你死我活的冲突，而是会共存很长一段时间。</li>\n<li>动态文明总是有抢占静态文明生态位的欲望，但由于自身发展程度不及静态文明，所以难有作为并持续该状态很长时间，这种状态也称之为文明对峙。</li>\n</ul>\n</li>\n<li><p>动静循环：待双方强弱逐渐均衡，一旦静态文明出现某种失误，从而一举扭转双方强弱对比进入下一阶段，并开启新的动静循环。</p>\n<blockquote>\n<p>启示：未雨绸缪早当先，居安思危谋长远。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>竞争与选择模型：历史只是生物学的片段，历史学会受到生物学基本法则支配。生命即竞争，人类和国家之间不再流行使用暴力，而是以产业主导权、贸易规则、技术标准、媒体话语权等，进行无硝烟的对战。</p>\n<ul>\n<li>启示1：人类竞争比合作更底层更稳定，以心理维度解释就是恐惧驱动竞争、渴望驱动合作。</li>\n<li><p>启示2：合作的底色是竞争，竞争的结果是选择。差异是自然的底色，公平并不是。</p>\n<blockquote>\n<p>如果社会追求放任自由主义运作规则，那么最终结果一定是社会达尔文主义，强者俞强，弱者愈弱，贫富悬殊，赛博朋克！所以国家要以顶层设计维护稳定，即试图维持自己存续的文明，需不断地刻意调节贫富差距、刻意引导社会秩序。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>技术文明因果模型：科技进步是文明发展的结果而不是原因，因为技术进步或新的科学理论都是一个叠加性的、社会性的、具有创造特点的现象。而非某一个英雄任务单打独斗、孤军奋战的结果。</p>\n<blockquote>\n<p>所谓发明其实是发明家在一个合适社会环境里，找到一项新技术最后一块拼图而已。——《创新的神话》</p>\n</blockquote>\n</li>\n<li><p>未来主义 v.s. 过度未来主义</p>\n</li>\n<li><p>复古主义 v.s. 过度复古主义</p>\n<blockquote>\n<p>启示：做决策不宜急转弯，建议让错误酝酿一会、让子弹飞一会，再做决定。比如换工作、换城市、换专业、投资等。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/History-futurism&amp;Retroism.svg\" alt> 未来（复古）主义 v.s. 过度未来（复古）主义</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"古代哲学重要模型\"><a href=\"#古代哲学重要模型\" class=\"headerlink\" title=\"古代哲学重要模型\"></a>古代哲学重要模型</h2><h3 id=\"无用之用\"><a href=\"#无用之用\" class=\"headerlink\" title=\"无用之用\"></a>无用之用</h3><ul>\n<li><p>哲学：对人生终极问题的系统性反思。但哲学与哲学家所处的时代、国家、财富、成长经历、高矮肥瘦、基因特点有着强相关关系。</p>\n<ul>\n<li>伊比鸠鲁：自由享受快乐</li>\n<li>斯多葛：自律忍受痛苦</li>\n<li>王守仁：世间万物，心外无物。心外无理，心即是理。</li>\n<li><p>曾国潘：立志做圣人，把人生智慧总结为 “诚、敬、静、谨、恒”。</p>\n<blockquote>\n<p>启示：哲学具备鲜明的个人特点，个人会很欣赏某一类哲学，与本人的特质体制、特定年纪、特定环境、特定遭遇都有关系。即存在哲学与个人禀赋环境匹配问题，所谓“彼之蜜糖，吾之砒霜”。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内圣外王\"><a href=\"#内圣外王\" class=\"headerlink\" title=\"内圣外王\"></a>内圣外王</h3><ul>\n<li>内圣：内心深处是致力于心灵的修养</li>\n<li><p>外王：社会活动中积极承担最大责任</p>\n  <blockquote class=\"blockquote-center\"><p>能力越大，责任越大。—— 《蜘蛛侠》彼得·本杰明·帕克</p>\n</blockquote>\n<blockquote>\n<p>启示：兼顾以上两种选项，即不逃避权力和金钱，也不逃避获得世俗的成就。</p>\n</blockquote>\n</li>\n<li><p>哲学修养是可以用来应对人生的重大命题，比如巨大风险、境遇突变、重大挫折或是亲人离世等，这些事情总是和一些更加永恒的、超过自身控制范围的主题联系在一起。</p>\n</li>\n</ul>\n<h3 id=\"停止思考\"><a href=\"#停止思考\" class=\"headerlink\" title=\"停止思考\"></a>停止思考</h3><ul>\n<li>你不等于你的大脑，在人生重大考验到来之前的时刻，最好的方法是放空自己，停下思绪，让大脑恢复至最佳状态。<ul>\n<li>启示1：放空大脑的方法，比如停止思考、冥想、数呼吸（腹式呼吸，吐气防空后开始倒计时）。</li>\n<li>启示2：活在当下，过去不悔，未来不追。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"正反合三段论\"><a href=\"#正反合三段论\" class=\"headerlink\" title=\"正反合三段论\"></a>正反合三段论</h3><ul>\n<li><p>一切事务的发展过程都可分为三个有机联系着的阶段。</p>\n<ul>\n<li>正题：发展的起点</li>\n<li>反题：正题会孕育自己的对立面</li>\n<li><p>合题：正题与反题两者最终会在相互对抗中形成统一</p>\n<blockquote>\n<p>合题也可以看作是新的正题，它又孕育了更高层次的对立面。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>正反合思考法：站在完全相反立场思考同一问题，产生巨大的思维张力，让人更加客观地看待世界。</p>\n<ul>\n<li>战略上藐视敌人，战术上重视敌人。敌进我退，地驻我扰，敌疲我打，敌退我追。—— 毛主席</li>\n<li>正确的反面是谬误，但一个深刻真理的反面，很可能是另一种深刻的真理。—— 波尔</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"反者道之动\"><a href=\"#反者道之动\" class=\"headerlink\" title=\"反者道之动\"></a>反者道之动</h3><blockquote class=\"blockquote-center\"><p>反着道之动，弱者道之用。天下万物生于有，有生于无。——《道德经》40 章</p>\n</blockquote>\n<ul>\n<li>任何事物发展到极端，都有一种朝相反方法移动的倾向。</li>\n<li>任何事物都包含了对它自己的否定。</li>\n<li>启示：<ul>\n<li>每当陷入困境时，尝试一些反人性的做法，比如让自己变得更慷慨、更喜欢跟人交际、更喜欢请客吃饭，或许这样会帮你在困惑时渡过难关。</li>\n<li>人身顺境时，避免陷入亢龙有悔的状况。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"斯多葛哲学\"><a href=\"#斯多葛哲学\" class=\"headerlink\" title=\"斯多葛哲学\"></a>斯多葛哲学</h3><ul>\n<li><p>消极想象策略：做一件事先去想象发生最坏情况，以及思考如何面对的做法。</p>\n<blockquote>\n<p>注意：消极想象与负面情绪的区别，前者是建设性的，后者是破坏性的。</p>\n</blockquote>\n</li>\n<li><p>身边的坏事不管如何阻止，它都会发生，则我们身处两种情况：</p>\n<ul>\n<li>预想最糟糕状态，想好应对策略，把伤害降至最低。</li>\n<li>预想最好的状态，从未为意外做准备，发生坏事则完全丧失行动能力。</li>\n</ul>\n</li>\n<li><p>享乐适应：注定让人归于平淡和无趣的巨大牵引力。比如：</p>\n<ul>\n<li>中大彩票的人最快乐的时光就是他知道中将的那一刻，兴奋度会逐渐降低，即使金钱上拥有很多，但幸福程度并没有显著增加。</li>\n<li><p>婚姻也类似如此，新婚兴奋感会维持一段时间，就会进入一个平淡的适应期，即使对方是天使或王子也避免不了。</p>\n<blockquote>\n<p>运用消极想象策略，刻意去阻止适应过程，但要张弛有度。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>控制二分法：可结合阿德勒的”人生课题分割模型“来分析问题。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Psychology-Life-Subject.svg\" alt> 切割人生课题模型</p>\n</blockquote>\n<ul>\n<li>能控制：100% 精力专注</li>\n<li>不能控制：彻底忽视</li>\n<li>包含能控制与不能控制：要保持头脑清醒，提炼可控的区域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"价值剥夺模型\"><a href=\"#价值剥夺模型\" class=\"headerlink\" title=\"价值剥夺模型\"></a>价值剥夺模型</h3><ul>\n<li><p>快乐建立在不牢固的地基之上，发生动荡时很容易失去这一份快乐。</p>\n<blockquote>\n<p>不牢固的地基：取悦他人、社会比较、消费恋物等身外之物，这也是大多数人焦虑的根本原因。</p>\n</blockquote>\n</li>\n<li><p>启示：要像获得内心的安宁，可以把人生的锚点建立在那些更稳定的事物上。比如拓展认知水平、</p>\n</li>\n</ul>\n<p>追求人生智慧、为人民服务（获得前得成就他人）等。</p>\n<h2 id=\"现代哲学重要模型\"><a href=\"#现代哲学重要模型\" class=\"headerlink\" title=\"现代哲学重要模型\"></a>现代哲学重要模型</h2><h3 id=\"马克思·韦伯\"><a href=\"#马克思·韦伯\" class=\"headerlink\" title=\"马克思·韦伯\"></a>马克思·韦伯</h3><ul>\n<li><p>人的理性</p>\n<ul>\n<li><p>工具理性：完成某件事情最有效的方法，即不关心目的，只关心达到目的的手段是否最优。</p>\n<blockquote>\n<p>比如研究两人打架什么攻击最有效；如何提升学习效率；如何避免割韭菜等。</p>\n</blockquote>\n</li>\n<li><p>价值理性：考虑意义和价值。</p>\n<blockquote>\n<p>比如人与国家的关系、人与世界的关系、社会意义等。</p>\n</blockquote>\n</li>\n<li><p>工具理性有最优答案，价值理性没有标准答案。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"侯世达\"><a href=\"#侯世达\" class=\"headerlink\" title=\"侯世达\"></a>侯世达</h3><ul>\n<li><p>哥德尔不完全性原理：任何一形式系统，只要包括了简单的 <code>初等数论</code> 描述，而且是 <code>自洽的</code>，它必定包含某些系统内所允许的方法既不能证明真，也不能证明伪的命题。</p>\n<ul>\n<li><p>人话：每个数学系统自身都存在无法被自证的部分。</p>\n<blockquote>\n<p>人类通过自身意识不断自我反思（元认知），发展到最后存在一个永远无法触达的盲区。</p>\n</blockquote>\n</li>\n<li><p>启示：如果我们想要理解某一个维度上的信息全貌，仅靠同一维度的认知水平是永远不可能实现的。需要维度之外解决维度之内的问题。同理，降维打击也是如此。</p>\n</li>\n</ul>\n</li>\n<li><p>大脑的台球桌模型：大脑类比一张绝对光滑没有摩擦的台球桌，桌上有 860 亿个（类比大脑神经元的数量）带有磁性的 <code>小球</code> 横冲直撞，若角度和速度满足条件：</p>\n<blockquote>\n<p>小球：代表一系列表征世界的符号、概念、规则以及所有相关集合体。</p>\n</blockquote>\n<ul>\n<li>小球会粘在一起积累成大球，也会撞击使大球解体。</li>\n<li><p>好比人类形成认知过程，从辨别到掌握智慧的过程。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Modern-Philosophy-Human-Cognition.svg\" alt> 人类形成认知的过程</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"巴拉巴西\"><a href=\"#巴拉巴西\" class=\"headerlink\" title=\"巴拉巴西\"></a>巴拉巴西</h3><ul>\n<li><p>能力驱动成功，当能力无法被衡量时，社会网络驱动成功。</p>\n<ul>\n<li>能力驱动：跟个人能力强相关，比如代码工程师、赛跑运动员。</li>\n<li>社会网络驱动：产出被嵌入一个大型网络中，结果不容易被衡量，个人成就不见得与实力高度相关。比如：<ul>\n<li>公务员的能力表现，取决于所处部门、区域、城市、国家大方向和时代的需求</li>\n<li>基金经理的能力表现，很大程度取决于整个市场行情、基金规模</li>\n</ul>\n</li>\n<li>启示：选择职业时，评估自己的禀赋和资源很重要。<ul>\n<li>从事金融、艺术类职业，产出特性就决定了校友关系、家族背景的加持比自身能力更重要。</li>\n<li>毫无背景但却容易逆袭的职业，比如工程师、运动员、销售员、自媒体。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>初始成功 x 社会适应度 = 未来成功</p>\n<ul>\n<li>初始成功：成功才是成功之母，失败只是成功它爸的前女友。</li>\n<li><p>社会适应度：也称为资源吸引度，社会适应度并不完全等同于能力。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Modern-Philosophy-Success.svg\" alt> 初始成功 x 社会适应度 = 未来成功</p>\n</blockquote>\n<blockquote>\n<p>通常来说，表示社会资源密集度的箭头会在赛道层面影响大局，比如移动互联网时代、新能源汽车时代。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"亚里士多德\"><a href=\"#亚里士多德\" class=\"headerlink\" title=\"亚里士多德\"></a>亚里士多德</h3><ul>\n<li>第一性原理：系统性地怀疑你可能怀疑的一切事物，直到你获得无可置疑的珍惜。 —— 勒内·笛卡尔<ul>\n<li>为什么要系统性地怀疑？因为人类本能地习惯用归纳法认识理解世界，但归纳法是经验主义的产物，而人类的经验永远是有边界的，即归纳法的根基不牢靠。</li>\n<li>根基要牢靠，需要从物理学、数学、化学等一些定理、定律触发，一步步推导出一个推论。这种方法也称之为演绎法。</li>\n</ul>\n</li>\n<li>路径依赖：很多默认的习俗和制度都未必是最好的设计，他们有可能只是路径依赖。比如，Apple 的圆角设计，遵循的是黄金分割原则。</li>\n<li>启示：当一个国家或者一个行业，面临底层重构需要从 0 到 1 的情况，需要以第一性原理的思考方法指导工作。</li>\n</ul>\n<h2 id=\"会计学重要模型\"><a href=\"#会计学重要模型\" class=\"headerlink\" title=\"会计学重要模型\"></a>会计学重要模型</h2><ul>\n<li><p>财务状况越糟糕，赌性就越强，越是想一把翻盘。然而，财务知识能帮助我们打破这一种 <code>恶性循环</code>。</p>\n</li>\n<li><p>公司最基本的运作要素：人、事、钱</p>\n<ul>\n<li>人：人力资源（公司）、个人能力（个人）</li>\n<li>事：业务管理（公司）、职业发展（个人）</li>\n<li><p>钱：财务管理（公司）、综合财力（个人）</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Accountancy-Company-3Elems.svg\" alt> 公司三要素</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"资产负债表\"><a href=\"#资产负债表\" class=\"headerlink\" title=\"资产负债表\"></a>资产负债表</h3><ul>\n<li><p>资产负债表：一个公司或一个家庭在某一时刻的体量。</p>\n<ul>\n<li>资产：表示家底有多厚</li>\n<li><p>负债和所有者（股东）权益：表示家底从哪里来</p>\n<table>\n  <tbody>\n      <tr>\n          <th colspan=\"4\"><center>\n          资产负债表（2022年12月10日）单位：万元\n          </center></th>\n      </tr>\n      <tr>\n          <td colspan=\"2\">资产</td>\n          <td colspan=\"2\">负债及所有者（股东）权益</td>\n      </tr>\n      <tr>\n          <td colspan=\"2\"><b>流动资产</b></td>\n          <td colspan=\"2\"><b>负债</b></td>\n      </tr>\n      <tr>\n          <td>货币资金</td>\n          <td>70</td>\n          <td>短期借款</td>\n          <td>50</td>\n      </tr>\n      <tr>\n          <td>应收账款</td>\n          <td>40</td>\n          <td>应付账款</td>\n          <td>150</td>\n      </tr>\n      <tr>\n          <td>存货</td>\n          <td>20</td>\n          <td>应付职工薪酬</td>\n          <td>20</td>\n      </tr>\n      <tr>\n          <td>其他流动资产</td>\n          <td>40</td>\n          <td></td>\n          <td></td>\n      </tr>\n      <tr>\n          <td colspan=\"2\"><b>非流动资产</b></td>\n          <td colspan=\"2\"><b>所有者权益</b></td>\n      </tr>\n      <tr>\n          <td>固定资产</td>\n          <td>100</td>\n          <td>股本</td>\n          <td>80</td>\n      </tr>\n      <tr>\n          <td>无形资产</td>\n          <td>50</td>\n          <td>其他综合收益</td>\n          <td>20</td>\n      </tr>\n      <tr>\n          <td><b>合计</b></td>\n          <td>320</td>\n          <td><b>合计</b></td>\n          <td>320</td>\n      </tr>\n  </tbody>\n</table>\n</li>\n</ul>\n</li>\n<li><p>资产 = 负债 + 所有者权益</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Accountancy-Asset&amp;Debt&amp;Equity-Equation.svg\" alt> 资产 = 负债 + 所有者权益</p>\n</blockquote>\n<ul>\n<li>资产负债表两边一定是等额的</li>\n<li><p>所有者权益小于零时表示资不抵债</p>\n<blockquote>\n<p>比如，我们贷款买房子，房贷（负债）不会随着房价下跌而下降。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"现金流量表\"><a href=\"#现金流量表\" class=\"headerlink\" title=\"现金流量表\"></a>现金流量表</h3><ul>\n<li><p>现金流量表：一个企业或一个家庭在财务上 <code>生死存亡</code> 的关键仪表盘。</p>\n<ul>\n<li>期末现金 = 期初现金 + 本期流入现金 - 本期流出现金</li>\n<li><p>下一起期初的现金 = 上一期期末现金</p>\n<table>\n  <tbody>\n      <tr>\n          <th></th>\n          <th>七月</th>\n          <th>八月</th>\n          <th>九月</th>\n          <th>十月</th>\n          <th>十一月</th>\n          <th>十二月</th>\n      </tr>\n      <tr>\n          <td>月初现金</td>\n          <td>3000000</td>\n          <td>2640000</td>\n          <td>2222000</td>\n          <td>1792000</td>\n          <td>1352000</td>\n          <td>1433000</td>\n      </tr>\n      <tr>\n          <td>月末现金</td>\n          <td>2640000</td>\n          <td>2222000</td>\n          <td>1792000</td>\n          <td>1352000</td>\n          <td>1433000</td>\n          <td>1494000</td>\n      </tr>\n      <tr style=\"color: red\">\n          <td><b>现金流入</b></td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>521000</td>\n          <td>521000</td>\n      </tr>\n      <tr>\n          <td>收入项目1</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>20000</td>\n          <td>20000</td>\n      </tr>\n      <tr>\n          <td>收入项目2</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>500000</td>\n          <td>500000</td>\n      </tr>\n      <tr>\n          <td>收入项目3</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <td>1000</td>\n          <td>1000</td>\n      </tr>\n      <tr style=\"color: green\">\n          <td><b>现金流出</b></td>\n          <td>360000</td>\n          <td>418000</td>\n          <td>430000</td>\n          <td>440000</td>\n          <td>440000</td>\n          <td>460000</td>\n      </tr>\n      <tr>\n          <td>支出项目1</td>\n          <td>15000</td>\n          <td>20000</td>\n          <td>20000</td>\n          <td>30000</td>\n          <td>30000</td>\n          <td>50000</td>\n      </tr>\n      <tr>\n          <td>支出项目2</td>\n          <td>200000</td>\n          <td>253000</td>\n          <td>120000</td>\n          <td>120000</td>\n          <td>120000</td>\n          <td>120000</td>\n      </tr>\n      <tr>\n          <td>支出项目3</td>\n          <td>145000</td>\n          <td>145000</td>\n          <td>290000</td>\n          <td>290000</td>\n          <td>290000</td>\n          <td>290000</td>\n      </tr>\n      <tr>\n          <td><b>现金变动</b></td>\n          <td style=\"color: green\">-360000</td>\n          <td style=\"color: green\">-418000</td>\n          <td style=\"color: green\">-430000</td>\n          <td style=\"color: green\">-440000</td>\n          <td style=\"color: red\">81000</td>\n          <td style=\"color: red\">61000</td>\n      </tr>\n  </tbody>\n</table>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"损益表\"><a href=\"#损益表\" class=\"headerlink\" title=\"损益表\"></a>损益表</h3><ul>\n<li><p>损益表：收入 - 成本 = 利润</p>\n<blockquote>\n<p>深入了解利润的计算方法，推荐阅读《<a href=\"https://book.douban.com/subject/35033236/\" target=\"_blank\" rel=\"noopener\">肖星的财务思维课</a>》、《<a href=\"https://book.douban.com/subject/35299355/\" target=\"_blank\" rel=\"noopener\">手把手教你读财报</a>》</p>\n</blockquote>\n</li>\n<li><p>启示：资产负债表、现金流量表、损益表都是判断公司经营状况的依据。</p>\n<blockquote>\n<p>比如对于股票投资来讲，研读不同公司的年报，通过三张表的财务数据分析判断公司的经营状况，比看 K 线图、技术面分析、行业大趋势拥有更大优势。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"收支资产负债模型\"><a href=\"#收支资产负债模型\" class=\"headerlink\" title=\"收支资产负债模型\"></a>收支资产负债模型</h3><ul>\n<li><p>收支资产负债模型：以不同资金的流向，将个人财务状况划分为以下模型。</p>\n<ul>\n<li>无产无债者：月光族，破局之道是努力开源节流。</li>\n<li>无产有债者：避免陷入消费贷的泥潭，无法自拔！</li>\n<li><p>有产有债者：中产阶级，用隐形负债，主动获取了劣质的、无法产生被动收入的资产。</p>\n<blockquote>\n<p>注意：随着升职加薪而消费升级，表面上光鲜亮丽，实际负债累累。</p>\n</blockquote>\n</li>\n<li><p>高产低债者：收入用来投资获取更多收益的工具，让自己越过越好。</p>\n<blockquote>\n<p>收益工具：金融资产、固定资产、无形资产</p>\n</blockquote>\n</li>\n<li><p>家底相同、起跑线相同的两个家庭，财务理念不同，数十载后资产可能产生几倍甚至十几倍的差异。</p>\n<ul>\n<li>有产有债者，收入是用来让自己越过越好的工具。</li>\n<li>高产低债者，收入是用来投资取更多收益的工具。</li>\n</ul>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Accountancy-Personal-Financial-Model.svg\" alt> 收支资产负债模型</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示1：贷款购买自住房产是很多人生的分水岭，自住房产买的越贵，贷款越多就越容易把人锁死在中产者的行列。</p>\n</li>\n<li><p>启示2：延迟满足感，把存款优先用来打造无形资产或购买投资房产用来出租。</p>\n<ul>\n<li><p>无形资产：音乐、绘画、摄影、书籍、自媒体、进修新学位</p>\n  <table>\n  <tbody>\n      <tr>\n          <td>营销领域</td>\n          <td>商标、互联网域名</td>\n      </tr>\n      <tr>\n          <td>数据领域</td>\n          <td>客户数据、生产经验数据</td>\n      </tr>\n      <tr>\n          <td>版权领域</td>\n          <td>文章、书籍、电影、音乐、短视频</td>\n      </tr>\n      <tr>\n          <td>合同领域</td>\n          <td>建筑许可、特许经营权、土地使用权</td>\n      </tr>\n      <tr>\n          <td>技术领域</td>\n          <td>软著、专利</td>\n      </tr>\n  </tbody>\n  </table>\n\n<blockquote>\n<p>当代年轻人要刻意留意获得无形资产的机会，当然前期得着重提升三类能力：<br>写作能力、美学创造能力、新生产业的理解能力</p>\n</blockquote>\n</li>\n<li><p>劣质资产：消费品</p>\n</li>\n</ul>\n</li>\n<li><p>启示3：多余收入的配置问题</p>\n<ul>\n<li>比如购买一辆豪车，如果是经常跑业务需要，豪车就是优质资产，反之则是劣质资产。</li>\n<li><p>比如不全身心工作，留置空窗期去写一本书、修读一个学位，积累无形资产。</p>\n<blockquote>\n<p>注意：积累无形资产也有风险，比如书籍无人问津、修读 MBA 课程对自己用处不大等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"投资大师的思维模型\"><a href=\"#投资大师的思维模型\" class=\"headerlink\" title=\"投资大师的思维模型\"></a>投资大师的思维模型</h2><ul>\n<li><p>投资大师们的投资哲学</p>\n<ul>\n<li>巴菲特：正统流派，符合常识，长期价值投资</li>\n<li>索罗斯：反正统流派，挑战常识，强调短期获胜</li>\n<li><p>塔勒布：不确定性，但理论体系最为系统全面</p>\n<blockquote>\n<p>代表作：《黑天鹅》、《反脆弱》、《随机生存的智慧》、《随机漫步的傻瓜》</p>\n</blockquote>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Investment-WarrenBuffett-GeorgeSoros-Taleb.svg\" alt> 投资大师们的投资哲学</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"索罗斯\"><a href=\"#索罗斯\" class=\"headerlink\" title=\"索罗斯\"></a>索罗斯</h3><ul>\n<li><p>反身性理论：任何一个系统里，只要参与者是有思维能够进行认知的个体，那么思维和现实之间就一定存在一种相互营销的关系。</p>\n<blockquote>\n<p>一方面思考者努力了解现实，另一方面现实又在不断因为思考者的了解而发生改变，这种变化又会改变思考者的行动，循环往复、导致一种纠缠现象。</p>\n</blockquote>\n</li>\n<li><p>启示：不要太迷信过去的数据来预测股票、基金的价格，记住风险无处不在。</p>\n</li>\n</ul>\n<h3 id=\"巴菲特\"><a href=\"#巴菲特\" class=\"headerlink\" title=\"巴菲特\"></a>巴菲特</h3><ul>\n<li>能力圈模型：充足调研，等待机会，待在能力圈内做事情。</li>\n<li><p>安全边际：支付的价值不能明显低于价值，那么该项投资就没有足够的安全边际。</p>\n<blockquote>\n<p>启示：留出 Buffer，应对意外风险。</p>\n</blockquote>\n</li>\n<li><p>护城河：当一个企业可提高售价但销量不会减少，说明该企业拥有护城河。</p>\n</li>\n</ul>\n<h3 id=\"塔勒布\"><a href=\"#塔勒布\" class=\"headerlink\" title=\"塔勒布\"></a>塔勒布</h3><ul>\n<li><p>反脆弱：遇到黑天鹅，不但没受损反而赚大发了。</p>\n</li>\n<li><p>遍历性：只有活得足够久的人才可以看到概率世界真正模样。</p>\n<blockquote>\n<p>时间概率 v.s. 集合概率</p>\n</blockquote>\n</li>\n<li><p>杠铃策略</p>\n<ul>\n<li>避免把自己的时间精力投资在中风险中收益的东西上。</li>\n<li>研究最危险的东西，同时研究最安全的东西。</li>\n<li><p>了解冒险的本质：J 型曲线 v.s. 倒 J 型曲线</p>\n<ul>\n<li>J 型曲线 ：付出有上限，但回报无上限。</li>\n<li>倒 J 型曲线：回报有上限，付出无下限。</li>\n</ul>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Investment-CurveJ-InvertedCurveJ.svg\" alt> J 型曲线 v.s. 倒 J 型曲线</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示：主动试探，不断证伪，接触能力圈外的事情，即能守圈也能破圈。</p>\n<blockquote>\n<p>小剂量 + 痛苦 + 恢复 = 变强</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"生理学重要模型\"><a href=\"#生理学重要模型\" class=\"headerlink\" title=\"生理学重要模型\"></a>生理学重要模型</h2><ul>\n<li><p>健康三要素：睡眠、饮食、运动、情绪</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Physiology-Health-3Elems.svg\" alt> 健康三要素</p>\n</blockquote>\n</li>\n<li><p>人生长寿八字箴言：少吃、多动、早睡、静心</p>\n</li>\n</ul>\n<h3 id=\"睡眠\"><a href=\"#睡眠\" class=\"headerlink\" title=\"睡眠\"></a>睡眠</h3><ul>\n<li><p>清醒：学习各种知识</p>\n</li>\n<li><p>睡眠：记忆搬运、巩固记忆、缓解压力、充分发散</p>\n<ul>\n<li>快速眼动睡眠<ul>\n<li>积极睡眠，进入此状态脑电波频率变快，同时心率加快、血压升高、肌肉松弛的状态，此阶段特点是眼球不停地左右摆动。</li>\n<li>进入梦乡，跳出逻辑联系，偏向于没有关联的神经元之间建立联系，随机链接优化大脑链接效率，防止大脑僵化。</li>\n</ul>\n</li>\n<li>非快速眼动睡眠：记忆巩固</li>\n</ul>\n</li>\n<li><p>缺乏睡眠，会导致</p>\n<ul>\n<li>免疫力下降、血压升高、新陈代谢失衡、生殖能力减弱</li>\n<li>内分泌系统失调，情绪调节能力变差</li>\n<li><p>容易变胖</p>\n<blockquote>\n<p>睡不好时，身体会降低释放饱腹感信号的瘦素（Leptin）浓度，提高引起饥饿感的胃饥饿素（Ghrelin）浓度。双重信号叠加，产生远超自己摄入能力的食欲。</p>\n</blockquote>\n</li>\n<li><p>长期睡眠少于 6 小时/天，10 天后相当于连续 24 小时没有睡觉。以此类推，有点类似睡眠银行的概念。更严重会让你频繁陷入 <code>微睡眠</code> 状态。</p>\n</li>\n</ul>\n</li>\n<li><p>微睡眠：大白天有几秒钟时间，大脑对外部世界完全没有知觉。当事人难以察觉自己曾陷入过短暂知觉丧失。</p>\n<ul>\n<li>工作效率降低，注意力涣散，容易犯下低级错误。</li>\n<li><p>判断力减弱现象，分不清轻急缓重。</p>\n<blockquote>\n<p>启示：缺乏睡眠的人，通常会高估自己的清醒程度，只是觉得有些疲惫而已。然后，通过形成新的自我刺激的习惯来弥补注意力缺失，比如喝咖啡、功能饮料等。最终形成恶性循环 ，导致睡眠更差。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>你可以会反驳，为什么有的人长期少睡，还能保持健康？</p>\n<blockquote>\n<p>拥有处于表达状态的 BHLHE41基因。</p>\n</blockquote>\n</li>\n<li><p>怎睡个好觉 — 马修沃博士</p>\n<ul>\n<li>1) 坚持固定的入睡时间</li>\n<li>2) 尽量做到每天锻炼</li>\n<li>3) 睡前 8 小时内不要喝咖啡，睡前不喝酒</li>\n<li>4) 下午 3 点之后尽量不要午睡</li>\n<li>5) 千万不要吃宵夜，晚上也别吃太多，因为消化影响入睡效率</li>\n<li><p>6) 睡前放松的时间一定要留出来</p>\n<blockquote>\n<p>洗个热水澡、调低灯光、听听音乐，但不是玩电子设备</p>\n</blockquote>\n</li>\n<li><p>7) 实在睡不着不要硬睡</p>\n</li>\n</ul>\n</li>\n<li><p>内稳态：人体新陈代谢大平衡可纠正局部小失衡</p>\n<blockquote>\n<p>小剂量 + 痛苦 + 恢复 = 成长，经历痛苦之后，恢复过程身体会产生内啡肽。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Physiology-Inner-Steady-State.svg\" alt> 小剂量 + 痛苦 + 恢复 = 成长</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"神经递质\"><a href=\"#神经递质\" class=\"headerlink\" title=\"神经递质\"></a>神经递质</h3><ul>\n<li>区别于激素，激素是内分泌腺体分泌出来的，神经递质是神经细胞分泌出来的。</li>\n<li><p>启示：大目标要拆解成小目标，小目标再拆解成最小可执行单元的 Todo List。四大神经递质闭环助你达成做成一件大事。这也是 PDCA 循环模型的生物学底层原理。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Physiology-Neurotransmitters-Approach-Goal.svg\" alt> 四大神经递质闭环</p>\n</blockquote>\n<ul>\n<li>每天完成 todo list，获得内啡肽型小快乐。</li>\n<li>todo list 通往小目标，小目标冲刺激发去甲肾上腺素释放 。</li>\n<li>小目标通往大目标，大目标达成时给自己一个大奖励，以刺激多巴胺分泌。</li>\n<li><p>大目标完成后，找时间回顾反思，刺激血清素分泌，以提升我们的客观感知力。</p>\n<blockquote>\n<p>即动用元认知能力，回忆推敲整个做事过程，举一反三，提高效率。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"多巴胺\"><a href=\"#多巴胺\" class=\"headerlink\" title=\"多巴胺\"></a>多巴胺</h4><ul>\n<li><p>多巴胺型快乐：先甜后苦型快乐，使人快乐、血管扩张，多巴胺消散后会让人感到失落，得重新寻找更多更刺激的多巴胺快乐。</p>\n<blockquote>\n<p>比如，抽烟、喝酒、打游戏、购物、刷抖音等。</p>\n</blockquote>\n</li>\n<li><p>内啡肽型快乐：先苦后甜型快乐，身体或精神遭受痛苦之后，身体会分泌内啡肽，它的作用是镇痛和平静、增强免疫力。</p>\n<blockquote>\n<p>比如，瑜伽、健身、长跑、唱歌、完成一项任务等。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/Physiology-Endorphins-Dopamine.svg\" alt> 多巴胺 v.s. 内啡肽</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"催产素\"><a href=\"#催产素\" class=\"headerlink\" title=\"催产素\"></a>催产素</h4><ul>\n<li>催产素：让人平静，提高同理心</li>\n</ul>\n<h4 id=\"血清素\"><a href=\"#血清素\" class=\"headerlink\" title=\"血清素\"></a>血清素</h4><ul>\n<li><p>血清素：</p>\n<ul>\n<li>缺乏会导致焦虑、抑郁，有暴力倾向。</li>\n<li>可改善人的睡眠，让人平静，产生幸福感“大爱”的体验。</li>\n</ul>\n</li>\n<li><p>刺激血清素分泌的方法</p>\n<ul>\n<li>晒阳光</li>\n<li>有节奏的运动：慢跑、跳舞的、游泳、<strong>有意识的呼吸</strong></li>\n<li>冥想</li>\n<li>咀嚼：分泌唾液帮助消化，也分泌血清素</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"去甲肾上腺素\"><a href=\"#去甲肾上腺素\" class=\"headerlink\" title=\"去甲肾上腺素\"></a>去甲肾上腺素</h4><ul>\n<li>去甲肾上腺素：面临压力、惩罚、损失时被激发出来，使得我们注意力更集中。但副作用是刺激过后身体会很疲惫，会有虚脱感。</li>\n</ul>\n<h2 id=\"自我管理重要模型\"><a href=\"#自我管理重要模型\" class=\"headerlink\" title=\"自我管理重要模型\"></a>自我管理重要模型</h2><blockquote class=\"blockquote-center\"><p>让自身成效不高的管理者管好他们的同事与下属，那几乎是不可能的事情。管理工作在很大程度上是要言传身教的，若管理者不懂得在工作中做到卓有成效，就会给其他人树立错误榜样。<br>—— 德鲁克《卓有成效的管理者》</p>\n</blockquote>\n<ul>\n<li><p>精力管理 v.s. 身价管理 v.s. 企业管理</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SelfManagment-Vigour-Valuable-Enterprice.svg\" alt> 精力管理 v.s. 身价管理 v.s. 企业管理</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"精力管理\"><a href=\"#精力管理\" class=\"headerlink\" title=\"精力管理\"></a>精力管理</h3><ul>\n<li><p>精力管理不等于时间管理</p>\n<ul>\n<li>可取：精力充沛干两个小时的成果</li>\n<li>避免：浑浑噩噩干十二小时的成果</li>\n</ul>\n</li>\n<li><p>全情投入的力量</p>\n  <table>\n      <tbody align=\"center\">\n          <tr>\n              <th><center>旧挂念<center></center></center></th>\n              <th><center>新观念</center></th>\n          </tr>\n          <tr>\n              <td>\n              管理时间<br>\n              避免压力<br>\n              生活是一场马拉松<br>\n              放松是在浪费时间<br>\n              回报驱动表现<br>\n              依靠自律<br>\n              积极思考的力量<br>\n              </td>\n              <td>\n              管理精力<br>\n              适度承压<br>\n              生活是一系列短跑冲刺<br>\n              放松时有效产出的时间<br>\n              目标驱动表现<br>\n              依靠习惯<br>\n              全情投入的力量\n              </td>\n          </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>人类精力金字塔</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SelfManagment-Vigour-Pyramid.svg\" alt> 人类精力金字塔</p>\n</blockquote>\n</li>\n<li><p>体能与情绪有着密切关系，与思维没什么大关系。然而，当代年轻人着重思维能力训练，而体能、情绪反而是最少的。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SelfManagment-PhysicalForce-Emotion.svg\" alt> 情绪体能四象限图</p>\n</blockquote>\n</li>\n<li><p>钟摆运动：精力消耗与补充的重要原理</p>\n<ul>\n<li>将每天的精力抽象划分为无数个小球，从左往右依次消耗，人每天从旺盛状态逐渐精力消耗编程匮乏状态。</li>\n<li>到达匮乏状态，本能觉得干不动就想休息、补充精力，逐渐恢复到旺盛状态。</li>\n<li><p>而现代人总是过度消耗精力，即钟摆摆到 5 号位置，此刻会进入一种迟钝状态（麻木状态）。</p>\n<blockquote>\n<p>迟钝状态之下，工作效率低下而<strong>不自知</strong>。高效工作避免进入该区域。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/SelfManagment-Pendulum-Movement.svg\" alt> 钟摆运动</p>\n</blockquote>\n</li>\n<li><p>启示：我们要刻意安排休息、专注休息。专注休息的方法有提前总结“补充精力”的仪式、设 定时闹钟有节奏地休息（番茄工作法）。</p>\n<blockquote>\n<p>比如，休息时刷短剧、听听歌等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>建立习惯是精力管理的精髓 —— 詹姆斯·克利尔《掌握习惯》</p>\n<ul>\n<li><p>看得见：让建立习惯的过程可视化，即时反馈机制。</p>\n<blockquote>\n<p>比如，打卡次数、频率、完成任务花费时间等。但注意不要陷入为打卡而打卡、为凑时长而凑时长的窘境。</p>\n</blockquote>\n</li>\n<li><p>闻得香：让难以建立的习惯跟轻松愉悦本能联系在一起。</p>\n<blockquote>\n<p>比如，要求自己完成某项打卡任务后，才能娱乐片刻。</p>\n</blockquote>\n</li>\n<li><p>摸得着：建立复杂的习惯从最简闭环做起。</p>\n<blockquote>\n<p>比如，从每天运动 10 分钟，迈出第一步。随时间推移逐渐增加时间，争取每天能运动半小时。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>同理，杜绝坏习惯也适用该方法，将惩罚与不达标绑定在一起。</p>\n</li>\n</ul>\n<h3 id=\"身价管理\"><a href=\"#身价管理\" class=\"headerlink\" title=\"身价管理\"></a>身价管理</h3><ul>\n<li><p>权力分配的基本原理：世界是不公平的</p>\n</li>\n<li><p>公平世界假设</p>\n<ul>\n<li>假设厉害的人更容易成功，不厉害的人更容易失败。</li>\n<li><p>成功是因为他人的优点，失败是因为他人的缺点。</p>\n<blockquote>\n<p>放大效应：成功会放大他的优点，失败也会放大他的缺点。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>启示：默默积累，打磨能力，把握机会拿到自己第一次关键成功，并且要让大家看到它的重要性。</p>\n</li>\n<li><p>在公司/组织里获得好身价，跟一个产品在市场里卖得好价钱的原理是一样的。</p>\n<ul>\n<li><p>打铁还需自身硬：分工链条的某环节做到最好 <strong>不可取代</strong>。</p>\n<ul>\n<li><p>差异化能力：某项过硬专业能力 + 跟它距离较远的能力。</p>\n<blockquote>\n<p>比如从政府跳到互联网的从业者，在政企合作方面有很大跨界优势；经常去养老院当义工的产品经理，要开发一款老年人的电子产品。</p>\n</blockquote>\n</li>\n<li><p>差异化生态位： 独特的供给，特别客户需求。</p>\n<blockquote>\n<p>差异化能力 $\\neq$ 差异化生态位</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>抓住客户需求：理解老板或公司的需求，愿意站在老板角度换位思考。</p>\n<ul>\n<li>问就是了解老板需求最好的方法</li>\n<li>问他接下来哪些方面的工作最关键</li>\n<li>问他如何看待你接下来应该做的事情</li>\n<li>如果老板需求不明确，要告知对方有什么变化请第一时间联系我</li>\n</ul>\n</li>\n<li><p>产品包装：不仅要把活干好，还得懂得把成果展现出来。</p>\n<ul>\n<li>把握机会的眼光，冷静细致的头脑，敢于站出来的勇气。</li>\n<li>比如关键报告敢于争取署名的机会、工作群里站出来解决公司关键问题。</li>\n</ul>\n</li>\n<li><p>保持外界交流，增加流动性，即维持 <strong>弱联系</strong> 的习惯。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"回到真实世界\"><a href=\"#回到真实世界\" class=\"headerlink\" title=\"回到真实世界\"></a>回到真实世界</h2><h3 id=\"两条成长路线\"><a href=\"#两条成长路线\" class=\"headerlink\" title=\"两条成长路线\"></a>两条成长路线</h3><ul>\n<li><p>两条成长路线：街头智慧 v.s. 书本智慧</p>\n<ul>\n<li>书本智慧：读万卷书行万里路。走这条路最危险的是读的书还不够多，却自以为已经读了很多书，此时会认为自己有主见但实际对世界的理解又很片面。</li>\n<li><p>街头智慧：肉身碰撞世界，依靠长时间肉身去跟残酷概率世界碰撞，用血和泪去沉淀下一种叫经验直觉的体感，这过程中非常考验人的体力、意志力、心理、智力。</p>\n<blockquote>\n<p>启示：任何知识、智慧和想法，如果没有变成结果，它都只是你的潜力，而不是你的实力。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>推荐一部记录片《<a href=\"https://www.bilibili.com/bangumi/play/ep337065\" target=\"_blank\" rel=\"noopener\">富豪谷底求翻身</a>》，街头智慧的最佳诠释。比如：</p>\n<ul>\n<li>自信的力量：表现得自信就已经超过绝大多数人了。</li>\n<li>有需才有供：调研需求，创造销售条件。</li>\n<li>情绪化管理：负面对自身或他人毫无意义。</li>\n<li>仆人式领导：专业人做专业事，懂得尊重、包容、激励、激发人才。</li>\n<li>勤思考少抱怨：遇到挫折专注清醒思考与计算，而不是抱怨和哀叹。</li>\n<li>小目标大局观：不忘初心和使命；两点论和重点论结合。</li>\n<li>先他人后个人：自己想赚钱，先给别人先赚钱。</li>\n<li>多开口大胆问：争取优惠、折扣、福利，可以利用自身行头/优势去获取资源，比如身份、美貌、人缘等，特别是线下交易场景会有明显效果。</li>\n<li><p>同理共情示弱：不管是表演还是真情流露，要懂得主动示弱承认自身不足、主动理解对方立场及体会、诚意做出承诺并且达成诺言。</p>\n<blockquote>\n<p>观察很多成功博主，他们会主动示弱、激发观众同理心，拉近观众距离。另一方面，也会让观众产生“优越感” 和欢乐感。正如张国荣先生讲的“我们的快乐建筑在观众的快乐之上，只有观众快乐我们才可能拥有”。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>街头智慧，需要不断跟世界碰撞，正因为这种碰撞太疼，很多人被撞过后就会放弃。特别是很疼之时，能抓住一根救命稻草就再也不愿意放手，阶层突破到此为止。而他们还会不自觉地攻击其他还在尝试突破现状的人。</p>\n</li>\n</ul>\n<h3 id=\"跨越阶层武器\"><a href=\"#跨越阶层武器\" class=\"headerlink\" title=\"跨越阶层武器\"></a>跨越阶层武器</h3><ul>\n<li><p>代价：为了获得什么，想清楚自己愿意付出什么样的代价。</p>\n<ul>\n<li>获取更好的精力，是否愿意付出更多刷视频或玩游戏的时间来锻炼。</li>\n<li>想挣脱旧的社交环境，是否准备好跟之前的亲人朋友疏远。</li>\n<li>冲入一个陌生的行业，是否准备好在一个无人认可你的环境硬着头皮向所有人请教。</li>\n<li><p>积极储蓄未雨绸缪，是否能忍受长期节约低消费的痛苦。</p>\n<blockquote>\n<p>提示：付出代价不一定能成功跨越阶层。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>时间：遍历性原理，只有活得足够久，才可能看到概率世界真正的模样。</p>\n</li>\n<li><p>环境：选择环境，其实是选择基础概率（先验概率），基础概率大概率决定成败。</p>\n<ul>\n<li>选择权：先高后低，先难后易、先动后静</li>\n<li><p>机会量：涌现，比如更多亚文化、小众职业、小圈子市场</p>\n<blockquote>\n<p>启示 1：选择城市和行业重要程度远远大于公司和职位，因为它们不属于一个量级的比较。<br>启示 2：如果承受了大城市的成本，必须充分挖掘大城市带来的收益。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"职业选择问题\"><a href=\"#职业选择问题\" class=\"headerlink\" title=\"职业选择问题\"></a>职业选择问题</h3><blockquote class=\"blockquote-center\"><p><img src=\"/images/Reading/Interdisciplinary-Thinking/RealWorld-Life-Order.svg\" alt> 四种职业目标</p>\n</blockquote>\n<ul>\n<li><p>四种职业目标</p>\n<ul>\n<li>势：看宏观、看长期、顺应国家发展潮流</li>\n<li>爽：看微观、看长期、顺应自己内心召唤</li>\n<li>钱：看机会、看短期、目标锁定积累金钱</li>\n<li>安：回归生活、远离竞争、进入安稳生活状态</li>\n</ul>\n</li>\n<li><p>不同成长区域，不同职业路线</p>\n<ul>\n<li>2 号区：能不能忍受长期待在一个行业里，很长时间做一个不完美规则的跟随者，慢慢忍耐积累实力。<ul>\n<li>启示1：关注势，而非去尝试发挥潜力，在短时间内一飞冲天。也不要高估自己，在没有积累足够势能下跳出秩序域，过早开创自己的规则。</li>\n<li>启示2：也请不要忽略人脉的价值。因为能力驱动成功，当能力无法被衡量时，社会网络驱动成功，比如通过员工内推找工作。</li>\n<li>启示3：追求安，大城市多年打拼，不想再承受大城市的压力，选择考家乡公务员、进入家乡大企业，但得谨防进入过度封闭导致僵化的状态，我们要不断创造信息和能量交换。</li>\n</ul>\n</li>\n<li><p>3 号区：两种稳定态</p>\n<ul>\n<li><p>钱：先集中精力解决金钱的原始积累问题。很多情况属于起步没有进入正循环，若循规蹈矩不做任何突破，将与 2 号区的差距愈来愈大（马太效应）。</p>\n<blockquote>\n<p>启示：猥琐发育，抓住小机会，在边缘市场赚辛苦钱。</p>\n</blockquote>\n</li>\n<li><p>爽：再去追求一份自己乐此不彼的事业。比如自媒体、个人开发者、个人作家、健身教练等。</p>\n<blockquote>\n<p>提示：有的爽离钱很近，但有的爽离钱很远。比如有的人喜欢收集旧游戏机，开了一间复古游戏机商店，而市场需求决定了它很大机率要凉凉了。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"投资理财问题\"><a href=\"#投资理财问题\" class=\"headerlink\" title=\"投资理财问题\"></a>投资理财问题</h3><ul>\n<li><p>适应人群</p>\n<ul>\n<li>2 号区里有稳定工作的同学，奉行长期主义，理财规划要趁早。</li>\n<li>2、3 号区同学因为一些特殊机缘，已经获得第一桶金。</li>\n</ul>\n</li>\n<li><p>理财建议</p>\n<ul>\n<li>货币基金替代银行存款。</li>\n<li><p>一二线城市房屋出租市场应该会呈现 <code>供需两旺</code> 的现象，比如投资公寓用于出租（只要年化租金收入超过房价 4% 就是划算的）。</p>\n<blockquote>\n<p>注意：公寓不限购，首付高，贷款利率高，没有学区，不能落户。</p>\n</blockquote>\n</li>\n<li><p>中国在不动产资产证券化领域应该有不少的机会，比如 REITs 基金、不动产投资信托资金。</p>\n</li>\n<li>长期定投中国未来 30 年持续增长赛道行业的 ETF 基金（指数基金）。 </li>\n</ul>\n</li>\n</ul>\n","categories":["Reading"],"tags":["内卷","职场","熵","效率","考研","创业"]},{"title":"技术资格考试：中级软件设计师","url":"/2021/12/Mid-Software-Exam.html","content":"<ul>\n<li>刚踏足职场，牢固技术功底对我们未来走得多远尤为重要。然而当今工作环境迫使我们 “沉迷” 追逐新概念、新技术，比如机器学习、大数据技术等，难免内心难免会浮躁不安，有时候走得太快反而淡忘了软工知识体系正是当初上学时期指导我们认识软件世界的重要角色。正如设计模式给我们启示，认知不应依赖于具象，而是抽象概念指导认识，学习应是如此，不随波逐流，巩固根基知识更容易让自我渐入一个熵减过程。</li>\n<li>软件设计师（中级）所考查的内容正是软件工程体系知识树的缩影，很庆幸能借此机会温故知新，同时复习过程以笔记形式记录在案，即知识输入到输出全过程，以构建起属于自己的计算机科学知识体系。</li>\n<li>最后声明一点，知识复盘固然重要，但考试终究要刷题练习。希望笔记内容能帮到有同样备考需要的朋友，若笔记有错误之处，还请您不吝赐教、指正。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"备考调研\"><a href=\"#备考调研\" class=\"headerlink\" title=\"备考调研\"></a>备考调研</h2><h3 id=\"报名信息\"><a href=\"#报名信息\" class=\"headerlink\" title=\"报名信息\"></a>报名信息</h3><ul>\n<li>考试名称：<a href=\"https://www.ruankao.org.cn/\" target=\"_blank\" rel=\"noopener\">计算机技术与软件专业技术资格  (水平) 考试</a></li>\n<li>考纲范围：<a href=\"https://baike.baidu.com/item/软件设计师/8783801?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科 - 考试要求</a></li>\n<li>报名时间：第二季度（2-4 月）；第四季度（7-9 月）</li>\n<li>考试时间：第二季度（5 月）；第四季度（11 月）</li>\n<li>单科满分：<code>75分</code>；合格分数：<code>45分</code></li>\n<li><p>考试形式：<code>客观题</code> 和 <code>主观题</code>，均为 <code>笔试</code></p>\n<blockquote>\n<p>客观题讲究做题技巧，优先考虑排除法；主观题讲究标准解答，复习以真题为主。 </p>\n</blockquote>\n</li>\n<li><p>考试科目：中级软考的科目名称</p>\n  <table>\n      <thead>\n          <tr>\n              <th>专业类别</th>\n              <th>专业类别</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>计算机软件</td>\n              <td>软件设计师 ✓<br>软件评测师<br>软件过程能力评估师</td>\n          </tr>\n          <tr>\n              <td>计算机应用技术</td>\n              <td>多媒体应用设计师<br>嵌入式系统设计师<br>\n              计算机辅助设计师<br>电子商务设计师</td>\n          </tr>\n          <tr>\n              <td>信息系统</td>\n              <td>系统集成项目管理工程师<br>信息系统监理师<br>\n              数据库系统工程师 ✓<br>信息系统管理工程师<br>信息安全工程师</td>\n          </tr>\n          <tr>\n              <td>信息服务</td>\n              <td>计算机硬件工程师<br>信息技术支持工程师</td>\n          </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li>知乎问答：<a href=\"https://www.zhihu.com/question/35689101\" target=\"_blank\" rel=\"noopener\">冯连, faniim 等. 软考中级的软件设计师难考吗. zhihu.com</a></li>\n</ul>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>[ ] 计算机系统导论【※】<ul>\n<li>[ ] 计算机系统基础</li>\n<li>[ ] 计算机体系结构</li>\n</ul>\n</li>\n<li>[ ] 程序设计语言基础<ul>\n<li>[ ] 程序设计语言</li>\n<li>[ ] 语言处理程序：汇编、编译、解释</li>\n</ul>\n</li>\n<li><p>[ ] 数据结构</p>\n<ul>\n<li>[ ] 线性结构</li>\n<li>[ ] 数组 / 矩阵 / 广义表</li>\n<li>[ ] 树</li>\n<li>[ ] 图</li>\n<li>[ ] 查找<ul>\n<li>[ ] 静态查找表</li>\n<li>[ ] 动态查找表</li>\n<li>[ ] 哈希查找表</li>\n</ul>\n</li>\n<li><p>[ ] 排序：内部排序</p>\n  <table>\n  <thead>\n      <tr>\n          <th width=\"20%\">基本类型</th>\n          <th>细分</th>\n      </tr>\n  </thead>\n  <tbody>\n      <tr>\n          <td>插入排序</td>\n          <td>直接插入排序、折半插入排序、希尔排序</td>\n      </tr>\n      <tr>\n          <td>交换排序</td>\n          <td>冒泡排序、快速排序</td>\n      </tr>\n      <tr>\n          <td>选择排序</td>\n          <td>选择排序、堆排序</td>\n      </tr>\n      <tr>\n          <td>归并排序</td>\n          <td>--</td>\n      </tr>\n      <tr>\n          <td>基数排序</td>\n          <td>--</td>\n      </tr>\n  </tbody>\n  </table>\n</li>\n</ul>\n</li>\n<li><p>[ ] 算法设计与分析</p>\n<ul>\n<li>[ ] 基本概念</li>\n<li>[ ] 算法分析</li>\n<li>[ ] 分治法</li>\n<li>[ ] 贪心法</li>\n<li>[ ] 回溯法</li>\n<li>[ ] 动态规划法</li>\n<li>[ ] 分支界限法</li>\n</ul>\n</li>\n<li>[x] 操作系统【※】：进程管理、存储管理、磁盘管理</li>\n<li>[ ] 软件工程基础<ul>\n<li>[ ] 概述</li>\n<li>[ ] 软件过程模型</li>\n<li>[ ] 需求分析</li>\n<li>[ ] 系统设计【※】</li>\n<li>[ ] 系统测试【※】</li>\n<li>[ ] 运行维护</li>\n<li>[ ] 软件项目管理【※】</li>\n<li>[ ] 软件质量</li>\n<li>[ ] 软件度量</li>\n</ul>\n</li>\n<li><p>[x] 面向对象技术【※】</p>\n<ul>\n<li><p>[x] UML：类图、用例图、活动图、时序图、状态图</p>\n<blockquote>\n<p>参考笔记：<a href=\"https://www.kofes.cn/2018/05/Sofeware-Engineering.html#肆-系统建模\">Kofe. 高级软件工程与导论. kofes.cn. 2018</a></p>\n</blockquote>\n</li>\n<li><p>[x] 设计模式：六大设计原则、二十三种模式</p>\n<blockquote>\n<p>参考笔记：<a href=\"https://www.kofes.cn/2018/01/Design-Pattern-Based-on-Android.html\">Kofe. 设计模式之 Android 实践与案例. kofes.cn. 2018</a></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>[x] 数据库技术【※】：数据模型（E-R 模型、数据模型、关系模型）、关系代数、SQL、规范化、事务管理、并发控制</p>\n</li>\n<li>[ ] 网络技术【※】<ul>\n<li>[ ] 网络概述</li>\n<li>[ ] 网络互连硬件</li>\n<li>[ ] 网络协议标准</li>\n</ul>\n</li>\n<li>[x] 标准化和软件知识产权【※】：标准化、软件知识产权（软件著作权、商业秘密权、专利权）</li>\n</ul>\n<h2 id=\"正文内容\"><a href=\"#正文内容\" class=\"headerlink\" title=\"正文内容\"></a>正文内容</h2><h3 id=\"计算机系统导论\"><a href=\"#计算机系统导论\" class=\"headerlink\" title=\"计算机系统导论\"></a>计算机系统导论</h3><h4 id=\"中央处理单元\"><a href=\"#中央处理单元\" class=\"headerlink\" title=\"中央处理单元\"></a>中央处理单元</h4><ul>\n<li><p>CPU 简化模型</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-ComputingIntroduction-CPU-Simple.svg\" alt> CPU 简化模型</p>\n</blockquote>\n</li>\n<li><p>CPU 组成结构</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-ComputingIntroduction-CPU.svg\" alt> CPU 基本组成结构</p>\n</blockquote>\n</li>\n<li><p>运算单元</p>\n<ul>\n<li>算术逻辑单元 ALU：对数据的算术运算和逻辑运算。</li>\n<li><p>累加寄存器 AC：为 ALU 提供一个工作区。</p>\n<blockquote>\n<p>注意累加寄存器是通用寄存器之一。</p>\n</blockquote>\n</li>\n<li><p>数据缓冲寄存器 DR：CPU 与内存、外部设备之间的数据传送中转站。</p>\n</li>\n<li>状态条件寄存器 PSW：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容。</li>\n</ul>\n</li>\n<li><p>控制单元</p>\n<ul>\n<li>指令寄存器 IR：当前执行的指令。</li>\n<li>程序计数器 PC：下一条要执行的指令的地址。</li>\n<li>地址寄存器 AR：保存当前 CPU 所访问的内存单元的地址。</li>\n<li>指令译码器 ID：包含操作码与地址码两部分。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总线系统\"><a href=\"#总线系统\" class=\"headerlink\" title=\"总线系统\"></a>总线系统</h4><ul>\n<li>一条总线系统同一时刻仅允许一个设备发送，但允许多个设备接口。</li>\n<li>总线分类<ul>\n<li>数据总线：CPU 与 RAM 之间来回传送需要处理或存储的数据。</li>\n<li>地址总线：指定在  RAM 之中存储的数据的地址。</li>\n<li>控制总线：将微处理器控制单元的信号传送到周边设备。</li>\n</ul>\n</li>\n<li>总线的性能指标：带宽 = 位宽 / 工作频率<ul>\n<li>带宽：单位时间传送的数据总量，单位 B/s</li>\n<li>位宽：数据总线的位数，单位 B</li>\n<li>工作频率：单位时间振幅的频率，f = 1/t，单位 GHzz、MHz</li>\n</ul>\n</li>\n<li>[例] 总线带宽为 32 bit，时钟频率为 200 MHz，若总线上每 5 个时钟周期传送一个 32 bit 字，则该总线的带宽为（B/s）？<ul>\n<li>总线带宽对齐： 32 bit / 8 bit = 4B</li>\n<li>每个时钟周期： t = 1 / f = 1 / 200</li>\n<li>该总线的带宽：4 / (5* 1/200) = 160 MB/s</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据库技术\"><a href=\"#数据库技术\" class=\"headerlink\" title=\"数据库技术\"></a>数据库技术</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>数据库管理系统（DBMS）的功能：</p>\n<ul>\n<li><p>数据库定义语言（Data Definition Language, DDL）</p>\n<ul>\n<li>外模式、概念模式和内模式的定义</li>\n<li>数据库完整性定义</li>\n<li><p>安全保密定义（口令、级别和存取权限）</p>\n<blockquote>\n<p>这些定义存储在数据字典中。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>数据库操纵语言（Data Manipulation Language, DML）：对数据的基本操作（增删改查）</p>\n</li>\n</ul>\n</li>\n<li><p>数据库管理系统的分类：</p>\n<ul>\n<li>关系数据库系统：借助集合代数等概念及方法处理数据库中的数据。</li>\n<li>面向对象的数据库系统<ul>\n<li>面向对象数据模型能完整描述现实世界的数据结构，能表达数据间的嵌套、递归联系</li>\n<li>具有面向对象技术的封装、继承特性</li>\n</ul>\n</li>\n<li>对象关系数据库系统：在传统的关系数据库模型基础上，提供元组、数组、集合等更为丰富的数据类型以及其操作方法。</li>\n</ul>\n</li>\n<li><p>数据库系统的体系结构</p>\n<ul>\n<li>客户端 / 服务器模式（C/S模式）</li>\n<li>并行式：数据库系统是多个物理上连在一起的处理器（CPU）</li>\n<li>分布式：数据库系统是多个地理分开的处理器（CPU）</li>\n</ul>\n</li>\n<li><p>数据库三级模式结构</p>\n<ul>\n<li>外模式：又称用户模式，对应 <code>用户级</code>，是某个或某几个用户所看到的数据库的数据视图，可利用 DML 对数据记录进行操作。</li>\n<li>概念模式：又称逻辑模式，对应 <code>概念级</code>，是数据库中全部数据的逻辑结构和特征的总体描述，并以数据库管理系统提供的 DDL 来描述定义。</li>\n<li><p>内模式：又称存储模式，对应 <code>物理级</code>，是数据库中全体数据的内部表示或底层描述。</p>\n<blockquote>\n<p>例如：记录的存储方式为顺序存储、B/B+ 树结构存储亦或是 Hash 存储；索引的组织方式；数据是否压缩等。</p>\n</blockquote>\n</li>\n<li><p>两级映像：保证数据库的数据具有较高的 <code>逻辑独立性</code> 和 <code>物理独立性</code>。</p>\n<ul>\n<li>外模式 / 模式映射：外部级与概念级之间。</li>\n<li><p>模式 / 内模式映像：概念级与内部级之间。</p>\n<blockquote>\n<p>为保证程序正确运作，物理结构 / 逻辑结构改变，需要修改对应模式之间映像。</p>\n</blockquote>\n<table>\n<thead>\n  <tr>\n  <th width=\"20%\">特性</th>\n  <th>解释</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n      <td>物理独立性</td>\n      <td>数据库的内模式发生改变时，数据逻辑结构不变</td>\n  </tr>\n  <tr>\n      <td>逻辑独立性</td>\n      <td>用户应用程序与数据的逻辑结构是相互独立的</td>\n  </tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据库系统体系结构示意图：</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-3layout-model.svg\" alt>关系数据库的三级模式结构</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><ul>\n<li><p>模型三要素</p>\n<ul>\n<li>数据结构： 所研究的对象类型的集合。</li>\n<li>数据操作：对数据库中各种对象的实例（值）允许执行的操作集合，包括操作及操作规则。</li>\n<li>数据的约束条件：完整性规则的集合。</li>\n</ul>\n</li>\n<li><p>实体-联系模型（E-R 模型）</p>\n<ul>\n<li>实体</li>\n<li><p>联系</p>\n<ul>\n<li><p>一对一（1:1）：实体集 $E_1$ 与实体集 $E_2$ 集最多只有一个实体相联系。</p>\n<blockquote>\n<p>任意选择一方，加入对方主键</p>\n</blockquote>\n</li>\n<li><p>一对多（1:n）：实体集 $E_1$ 中一个实体与实体集 $E_2$ 中多个实体相联系。</p>\n<blockquote>\n<p>多方加入对方主键</p>\n</blockquote>\n</li>\n<li><p>多对多（m:n）：实体集 $E_1$ 中多个实体与实体集 $E_2$ 中多个实体相联系。</p>\n<blockquote>\n<p>联系集中加入双方主键</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>属性</p>\n<ul>\n<li><p>简单属性、复合属性</p>\n<blockquote>\n<p>简单属性是原子的、不可再分</p>\n</blockquote>\n</li>\n<li><p>单值属性、多值属性</p>\n<blockquote>\n<p>姓名 — 单值属性；男/女 — 多值属性</p>\n</blockquote>\n</li>\n<li><p>NULL 值：表示无意义或者不知道。</p>\n</li>\n<li>派生属性：可从其他属性得到。例如，<code>工作年限</code> 可以从 <code>参加工作时间</code> 计算而得。</li>\n</ul>\n</li>\n<li><p>E-R 图中主要构件</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-e-r.svg\" alt> E-R 图中主要构件</p>\n</blockquote>\n</li>\n<li><p>扩充的 E-R 模型</p>\n<ul>\n<li><p>弱实体：一个实体的存在必须以另一个实体为前提。</p>\n<blockquote>\n<p>例如：某职工的家属，某家属是属于某职工的。</p>\n</blockquote>\n</li>\n<li><p>特殊化：实体集具有相同的属性，但实体集可按照某些特征区分为几个子实体。</p>\n<blockquote>\n<p>例如：学生实体集可区分为：博士生、研究生、本科生、大专生等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据模型</p>\n<ul>\n<li><p>层次模型：树型结构表示数据间的联系。在层次模型中，每一结点表示一个记录类型（实体），记录之间的联系用结点之间的连线表示，并且除根节点以外其他结点有且仅有一个双亲结点。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-hierarchical-model.svg\" alt>层次模型</p>\n</blockquote>\n</li>\n<li><p>网状模型：层次模型的特例，即去掉层次结构的限制，允许两个结点之间有多种联系（复合联系）。</p>\n</li>\n<li><p>关系模型：使用表格结构表达实体以及实体集之间的联系。</p>\n<ul>\n<li>S(Sno, Sname, SD, Sage, Sex)：学生S(学号, 姓名, 系, 年龄, 性别)</li>\n<li>T(Tno, Tname, Age, Sex)：教师T(工号, 姓名, 年龄, 性别)</li>\n<li>C(Cno, Cname, Pcon)：课程C(课程号, 课程名称, 先修课程号)</li>\n<li><p>SC(Sno, Cno, Grade)：选课SC(学号, 课程号, 成绩)</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-relation-model.svg\" alt>关系模型</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>面向对象模型：存储对象是以对象为单位，每个对象包含对象的属性和方法，具有类和继承等特性。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"关系代数\"><a href=\"#关系代数\" class=\"headerlink\" title=\"关系代数\"></a>关系代数</h4><h5 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h5><h6 id=\"属性和域\"><a href=\"#属性和域\" class=\"headerlink\" title=\"属性和域\"></a>属性和域</h6><ul>\n<li><p><code>属性和域</code>：描述一个事物常常取若干特征来表示，特征又可称为属性（Attribute）。每个属性取值范围对应一个值的集合，称之为该属性的域（Domain）。</p>\n<blockquote>\n<p>第一范式：通常要求所有域都应该是原子数据。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"笛卡尔积与关系\"><a href=\"#笛卡尔积与关系\" class=\"headerlink\" title=\"笛卡尔积与关系\"></a>笛卡尔积与关系</h6><ul>\n<li><p>定义 1：设 $D_1, D_2, …, D_n$ 为任意集合，定义其笛卡尔积为：</p>\n<script type=\"math/tex; mode=display\">\n  D_1 \\times D_2 \\times ... \\times D_n = \\{\n      (d_1, d_2, ..., d_i, ..., d_n) | \n      d_i \\in D_i, i = 1, 2, 3, ..., n \n  \\}</script><ul>\n<li><p>每一种元素 $(d_1, d_2, …, d_i, …, d_n)$ 称为一个 n 元组（包含 n 个属性的元组），元组的每一个值 $d_i$ 称为元组的一个 <code>分量</code>。</p>\n<blockquote>\n<p>笛卡尔积可用二维表表示，每行表示一个元组，每列表示一种属性，每列的值来源于一个域。</p>\n</blockquote>\n</li>\n<li><p>若 $D_i (i = 1, 2, …, n)$ 为有限集，其基数为 $m_i (i = 1, 2, …, n)$，则 $D_1 \\times D_2 \\times… \\times D_n$ 的基数为：</p>\n<script type=\"math/tex; mode=display\">\n  M = \\prod_{i=1}^n m_i</script></li>\n<li><p>[例] 若 $D_1 = { 0, 1 }, D_2 = { a, b }, D_1 = { c, d }$，求 $D_1 \\times D_2 \\times D_3$</p>\n<p>  [解] 笛卡尔积中每一个元素应该是一个三元组：</p>\n<script type=\"math/tex; mode=display\">\n  D_1 \\times D_2 \\times D_3 = \\{ \n      (0, a, c), (0, a, d), (0, b, c), \n      (0, b, d), (1, a, c), (1, a, d), \n      (1, b, c), (1, b, d)\n  \\}</script>  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-cartesian-exp1.svg\" alt=\"笛卡尔积二维表示\"> 笛卡尔积二维表示</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>定义 2：$D_1 \\times D_2 \\times… \\times D_n$ 的子集称为在域 $D_1, D_2, …, D_n$ 上的关系，记作 $R(D_1, D_2, …, D_n)$，称关系 R 为 n 元关系。</p>\n<ul>\n<li>笛卡尔积是所有可能的组合，参与运算的某属性的取值范围（域）$D_1, D_2, …, D_n$ 并不会取全部的可能值（组合需要有意义）。</li>\n<li><p>[例] 姓名的域往往抽取有限个 {张三，李四}，学号的域也是抽取有限个 {00001, 00002, 00003}。但笛卡尔积给出他们所有的可能组合，现实情况是一个有且仅有一个学号。</p>\n  <figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t(张三，100101), (张三，100102), (张三，100103), </span><br><span class=\"line\">\t(李四，100101), (李四，100102), (李四，100103) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"关系的相关名词\"><a href=\"#关系的相关名词\" class=\"headerlink\" title=\"关系的相关名词\"></a>关系的相关名词</h6><ul>\n<li>目或度：R 表示关系的名字，n 是关系的目或度。</li>\n<li>候选码：关系中某一属性或者属性组的值能唯一地标识一个元组。</li>\n<li>主码：关系中有多个候选码，选择其一为主码。</li>\n<li>主属性：包含在候选码中的属性；不包含在任何候选码的属性称为非主属性。</li>\n<li>外码：关系模式 R 中的属性或者属性组非该关系的码，但为其他关系的码，那么该属性集对关系模式 R 而言既外码。</li>\n<li>全码：关系模型中所有属性组都为这个关系模式的候选码。</li>\n</ul>\n<h6 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h6><ul>\n<li><code>完整性约束</code>：保证当授权用户对数据库修改时不会破坏 <code>数据的一致性</code>。<ul>\n<li>实体完整性：关系 R 的主属性不能取 NULL 值。</li>\n<li>参照完整性：关系模型中实体间的联系是用关系描述的，故存在关系间的 <code>引用</code>。</li>\n<li>用户定义完整性</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"关系运算\"><a href=\"#关系运算\" class=\"headerlink\" title=\"关系运算\"></a>关系运算</h5><ul>\n<li><p><code>关系运算</code>：关系操作的操作对象与结果都是 <code>集合</code>。</p>\n  <table>\n      <thead>\n      <tr>\n          <th>关系运算</th>\n          <th>运算符</th>\n          <th>含义</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>集合运算</td>\n          <td>$\\cup \\\\ - \\\\ \\cap \\\\ \\times$</td>\n          <td>并<br>差<br>交<br>笛卡尔积</td>\n      </tr>\n      <tr>\n          <td>比较运算</td>\n          <td>$> \\\\ \\geq \\\\ < \\\\ \\leq \\\\ = \\\\ \\neq$</td>\n          <td>大于<br>大于等于<br>小于<br>小于等于<br>等于<br>不等于</td>\n      </tr>\n      <tr>\n          <td>逻辑运算</td>\n          <td>$\\neg \\\\ \\wedge \\\\ \\vee$</td>\n          <td>非<br>与<br>或</td>\n      </tr>\n      <tr>\n          <td>专门的运算</td>\n          <td>$\\sigma \\\\ \\pi \\\\ \\bowtie \\\\ \\div$</td>\n          <td>选择<br>投影<br>连接<br>除</td>\n      </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h5 id=\"基本的关系代数运算\"><a href=\"#基本的关系代数运算\" class=\"headerlink\" title=\"基本的关系代数运算\"></a>基本的关系代数运算</h5><h6 id=\"并（Union）\"><a href=\"#并（Union）\" class=\"headerlink\" title=\"并（Union）\"></a>并（Union）</h6><ul>\n<li>关系 R 与 S 具有相同的关系模式（R与S的元数相同、结构相同）。</li>\n<li><p>关系 R 与 S 的并属于 R 或属于 S 的元组构成的集合，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\cup S = \\{\n      t | t \\in R \\vee t \\in S\n  \\}，t \\, \\text{为元组变量}</script></li>\n</ul>\n<h6 id=\"差（Difference）\"><a href=\"#差（Difference）\" class=\"headerlink\" title=\"差（Difference）\"></a>差（Difference）</h6><ul>\n<li>关系 R 与 S 具有相同的关系模式。</li>\n<li><p>关系 R 与 S 的差由属于 R 但不属于 S 的元组构成的集合，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R - S = \\{t | t \\in R \\wedge t \\notin S\\}</script></li>\n</ul>\n<h6 id=\"广义笛卡儿积（Cartesian）\"><a href=\"#广义笛卡儿积（Cartesian）\" class=\"headerlink\" title=\"广义笛卡儿积（Cartesian）\"></a>广义笛卡儿积（Cartesian）</h6><ul>\n<li><p>广义笛卡儿积（Extended Cartesian Product）</p>\n<ul>\n<li><p>元数分别为 n 和 m 目的关系 R 与 S 的广义笛卡儿积为一个 n+m 列的元组集合。记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\times S = \\{\n      t|t = <t^n, t^m> \\, \\wedge \\, t^n \\in R \\wedge \\, t^m \\in S\n  \\}</script><blockquote>\n<p>&lt;$t^n$, $t^m$&gt; 为元组 $t^n$ 与 $t^m$ 拼接成的一个元组。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"投影（Projection）\"><a href=\"#投影（Projection）\" class=\"headerlink\" title=\"投影（Projection）\"></a>投影（Projection）</h6><ul>\n<li><p>投影：从关系的 <code>垂直方向</code> 进行运算，在关系 R 中选择若干属性列 A 组成新的关系，记作：</p>\n<script type=\"math/tex; mode=display\">\n  \\pi_A(R) = \\{  t[A] | t \\in R \\}</script></li>\n</ul>\n<h6 id=\"选择（Selection）\"><a href=\"#选择（Selection）\" class=\"headerlink\" title=\"选择（Selection）\"></a>选择（Selection）</h6><ul>\n<li><p>选择：从关系的 <code>水平方向</code> 进行运算，是从关系 R 中选择满足给定条件的诸元组，记作：</p>\n<script type=\"math/tex; mode=display\">\n  \\sigma_F(R) = \\{ t | t \\in R \\wedge F(t) = True \\}</script><ul>\n<li>F 中运算对象是属性名（或列序号）、常数、运算符（算术比较符和逻辑运算符）。</li>\n<li>[例1] $\\sigma_{1 \\geq 6}(R)$ 表示选取 R 关系中第一个属性大于等于第六个属性的元组； </li>\n<li>[例2] $\\sigma_{1 \\geq 6}(R)$ 表示选取 R 关系中第一个属性大于等于 6 的元组。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"扩展的关系代数运算\"><a href=\"#扩展的关系代数运算\" class=\"headerlink\" title=\"扩展的关系代数运算\"></a>扩展的关系代数运算</h5><h6 id=\"交（Intersection）\"><a href=\"#交（Intersection）\" class=\"headerlink\" title=\"交（Intersection）\"></a>交（Intersection）</h6><ul>\n<li>关系 R 与 S 具有相同的关系模式。</li>\n<li><p>关系 R 与 S 的交是由属于 R 同时又属于 S 的元组构成的集合，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\cap S = \\{t | t \\in R \\wedge t \\in S \\}</script><blockquote>\n<p>等价于 $R \\cap S = R-(R-S)$</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"连接（Join）\"><a href=\"#连接（Join）\" class=\"headerlink\" title=\"连接（Join）\"></a>连接（Join）</h6><ul>\n<li>无条件连接：笛卡儿积</li>\n<li><p>有条件连接：$\\theta$ 连接 / 等值连接 / 自然连接</p>\n<ul>\n<li><p>$\\theta$ 连接：从笛卡儿积中选取属性间满足一定条件的元组，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\bowtie_{X \\theta Y} S = \\{\n      t | t = <t^n, t^m> \\wedge\n      t^n \\in R \\wedge t^m \\in S \\wedge\n      t^n[X] \\, \\theta \\, t^m[Y]\n  \\}</script></li>\n<li><p>$X \\theta Y$ 为连接条件，$\\theta$ 为比较运算符。X、Y 分别是关系 R、S 上度数相等且可比的属性组。</p>\n<ul>\n<li>$t^n[X]$ 表示 R 中 $t^n$ 元组对应于属性 X 的一分量。</li>\n<li>$t^m[Y]$ 表示 S 中 $t^m$ 元组对应于属性 Y 的一分量。</li>\n</ul>\n</li>\n<li><p>等值连接：当 $\\theta$ 为 <code>=</code> 时称作等值连接，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\bowtie_{X = Y} S = \\{\n      t | t = <t^n, t^m> \\wedge\n      t^n \\in R \\wedge t^m \\in S \\wedge\n      t^n[X] = t^m[Y]\n  \\}</script></li>\n<li><p>自然连接</p>\n<ul>\n<li>特殊的 <code>等值连接</code>，他要求两个关系中进行比较的分量必须是相同属性组，并且在结果集中将 <code>重复属性列去掉</code>。</li>\n<li><p><code>一般连接</code>是从关系的 <code>水平方向</code> 运算；自然连接不仅从关系的 <code>水平方向</code> 和 <code>垂直方向</code> 运算。因此自然会去掉重复属性。</p>\n<blockquote>\n<p>没有重复属性，自然连接自然转化为笛卡儿积。</p>\n</blockquote>\n</li>\n<li><p>自然连接可由基本关系运算笛卡儿积和选取运算表示：</p>\n<script type=\"math/tex; mode=display\">\n  R \\bowtie S = \\prod_{\n      A_1, A_2, ..., A_{n-k}, \n      R.B_1, R.B_2, ..., R.B_k,\n      B_{k+1}, ..., B_m\n  }(\n      \\sigma_{R.B_1 = S.B_1 \\wedge ... \\wedge R.B_k = S.B_k}\n      (R \\times S)\n  )</script><p>  [例] 设有关系 R 与 S，求自然连接 $R \\bowtie S$。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-join-exp.svg\" alt> 自然连接</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"除（Division）\"><a href=\"#除（Division）\" class=\"headerlink\" title=\"除（Division）\"></a>除（Division）</h6><ul>\n<li>同时从关系的水平方向和垂直方向进行运算。</li>\n<li>给定关系 R(X, Y) 和 S(Y, Z)，X、Y、Z 为属性组。</li>\n<li><p>$R \\div S$ 应当满足元组在 X 上的分量值 $x$ 的象集 $Y_x$ 包含在关系 S 在属性 Y 上投影的集合，记作：</p>\n<script type=\"math/tex; mode=display\">\n  R \\div S = \\{\n      t^n[X] | t^n \\in R \\wedge \\pi_y(S) \\subseteq Y_x \n  \\}</script><blockquote>\n<p>$Y_x$ 为 $x$ 在 R 中的象集，$x = t^n[X]$，且 $R \\div S$ 的结果集的属性组为 X。</p>\n</blockquote>\n</li>\n<li><p>[例] 设有关系 R 与 S，求 $R \\div S$。</p>\n<ul>\n<li>由定义可得，X 为属性 AB，Y 为属性 CD。</li>\n<li>关系 S 在 Y 上的投影为 $\\pi_{CD}(S) = {(c, d), (e, f)}$。</li>\n<li>关系 R 的属性组 X 可取 3 个值 {(a, b), (b, d), (c, k)}，则它们的象集分别为：<ul>\n<li>$CD_{(a, b)} = { (c, d), (e, f), (h, k) }$</li>\n<li>$CD_{(b, d)} = { (e, f), (d, l) }$</li>\n<li>$CD_{(c, k)} = { (c, d), (e, f) }$</li>\n</ul>\n</li>\n<li><p>上述象集包含 $\\pi_{CD}(S)$ 有 (a, b) 和 (c, k)，为此 $R \\div S = { (a, b), (c, k) }$。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-division-exp.svg\" alt>$R \\div S$</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"外连接（Outer-Jion）\"><a href=\"#外连接（Outer-Jion）\" class=\"headerlink\" title=\"外连接（Outer Jion）\"></a>外连接（Outer Jion）</h6><ul>\n<li>外连接（Outer Jion）：自然连接时某些属性值不同则会导致这些元组被舍弃，而外连接正是用于处理由于连接运算而信息缺失的问题。<ul>\n<li>左外连接：取出左侧关系中所有与右侧关系中任一元组都不匹配的元组，用空值 NULL 填充所有来自右侧关系的属性，以构成新的元组。</li>\n<li>右外连接：取出右侧关系中所有与左侧关系中任一元组都不匹配的元组，用空值 NULL 填充所有来自右侧关系的属性，以构成新的元组。</li>\n<li>全外连接：<ul>\n<li>完成左外连接和右外连接操作。</li>\n<li>填充左侧关系中所有与右侧关系中任一元组都不匹配的元组，并填充右侧关系中所有与左侧关系中任一元组都不匹配的元组，产生新元组加入自然连接的结果中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>[例] 设有关系 R 与 S，求 R 与 S 的左外连接、右外连接以及全外连接。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-outerjoin-exp.svg\" alt> 关系 R 与 S 的外连接</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"SQL-语言\"><a href=\"#SQL-语言\" class=\"headerlink\" title=\"SQL 语言\"></a>SQL 语言</h4><h5 id=\"SQL-基本结构\"><a href=\"#SQL-基本结构\" class=\"headerlink\" title=\"SQL 基本结构\"></a>SQL 基本结构</h5><ul>\n<li>数据定义语言 (DDL)：Create、Alter 和 Drop</li>\n<li>数据操作语言 (DML)：Insert、Update 和 Delete</li>\n<li>数据查询语言 (DQL)：Where，Order By，Group By 和 Having</li>\n<li>数据控制语言 (DCL)：Grant、Revoke</li>\n</ul>\n<h5 id=\"SQL-数据定义\"><a href=\"#SQL-数据定义\" class=\"headerlink\" title=\"SQL 数据定义\"></a>SQL 数据定义</h5><h6 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h6><ul>\n<li><p>创建表：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mytable (</span><br><span class=\"line\">\t<span class=\"comment\">-- int 类型，不为空，自增</span></span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">\t<span class=\"comment\">-- int 类型，不为空</span></span><br><span class=\"line\">\tfid <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"comment\">-- decimal 类型，不可为空，默认值为 1.0</span></span><br><span class=\"line\">\t<span class=\"comment\">-- 前一个代表整数的位数，后一个代表小数的位数</span></span><br><span class=\"line\">\tcol1 <span class=\"built_in\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">6</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1.0</span>,</span><br><span class=\"line\">\t<span class=\"comment\">-- 变长字符串类型，最长为 45 个字符，可以为空</span></span><br><span class=\"line\">\tcol2 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">45</span>) <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"comment\">-- 日期类型，可为空</span></span><br><span class=\"line\">\tcol3 <span class=\"built_in\">DATE</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t<span class=\"comment\">-- 设置主键为 id</span></span><br><span class=\"line\">\tPRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">\t<span class=\"comment\">-- 设置外键为 fid</span></span><br><span class=\"line\">\t<span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (fid) <span class=\"keyword\">REFERENCES</span> mytable1(fid)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"修改表\"><a href=\"#修改表\" class=\"headerlink\" title=\"修改表\"></a>修改表</h6><ul>\n<li><p>添加列：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> <span class=\"keyword\">col</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除列：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> <span class=\"keyword\">col</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除表：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> mytable;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h6><ul>\n<li><p>创建表时创建索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名 (</span><br><span class=\"line\">\t字段名<span class=\"number\">1</span> 数据类型 [完整性约束条件…],</span><br><span class=\"line\">\t字段名<span class=\"number\">2</span> 数据类型 [完整性约束条件…],</span><br><span class=\"line\">\t<span class=\"comment\">-- UNIQUE：每一个索引值只对应唯一的数据记录</span></span><br><span class=\"line\">\t<span class=\"comment\">-- CLUSTER：建立聚簇索引</span></span><br><span class=\"line\">\t[<span class=\"keyword\">UNIQUE</span> | CLUSTER] <span class=\"keyword\">INDEX</span> | <span class=\"keyword\">KEY</span></span><br><span class=\"line\">\t[索引名] (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CREATE 在已存在的表上创建索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> [<span class=\"keyword\">UNIQUE</span> | CLUSTER] <span class=\"keyword\">INDEX</span> 索引名 </span><br><span class=\"line\"><span class=\"keyword\">ON</span> 表名 (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>]) ;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ALTER TABLE 在已存在的表上创建索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> [<span class=\"keyword\">UNIQUE</span> | CLUSTER] <span class=\"keyword\">INDEX</span></span><br><span class=\"line\">索引名 (字段名[(长度)] [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>]) ;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h6><ul>\n<li><p>删除索引：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> 索引名 <span class=\"keyword\">ON</span> 表名字;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h6><ul>\n<li><p>创建视图：创建视图必须遵循以下规定</p>\n<ul>\n<li>子查询可以是任意复杂的 SELECT 语句，但通常不允许含有 <code>ORDER BY</code> 子句和 <code>DISTINCT</code> 短语。</li>\n<li><code>WITH CHECK OPTION</code> 表示对 <code>UPDATE</code>、<code>INSERT</code>、<code>DELETE</code> 操作时保证更新、插入或删除的行满足视图定义中的谓语条件，即子查询中的条件表达式。</li>\n<li><p>组成视图的属性列名要么全部省略 / 全部制定。</p>\n<blockquote>\n<p>若全部省略属性列名，则由隐含该视图的 SELECT 子查询目标列的主属性组成。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> 视图名 (属性列名)</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> 查询子句</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">CHECK</span> <span class=\"keyword\">OPTION</span>];</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h6><ul>\n<li><p>删除视图：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> 视图名</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SQL-数据查询\"><a href=\"#SQL-数据查询\" class=\"headerlink\" title=\"SQL 数据查询\"></a>SQL 数据查询</h5><h6 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h6><ul>\n<li><p>SELECT 基本结构</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">ALL</span>|<span class=\"keyword\">DISTINCT</span>] &lt;目标列表达式&gt;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;表名或视图名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> &lt;条件表达式&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;列名&gt; [<span class=\"keyword\">HAVING</span> &lt;条件表达式&gt;]]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;列名&gt; [<span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>SELECT</code> 子句对应关系代数中的 <code>投影运算</code>。</p>\n<ul>\n<li>输出结果可以是列名、表达式、聚合函数（COUNT、AVG、SUM、MAX、MIN）</li>\n<li>DISTINCT 确保查询结果集中不存在重复元组，它作用于所有列，也就是说所有列的值都相同才算相同。</li>\n</ul>\n</li>\n<li><code>FROM</code> 子句对应关系代数中的 <code>笛卡儿积</code>。</li>\n<li><p><code>WHERE</code> 子句对应关系代数中的 <code>选择谓语</code>， WHERE 子句的表达式中可使用的运算符如下表所示。</p>\n  <table>\n      <thead>\n      <tr>\n          <th>操作符</th>\n          <th>说明</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>=</td>\n          <td>等于</td>\n      </tr>\n      <tr>\n          <td><</td>\n          <td>小于</td>\n      </tr>\n      <tr>\n          <td>></td>\n          <td>大于</td>\n      </tr>\n      <tr>\n          <td><></td>\n          <td>不等于</td>\n  </tr>\n  <tr>\n          <td>$\\leq$</td>\n          <td>小于等于</td>\n      </tr>\n      <tr>\n          <td>$\\geq$</td>\n          <td>大于等于</td>\n      </tr>\n      <tr>\n          <td>BETWEEN</td>\n          <td>在两个值之间</td>\n      </tr>\n      <tr>\n          <td>IS NULL / IS NOT NULL</td>\n          <td>为 NULL / 不为 NULL</td>\n      </tr>\n      </tbody>\n  </table>\n\n<ul>\n<li>应该注意到 <code>NULL</code>、<code>0</code> 与 <code>空字符串</code> 是不同的概念。</li>\n<li><code>AND</code> 和 <code>OR</code> 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 <code>()</code> 来决定优先级，使得优先级关系更清晰。</li>\n<li><code>IN</code> 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</li>\n<li><code>NOT</code> 操作符用于否定一个条件。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h6><ul>\n<li><p>内连接：又称 <code>等值连接</code>，使用普通查询并在 <code>WHERE</code> 中将两个表中要连接的列用等值方法连接起来。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> A.value, B.value</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tablea <span class=\"keyword\">AS</span> A, tableb <span class=\"keyword\">AS</span> B</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> A.key = B.key;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自连接：自连接可以看成内连接的一种，只是连接的表是 <code>自身</code> 而已。</p>\n<p>  例如：一张员工表包含员工姓名和员工所属部门，找出与 Jim 处在同部门的所有员工姓名。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 子查询版本</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employee</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> department = (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> department</span><br><span class=\"line\">\t<span class=\"keyword\">FROM</span> employee</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> = <span class=\"string\">\"Jim\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"comment\">-- WHERE版本</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> e1.name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employee <span class=\"keyword\">AS</span> e1, employee <span class=\"keyword\">AS</span> e2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> e1.department = e2.department <span class=\"keyword\">AND</span> e2.name = <span class=\"string\">\"Jim\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自然连接：自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p>\n<blockquote>\n<p>内连接和自然连接的区别：内连接 <code>提供连接</code> 的列，而自然连接 <code>自动连接</code> 所有同名列。</p>\n</blockquote>\n</li>\n<li><p>外连接：外连不但返回符合连接和查询条件的数据行，且保留了没有关联的那些行。分为左外连接，右外连接以及全外连接。例如，左外连接就是保留左表没有关联的行。</p>\n</li>\n</ul>\n<h6 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h6><blockquote>\n<p>非相关子查询</p>\n</blockquote>\n<ul>\n<li><p>概念：非相关子查询是独立于外部查询的子查询，<strong>子查询执行完毕后将值传递给外部查询</strong>。子查询中只查询一次并返回一个字段的数据。</p>\n</li>\n<li><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> col1 <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> col2 <span class=\"keyword\">FROM</span> mytable2</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> cust_name, (</span><br><span class=\"line\">\t<span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*)</span><br><span class=\"line\">\t<span class=\"keyword\">FROM</span> Orders</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> Orders.cust_id = Customers.cust_id) <span class=\"keyword\">AS</span> orders_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Customers</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> cust_name;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>关联子查询</p>\n</blockquote>\n<ul>\n<li>概念：关联子查询会引用外部查询中的一列或多列。这种子查询之所以被称为关联子查询，是因为子查询的确与外部查询有关。当问题的答案需要依赖于外部查询中包含的每一行中的值时，通常就需要使用关联子查询 $^{[3]}$。 </li>\n<li><p>相关子查询的执行依赖于外部查询的数据，<strong>外部查询执行一行，子查询就执行一次。并且是外部先查询一次，然后再执行一次内部查询</strong>。</p>\n<blockquote>\n<p>即内部查询依赖于外部查询。</p>\n</blockquote>\n</li>\n<li><p>例如，查询部门工资前三高的所有员工 (<a href=\"https://leetcode-cn.com/problems/department-top-three-salaries/\" target=\"_blank\" rel=\"noopener\">Leetcode</a>)：</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> d.Name <span class=\"keyword\">as</span> Department, e.Name <span class=\"keyword\">as</span> Employee, e.Salary</span><br><span class=\"line\"><span class=\"keyword\">From</span> Employee <span class=\"keyword\">as</span> e, Department <span class=\"keyword\">as</span> d</span><br><span class=\"line\"><span class=\"keyword\">Where</span> <span class=\"number\">1</span>=<span class=\"number\">1</span> <span class=\"keyword\">AND</span> e.DepartmentId = d.Id</span><br><span class=\"line\"><span class=\"keyword\">Group</span> <span class=\"keyword\">By</span> e.DepartmentId, e.id</span><br><span class=\"line\"><span class=\"keyword\">Having</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">Select</span> <span class=\"keyword\">Count</span>(<span class=\"keyword\">distinct</span> es.Salary) </span><br><span class=\"line\">\t<span class=\"keyword\">From</span> Employee <span class=\"keyword\">as</span> es </span><br><span class=\"line\">\t<span class=\"keyword\">Where</span> <span class=\"number\">1</span>=<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">AND</span> e.DepartmentID = es.DepartmentID</span><br><span class=\"line\">\t\t<span class=\"keyword\">AND</span> es.Salary &gt; e.Salary</span><br><span class=\"line\">) &lt; <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h6><ul>\n<li><p>各个 DBMS 的聚合函数都是不相同的，因此聚合函数一般不具备可移植性。SQL 提供的预定义聚合函数：</p>\n  <table>\n      <thead>\n      <tr>\n          <th>函 数</th>\n          <th>说 明</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>AVG( [DISTINCT\\|ALL]<列名> )</列名></td>\n          <td>返回某列的平均值</td>\n      </tr>\n      <tr>\n          <td>COUNT( [DISTINCT\\|ALL]<列名> )<br>COUNT([DISTINCT\\|ALL]*)</列名></td>\n          <td>返回某列的行数<br>统计元组个数</td>\n      </tr>\n      <tr>\n          <td>MAX( [DISTINCT\\|ALL]<列名> )</列名></td>\n          <td>返回某列的最大值</td>\n      </tr>\n      <tr>\n          <td>MIN( [DISTINCT\\|ALL]<列名> )</列名></td>\n          <td>返回某列的最小值</td>\n      </tr>\n      <tr>\n          <td>SUM( [DISTINCT\\|ALL]<列名> )</列名></td>\n          <td>返回某列值之和</td>\n      </tr>\n      </tbody>\n  </table>\n\n<blockquote>\n<p>以上聚合函数会忽略 NULL 行，考虑哪些运算不能包含 NULL 即可。</p>\n</blockquote>\n</li>\n<li><p>使用 ANY 和 ALL 谓语必须同时使用比较运算符，其含义及等价转换关系如下表所示：</p>\n  <table>\n      <thead>\n      <tr>\n          <th>谓 语</th>\n          <th>语 义</th>\n          <th>等价转换关系</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>>ANY</td>\n          <td>大于子查询结果中某个值</td>\n          <td>>MIN</td>\n      </tr>\n      <tr>\n          <td>>ALL</td>\n          <td>大于子查询结果中所有值</td>\n          <td>>MAX</td>\n      </tr>\n      <tr>\n          <td>&lt;ANY</td>\n          <td>小于子查询结果中某个值</td>\n          <td>&lt;MAX</td>\n      </tr>\n      <tr>\n          <td>&lt;ALL</td>\n          <td>小于子查询结果中所有值</td>\n          <td>&lt;MIN</td>\n      </tr>\n      <tr>\n          <td><>ANY</td>\n          <td>不等于子查询结果中某个值</td>\n          <td>--</td>\n      </tr>\n      <tr>\n          <td><>ALL</td>\n          <td>不等于子查询结果中任何值</td>\n          <td>NOT IN</td>\n      </tr>\n      <tr>\n          <td>=ANY</td>\n          <td>等于子查询结果中某个值</td>\n          <td>IN</td>\n      </tr>\n      <tr>\n          <td>=ALL</td>\n          <td>等于子查询结果中任何值</td>\n          <td>--</td>\n      </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h6 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h6><ul>\n<li>把具有相同的数据值的行放在同一组中。</li>\n<li>指定的分组字段除了能按该字段进行分组，也会按该字段自动进行排序。</li>\n<li><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的计数等。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">col</span>, <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">num</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">col</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>GROUP BY 自动按分组字段进行排序，当然可通过 ORDER BY 按要求的汇总字段排序。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">col</span>, <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">num</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">col</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">num</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>WHERE 过滤行，HAVING 过滤分组，<strong>行过滤应当先于分组过滤</strong>。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">col</span>, <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">num</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">col</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">col</span></span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">num</span> &gt;= <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>分组规定：<ul>\n<li>GROUP BY 子句需出现在 WHERE 子句之后，ORDER BY 子句之前；</li>\n<li>除了汇总字段外，GROUP BY 子句中必须给出 SELECT 语句的字段名称；</li>\n<li>NULL 的行会单独分组；</li>\n<li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h6><ul>\n<li>升序：ASC (默认)</li>\n<li>降序：DESC</li>\n<li><p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> col1 <span class=\"keyword\">DESC</span>, col2 <span class=\"keyword\">ASC</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h6><ul>\n<li>通配符也是用在过滤语句中，但它只能用于 <code>文本字段</code>。<ul>\n<li><code>%</code> 匹配 <code>&gt;=0</code> 个任意字符；</li>\n<li><code>_</code> 匹配 <code>==1</code> 个任意字符；</li>\n<li><code>[]</code> 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符；</li>\n<li>模式是大小写敏感的。</li>\n</ul>\n</li>\n<li><p>使用 <code>LIKE</code> 来进行通配符匹配：</p>\n<blockquote>\n<p>提示：不要滥用通配符，通配符位于开头处匹配会非常慢。</p>\n</blockquote>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mytable</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">col</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'[^AB]%'</span>; <span class=\"comment\">-- 挑选不以 A 和 B 开头的任意文本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- WHERE col LIKE '%AB%'; 挑选包含 AB 的任意文本</span></span><br><span class=\"line\"><span class=\"comment\">-- WHERE col LIKE '%A\\%B%'; 挑选包含 A%B 的任意文本（转义符的使用）</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SQL-数据更新\"><a href=\"#SQL-数据更新\" class=\"headerlink\" title=\"SQL 数据更新\"></a>SQL 数据更新</h5><ul>\n<li><p>插入</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表名 (字段名)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(常量)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 省略字段名，则 VALUES 需要补全所有属性作为输入</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(常量<span class=\"number\">1</span>, 常量<span class=\"number\">2</span>, ..., 常量 k)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> 表名</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> 条件表达式]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">SET</span> 列名 = 值表达式</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> 条件表达式]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SQL-访问控制\"><a href=\"#SQL-访问控制\" class=\"headerlink\" title=\"SQL 访问控制\"></a>SQL 访问控制</h5><ul>\n<li><p>常见的操作权限</p>\n  <table>\n      <thead>\n      <tr>\n          <th width=\"15%\">对象</th>\n          <th width=\"15%\">对象类型</th>\n          <th>操作权限</th>\n      </tr>\n      </thead>\n      <tr>\n          <td>属性列</td>\n          <td>TABLE</td>\n          <td>SELECT、INSERT、UPDATE、DELETE<br>ALL PRIVILEGES（包含四种权限）</td>\n      </tr>\n      <tr>\n          <td>视图</td>\n          <td>TABLE</td>\n          <td>SELECT、INSERT、UPDATE、DELETE<br>ALL PRIVILEGES（包含四种权限）</td>\n      </tr>\n      <tr>\n          <td>基本表</td>\n          <td>TABLE</td>\n          <td>SELECT、INSERT、UPDATE、DELETE、ALTER、INDEX<br>ALL PRIVILEGES（包含四种权限）</td>\n      </tr>\n      <tr>\n          <td>数据库</td>\n          <td>DATABASE</td>\n          <td>CREATETAB 建表权限</td>\n      </tr>\n  </table>\n</li>\n<li><p>授权</p>\n<ul>\n<li><code>PUBLIC</code>：设置该参数可将权限赋给全体用户</li>\n<li><p><code>WITH GRANT OPTION</code>：指定该语句则表示获得权限的用户还可将权限赋予给其他用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> &lt;操作权限&gt; [<span class=\"keyword\">ON</span> &lt;对象类型&gt; &lt;对象名&gt;]</span><br><span class=\"line\"><span class=\"keyword\">TO</span> &lt;用户&gt;</span><br><span class=\"line\">[<span class=\"keyword\">WITH</span> <span class=\"keyword\">GRANT</span> <span class=\"keyword\">OPTION</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">-- [例] 对表 S、P、J 的所有操作权限赋给所有用户</span></span><br><span class=\"line\"><span class=\"comment\">-- GRANT ALL PRIVILEGES ON TABLE S,P,J TO PUBLIC;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>收回权限</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> &lt;操作权限&gt; [<span class=\"keyword\">ON</span> &lt;对象类型&gt; &lt;对象名&gt;]</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;用户&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- [例] 将 User1 用户对表 S 的属性 Sno 的修改权限收回</span></span><br><span class=\"line\"><span class=\"comment\">-- REVOKE UPDATE(Sno) ON TABLE S FROM User1;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SQL-存储过程\"><a href=\"#SQL-存储过程\" class=\"headerlink\" title=\"SQL 存储过程\"></a>SQL 存储过程</h5><ul>\n<li><p>游标：一条 SQL 语句可以产生或处理多条记录，而主语言是面向记录的，一组主变量一次只能存放一条记录。引入游标概念，通过游标指针来决定获取哪条记录。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义游标</span></span><br><span class=\"line\"><span class=\"comment\"># 实操当中变量名前缀需要添加 @，比如 DECLARE @Cur CURSOR FOR</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> &lt;游标名&gt; <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span></span><br><span class=\"line\">&lt;<span class=\"keyword\">SELECT</span> 语句&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开游标</span></span><br><span class=\"line\"><span class=\"comment\"># 实操当中变量名前缀需要添加 @，比如 OPEN @Cur</span></span><br><span class=\"line\"><span class=\"keyword\">OPEN</span> &lt;游标名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推进游标</span></span><br><span class=\"line\"><span class=\"comment\"># 实操当中变量名前缀需要添加 @，比如 FETCH NEXT FROM @Cur INTO @id, @name</span></span><br><span class=\"line\"><span class=\"keyword\">FETCH</span> <span class=\"keyword\">NEXT</span> <span class=\"keyword\">FROM</span> &lt;游标名&gt;</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> &lt;变量名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭游标</span></span><br><span class=\"line\"><span class=\"comment\"># 实操当中变量名前缀需要添加 @，比如 CLOSE @Cur</span></span><br><span class=\"line\"><span class=\"keyword\">CLOSE</span> &lt;游标名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 释放游标</span></span><br><span class=\"line\"><span class=\"keyword\">DEALLOCATE</span> &lt;游标名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建存储过程</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> &lt;存储过程名称&gt; (</span><br><span class=\"line\">\t<span class=\"comment\"># IN：表示输入参数（默认值）</span></span><br><span class=\"line\">\t<span class=\"comment\"># OUT：表示输出参数</span></span><br><span class=\"line\">\t<span class=\"comment\"># IN OUT：即作为输入参数，也作为输出参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">IN</span> | <span class=\"keyword\">OUT</span> | <span class=\"keyword\">IN</span> <span class=\"keyword\">OUT</span> @&lt;参数名称&gt; &lt;参数类型&gt;</span><br><span class=\"line\">) <span class=\"keyword\">as</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t&lt;<span class=\"keyword\">SQL</span> 语句&gt;</span><br><span class=\"line\"><span class=\"keyword\">END</span> [存储过程名称]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"SQL-触发器\"><a href=\"#SQL-触发器\" class=\"headerlink\" title=\"SQL 触发器\"></a>SQL 触发器</h5><ul>\n<li><p>特殊的储存过程，它的执行不是由程序调用，也不需要手工出发，而是由事件触发的。</p>\n<blockquote>\n<p>触发器功能虽强大，但得谨慎使用。在数据库操作中，我们可以通过关系、触发器、存储过程、应用程序等来实现数据操作，同时规则、约束、缺省值也是保证数据完整性的重要保障。若我们过分依赖于触发器，势必影响数据库结构，同时增加了维护难度。</p>\n</blockquote>\n</li>\n<li><p>创建触发器</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> &lt;触发器名称&gt; &lt;<span class=\"keyword\">BEFORE</span> | <span class=\"keyword\">AFTER</span>&gt;</span><br><span class=\"line\">\t&lt;<span class=\"keyword\">INSERT</span> | <span class=\"keyword\">DELETE</span> | <span class=\"keyword\">UPDATE</span> [<span class=\"keyword\">OF</span> 列名清单]&gt;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> &lt;表名&gt;</span><br><span class=\"line\">[<span class=\"keyword\">REFERENCING</span> &lt;临时视图表&gt;]</span><br><span class=\"line\">[<span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span> | <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">STATEMENT</span>]</span><br><span class=\"line\">[<span class=\"keyword\">WHEN</span> &lt;触发条件&gt;]</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t&lt;触发条件&gt;</span><br><span class=\"line\"><span class=\"keyword\">END</span> [触发器名称]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Referencing：指定临时视图的别名，触发器运行过程中，系统会生成存放更新值（旧值）以及更新后的值（新值）的临时视图。当触发器运行结束后，视图即不存在。</p>\n<blockquote>\n<p>1）行级触发器视图名为 OLD ROW 和 NEW ROW。<br><br>2）语句级触发器默认视图名为 OLD-TABLE 和 NEW-TABLE。</p>\n</blockquote>\n</li>\n<li><p>When：指定触发器的触发条件，触发条件须包含临时试图的名称。</p>\n</li>\n</ul>\n</li>\n<li><p>[例] 银行处理透支时，不是将余额设置为负值，而是将账户余额设置为零，并建立一笔贷款（金额为透支金额，贷款号等于该透支账户的账户号），利用触发器实现这一过程。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> overdraft_trigger <span class=\"keyword\">AFTER</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">account</span></span><br><span class=\"line\"><span class=\"keyword\">REFERENCING</span> <span class=\"keyword\">NEW</span> <span class=\"keyword\">ROW</span> <span class=\"keyword\">as</span> nrow</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> nrow.balance &lt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> ATOMIC</span><br><span class=\"line\">\t<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> borrower <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">SELECT</span> d.customer_name, d.account_number</span><br><span class=\"line\">\t\t<span class=\"keyword\">FROM</span> depositor <span class=\"keyword\">as</span> d</span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> nrow.account_number = d.account_number</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> loan <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">\t\tnrow.account_number,\t<span class=\"comment\"># 贷款号</span></span><br><span class=\"line\">\t\tnrow.balance\t\t<span class=\"comment\"># 透支额</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"keyword\">UPDATE</span> <span class=\"keyword\">account</span> <span class=\"keyword\">SET</span> balance = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> account.account_number = nrow.account_number</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"规范化\"><a href=\"#规范化\" class=\"headerlink\" title=\"规范化\"></a>规范化</h4><h5 id=\"函数依赖\"><a href=\"#函数依赖\" class=\"headerlink\" title=\"函数依赖\"></a>函数依赖</h5><ul>\n<li>记 $A \\to B$ 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</li>\n<li>若 ${A_1，A_2，… ，A_n}$ 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是 <code>最小的</code>，那么该集合就称为 <code>键码</code>。</li>\n<li>对于 $A \\to B$，如果能找到 A 的真子集 $A’$，使得 $A’ \\to B$，那么 $A \\to B$ 就是 <code>部分函数依赖</code>，否则就是 <code>完全函数依赖</code>。</li>\n<li>对于 $A \\to B$，$B \\to C$，则 $A \\to C$ 是一个 <code>传递函数依赖</code>。</li>\n</ul>\n<h5 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h5><ul>\n<li><p>如表所示，展示了学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程后就能确定其它信息。</p>\n  <table>\n      <thead>\n      <tr>\n          <th>Sno</th>\n          <th>Sname</th>\n          <th>Sdept</th>\n          <th>Mname</th>\n          <th>Cname</th>\n          <th>Grade</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>1</td>\n          <td>学生-1</td>\n          <td>学院-1</td>\n          <td>院长-1 </td>\n          <td>课程-1</td>\n          <td>90</td>\n      </tr>\n      <tr>\n          <td>2</td>\n          <td>学生-2</td>\n          <td>学院-2</td>\n          <td>院长-2 </td>\n          <td>课程-2</td>\n          <td>80</td>\n      </tr>\n      <tr>\n          <td>2</td>\n          <td>学生-2</td>\n          <td>学院-2</td>\n          <td>院长-2</td>\n          <td>课程-1</td>\n          <td>100</td>\n      </tr>\n      <tr>\n          <td>3</td>\n          <td>学生-3</td>\n          <td>学院-2</td>\n          <td>院长-2 </td>\n          <td>课程-2</td>\n          <td>95</td>\n      </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p>\n<ul>\n<li><code>冗余数据</code>：例如 <code>学生-2</code> 出现了两次。</li>\n<li><code>修改异常</code>：更改表中某个实体的单独属性时，需对多行进行更新。例如 sdept=’’学院-2’ 的院长，则需要需改多行记录。</li>\n<li><code>删除异常</code>：删除表中某一实体则会导致其他实体消失。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 学生-1 的信息就会丢失。</li>\n<li><code>插入异常</code>：表中某个实体随着另一个实体而存在。例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h5><h6 id=\"范式化设计\"><a href=\"#范式化设计\" class=\"headerlink\" title=\"范式化设计\"></a>范式化设计</h6><ul>\n<li>第一范式（1NF）：<ul>\n<li>属性不可分，即数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。</li>\n<li>单一属性列由基本的数据类型所构成。</li>\n</ul>\n</li>\n<li><p>第二范式（2NF）：</p>\n<ul>\n<li>表中只具有一个主键。</li>\n<li><p>每个非主属性完全函数依赖于键码，而不能存在非主属性部分依赖于键码。</p>\n<blockquote>\n<p>比如，复合主键中常包括两种实体，如上述例子中的学生实体与课程实体，它们各自的属性依赖于各实体的主键。</p>\n</blockquote>\n</li>\n<li><p>如上表所示，学生课程关系中 {Sno, Cname} 为键码，有如下函数依赖：</p>\n<ul>\n<li>Sno -&gt; Sname, Sdept</li>\n<li>Sdept -&gt; Mname</li>\n<li>Sno, Cname -&gt; Grade</li>\n</ul>\n</li>\n<li>函数依赖状况分析：<ul>\n<li>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。 </li>\n<li>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>第三范式（3NF）：</p>\n<blockquote>\n<p>练习推荐：<a href=\"https://www.bilibili.com/video/BV1CD4y1974g\" target=\"_blank\" rel=\"noopener\">Maozhenyu. 候选键/最小依赖集与第三范式的分解 [OL]. bilibili.com. 2020</a></p>\n</blockquote>\n<ul>\n<li><p>非主属性即不部分依赖，也不传递函数依赖于键码。</p>\n<blockquote>\n<p>简而言之，第三范式就是属性不依赖于其它非主属性。</p>\n</blockquote>\n</li>\n<li><p>上表关系中存在以下传递函数依赖：Sno $\\to$ Sdept $\\to$ Mname。</p>\n</li>\n</ul>\n</li>\n<li><p>Boyce Codd 范式（BCNF）：</p>\n<ul>\n<li><p>主属性之间不存在传递依赖关系。</p>\n<blockquote>\n<p>简而言之，BCNF 范式规范主键之间不能存在相互决定的关系。</p>\n</blockquote>\n</li>\n<li><p>3NF 按定义排除了任何非主属性对键码的传递依赖与部分依赖。但该实体未必满足 BCNF 范式。</p>\n</li>\n</ul>\n</li>\n<li><p>第四范式（4NF）:</p>\n<ul>\n<li>满足 Boyce Codd 范式基础上，并且没有多值依赖关系。</li>\n<li>假设上表中 Sdept 包含多个 Mname（一个学院多名院长任职），存在多值依赖性，将导致不必要的数据重复。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"反范式设计\"><a href=\"#反范式设计\" class=\"headerlink\" title=\"反范式设计\"></a>反范式设计</h6><ul>\n<li>反范式化：鉴于性能和读取效率考量，适当违反数据库范式设计要求，允许少量数据冗余。</li>\n<li><p>优劣比较</p>\n  <table>\n      <thead>\n      <tr>\n          <th>优劣</th>\n          <th>范式化</th>\n          <th>反范式化</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>优势</td>\n          <td>1) 可尽量减少数据冗余\n          </td><td>1) 减少表关联查询<br>2) 更好进行索引优化</td>\n      </tr>\n      <tr>\n          <td>劣势</td>\n          <td>1) 多表关联查询<br>2) 难以进行索引优化</td>\n          <td>1) 存在数据冗余及数据维护异常</td>\n      </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n<h4 id=\"事务管理\"><a href=\"#事务管理\" class=\"headerlink\" title=\"事务管理\"></a>事务管理</h4><ul>\n<li>事务：指满足 <code>ACID</code> 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</li>\n<li><p>ACID</p>\n<ul>\n<li>原子性（Atomicity）<ul>\n<li>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</li>\n<li>回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\n</ul>\n</li>\n<li>一致性（Consistency）：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\n<li>隔离性（Isolation）：一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li>\n<li><p>持久性（Durability）：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p>\n<blockquote>\n<p>使用重做日志来保证持久性。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>ACID 特性概念简单，但不好理解，主要是因为这几个特性不是一种平级关系：</p>\n<ul>\n<li>只有满足一致性，事务的执行结果才是正确的。<ul>\n<li>在无并发情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>\n<li>在并发情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>\n</ul>\n</li>\n<li><p>事务满足持久化是为了能应对数据库崩溃的情况。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-transaction.svg\" alt>ACID逻辑关系</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"并发控制\"><a href=\"#并发控制\" class=\"headerlink\" title=\"并发控制\"></a>并发控制</h4><blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/Mid-Software-Database-Transaction-Consistency-Solution.svg\" alt> 事务并发环境下保证事务一致性的方法</p>\n</blockquote>\n<ul>\n<li>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</li>\n<li>产生并发不一致性问题的主要原因是破坏了事务的隔离性。</li>\n<li>解决方法是通过 <code>并发控制</code> 来保证隔离性。<ul>\n<li>并发控制可以通过 <code>封锁</code> 来实现，但是封锁操作需要用户自己控制，相当复杂。</li>\n<li>数据库管理系统提供了事务的 <code>隔离级别</code>，让用户以一种更轻松的方式处理并发一致性问题。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"并发一致性问题\"><a href=\"#并发一致性问题\" class=\"headerlink\" title=\"并发一致性问题\"></a>并发一致性问题</h5><ul>\n<li><p>丢失数据：T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>\n<blockquote>\n<p>简记为 <code>同时修改</code>。</p>\n</blockquote>\n</li>\n<li><p>读脏数据：T1 对一个数据做了修改，T2 读取这一个数据。若 T1 执行 ROLLBACK 操作，则 T2 读取的结果和第一次的结果不一样。</p>\n<blockquote>\n<p>简记为 <code>读取修改失败的记录</code>。最简单的场景是修改完成后，紧接着查询检验结果。</p>\n</blockquote>\n</li>\n<li><p>不可重复读：T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p>\n<blockquote>\n<p>简记为 <code>读时修改</code>，重复读取的结果不一样。</p>\n</blockquote>\n</li>\n<li><p>幻影读：T1 读取某个范围的数据，T2 在这个范围内插入新数据或者删除数据，T1 再次读取这个范围的数据，此时读取结果和第一次读取的结果不一样，事务并没有独立开来。</p>\n<blockquote>\n<p>简记为 <code>事务没有独立性，受其他事务插入或者删除影响</code>。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/Mid-Software-Database-Concurrency-Consistency.svg\" alt> 并发一致性问题</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"封锁\"><a href=\"#封锁\" class=\"headerlink\" title=\"封锁\"></a>封锁</h5><h6 id=\"封锁粒度\"><a href=\"#封锁粒度\" class=\"headerlink\" title=\"封锁粒度\"></a>封锁粒度</h6><ul>\n<li>以 MySQL 为例，它提供了两种封锁粒度：<code>行级锁</code> 以及 <code>表级锁</code>。</li>\n<li>应尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</li>\n<li><p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p>\n<blockquote>\n<p>为此，我们在选择封锁粒度时，需在 <code>锁开销</code> 和 <code>并发程度</code> 之间做一个 <code>权衡</code>。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"封锁类型\"><a href=\"#封锁类型\" class=\"headerlink\" title=\"封锁类型\"></a>封锁类型</h6><ul>\n<li><p>读写锁</p>\n<ul>\n<li>排它锁（Exclusive）：写锁，简写为 X 锁</li>\n<li><p>共享锁（Shared）：读锁，简写为 S 锁</p>\n</li>\n<li><p>有以下两个规定：</p>\n<ul>\n<li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li>\n<li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li>\n</ul>\n</li>\n<li><p>读写锁之间的兼容关系如表所示：✕ 相互不兼容，✓ 相互兼容</p>\n  <table>\n      <thead>\n      <tr>\n          <td>锁类型</td>\n          <td>排它锁 X</td>\n          <td>共享锁 S</td>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>排它锁 X</td>\n          <td>✕</td>\n          <td>✕</td>\n      </tr>\n      <tr>\n          <td>共享锁 S</td>\n          <td>✕</td>\n          <td>✓</td>\n      </tr>\n      </tbody>\n  </table>\n</li>\n</ul>\n</li>\n<li><p>意向锁（Intention Locks）</p>\n<ul>\n<li>支持多粒度封锁，使得行锁和表锁能够共存。</li>\n<li>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</li>\n<li>意向锁在原来的 X / S 锁之上引入了 IX / IS 锁（两者都属于表级锁），用来表示一个事务稍后会对表中的某个数据行上加 X 锁或 S 锁。整理可得以下两个规定：<ul>\n<li>一个事务在获得某个数据行对象的 S 锁前，必须先获得表的 IS 锁或者更强的锁。</li>\n<li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>读写锁与意向锁的兼容关系如表所示：✕ 相互不兼容，✓ 相互兼容</p>\n<ul>\n<li>任意 IS / IX 锁之间都是兼容的，因为它们只是表示想要 <code>对表加锁</code>，而不是真正加锁。</li>\n<li><p>S 锁只与 S 锁和 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其它事务可以已经获得对表或者表中的行的 S 锁。</p>\n  <table>\n      <thead>\n      <tr>\n          <td>锁类型</td>\n          <td>排它锁 X</td>\n          <td>共享锁 S</td>\n          <td>意向排它锁 IX</td>\n          <td>意向共享锁  IS</td>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n          <td>排它锁 X</td>\n          <td>✕</td>\n          <td>✕</td>\n          <td>✕</td>\n          <td>✕</td>\n      </tr>\n      <tr>\n          <td>共享锁 S</td>\n          <td>✕</td>\n          <td>✓</td>\n          <td>✕</td>\n          <td>✓</td>\n      </tr>\n      <tr>\n          <td>意向排它锁 IX</td>\n          <td>✕</td>\n          <td>✕</td>\n          <td>✓</td>\n          <td>✓</td>\n      </tr>\n      <tr>\n          <td>意向共享锁 IS</td>\n          <td>✕</td>\n          <td>✓</td>\n          <td>✓</td>\n          <td>✓</td>\n      </tr>\n      </tbody>\n  </table>\n\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"封锁协议\"><a href=\"#封锁协议\" class=\"headerlink\" title=\"封锁协议\"></a>封锁协议</h5><h6 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h6><ul>\n<li><p><code>一级封锁协议</code>：事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>\n<blockquote>\n<p>可解决 “丢失修改” 问题，因不能同时有两个事务对同一个数据修改，那么事务的修改就不会被覆盖。</p>\n</blockquote>\n</li>\n<li><p><code>二级封锁协议</code>：在一级封锁基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>\n<blockquote>\n<p>可解决 “丢失修改” 和 “读脏数据” 问题，因一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p>\n</blockquote>\n</li>\n<li><p><code>三级封锁协议</code>：在二级封锁基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>\n<blockquote>\n<p>可解决 “丢失修改” 和 “读脏数据” 问题，还进一步防止了 “不可重复读” 的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p>\n</blockquote>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/Mid-Software-Database-Concurrency-3LevelLockingProtocol.svg\" alt> 三级封锁协议示例</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"两段锁协议\"><a href=\"#两段锁协议\" class=\"headerlink\" title=\"两段锁协议\"></a>两段锁协议</h6><ul>\n<li>两段锁协议是指每个事务的执行可以分为两个阶段：生长阶段（加锁阶段）和衰退阶段（解锁阶段）。</li>\n<li>两段封锁实现方式：<ul>\n<li>事务开始后就处于加锁阶段，一直到执行 ROLLBACK 和 COMMIT 之前都是加锁阶段。</li>\n<li>ROLLBACK 和 COMMIT 使事务进入解锁阶段，即在 ROLLBACK 和 COMMIT 模块中 DBMS 释放所有封锁。</li>\n</ul>\n</li>\n<li><p>可串行化调度：通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<ul>\n<li><p>事务遵循两段锁协议是保证可串行化调度的 <code>充分条件</code>。例如以下操作满足两段锁协议，它是可串行化调度。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">lock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>但不是 <code>必要条件</code>，例如以下操作不满足两段锁协议，但是它还是可串行化调度。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">lock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h5><ul>\n<li><p>事务指定一个隔离级别，该隔离级别定义了一个事务必须与其他事务进行资源或数据更改相隔离的程度。隔离级别是从 <code>允许并发一致性问题发生</code> 的角度进行描述的。例如，脏读、不可重复读或幻影读。如表所示，是关于隔离级别与并发副作用的层级关系。</p>\n<blockquote>\n<p>图例说明：✕ 是可避免的情况，✓ 是允许发生的情况</p>\n</blockquote>\n  <table>\n      <thead>\n          <tr>\n              <td>隔离级别 \\ 并发一致性问题</td>\n              <td>脏读</td>\n              <td>不可重复读</td>\n              <td>幻影读</td>\n          </tr>\n      </thead>\n      <tbody>\n          <tr>\n              <td>未提交读</td>\n              <td>✓</td>\n              <td>✓</td>\n              <td>✓</td>\n          </tr>\n          <tr>\n              <td>提交读</td>\n              <td>✕</td>\n              <td>✓</td>\n              <td>✓</td>\n          </tr>\n          <tr>\n              <td>可重复读</td>\n              <td>✕</td>\n              <td>✕</td>\n              <td>✓</td>\n          </tr>\n          <tr>\n              <td>串行化读</td>\n              <td>✕</td>\n              <td>✕</td>\n              <td>✕</td>\n          </tr>\n      </tbody>\n  </table>\n</li>\n<li><p>实现方式：MySQL 的 InnoDB 存储引擎实现隔离级别的具体方式有：多版本并发控制（MVCC）与 Next-Key Locks。</p>\n</li>\n<li><p>隔离级别：</p>\n<ul>\n<li>未提交读（Read uncommitted）：事务中的修改，即使没有提交，对其它事务也是可见的。</li>\n<li><p>提交读（Read committed）：一个事务只能读取已经提交的修改事务。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p>\n<blockquote>\n<p>Oracle 数据库默认的事务隔离级别。</p>\n</blockquote>\n</li>\n<li><p>可重复读（Repeatable Read）：保证一个当前事务读取不会受到另一个事务修改数据（即使已提交或者回滚）的影响，也称为快照读。</p>\n<blockquote>\n<p>MySQL 数据库默认的事务隔离级别。</p>\n</blockquote>\n</li>\n<li><p>可串行化（Serialzable）：强制事务串行执行。需要加锁实现，而其它隔离级别通常不需要加锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"多版本并发控制\"><a href=\"#多版本并发控制\" class=\"headerlink\" title=\"多版本并发控制\"></a>多版本并发控制</h5><ul>\n<li>多版本并发控制（Multi-Version Concurrency Control, MVCC）：MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现 <code>提交读</code> 和 <code>可重复读</code> 这两种隔离级别。</li>\n<li><code>未提交读</code> 隔离级别总是读取最新的数据行，无需使用 MVCC。</li>\n<li><code>可串行化</code> 隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</li>\n</ul>\n<h6 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a>版本号</h6><ul>\n<li>该版本号是指<strong>事务</strong>的版本号。</li>\n<li>系统版本号：是一个递增数字，每开始一个新事务，系统版本号就会自动递增。</li>\n<li>事务版本号：事务开始时的系统版本号。</li>\n</ul>\n<h6 id=\"隐藏列\"><a href=\"#隐藏列\" class=\"headerlink\" title=\"隐藏列\"></a>隐藏列</h6><ul>\n<li><p>该版本号指<strong>数据行快照</strong>的版本号。</p>\n</li>\n<li><p>MVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：</p>\n<ul>\n<li>创建版本号：指示创建一个数据行快照时的系统版本号；</li>\n<li>删除版本号：如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除了。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"UndoLog\"><a href=\"#UndoLog\" class=\"headerlink\" title=\"UndoLog\"></a>UndoLog</h6><ul>\n<li><p>MVCC 使用到的快照存储在 Undo Log 中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-database-mvcc-UndoLog.svg\" alt> 存储在 Undo日志中的快照</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h6><ul>\n<li>以下实现过程是针对 <code>可重复读</code> 隔离级别的：<ul>\n<li>当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。</li>\n<li>数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。</li>\n</ul>\n</li>\n<li><p>SELECT</p>\n<ul>\n<li><p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。</p>\n<blockquote>\n<p>但也有例外，若一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p>\n</blockquote>\n</li>\n<li><p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于等于 T 的版本号，因为如果大于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。</p>\n</li>\n<li>除此之外，T 所要读取的数据行快照的删除版本号必须是未定义或者大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</li>\n</ul>\n</li>\n<li>INSERT：将当前系统版本号作为数据行快照的创建版本号。</li>\n<li>DELETE：将当前系统版本号作为数据行快照的删除版本号。</li>\n<li><p>UPDATE：将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。</p>\n<blockquote>\n<p>可以理解为先执行 DELETE 后执行 INSERT。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"快照读与当前读\"><a href=\"#快照读与当前读\" class=\"headerlink\" title=\"快照读与当前读\"></a>快照读与当前读</h6><ul>\n<li><p>快照读：使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当前读：读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> ? <span class=\"keyword\">LOCK</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">SHARE</span> <span class=\"keyword\">MODE</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> ? <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> ...;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Next-Key-Locks\"><a href=\"#Next-Key-Locks\" class=\"headerlink\" title=\"Next-Key Locks\"></a>Next-Key Locks</h5><ul>\n<li><p>MVCC 不能解决 <code>幻影读</code> 问题，Next-Key Locks 就是为了解决这个问题而存在的。</p>\n<blockquote>\n<p>场景复现：可重复读保证了一个事务不会修改已经由另一个事务读取但未提交 (或回滚) 的数据，例如统计某班男生的人数。但此时插入一名男生，而同样的查询操作会导致不一致的查询结果。</p>\n</blockquote>\n</li>\n<li>在可重复读（REPEATABLE READ）隔离级别下，使用 <code>MVCC + Next-Key Locks</code> 可以解决幻读问题。</li>\n<li>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种 <code>锁实现</code>。</li>\n</ul>\n<h6 id=\"Record-Locks\"><a href=\"#Record-Locks\" class=\"headerlink\" title=\"Record Locks\"></a>Record Locks</h6><ul>\n<li>锁定一个记录上的索引，而不是记录本身。</li>\n<li>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</li>\n</ul>\n<h6 id=\"Gap-Locks\"><a href=\"#Gap-Locks\" class=\"headerlink\" title=\"Gap Locks\"></a>Gap Locks</h6><ul>\n<li><p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> c <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> c <span class=\"keyword\">BETWEEN</span> <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"number\">20</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Next-Key-Locks-1\"><a href=\"#Next-Key-Locks-1\" class=\"headerlink\" title=\"Next-Key Locks\"></a>Next-Key Locks</h6><ul>\n<li><p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">(-∞, 10]</span><br><span class=\"line\">(10, 11]</span><br><span class=\"line\">(11, 13]</span><br><span class=\"line\">(13, 20]</span><br><span class=\"line\">(20, +∞)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h3><h4 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h4><h5 id=\"进程状态\"><a href=\"#进程状态\" class=\"headerlink\" title=\"进程状态\"></a>进程状态</h5><ul>\n<li><p>进程的五态模型</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-5Status-Model.svg\" alt> 进程的五态模型</p>\n</blockquote>\n<ul>\n<li><code>创建进程</code> 分两个阶段：第一阶段为一个新进程创建必要的管理信息；第二阶段让该进程进入就绪状态。</li>\n<li><code>终止进程</code> 分两个阶段：第一阶段等待操作系统进行善后处理；第二阶段释放主存。</li>\n</ul>\n</li>\n<li><p>具有挂起状态的进程状态及其转换</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-5HoldStatus-Model.svg\" alt> 细分进程状态及其转换</p>\n</blockquote>\n<ul>\n<li>活跃就绪：进程在 <code>主存</code> 并且可被调度的状态。</li>\n<li>静止就绪：就绪进程被对换到 <code>辅存</code> 时的状态，它是不能被直接调度的状态，只有当主存中没有活跃就绪态进程，或具有更高优先级的挂起态进程时，系统才会把挂起就绪态进程调回主存并转换为活跃就绪。</li>\n<li>活跃阻塞：进程在 <code>主存</code>，一旦等待的事件产生便进入活跃就绪状态。</li>\n<li>静止阻塞：阻塞进程对换到 <code>辅存</code> 时的状态，一旦等待的事件产生便进入静止就绪状态。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h5><ul>\n<li>进程的同步与互斥<ul>\n<li>同步：多个进程可并发执行，每个进程以各自独立的、不可预知的速度向前推进，但需在某些确定点上协调合作进程间的工作。</li>\n<li>互斥：系统中多个进程因争用 <code>临界资源</code> 而互斥执行。</li>\n</ul>\n</li>\n<li>信号量机制<ul>\n<li>临界资源：进程间需要互斥方式对其进行共享的资源。</li>\n<li>临界区：每个进程中访问临界资源的那段代码称为 <code>临界区</code>。</li>\n<li>信号量：特殊变量</li>\n</ul>\n</li>\n<li><p>PV 操作</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-PA.svg\" alt> PV 操作</p>\n</blockquote>\n<ul>\n<li><p>P 操作：S:=S-1，若 $S \\geq 0$ 则执行 P 操作的进程继续执行；若 $S &lt; 0$ 则置该进程为阻塞状态（无资源可用），并将其插入阻塞队列。</p>\n<blockquote>\n<p>$S \\geq 0$，S 表示该资源的可用数；$S &lt; 0$，$|S|$ 表示阻塞队列中等待该资源的进程数。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Procedure <span class=\"title\">P</span><span class=\"params\">(Var S:Semaphore)</span>；</span></span><br><span class=\"line\"><span class=\"function\">Begin</span></span><br><span class=\"line\"><span class=\"function\">\tS:</span>=S-<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// S&gt;=0 表示缓冲区为空，可送入产品</span></span><br><span class=\"line\">\tIf S&lt;<span class=\"number\">0</span> <span class=\"function\">Then <span class=\"title\">Wait</span><span class=\"params\">(S)</span> <span class=\"comment\">// 执行 P 操作的进程插入等待队列</span></span></span><br><span class=\"line\"><span class=\"function\">End</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>V 操作：S:=S+1，若 $S &gt; 0$ 则执行 V 操作的进程继续执行；若 $S \\leq 0$ 则唤醒一个阻塞状态的进程，并将其插入就绪队列，然后执行 V 操作的进程继续。</p>\n<blockquote>\n<p>$S &gt; 0$，S 表示正在等待该资源的进程数；$S \\leq 0$，$|S|$表示该资源的可用数。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Procedure <span class=\"title\">V</span><span class=\"params\">(Var S:Semaphore)</span>；</span></span><br><span class=\"line\"><span class=\"function\">Begin</span></span><br><span class=\"line\"><span class=\"function\">\tS:</span>=S+<span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">// S&gt;0 缓冲区有产品</span></span><br><span class=\"line\">\tIf S&lt;=<span class=\"number\">0</span> <span class=\"function\">Then <span class=\"title\">Resume</span><span class=\"params\">(S)</span>\t<span class=\"comment\">// 从阻塞队列中唤醒进程</span></span></span><br><span class=\"line\"><span class=\"function\">End</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>利用 PV 操作实现进程的互斥：令信号量 mutex 初值为 1，当进入临界区时执行 P 操作，退出临界区时执行 V 操作。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">P(mutex)</span><br><span class=\"line\">\t临界区</span><br><span class=\"line\">V(mutex)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h5><h6 id=\"必要条件\"><a href=\"#必要条件\" class=\"headerlink\" title=\"必要条件\"></a>必要条件</h6><ul>\n<li><code>互斥</code>：资源是独占的且排他使用，进程互斥使用资源。每个资源要么已分配给一个进程，要么就是可用的。</li>\n<li><code>占有和等待</code>：已经得到的资源的某进程可再请求资源。</li>\n<li><code>不可抢占</code>：已经分配给进程的资源不可强性被抢占，只能是占有进程显式地释放。</li>\n<li><p><code>环路等待</code>：有两个及以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</p>\n<blockquote>\n<p>以上给出了导致死锁的四个必要条件，只要系统发生死锁则以上四个条件至少有一个成立。反过来思考，我们可通过破坏四个条件中的任何一个来预防死锁的发生。</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"处理方法\"><a href=\"#处理方法\" class=\"headerlink\" title=\"处理方法\"></a>处理方法</h6><ul>\n<li><code>鸵鸟策略</code>：把头埋在沙子里，假装根本没发生问题。<ul>\n<li>因解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</li>\n<li>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</li>\n</ul>\n</li>\n<li><p><code>死锁检测</code>：不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p>\n<ul>\n<li><p>每种类型一个资源的死锁检测</p>\n<ul>\n<li><p>下图为资源分配图，其中 <code>方框表示资源</code>，<code>圆圈表示进程</code>。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。图 (a) 可以抽取出环，如图 (b)，它满足了环路等待条件，因此会发生死锁。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-deadlock-check.svg\" alt> 每种类型一个资源的死锁检测</p>\n</blockquote>\n</li>\n<li><p>每种类型一个资源的死锁检测算法是通过 <code>检测有向图是否存在环</code> 来实现。从一个节点出发进行 <code>深度优先搜索</code>，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</p>\n</li>\n</ul>\n</li>\n<li><p>每种类型多个资源的死锁检测</p>\n<ul>\n<li><p>如图所示，有三个进程四个资源，每个数据代表的含义如下：</p>\n<ul>\n<li>E 向量：资源总量</li>\n<li>A 向量：资源剩余量</li>\n<li>C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量</li>\n<li><p>R 矩阵：每个进程请求的资源数量</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-deadlock-check2.svg\" alt> 每种类型多个资源的死锁检测</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3 执行，之后释放 P3 拥有的资源，此时 A = (2 2 2 0)。P2 可以执行，执行后释放 P2 拥有的资源，A = (4 2 2 1) 。P1 也可以执行。所有进程都可以顺利执行，没有死锁。</p>\n</li>\n<li>算法总结如下：每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。<ul>\n<li><code>Step.01</code>：寻找一个没有标记的进程 Pi，它所请求的资源小于等于 A。</li>\n<li><code>Step.02</code>：若找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程并转回 1。</li>\n<li><code>Step.03</code>：若没找到这样一个进程，算法终止。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>死锁恢复</code><ul>\n<li>利用抢占恢复</li>\n<li>利用回滚恢复</li>\n</ul>\n</li>\n<li>通过杀死进程恢复</li>\n<li><code>死锁预防</code>：在程序运行前预防发生死锁。    <ul>\n<li><code>破坏互斥条件</code>：例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</li>\n<li><code>破坏占有和等待条件</code>：一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</li>\n<li><code>破坏不可抢占条件</code>：允许对资源实行抢夺。<ul>\n<li>方法一：一个进程不能获得所需全部资源时便处于等待状态，等待期间他占有的资源将被隐式的释放重新加入到系统的资源列表中，可被其他的进程使用，而等待的进程只有重新获得自己原有的资源以及新申请的资源才可以重新启动执行。</li>\n<li>方法二：若一进程请求当前被另一进程占有的一个资源，则操作系统可抢占另一个进程，要求它释放资源。仅在任意两个进程的优先级都不相同的条件下，该方法才能预防死锁。</li>\n</ul>\n</li>\n<li><code>破坏环路等待</code>：给资源统一编号，进程只能按编号顺序来请求资源。    </li>\n</ul>\n</li>\n<li><p><code>死锁避免</code>：在程序运行时避免发生死锁。</p>\n<ul>\n<li><p>安全状态</p>\n<ul>\n<li>图 (a) 的第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数。</li>\n<li><p>从图 (a) 开始出发，先让 B 拥有所需的所有资源 (图 b)，运行结束后释放 B，此时 Free 变为 5 (图 c)；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-deadlock-avoid1.svg\" alt> 证明 (a) 的状态是安全的</p>\n</blockquote>\n</li>\n<li><p>定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种 <code>调度次序</code> 能够使得 <code>每一个进程运行完毕</code>，则称该状态是安全的。</p>\n<blockquote>\n<p>安全状态的检测与死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法与死锁检测算法非常类似，可以结合着做参考对比。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>单个资源的银行家算法</p>\n<ul>\n<li>一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。</li>\n<li><p>图 (c) 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 (c) 中的状态。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-deadlock-avoid2.svg\" alt> 单个资源的银行家算法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>多个资源的银行家算法</p>\n<ul>\n<li><p>如图所示，有五个进程，四个资源。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-OS-PCB-deadlock-avoid3.svg\" alt> 多个资源的银行家算法</p>\n</blockquote>\n</li>\n<li><p>左边的图表示已经分配的资源，右边的图表示还需要分配的资源。</p>\n</li>\n<li><p>下方向量 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源。</p>\n<blockquote>\n<p>注意这三个为向量，而不是具体数值，例如 A = ( 1 0 2 0 )，表示 4 个资源分别还剩下 1/0/2/0。</p>\n</blockquote>\n</li>\n<li><p>检查一个状态是否安全的算法如下：</p>\n<ul>\n<li>Step.01：查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。</li>\n<li>Step.02：假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。</li>\n<li>Step.03：重复以上两步，直到所有进程都标记为终止，则状态时安全的。若一个状态不是安全的，需要拒绝进入这个状态。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h5><ul>\n<li>线程是进程中的一个实体，是被系统 <code>独立分配</code> 和 <code>独立调度</code> 的基本单位。</li>\n<li><p>一个进程中可以有多个线程，它们共享进程资源。</p>\n<blockquote>\n<p>QQ 和 QQ 浏览器是两个进程，浏览器进程里面有很多线程。例如 HTTP 请求线程、事件响应线程、渲染线程等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。</p>\n</blockquote>\n</li>\n<li><p>进程与线程的区别：</p>\n<ul>\n<li><code>拥有资源</code>：进程是 <code>资源分配</code> 的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</li>\n<li><code>调度</code>：线程是 <code>独立调度</code> 的基本单位，在同一进程中，线程的切换不会引起进程切换。但是从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>\n<li><code>系统开销</code>：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</li>\n<li><code>通信方面</code>：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助  <code>IPC</code>（进程间通信，Inter-Process Communication）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存储管理\"><a href=\"#存储管理\" class=\"headerlink\" title=\"存储管理\"></a>存储管理</h4><h5 id=\"基本概念-2\"><a href=\"#基本概念-2\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h5><ul>\n<li><p>存储器的层次结构</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-hierarchical-structure.svg\" alt> 存储器的层次结构</p>\n</blockquote>\n</li>\n<li><p>虚拟地址：源程序的地址空间称为符号地址空间，其从 0 号单元开始编址，并顺序分配所有的符号名所对应的地址单元。它不是主存的真实地址，又称为 <code>相对地址</code>。</p>\n<blockquote>\n<p>源程序经过 <code>汇编</code> 或者 <code>编译</code>后，再经过链接编辑程序加工形成程序的装配模块，即转换为相对地址编址模块。</p>\n</blockquote>\n</li>\n<li><p>地址空间：程序中由相对地址组成的空间称为逻辑地址空间，相对地址空间通过再定位机构转换到绝对地址空间（物理地址的集合）。</p>\n</li>\n<li>地址重定位：<ul>\n<li>静态重定位：在程序装入主存时，已完成逻辑地址到物理地址的变化，在程序的执行期间将不会再发生变化。<ul>\n<li>优点：无须硬件地址变换机构的支持，它只要求程序本身是可重定位的（修改地址部分具有某种标识）。</li>\n<li>缺点： 必须给作业分配一个连续的存储区域。</li>\n</ul>\n</li>\n<li>动态重定位：在程序运行期间完成逻辑到物理地址的变化。<ul>\n<li>优点：程序在执行期间可换入和缓存主存；不必给程序分配连续的主存空间，把主存中碎片集中起来。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"管理方案\"><a href=\"#管理方案\" class=\"headerlink\" title=\"管理方案\"></a>管理方案</h5><h6 id=\"分页存储管理\"><a href=\"#分页存储管理\" class=\"headerlink\" title=\"分页存储管理\"></a>分页存储管理</h6><ul>\n<li>分页原理<ul>\n<li>将一个进程的地址空间划分成若干个大小相等的区域，称为页。</li>\n<li>相应地，将主存空间划分成与页相同大小的若干个物理块，称为块。</li>\n<li>为进程分配主存时，将进程中若干页分别装入多个不相邻的块中。</li>\n</ul>\n</li>\n<li><p>地址结构</p>\n<ul>\n<li>分页地址由两部分组成，前一部分分为页号 P，后一部分为偏移量 W，即页内地址。</li>\n<li><p>地址长度为 32 位，0 ~ 11 位为页内地址（每页大小为 $2^{12}B=4KB$）,12 ~ 31 位为页号（$2^{20}B=1MB$）</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Paging-Structure.svg\" alt> 分页地址结构</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>页表</p>\n<ul>\n<li>进程的多个页面离散地分配到主存的多个物理块时，系统应保证在主存中找到进程要访问的页面所对应的物理块。</li>\n<li>为此，系统为每个进程建立了一张页面映射表（页表）。</li>\n<li>页表的作用是实现从页号到物理块号（页帧号）的地址的映射。</li>\n</ul>\n</li>\n<li><p>如图所示，逻辑页号为 4，查找页表得到该页的物理块号为 15，与页内地址 256 拼接得到物理地址。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Paging-Example.svg\" alt> 页式存储管理的地址映射</p>\n</blockquote>\n</li>\n<li><p>分页存储优劣</p>\n<ul>\n<li>优：空间利率高，且产生碎片少</li>\n<li>劣：增加系统开销，可能产生 <a href=\"https://baike.baidu.com/item/抖动现象/9220662\" target=\"_blank\" rel=\"noopener\">抖动现象</a>。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"分段存储管理\"><a href=\"#分段存储管理\" class=\"headerlink\" title=\"分段存储管理\"></a>分段存储管理</h6><ul>\n<li>分段原理<ul>\n<li>作业的地址空间被划分为若干个段，每段式一组完整的逻辑信号，例如有主程序段、子程序段、数据段以及堆栈段。</li>\n<li>每个段都拥有自己的名字，从 0 开始编制的一段连续的地址空间，各段长度是可以不等的。</li>\n</ul>\n</li>\n<li><p>地址结构：逻辑地址由段号和段内地址两部分组成，允许一个作业最多 64KB 个段，每个段最大长度为 64KB。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Section-Structure.svg\" alt> 分段地址结构</p>\n</blockquote>\n</li>\n<li><p>段表</p>\n<ul>\n<li>为每个段分配一个连续的分区，而进程中的各个段可里离散地分配到主存的不同分区中。</li>\n<li>系统为每个进程建立一张段映射表（段表），每个段在表中占有一个表项，其中记录了该段在主存中的起始地址（基址）和段的长度。</li>\n<li>程序在执行时，通过查段表来找到每个段所对应的主存区。</li>\n<li>段表实现了从逻辑段到物理主存区的映射。</li>\n</ul>\n</li>\n<li><p>段式存储的内存空间划分</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Section-Sample.svg\" alt> 段式存储的内存空间划分</p>\n</blockquote>\n</li>\n<li><p>如图所示，分段式存储管理实现从逻辑地址到物理地址的变换功能。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Section-Example.svg\" alt> 段式存储管理的地址变换机构</p>\n</blockquote>\n</li>\n<li><p>分段存储优劣</p>\n<ul>\n<li>优：多道程序共享内存</li>\n<li>劣：内存利用率低，较多内存碎片</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"段页式存储管理\"><a href=\"#段页式存储管理\" class=\"headerlink\" title=\"段页式存储管理\"></a>段页式存储管理</h6><ul>\n<li>分页过程由操作系统完成，用户不必关心分页过程，其缺点式不易实现共享；段是信息的逻辑单位，易于实现分段式共享即允许若干进程共享一个或多个段。对两种存储管理方式 “各取所长”，既具有分页系统又能提高主存利用率的存储管理方式 <code>段页式存储管理</code>。</li>\n<li>段页式原理<ul>\n<li>将整个主存划分成大小相等的存储块，将用户程序按程序的逻辑关系分为若干个段，并为每个段赋予一个段名，再将每个段划分成若干页，存储块为单位离散分配。</li>\n</ul>\n</li>\n<li><p>地址结构：由段号、段内页号和页内地址组成。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Paging&amp;Section-Structure.svg\" alt> 段页式管理的地址结构</p>\n</blockquote>\n</li>\n<li><p>段页式系统</p>\n<ul>\n<li>系统必须同时配置段表和页表。</li>\n<li>对段中的页进行离散地分配，段表中的内容不在式段的主存始址和段长，而是页表始址和页表长度。</li>\n<li>段表寄存器用于存放段表起始地址和段表长度 TL。</li>\n</ul>\n</li>\n<li><p>段页式系统中逻辑地址到物理地址的变换过程，如下图所示。</p>\n<ul>\n<li>根据段号 S 查段表，得到页表的起始地址。</li>\n<li>根据页号 P 查页表，得到物理块号 b。</li>\n<li><p>将物理块号 b 拼页内地址 W 得到物理地址。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Paging&amp;Section-Example.svg\" alt> 段页式存储管理的地址变换结构</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"虚拟存储管理\"><a href=\"#虚拟存储管理\" class=\"headerlink\" title=\"虚拟存储管理\"></a>虚拟存储管理</h6><ul>\n<li>页面置换算法（页面淘汰算法）<ul>\n<li>请求分页是在纯分页系统基础上增加了请求调页功能、页面置换功能所形成的 <code>页面虚拟存储系统</code>。</li>\n<li>在进程运行过程中，若发生缺页但主存又无空闲块时，为保证进程能正常运行，须从主存中调出一页程序或者数据送到 <code>磁盘对换区</code>。</li>\n<li>究竟将哪个页面调出，需根据一定的页面置换算法来决定。</li>\n</ul>\n</li>\n<li><p>先进选出置换算法（FIFO）：总是淘汰最先进入主存的页面，即选择在主存中驻留时间最近的页面予以淘汰。</p>\n<blockquote>\n<p>当分配物理块数量增多时，有缺页次数增加、缺页率提高的异常现象，称之为 <code>抖动</code>。</p>\n</blockquote>\n</li>\n<li><p>最近最少未使用置换算法（Least recently used, LRU）</p>\n<ul>\n<li>选择最近最少未使用的页面予以淘汰。</li>\n<li>系统在每个页面设置一个访问字段，用于记录这个页面自上次被访问以来所经历的时间 T，选择 T 最大的页面予以淘汰，但实现时需硬件支持（寄存器或栈）。</li>\n</ul>\n</li>\n<li><p>[实例] 在一虚拟存储系统中，进程的内存空间为 3 页，开始内存为空，有以下访问页序列：5 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 5 0 1，分别计算 FIFO 置换算法和 LRU 置换算法的缺页次数。</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-Storage-Virtual-Example.svg\" alt> FIFO 置换算法和 LRU 置换算法的缺页次数对比</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h4><ul>\n<li><p>磁盘结构与参数</p>\n  <blockquote class=\"blockquote-center\"><p><img src=\"/images/CS/Mid-Software/mid-software-DiskManager-Structure.svg\" alt> 磁盘结构与参数</p>\n</blockquote>\n</li>\n<li><p>磁盘的性能参数</p>\n<ul>\n<li>磁盘存取数据时间</li>\n<li>磁盘容量</li>\n</ul>\n</li>\n<li><p>存取时间 = 寻道时间 + 等待时间</p>\n<ul>\n<li>等待时间：平均定位时间 + 转动延迟，即等待读写的扇区转到磁头下方所用的时间。</li>\n<li>寻道时间：磁头移动到磁道所需时间。</li>\n</ul>\n</li>\n<li><p>容量</p>\n<ul>\n<li>非格式化 = 面数 * 磁道数/面 * 内圆周长 * 最大位密度</li>\n<li><p>格式化 = 面数 * 磁道数/面 * 扇区数/道 * 字节数/扇区</p>\n<blockquote>\n<p>格式化 = 面数 * 磁道数/面 * 单磁道字节数</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"知识产权\"><a href=\"#知识产权\" class=\"headerlink\" title=\"知识产权\"></a>知识产权</h3><h4 id=\"基本概念-3\"><a href=\"#基本概念-3\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>知识产权可分为 <code>工业产权</code> 和 <code>著作权</code> 两类。</p>\n<ul>\n<li><p>工业产权：专利、实用新型、工业品外观设计、商标、厂商名称、服务标记、产地标记（或原产地名称）</p>\n<blockquote>\n<p>商业秘密、微生物技术、遗传基因技术也属于工业产权保护对象。</p>\n</blockquote>\n</li>\n<li><p>著作权：作者对其创作的作品享有 <code>人身权</code> 和 <code>财权</code>。</p>\n<ul>\n<li>人身权：发表权、署名权、修改权、保护作品完整权</li>\n<li>财产权：作品使用权、获报酬权</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>智力成果不限于其一，它们可 <code>同时</code> 成为工业产权和著作权保护的客体。</p>\n<blockquote>\n<p>比如，计算机软件和实用艺术品受著作权保护同时，权利人还可通过申请发明专利和外观设计专利获得专利权。</p>\n</blockquote>\n</li>\n<li><p>知识产权的特点</p>\n<ul>\n<li>无形性：<ul>\n<li>无形财产权，客体是智力创作性成果（或知识产品）。</li>\n<li>没有形体的精神财富，可脱离其所有者而存在的无形信息，可同时为多个主体使用。</li>\n</ul>\n</li>\n<li>双重性：<ul>\n<li>某些知识产权具有财产权和人身权。比如著作权。</li>\n<li>商业秘密只有财产权属性；专利权、商标权主要体现为财产权。</li>\n</ul>\n</li>\n<li>确认性：智力创作性成果的财产权需要依法审查确认，以得到法律保护。</li>\n<li>独占性：<ul>\n<li>智力成果可同时被多个主体所使用，为此法律授予知识产权一种专用权。</li>\n<li>未经权利人许可，任何单位或个人不得使用，否则构成侵权并承担相应法律责任。</li>\n</ul>\n</li>\n<li>地域性：各国主管机关依照本国法律授予的知识产权，只能在其 <code>本国领域内</code> 受法律保护。</li>\n<li><p>时间性：知识产权具有法定的保护期限，期限届满则权利自行终止，成为社会公众可自由使用的知识。至于期限长短依照各国的法律确定，以下为我国知识产权保护期限的情况：</p>\n<ul>\n<li>发明专利：20 年（自专利申请日起计算）</li>\n<li>实用新型专利权和外观设计专利权：10 年（自专利申请日起计算）</li>\n<li><p>商标权：自核准注册之日起 10 年，可根据所有人需要无限地延长权利期限。</p>\n<blockquote>\n<p>在期限届满 6 个月内申请续展注册，每次续展注册有效期为 10 年，续展注册次数不限。</p>\n</blockquote>\n</li>\n<li><p>商业秘密：受法律保护期限是不确定的，秘密一旦被公众所知悉即可成为自由似乎用的知识。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"计算机软件著作权\"><a href=\"#计算机软件著作权\" class=\"headerlink\" title=\"计算机软件著作权\"></a>计算机软件著作权</h4><h5 id=\"著作权的主体与客体\"><a href=\"#著作权的主体与客体\" class=\"headerlink\" title=\"著作权的主体与客体\"></a>著作权的主体与客体</h5><ul>\n<li>软件著作权的主体<ul>\n<li>公民：公民自行独立开发、订立委托合同他人开发（约定著作权归自己享有）、转让取得、继承取得</li>\n<li>法人<ul>\n<li>法人组织并提供创作物质条件所实施的开发（法人承担社会责任）</li>\n<li>接口委托、转让等有效合同关系取得著作权的主体资格</li>\n<li>法人变更而依法成为著作权的主体</li>\n</ul>\n</li>\n<li>其他组织</li>\n</ul>\n</li>\n<li>软件著作权的客体：计算机程序及其有关文档</li>\n</ul>\n<h5 id=\"著作权的权利\"><a href=\"#著作权的权利\" class=\"headerlink\" title=\"著作权的权利\"></a>著作权的权利</h5><ul>\n<li>著作人身权（精神权利）<ul>\n<li>发表权</li>\n<li>开发者身份权（署名权）</li>\n</ul>\n</li>\n<li>著作财产权（经济权利）：使用权、复制权、修改权、发行权、翻译权、注释权、信息网络传播权、出租权、使用许可权和获得报酬权、转让权。</li>\n<li>合法持有人的权利<ul>\n<li>把软件装入计算机等存储信息的装置内。</li>\n<li>必要的复制。</li>\n<li>制作备份复制品，复制品不得通过任何方式提供他人使用。</li>\n<li>不得向第三方提供修改后的软件。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"著作权的保护期\"><a href=\"#著作权的保护期\" class=\"headerlink\" title=\"著作权的保护期\"></a>著作权的保护期</h5><ul>\n<li>自软件开发完成之日起产生，保护期为 50 年。</li>\n<li>保护期满，除开发者身份权以外，其他权利终止。软件进入共有领域。</li>\n</ul>\n<h4 id=\"计算机软件商业秘密\"><a href=\"#计算机软件商业秘密\" class=\"headerlink\" title=\"计算机软件商业秘密\"></a>计算机软件商业秘密</h4><ul>\n<li>商业秘密定义<ul>\n<li>不为公众所知悉的；</li>\n<li>能为权利人带来经济利益；</li>\n<li>具有实用性并经权利人采取保密措施的技术信息和经营信息。</li>\n</ul>\n</li>\n<li><p>商业秘密构成条件</p>\n<ul>\n<li>未公开性</li>\n<li>实用性：能给权利人带来经济效益</li>\n<li><p>保密性</p>\n<blockquote>\n<p>缺少上述任一条件时，商业秘密丧失保护。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>商业秘密权：无形财产权</p>\n</li>\n</ul>\n<h4 id=\"专利权\"><a href=\"#专利权\" class=\"headerlink\" title=\"专利权\"></a>专利权</h4><ul>\n<li><p>对于专利不适用的对象，不授予专利权</p>\n<ul>\n<li>违法国家法律、社会公德、妨害公共利益的发明创造。</li>\n<li><p>科学发现：客观世界存在但未揭示的规律、性质和现象等的认识。</p>\n<blockquote>\n<p>科学发明与科学发现表述的概念是不一样的。</p>\n</blockquote>\n</li>\n<li><p>智力活动的规则和方法：人们进行推理、分析、判断、运算、处理、记忆等思维活动的规则和方法。</p>\n</li>\n<li>病的诊断和治疗方法</li>\n<li>动物和植物品种，但动植物品种的生产方法可依照专利法规定授予专利权。</li>\n<li>用原子核变换方法获得的物质。</li>\n</ul>\n</li>\n<li><p>授予专利权的条件</p>\n<ul>\n<li>新颖性</li>\n<li>创造性</li>\n<li>实用性：发明或实用新型能够制造或使用，且能够产生积极的效果。</li>\n</ul>\n</li>\n<li><p>专利的申请</p>\n<ul>\n<li>专利申请权</li>\n<li>专利申请人：公民、法人、组织<ul>\n<li>职务发明创造的单位</li>\n<li>非职务发明创造的专利申请人为完成发明创造的发明人或设计人</li>\n<li>共同发明创造的专利申请人是共同发明人或设计人或其所属单位</li>\n<li>委托发明创造的专利申请人为合同约定的人</li>\n<li>受让人</li>\n</ul>\n</li>\n<li>专利申请原则<ul>\n<li>一份申请一项发明</li>\n<li>最先申请原则</li>\n</ul>\n</li>\n<li>专利申请日（关键日）<ul>\n<li>专利申请受理代办处收到完整专利申请文件的日期。</li>\n<li>申请文件为邮寄的，以寄出的邮戳日为申请日。</li>\n</ul>\n</li>\n<li><p>专利申请审批</p>\n<ul>\n<li>初步审查：经初步审查认为符合本法要求的，自申请日起满18个月，即行公布（公布申请）。</li>\n<li><p>自申请日起三年内，专利局可根据申请人随时提出请求，对其申请进行实质审查。</p>\n<blockquote>\n<p>实质审查：对申请专利的新颖性、创造性、实用性等依法审查的法定程序。</p>\n</blockquote>\n</li>\n<li><p>实用新型和外观设计专利申请只进行初步审查，不进行实质审查。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Project"],"tags":["数据库","软件工程","数据结构","操作系统","软考","CS"]},{"title":"场景化学习设计模式：Android 案例与实践","url":"/2018/01/Design-Pattern-Based-on-Android.html","content":"<p>在安卓项目中，诸如监听器、适配器、迭代器等并不陌生，然而它们无不体现着设计模式的精髓，设计与模式的结合往往与设计能力与代码质量息息相关。同理逆向思考此类问题，对于一些优秀项目源码的学习障碍往往是对其架构设计的理解（逻辑、性能、解耦等），而不仅仅是源码本身。作为开发者，知其然知其所以然，这也正是我们深入学习设计模式的理由之一。</p>\n<p>当然，我们还要正视学习设计模式的心态，掌握了各种设计模式，并不代表个人的设计能力与代码质量就能突飞猛进；同样在项目中，也不是生搬硬套设计模式就能解决问题的。在《 <a href=\"https://book.douban.com/subject/2243615/\" target=\"_blank\" rel=\"noopener\">Head First 设计模式</a> 》一书中指出，即没有最好的模式，只有最适合问题的设计模式，学习过程与运用过程要注重融会贯通。</p>\n<p>最后，学习设计模式不要局限于《 <a href=\"https://book.douban.com/subject/26644935/\" target=\"_blank\" rel=\"noopener\">Android 源码设计模式</a> 》本身，您还可以搭配一些经典论文、综述或者书籍学习，以至于怀疑一个问题的正误时，多比对、多思考，以得到正确理解。</p>\n<a id=\"more\"></a>\n<ul>\n<li>推荐书目：<ul>\n<li>《 设计模式（可复用面向对象软件的基础）》</li>\n</ul>\n</li>\n<li>推荐项目：<ul>\n<li><a href=\"http://www.mcdonaldland.info/2007/11/28/40/\" target=\"_blank\" rel=\"noopener\">Design Pattern Quick Reference.Jason Mcdonald</a>：<a href=\"/pdf/Design_Pattern_Quick_Reference.pdf\">PDF Download</a></li>\n<li><a href=\"https://github.com/DovAmir/awesome-design-patterns#languageframework-design-patterns-mainly-gof\" target=\"_blank\" rel=\"noopener\">Awesome Design Patterns.DovAmir.Github</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"更新进程\"><a href=\"#更新进程\" class=\"headerlink\" title=\"更新进程\"></a>更新进程</h2><ul>\n<li>2018.01.30：完成序言；</li>\n<li>2018.01.31：更新第壹章；</li>\n<li>2018.02.05：更新第贰章 ( 共 23 种设计模式 )；</li>\n<li>2021.04.19：所有图片资源更新为 svg 格式源；</li>\n<li>2021.05.02：重新梳理内容、排版格式；</li>\n</ul>\n<h2 id=\"内容总览\"><a href=\"#内容总览\" class=\"headerlink\" title=\"内容总览\"></a>内容总览</h2><ul>\n<li><a href=\"#零-本书架构\">零 本书架构</a></li>\n<li><a href=\"#壹-面向对象编程六大原则\">壹 面向对象编程六大原则</a></li>\n<li><a href=\"#贰-二十三种设计模式解析\">贰 二十三种设计模式解析</a></li>\n<li><a href=\"#叁-MVC-与-MVP-模式\">叁 MVC 与 MVP 模式</a></li>\n</ul>\n<h2 id=\"零-本书架构\"><a href=\"#零-本书架构\" class=\"headerlink\" title=\"零 本书架构\"></a>零 本书架构</h2><h3 id=\"面向对象六大原则\"><a href=\"#面向对象六大原则\" class=\"headerlink\" title=\"面向对象六大原则\"></a>面向对象六大原则</h3><ul>\n<li><code>单一职责原则</code>：优化代码第一步。即就一个类而言，应该 <code>有且仅有</code> 一个引起它变化的原因。</li>\n<li><code>开闭原则</code>：让程序更稳定、更灵活，即软件中的对象（类、模块、函数等）对于扩展是开放的，但对于修改是封闭的。</li>\n<li><code>里氏替换原则</code>：构建扩展性更好的系统。</li>\n<li><code>依赖倒置原则</code>：让项目拥有变化能力，即依赖抽象，不依赖具体实现。</li>\n<li><code>接口隔离原则</code>：系统拥有更高灵活性。</li>\n<li><code>迪米特原则</code>：也称为 <code>最少知识原则</code>，即一个对象应对其他对象有最少的了解。</li>\n</ul>\n<h3 id=\"二十三种设计模式\"><a href=\"#二十三种设计模式\" class=\"headerlink\" title=\"二十三种设计模式\"></a>二十三种设计模式</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式名称</th>\n<th style=\"text-align:left\">目的</th>\n<th style=\"text-align:left\">一句话描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单例模式</td>\n<td style=\"text-align:left\">创建型</td>\n<td style=\"text-align:left\">一个类只有一个实例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Build 模式</td>\n<td style=\"text-align:left\">创建型</td>\n<td style=\"text-align:left\">自由拓展你的项目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">原型模式</td>\n<td style=\"text-align:left\">创建型</td>\n<td style=\"text-align:left\">使程序运行更高效</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">工厂方法模式</td>\n<td style=\"text-align:left\">创建型</td>\n<td style=\"text-align:left\">生成复杂对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">抽象工厂模式</td>\n<td style=\"text-align:left\">创建型</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">策略模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">时势造英雄</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">状态模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">随遇则安</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">责任链模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">使编程更有灵活性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">解释器模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">化繁为简的翻译机</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">命令模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">让程序畅通执行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">观察者模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">解决、解耦的钥匙</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">备忘录模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">编程中的后悔药</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">迭代器模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">解决问题的第三者</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">模块方法模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">抓住问题的核心</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">访问者模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">数据结构与操作分离</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中介者模式</td>\n<td style=\"text-align:left\">行为型</td>\n<td style=\"text-align:left\">调解者模式或调停者模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">代理模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">委托模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">组合模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">物以类聚</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">适配器模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">得心应手粘合剂</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">装饰模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">动态给对象添加额外职责</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">享元模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">对象共享，避免创建多对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">外观模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">统一编程接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">桥接模式</td>\n<td style=\"text-align:left\">结构型</td>\n<td style=\"text-align:left\">连接两地的交通枢纽</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>按照设计模式的目的可分为三类：创建型模式与对象的创建相关；结构型模式处理类或对象的组合；行为型模式对类或对象如何交互以及怎样分配职责进行描述。</li>\n<li>容易混淆的设计模式之间相比较：<ul>\n<li>策略模式 v.s. 状态模式</li>\n<li>代理模式 v.s. 装饰模式</li>\n<li>原型模式 v.s. 备忘录模式</li>\n<li>观察者模式 v.s. 发布订阅模式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"壹-面向对象编程六大原则\"><a href=\"#壹-面向对象编程六大原则\" class=\"headerlink\" title=\"壹 面向对象编程六大原则\"></a>壹 面向对象编程六大原则</h2><h3 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h3><ul>\n<li>Single Responsibility Principle，SRP</li>\n<li>即就一个类而言，应该仅有一个引起它变化的原因。</li>\n<li>如何划分一个类、一个函数的职责？每个人的经验不同，观点看法也不同，故视具体任务而定。但也有一些基本原则供参考：  <ul>\n<li>两个完全不一样的功能就不应该放到同一个类中。</li>\n<li>一个类中应该是一组相关性很高的函数、数据的封装。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><ul>\n<li>Open Close Principle，OCP</li>\n<li><p>即软件中的对象（类、模块、函数等）应该对于 <code>扩展是开放</code> 的，但对于 <code>修改是封闭</code> 的。</p>\n</li>\n<li><p>勃兰特·梅耶. 《面向对象软件构造》中提倡：</p>\n<ul>\n<li>新的特性应通过新建不同的类实现，新建的类可通过 <code>继承</code> 的方式来重用原类的代码。</li>\n<li><p>已存在的实现类对于修改是封闭的，但新的实现类可通过 <code>覆写父类的接口</code> 应对变化。</p>\n<blockquote>\n<p>总结：当软件需变化时，应该尽量通过扩展方式来实现变化，而不是通过修改已有代码来实现。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><blockquote>\n<p>往往开闭原则与里氏替换原则是生死相依、不离不弃的。</p>\n</blockquote>\n<ul>\n<li>Liskov Substitution Principle，LSP</li>\n<li>所有引用基类的地方必须能透明地使用其子类的对象。</li>\n<li><p>举例：任何继承自 View 类的子类都可以设置给 show 方法，即里氏替换。尽管千变万化的 View 传递给 Window，Window 只管组织 View 并显示在屏幕上。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 测量视图的大小</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 绘制按钮</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Windows</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">show</span><span class=\"params\">(View child)</span> </span>&#123;</span><br><span class=\"line\">\t\tchild.draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><ul>\n<li>Dependence Inversion Principle，DIP</li>\n<li>一种特定的 <code>解耦形式</code>，使得高层次的模块不依赖于低层次的模块的实现细节。</li>\n<li><p>依赖倒置原则的几个关键点：    </p>\n<ul>\n<li><p>高层模块不应该依赖低层模块，两者都应依赖其抽象（接口或抽象类）；</p>\n<blockquote>\n<p>高层模块指调用端，低层模块指实现类。</p>\n</blockquote>\n</li>\n<li><p>抽象不应该依赖细节，细节应依赖抽象。</p>\n</li>\n</ul>\n</li>\n<li><p>模块间的依赖通过抽象发生，实现类之间不发生直接依赖关系。</p>\n<blockquote>\n<p>一句话概括：<code>面向接口编程，面向抽象编程</code></p>\n</blockquote>\n</li>\n<li><p>举例：设计一款实现图片缓冲功能的接口，具体的缓冲实现方式、细节，根据实际情况编写。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ImageChache</span> </span>&#123;\t<span class=\"comment\">// ImageCache 缓存抽象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">get</span><span class=\"params\">(String url)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String url, Bitmap bmp)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemoryCache</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImageCache</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 根据实际需求，再实现具体细节</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageLoader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 图片缓存类，依赖抽象，不依赖细节</span></span><br><span class=\"line\">\tImageCache mCache = <span class=\"keyword\">new</span> MemoryCache();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">displayImage</span><span class=\"params\">(String url, ImageView imageView)</span> </span>&#123;</span><br><span class=\"line\">\t\tBitmap bmp = mCache.get(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == bmp)&#123;</span><br><span class=\"line\">\t\t\tdownloadImageAsync(url, imageView);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\timageView.setImageBitmap(bmp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setImageCache</span><span class=\"params\">(ImageCache cache)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mCache = cache;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><ul>\n<li>Interface Segregation Principles，ISP</li>\n<li><p>类间的依赖关系应建立在最小接口上。ISP 将非常庞大、臃肿的接口拆分成更小的和更具体的接口。IPS的目的是系统解开耦合。</p>\n<blockquote>\n<p>如上例 ImageLoader 中的 ImageCache，ImageLoader 只需要知道该缓存对象有存、取缓存图片的接口即可，其他一概不管。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"迪米特原则\"><a href=\"#迪米特原则\" class=\"headerlink\" title=\"迪米特原则\"></a>迪米特原则</h3><ul>\n<li><p>一个对象应对其他对象有最少的了解、即类的内部如何实现与调用者、依赖者没关系，调用者或依赖者之需知道它需要的方法即可，其他一概不管。</p>\n</li>\n<li><p>图 1-1 展示了租客、中介与房间相互之间的需求关系。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_1-1.svg\" alt=\"租客、中介与房间关系\"></p>\n  <center>图 1-1 租客、中介与房间关系</center>\n\n<p>  因为租客只需要房子，即把需求转达中介，对房子具体的租金、维修、签约等交由中介处理，租客不需要再了解细节。改进效果见图 1-2。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_1-2.svg\" alt=\"租客、中介与房间关系\"></p>\n  <center>图 1-2 改进：租客、中介与房间的关系</center>  \n\n</li>\n</ul>\n<h2 id=\"贰-二十三种设计模式解析\"><a href=\"#贰-二十三种设计模式解析\" class=\"headerlink\" title=\"贰 二十三种设计模式解析\"></a>贰 二十三种设计模式解析</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><h4 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h4><ul>\n<li><p>确保某 <code>一个类只有一个实例</code> ，而且自行实例化并向整个系统提供这个实例。</p>\n<blockquote>\n<p><code>一个类只有一个实例</code> ：避免产生多个对象消耗过多资源，如访问 I/O 和数据库等资源。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"单例模式-UML-类图\"><a href=\"#单例模式-UML-类图\" class=\"headerlink\" title=\"单例模式 UML 类图\"></a>单例模式 UML 类图</h4><p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-1.svg\" alt=\"单例模式示意图\"></p>\n<center>图 2-1 单例模式示意图</center> \n\n<ul>\n<li><p>实现单例模式主要有如下几个关键点：</p>\n<ul>\n<li><code>构造函数</code> 不对外开放，一般设为 <code>私有</code> ；</li>\n<li>通过一个 <code>静态方法</code> 或者 <code>枚举返回</code> 单例类对象；</li>\n<li>确保单例类的对象有且只有一个，尤其多线程环境下；</li>\n<li><p>确保单例类对象在 <code>反序列化</code> 时不会重新构建对象；</p>\n<blockquote>\n<p><code>序列化</code>：将对象的状态信息转换为可以存储或传输的形式的过程。一般将一个对象存储至一个储存媒介，例如档案或是记亿体缓冲等。在网络传输过程中，可以是字节或是 XML 等格式。<br><code>反序列化</code>：而字节的或XML编码格式可以还原完全相等的对象。这个相反的过程又称为反序列化。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"单例模式的简单示例\"><a href=\"#单例模式的简单示例\" class=\"headerlink\" title=\"单例模式的简单示例\"></a>单例模式的简单示例</h4><ul>\n<li><p>举例：例如一个公司只有一个 CEO，一个应用只有一个 Application 对象等。下面以公司里的 CEO 为例来简单演示，即一个公司只有一个 CEO，可有多个 VP 以及多名员工。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 员工的基类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Staff</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略执行细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 副总裁类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VP</span> <span class=\"keyword\">extends</span> <span class=\"title\">Staff</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 覆写执行细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 饿汉单例模式：声明静态对象时已初始化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CEO</span> <span class=\"keyword\">extends</span> <span class=\"title\">Staff</span> </span>&#123; <span class=\"comment\">// 公司保证只有一个 CEO</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CEO mCeo = <span class=\"keyword\">new</span> CEO();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CEO</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CEO <span class=\"title\">getCeo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mCeo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 覆写执行细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 实际中使用：</span></span><br><span class=\"line\"><span class=\"comment\"> * CEO 类不能通过 new 的形式构造对象，只能通过 CEO.getCeo() 函数获取。</span></span><br><span class=\"line\"><span class=\"comment\"> * CEO 对象是静态对象，并在声明时已初始化，保证 CEO 对象的唯一性。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Staff ceo1 = CEO.getCeo();\t</span><br><span class=\"line\">Staff ceo2 = CEO.getCeo();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"单例模式的其他实现方式\"><a href=\"#单例模式的其他实现方式\" class=\"headerlink\" title=\"单例模式的其他实现方式\"></a>单例模式的其他实现方式</h4><h5 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h5><ul>\n<li><p>懒汉单例模式：用时才初始化，即 <code>惰性处理机制</code></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instantce;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加 synchronized 关键字，即 getInstance() 是一个同步方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> == instance ) &#123;</span><br><span class=\"line\">\t\t\tinstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>声明一静态对象；</li>\n<li>调用 getInstance() 方法初始化（用时才初始化，即惰性处理机制）；</li>\n<li>懒汉单例模式优点：使用时才实例化，一定程度上节约资源；</li>\n<li>懒汉单例模式缺点：每次调用 getInstance() 都进行同步，造成不必要同步开销。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"双重检查锁定\"><a href=\"#双重检查锁定\" class=\"headerlink\" title=\"双重检查锁定\"></a>双重检查锁定</h5><ul>\n<li><p>双重检查锁定（Double CheckLock, DCL）</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// private static Singleton sInstance = null;</span></span><br><span class=\"line\">  <span class=\"comment\">// 保证 sInstance 对象每次都是从主内存存、读取</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton sInstance = <span class=\"keyword\">null</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"do sth.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> == sInstance ) &#123; <span class=\"comment\">// 避免不必要同步</span></span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span>(Singleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处判空操作，是因为 Java 编译器允许处理器乱序执行，具体见下述解析</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> == sInstance ) &#123; </span><br><span class=\"line\">          sInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DCL 又称「丑陋的优化」：DCL 虽一定程度解决了资源消耗，多余同步、线程安全等问题，但某种情况下还是会出现失效问题，为此称 DCL 为「丑陋的优化」。</p>\n</li>\n<li><p>线程 A 执行 <code>sInstance = new Singleton()</code>，编译器会编译成多条汇编指令，具体汇编指令的分工：</p>\n<ul>\n<li>Step.01 给 Singleton 实例分配内存；  </li>\n<li>Step.02 调用 Singleton() 的构造函数；  </li>\n<li>Step.03 将 sInstance 对象指向分配的内存空间.</li>\n</ul>\n</li>\n<li><p>然而 Java 编译器允许处理器 <code>乱序执行</code>，即有「1-2-3」或「1-3-2」的执行顺序。</p>\n<blockquote>\n<p>重排序，包括 <code>Java 指令重排序</code> 以及 <code>机器指令重排序</code>。</p>\n</blockquote>\n</li>\n<li><p>若执行「1-3-2」的顺序，这样会使 DCL 的优化失效，即第三步执行完毕，sInstance 非空，线程 B 取走 sInstance。再使用时就会报错。</p>\n</li>\n</ul>\n<h5 id=\"静态内部类单例\"><a href=\"#静态内部类单例\" class=\"headerlink\" title=\"静态内部类单例\"></a>静态内部类单例</h5><ul>\n<li><p>静态内部类单例模式</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SingletonHolder.sInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123; <span class=\"comment\">// 静态内部类</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton sInstance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一次加载 Singleton 的 getInstance() 方法才会使 sInstance 被初始化。因此，第一次调用 getInstance() 方法会导致虚拟机加载 SingletonHolder 类。</p>\n</li>\n<li>内部类是 <code>延时加载</code> 的，只会在第一次使用时加载，不使用不加载。这样即保证了线程安全，又保证单例对象唯一性，同时也延迟单例的实例化。</li>\n</ul>\n<h5 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h5><ul>\n<li><p>默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> SingletonEnum &#123;</span><br><span class=\"line\">\tINSTANCE;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"do sth.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>不管以哪种形式实现单例模式，核心原理都是将 <code>构造函数私有化</code>，并通过 <code>静态方法获取一个唯一实例</code>。</p>\n<blockquote>\n<p>获取实例的过程须保证线程安全，防止反序列化导致重新生成实例对象等。</p>\n</blockquote>\n</li>\n<li><p>选择哪种实现形式取决项目本身，如是否是复杂的并发环境、JDK 版本是否过低、单例对象的资源消耗等。</p>\n</li>\n<li>单例模式优点  <ul>\n<li>只生成一个实例，减少系统的性能开销。  </li>\n<li>当产生一对象的需要较多资源时，如读取配置、产生其他依赖对象时，可通过应用启动时直接产生一个单例对象，永久驻留内存。</li>\n</ul>\n</li>\n<li>单例模式缺点<ul>\n<li>单例模式一般没有接口，扩展性难。 </li>\n<li>单例对象若持有 Context，那么很容易引发内存泄漏，此时需注意传递给单例对象的 Context 应该是 <code>Application.Context</code>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Bulider-模式\"><a href=\"#Bulider-模式\" class=\"headerlink\" title=\"Bulider 模式\"></a>Bulider 模式</h3><h4 id=\"Bulider-模式的定义\"><a href=\"#Bulider-模式的定义\" class=\"headerlink\" title=\"Bulider 模式的定义\"></a>Bulider 模式的定义</h4><ul>\n<li>创建型设计模式。</li>\n<li>将一个复杂对象的 <code>构建</code> 与它的 <code>表示</code> 分离，使得同样的构建过程可以创建不同的表示。</li>\n<li>Builder 模式是一步步创建一个复杂对象的，它允许用户在不知内部构建细节的情况下，可以更精细地控制对象的构造流程。</li>\n</ul>\n<h4 id=\"Builder-模式的使用场景\"><a href=\"#Builder-模式的使用场景\" class=\"headerlink\" title=\"Builder 模式的使用场景\"></a>Builder 模式的使用场景</h4><ul>\n<li>产品类非常复杂，或产品类中调用顺序不同产生不同的作用，这时需要使用 Builder 模式。</li>\n<li>初始化一个对象特别复杂，如参数多，且很多参数都具有默认值。</li>\n</ul>\n<h4 id=\"Builder-模式的-UML-类图\"><a href=\"#Builder-模式的-UML-类图\" class=\"headerlink\" title=\"Builder 模式的 UML 类图\"></a>Builder 模式的 UML 类图</h4><p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-2.svg\" alt=\"Builder模式示意图\"></p>\n<center>图 2-2 Builder 模式示意图</center> \n\n<h4 id=\"Builder-模式的简单实现\"><a href=\"#Builder-模式的简单实现\" class=\"headerlink\" title=\"Builder 模式的简单实现\"></a>Builder 模式的简单实现</h4><ul>\n<li><p>利用 Builder 模式解释计算机的组装过程。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 下述程序以计算机组装过程简化为：构建主机，设置操作系统，设置显示器 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算机抽象类：Product 角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String mBoard;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String mDisplay;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String mOS;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Computer</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBoard</span><span class=\"params\">(String board)</span> </span>&#123; <span class=\"comment\">// 设置 CPU 核心数</span></span><br><span class=\"line\">\t\tmBoard = board;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisplay</span><span class=\"params\">(String display)</span> </span>&#123; <span class=\"comment\">// 设置内存</span></span><br><span class=\"line\">\t\tmDisplay = display;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Computer[...]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体 Computer 类：MacBook</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Macbook</span> <span class=\"keyword\">extends</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Macbook</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmOS = <span class=\"string\">\"MAC OSX 10.10\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象 Builder 类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span></span>; <span class=\"comment\">// 设置主机</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 设置操作系统</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDisplay</span><span class=\"params\">(String display)</span></span>; <span class=\"comment\">// 设置显示器</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 创建 Computer</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体 Builder 类：MacbookBuilder</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacbookBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Computer mComputer = <span class=\"keyword\">new</span> Macbook();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBoard</span><span class=\"params\">(String board)</span></span>&#123;</span><br><span class=\"line\">\t\tmComputer.setBoard(board);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildDisplay</span><span class=\"params\">(String display)</span> </span>&#123;</span><br><span class=\"line\">\t\tmComputer.setDisplay(display);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmComputer.setOS();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Computer <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mComputer;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Director 类：负责构造 Computer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</span><br><span class=\"line\">\tBuilder mBuilder = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Director</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">\t\tmBuilder = builder;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">(String board, String display)</span> </span>&#123;</span><br><span class=\"line\">\t\tmBuilder.buildBoard(board);</span><br><span class=\"line\">\t\tmBuilder.buildDisplay(display);</span><br><span class=\"line\">\t\tmBuilder.buildOS();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBuilder builder = <span class=\"keyword\">new</span> MacbookBuilder(); <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">\t\tDirector pcDirector = <span class=\"keyword\">new</span> Director(builder); <span class=\"comment\">// Director</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 封装构建过程</span></span><br><span class=\"line\">\t\tpcDirector.construct(<span class=\"string\">\"英特尔主板\"</span>, <span class=\"string\">\"Retina 显示器\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Computer Info:\"</span></span><br><span class=\"line\">\t\t\t+ builder.create().toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图见图 2-3。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-3.svg\" alt=\"计算机组装过程\"></p>\n  <center>图 2-3 计算机组装过程</center> \n\n</li>\n</ul>\n<h4 id=\"Builder-模式实战\"><a href=\"#Builder-模式实战\" class=\"headerlink\" title=\"Builder 模式实战\"></a>Builder 模式实战</h4><ul>\n<li><p>举例：知名图片加载库 Universal-Image-Loader</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ImageLoaderConfiguration config = <span class=\"keyword\">new</span> ImageLoaderConfiguration</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 用户只能通过 Builder 对象构建 ImageLoaderConfiguration 对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这就是构建和表示相分离</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t.Builder(context) </span><br><span class=\"line\">\t.threadPriority(Thread_NORM_PRIORITY_2)</span><br><span class=\"line\">\t.denyCacheImageMultipleSizesInMemory()</span><br><span class=\"line\">\t.discCacheFileNameGenerator( <span class=\"keyword\">new</span> MD5FileNameGenerator() )</span><br><span class=\"line\">\t.tasksProcessingOrder(QueueProcessingType.LIFO)</span><br><span class=\"line\">\t.bulider();</span><br><span class=\"line\"></span><br><span class=\"line\">ImageLoader.getInstance().init(config);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>Builder 模式，通过作为配置类的构建器将配置的构建和表示分离开来，同时也将配置从目标类中隔离出来，避免过多的 Setter 方法暴露在目标类当中。</li>\n<li>Builder 模式的优点  <ul>\n<li>良好的封装性，不必知道产品内部组成的细节；  </li>\n<li>建造者独立，易于扩展。</li>\n</ul>\n</li>\n<li>Builder 模式的缺点  <ul>\n<li>产生多余 Builder 对象及 Director 对象，消耗内存。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><h4 id=\"原型模式的定义\"><a href=\"#原型模式的定义\" class=\"headerlink\" title=\"原型模式的定义\"></a>原型模式的定义</h4><ul>\n<li>创建型的模式。</li>\n<li>定义：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。<ul>\n<li>原型拥有 <code>样板实例</code>，可克隆内部属性一致的对象。</li>\n<li>原型模式多用于创建复杂的或构建耗时的实例，即复制一个已经存在的实例可使程序运行更高效。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"原型模式的使用场景\"><a href=\"#原型模式的使用场景\" class=\"headerlink\" title=\"原型模式的使用场景\"></a>原型模式的使用场景</h4><ul>\n<li>类初始化需消耗非常多的资源（数据、硬件资源等）。</li>\n<li>通过 new 产生一个对象需要非常繁琐的数据准备或访问权限。</li>\n<li>一个对象需提供其他对象访问，且各调用者可能都需修改其值时，可考虑用原型模式或拷贝多个对象以供调用者使用，即 <code>保护性拷贝</code> 。</li>\n</ul>\n<h4 id=\"原型模式的-UML-类图\"><a href=\"#原型模式的-UML-类图\" class=\"headerlink\" title=\"原型模式的 UML 类图\"></a>原型模式的 UML 类图</h4><p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-4.svg\" alt=\"Builder模式示意图\"></p>\n<center>图 2-4 原型模式的 UML 类图</center> \n\n<h4 id=\"原型模式的简单实现\"><a href=\"#原型模式的简单实现\" class=\"headerlink\" title=\"原型模式的简单实现\"></a>原型模式的简单实现</h4><ul>\n<li><p>设计一简单文档处理功能类，支持编辑克隆对象以保障源文件的安全性。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * WordDocument 具有文字、图片编辑功能的简单文档处理类。</span></span><br><span class=\"line\"><span class=\"comment\"> * 为保护源文件，其可在克隆对象上作内容修改。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDocument</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// WordDocument 扮演 ConcretePrototype 角色</span></span><br><span class=\"line\">\t<span class=\"comment\">// Cloneable 扮演 Prototype 角色</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mText; <span class=\"comment\">// 文本</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;String&gt; mImages = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(); <span class=\"comment\">// 图片名列表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordDocument</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> WordDocument <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 对象拷贝一份（浅拷贝）</span></span><br><span class=\"line\">\t\t\tWordDocument doc = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 对象里的成员变量也拷贝一份（深拷贝）</span></span><br><span class=\"line\">\t\t\tdoc.mText = <span class=\"keyword\">this</span>.mText;</span><br><span class=\"line\">\t\t\tdoc.mImages = <span class=\"keyword\">this</span>.mImages;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> doc;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mText;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String mText)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mText = mText;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getImage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mImages;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addImage</span><span class=\"params\">(String img)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mImages.add(img);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showDocument</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Text:\"</span> + mText);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Images List:\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String imgName:mImages) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"image name:\"</span> + imgName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWordDocument originDoc = <span class=\"keyword\">new</span> WordDocument();</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Partion A start */</span></span><br><span class=\"line\">\t\toriginDoc.setText(<span class=\"string\">\"This is a Aircle\"</span>);</span><br><span class=\"line\">\t\toriginDoc.addImage(<span class=\"string\">\"Image A\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Partion A end */</span></span><br><span class=\"line\">\t\toriginDoc.showDocument();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWordDocument secDoc = originDoc.clone();</span><br><span class=\"line\">\t\tsecDoc.showDocument();</span><br><span class=\"line\">\t\tsecDoc.setText(<span class=\"string\">\"This is a Paper\"</span>); <span class=\"comment\">// 只是改变了引用指向</span></span><br><span class=\"line\">\t\tsecDoc.showDocument();</span><br><span class=\"line\">\t\toriginDoc.showDocument(); <span class=\"comment\">// 还是输出 Partion A 的结果</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：通过 clone() 拷贝对象时并不会执行构造函数。如果在构造函数中需要一些特殊的初始化操作类型，在使用 Cloneable 实现拷贝时需特别去处理。</p>\n</blockquote>\n</li>\n<li><p>便于理解，本示例的 UML 类图见图 2-5。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-5.svg\" alt=\"WordDocument文档编辑器\"></p>\n  <center>图 2-5 WordDocument 文档编辑器</center> \n\n</li>\n</ul>\n<h4 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h4><ul>\n<li><p>浅拷贝：上述例子实际上只是一个浅拷贝，也称 <code>影子拷贝</code>，即只是副本文档 <code>引用</code> 原始文档的字段。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-6.svg\" alt=\"浅拷贝示意图\"></p>\n  <center>图 2-6 浅拷贝示意图</center> \n\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">secDoc.setText(<span class=\"string\">\"This is a Paper.\"</span>);</span><br><span class=\"line\">secDoc.addImage(<span class=\"string\">\"Image B\"</span>);</span><br><span class=\"line\">secDoc.showDocument(); <span class=\"comment\">// Case 1</span></span><br><span class=\"line\">originDoc.showDocument(); <span class=\"comment\">// Case 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Case 1，2 都增加了图片 “Image B”，原因是 secDoc 只是单纯指向了 this.mImages。</p>\n</blockquote>\n</li>\n<li><p>深拷贝：为了解决浅拷贝所带来的“问题” ( 视具体问题而定 )，引入深拷贝。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> WordDocument <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tWordDocument doc = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">\t\tdoc.mText = <span class=\"keyword\">this</span>.mText;</span><br><span class=\"line\">\t\t<span class=\"comment\">// doc.mImages 指向 mImages 的一份拷贝，而不是 this.mImages 本身</span></span><br><span class=\"line\">\t\tdoc.mImages = (ArrayList&lt;String&gt;) <span class=\"keyword\">this</span>.mImages.clone();\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> doc;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"原型模式实战\"><a href=\"#原型模式实战\" class=\"headerlink\" title=\"原型模式实战\"></a>原型模式实战</h4><ul>\n<li><p>用户信息的更新，限定于与 LoginSession 类在同一包下才能执行，即 Partion A 的操作，使这样的限定失效。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在线用户信息修改（需登录后修改用户信息） */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户实体类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String phoneNum;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Adress adress;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登录接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> interface <span class=\"title\">Login</span> <span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">void</span> login()</span></span>;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Login</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tUser loginedUser = <span class=\"keyword\">new</span> User(); <span class=\"comment\">// 登录服务器，获取用户信息</span></span><br><span class=\"line\">\t\tloginedUser.age = <span class=\"number\">12</span>;</span><br><span class=\"line\">\t\tloginedUser.name = <span class=\"string\">\"Mr.Sample\"</span>;</span><br><span class=\"line\">\t\tloginedUser.address = <span class=\"keyword\">new</span> Address(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"BeiJing\"</span>, <span class=\"string\">\"HaiDing\"</span>, <span class=\"string\">\"Garden Rd\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 登录完成后，将用户信息设置到 Session:</span></span><br><span class=\"line\">\t\tLoginSession.getLoginSession().setLoginedUser(loginedUser)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登录 Session</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginSession</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> LoginSession sLoginSession = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> User longinedUser; <span class=\"comment\">// 已登录用户</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LoginSession</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoginSession <span class=\"title\">getLoginSession</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == sLoginSession) &#123;</span><br><span class=\"line\">\t\t\tsLoginSession = <span class=\"keyword\">new</span> LoginSession();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sLoginSession;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 包级私有：即不加任何修饰符，该模式(默认访问模式)下，只允许在同一包中进行访问</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLoginedUser</span><span class=\"params\">(User user)</span> </span>&#123; <span class=\"comment\">// 设置已登录用户信息，不对外开放</span></span><br><span class=\"line\">\t\tloginedUser = user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getLoginedUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loginedUser;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Partion A : 以下是实际执行部分，可能在不同包的某个类下执行 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取已登录的 User 对象</span></span><br><span class=\"line\">User newUser = LoginSession.getLoginSession().getLoginedUser();</span><br><span class=\"line\"><span class=\"comment\">// 更新用户信息</span></span><br><span class=\"line\">newUser.address = <span class=\"keyword\">new</span> Adress(<span class=\"string\">\"BeiJing\"</span>, <span class=\"string\">\"ChaoYang\"</span>, <span class=\"string\">\"DaWang Rd\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我们可作以下改进：</p>\n<ul>\n<li>在 User 类中实现 Cloneable 接口。</li>\n<li>在 LoginSession 中将 getLoginedUser() 改为 <code>return loginedUser.clone()</code> ，即在任何地方调用，获得的都是用户拷贝的对象，修改只是作用于拷贝的对象。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现 Cloneable 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123; <span class=\"comment\">// 用户实体类</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String phoneNum;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Adress adress;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tUser user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tuser = (User) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(CLoneNotSupportedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginSession</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 即管在任何地方调用，获得的都是用户拷贝的对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getLoginedUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> loginedUser.clone();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>原型模式的优点：原型模式是在内存中二进制的拷贝，比 new 一个对象性能更优。</li>\n<li>原型模式的缺点：内存中拷贝，构造函数是不会执行的。</li>\n</ul>\n<h3 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h3><h4 id=\"工厂方法模式的定义\"><a href=\"#工厂方法模式的定义\" class=\"headerlink\" title=\"工厂方法模式的定义\"></a>工厂方法模式的定义</h4><ul>\n<li>创建型设计模式。</li>\n<li>定义一个用于创建对象的接口，让子类决定实例化哪个类，使得一个 <code>类的实例化延迟到其子类</code>。</li>\n</ul>\n<h4 id=\"工厂方法模式的使用场景\"><a href=\"#工厂方法模式的使用场景\" class=\"headerlink\" title=\"工厂方法模式的使用场景\"></a>工厂方法模式的使用场景</h4><ul>\n<li>创建复杂对象，相反用 New 即可完成创建的对象则不必使用工厂方法了。</li>\n</ul>\n<h4 id=\"工厂方法模式的-UML-类图\"><a href=\"#工厂方法模式的-UML-类图\" class=\"headerlink\" title=\"工厂方法模式的 UML 类图\"></a>工厂方法模式的 UML 类图</h4><ul>\n<li><p>工厂方法模式的 UML 如图 2-7 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-7.svg\" alt=\"浅拷贝示意图\"></p>\n<center>图 2-7 工厂方法模式 UML 类图</center> \n</li>\n<li><p>工厂方法的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123; <span class=\"comment\">// 具体产品 A</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我是具体的产品A.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProductB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123; <span class=\"comment\">// 具体产品 B</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"我是具体的产品B.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123; <span class=\"comment\">// 抽象工厂类</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 具体的产品对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title\">createProduct</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createProduct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回具体产品 A 或者具体产品 B</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// return new ConcreteProductA();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// return new ConcreteProductB();</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tFactory factory = <span class=\"keyword\">new</span> ConcreteFactory();</span><br><span class=\"line\">\t\tProduct p = factory.createProduct();</span><br><span class=\"line\">\t\tp.method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>另外，我们可以利用 <code>反射</code> 的方式实现多工厂方法模式，具体见下述代码。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 具体生产什么由子类去实现</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param clz 产品对象类类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 具体的产品对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span> \t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>&lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(class&lt;T&gt; clz)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T extends Product&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class=\"line\">\t\tProduct p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tp = (Product) <span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">forName</span>(<span class=\"title\">clz</span>.<span class=\"title\">getName</span>()).<span class=\"title\">newInstance</span>()</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T) p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端中实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tFactory factory = <span class=\"keyword\">new</span> ConcreteFactory();</span><br><span class=\"line\">\t\tProduct p = factory.createProduct(ConcreteProductA<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\tp.method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"工厂方法模式的简单实现\"><a href=\"#工厂方法模式的简单实现\" class=\"headerlink\" title=\"工厂方法模式的简单实现\"></a>工厂方法模式的简单实现</h4><ul>\n<li><p>某汽车厂主要就是组装某款 SUV 车型，比如 Q3、Q5、Q7，对于这类车型来说，内部结构差异并不是很大，因此一条生产线足以应付 3 种车型，对于该类生产线可提供一抽象类定义。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 某工厂生产某种车型的工厂方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param clz 具体的 SUV 型号类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return 具体型号的 SUV 车对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>&lt;T extends AudiCar&gt; <span class=\"function\">T <span class=\"title\">createAudiCar</span><span class=\"params\">(class&lt;T&gt; clz)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiCarFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AudiFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T extends AudiCar&gt; <span class=\"function\">T <span class=\"title\">createProduct</span><span class=\"params\">(class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class=\"line\">\t\tAudiCar p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tp = (AudiCar) <span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">forName</span>(<span class=\"title\">clz</span>.<span class=\"title\">getName</span>()).<span class=\"title\">newInstance</span>()</span>; </span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>() &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T) p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 汽车的抽象产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiCar</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">selfNavigation</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体车型：Q3</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiQ3</span> <span class=\"title\">exntends</span> <span class=\"title\">AudiCar</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Q3 Launched!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selfNavigation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Q3 starts a auto-navigation!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAudiFactory factory = <span class=\"keyword\">new</span> AudiFactory();</span><br><span class=\"line\">\t\tAudiQ3 audiQ3 = factory.createProduct(AudiQ3<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\taudiQ3.dirve();</span><br><span class=\"line\">\t\taudiQ3.selfNavigation();\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图见图 2-8。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-8.svg\" alt=\"某工厂生产某车型的工厂方法\"></p>\n  <center>图 2-8 某工厂生产某车型的工厂方法</center> \n\n</li>\n</ul>\n<h4 id=\"工厂方法模式的实战\"><a href=\"#工厂方法模式的实战\" class=\"headerlink\" title=\"工厂方法模式的实战\"></a>工厂方法模式的实战</h4><ul>\n<li><p>Android 数据持久化有很多方式，如 SharedPreferences (XML)、SQLite (关系数据库)。对数据操作的方法无非就是增、删、改、查，若我们将每种数据储存的方式作为一个产品类，在抽象产品类中定义对数据操作的方法，即我们宏观层面把握操作的逻辑，具体的实现逻辑由储存数据的方式决定。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOHandler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String id, String name)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">query</span><span class=\"params\">(String id)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">IOHandler</span> </span>&#123; <span class=\"comment\">// 普通文件存储</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">query</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"AigeStudio\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XMLHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">IOHandler</span> </span>&#123; <span class=\"comment\">// XML 文存储</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">query</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"SMBrother\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DBHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">IOHandler</span> </span>&#123; <span class=\"comment\">// SQLite 数据库存储</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(String id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">query</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 业务逻辑 */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取 IO 处理者</span></span><br><span class=\"line\"><span class=\"comment\">\t * @param clz IOHandler 类型的类类型</span></span><br><span class=\"line\"><span class=\"comment\">\t * @return IOHandler 对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends IOHandler&gt; <span class=\"function\">T <span class=\"title\">getIOHandler</span><span class=\"params\">(class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class=\"line\">\t\tIOHandler handler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\thandler = (IOHandler) <span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">forName</span>(<span class=\"title\">clz</span>.<span class=\"title\">getName</span>()).<span class=\"title\">newInstance</span>()</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T) handler;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle saveInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(saveInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.activity_factory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取显示查询内容的 TextView 对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> TextView tvContent = </span><br><span class=\"line\">\t\t\t(TextView) <span class=\"keyword\">this</span>.findViewById(R.id.factory_content_tv);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取查询普通文件数据的按钮对象，并设置监听</span></span><br><span class=\"line\">\t\tButton btnFile = (Button) <span class=\"keyword\">this</span>.findViewById(R.id.factory_file_btn);</span><br><span class=\"line\">\t\tbtnFile.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tIOHandler handler = </span><br><span class=\"line\">\t\t\t\t\tIOFactory.getIOHanHandler(FileHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\t\t\tLog.d(<span class=\"string\">\"AigeStudio\"</span>, handler.query(<span class=\"string\">\"4455645646\"</span>));</span><br><span class=\"line\">\t\t\t\ttvContent.setText(handler.query(<span class=\"string\">\"4455645646\"</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><h4 id=\"抽象工厂模式的定义\"><a href=\"#抽象工厂模式的定义\" class=\"headerlink\" title=\"抽象工厂模式的定义\"></a>抽象工厂模式的定义</h4><ul>\n<li>创建型设计模式。</li>\n<li>为创建一组相关或者是相互依赖的对象提供一个 <code>接口</code> ，而不需要指定它们的具体类。</li>\n</ul>\n<h4 id=\"抽象工厂模式的使用场景\"><a href=\"#抽象工厂模式的使用场景\" class=\"headerlink\" title=\"抽象工厂模式的使用场景\"></a>抽象工厂模式的使用场景</h4><ul>\n<li>一个对象族有相同约束时可以使用抽象工厂模式。比如 Android、iOS、Window Phone 下都有短信软件和拨号软件，两者属于软件范畴，但由于操作系统平台不一样，其代码实现细节也是有差异的，则我们可考虑使用抽象工厂方法模式去产生不同平台下的同款软件。</li>\n</ul>\n<h4 id=\"抽象工厂模式的-UML-类图\"><a href=\"#抽象工厂模式的-UML-类图\" class=\"headerlink\" title=\"抽象工厂模式的 UML 类图\"></a>抽象工厂模式的 UML 类图</h4><ul>\n<li><p>抽象工厂方法模式的 UML 如图 2-9 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-9.svg\" alt=\"抽象工厂方法模式UML类图\"></p>\n<center>图 2-9 抽象工厂方法模式 UML 类图</center> \n</li>\n<li><p>抽象工厂的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象产品类 A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象产品类 B</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductB</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体产品类 A1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProducxtA1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"具体产品 A1 的方法.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体产品类 A2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProducxtA2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"具体产品 A2 的方法.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体产品类 B1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProducxtB1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"具体产品 B1 的方法.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体产品类 B2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProducxtB2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"具体产品 B2 的方法.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象工厂类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建产品 A 的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 产品 A 的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductA <span class=\"title\">createProductA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建产品 B 的方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 产品 B的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductB <span class=\"title\">createProductB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类 1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductA <span class=\"title\">createProductA1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA1();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductB <span class=\"title\">createProductB1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB1();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体工厂类 2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductA <span class=\"title\">createProductA2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA2();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> AbstractProductB <span class=\"title\">createProductB2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB2();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"抽象工厂模式的简单实现\"><a href=\"#抽象工厂模式的简单实现\" class=\"headerlink\" title=\"抽象工厂模式的简单实现\"></a>抽象工厂模式的简单实现</h4><ul>\n<li><p>在简单工厂模式的简单实现中，我门以车厂生产汽车为例。虽 Q3、Q5、Q7 同为一车系，但三者之间的零部件产别却很大，如 Q3、Q7 当中，Q3 装配的是国产发动机，普通轮胎和普通制动系统；Q7 则装配的是进口发动机，全尺寸越野轮胎和制动性能极好的制动系统。</p>\n<blockquote>\n<p>即同为一系列车，大家共有部件有发动机、轮胎和制动系统等，由于具体的部件品质不同，装配的细节又不同。故我们可将抽象工厂模式应用当中，化繁为简。</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 生产轮胎</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> ITire 轮胎</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ITire <span class=\"title\">createTire</span><span class=\"params\">()</span></span>; \t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 生产发动机</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> IEngine 发动机</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> IEngine <span class=\"title\">createEngine</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 生产制动系统</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> IBrake 制动系统</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> IBrake <span class=\"title\">createBrake</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ITire</span> </span>&#123; <span class=\"comment\">// 轮胎</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tire</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalTire</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITire</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通轮胎\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SUVTire</span> <span class=\"keyword\">implements</span> <span class=\"title\">ITire</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">tire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"越野轮胎\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> interface <span class=\"title\">IEngine</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 发动机</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">engine</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomesticEngine</span> <span class=\"keyword\">implements</span> <span class=\"title\">IEngine</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">engine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"国产发动机\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImportEngine</span> <span class=\"keyword\">implements</span> <span class=\"title\">IEngine</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">engine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"进口发动机\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBrake</span> </span>&#123; <span class=\"comment\">// 制动系统</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">brake</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalBrake</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBrake</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通制动\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeniorBrake</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBrake</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"高级制动\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Q3Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123; <span class=\"comment\">// Q3工厂类</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ITire <span class=\"title\">createTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NormalTire();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IEngine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"function\">Domestic <span class=\"title\">Engine</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IBrake <span class=\"title\">createBrake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NormalBrake();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Q3Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123; <span class=\"comment\">// Q3工厂类</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ITire <span class=\"title\">createTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NormalTire();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IEngine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DomesticEngine();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IBrake <span class=\"title\">createBrake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NormalBrake();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Q7Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123; <span class=\"comment\">// Q7 工厂类</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ITire <span class=\"title\">createTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SUVTire();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IEngine <span class=\"title\">createEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ImportEngine();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@verride</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> IBrake <span class=\"title\">createBrake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SeniorBrake();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个生产 Q3 的工厂</span></span><br><span class=\"line\">\t\tCarFactory factoryQ3 = <span class=\"keyword\">new</span> Q3Factory();</span><br><span class=\"line\">\t\tfactoryQ3.createTire().tire();</span><br><span class=\"line\">\t\tfactoryQ3.createEngine().engine();</span><br><span class=\"line\">\t\tfactoryQ3.createBrake().brake();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个生产 Q7 的工厂</span></span><br><span class=\"line\">\t\tCarFactory factoryQ7 = <span class=\"keyword\">new</span> Q7Factory();</span><br><span class=\"line\">\t\tfactoryQ7.createTire().tire();</span><br><span class=\"line\">\t\tfactoryQ7.createEngine().engine();</span><br><span class=\"line\">\t\tfactoryQ7.createBrake().brake();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体的架构如图 2-10 的 UML 类图所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-10.svg\" alt=\"车厂生产同系列汽车的抽象工厂模式\"></p>\n  <center>图 2-10 车厂生产同系列汽车的抽象工厂模式</center>\n\n</li>\n</ul>\n<h4 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>抽象工厂方法优点：分离接口与实现，即客户端使用抽象工厂的创建对象，客户端不知具体实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦。</li>\n<li>抽象工厂方法缺点：<ul>\n<li>类文件的爆炸性增加。  </li>\n<li>不太容易扩展新的产品类，因为每当增加一个产品类，就需修改抽象工厂，故所有具体工厂类均会被修改。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><h4 id=\"策略模式的介绍\"><a href=\"#策略模式的介绍\" class=\"headerlink\" title=\"策略模式的介绍\"></a>策略模式的介绍</h4><ul>\n<li>实现某功能，可以有多种算法或策略选择，例如排序算法，有插入排序、归并排序、冒泡排序等。<ul>\n<li>思考：多种排序算法，可以写在一个类中，一个方法对应一种具体排序。但是缺点也是很明显，即臃肿；维护成本高，且容易引发错误；每增加一种排序需修改封装类的源码。  </li>\n<li>改进：提供一个 <code>统一接口</code>，不同的算法或策略有不同的实现类。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"策略模式的使用场景\"><a href=\"#策略模式的使用场景\" class=\"headerlink\" title=\"策略模式的使用场景\"></a>策略模式的使用场景</h4><ul>\n<li>针对同类问题的多种处理方式，仅仅是 <code>具体行为</code> 有差别。</li>\n<li>需要安全地封装多种 <code>同类型</code> 的操作。</li>\n<li><p>出现同一抽象类，有多个子类，而又需使用 <code>if-else</code> 或 <code>switch-case</code>  来选择具体子类。</p>\n<blockquote>\n<p>但缺点也明显，耦合性高；代码臃肿难维护。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"策略模式的-UML-类图\"><a href=\"#策略模式的-UML-类图\" class=\"headerlink\" title=\"策略模式的 UML 类图\"></a>策略模式的 UML 类图</h4><ul>\n<li><p>策略模式的 UML 如图 2-11 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-11.svg\" alt=\"策略模式UML类图\"></p>\n  <center>图 2-11 策略模式 UML 类图</center> \n\n</li>\n</ul>\n<h4 id=\"策略模式的简单实现\"><a href=\"#策略模式的简单实现\" class=\"headerlink\" title=\"策略模式的简单实现\"></a>策略模式的简单实现</h4><ul>\n<li><p>比如公交价格，不设单一票价制，而是分段计费。显然，公交车和地铁的价格计算方式是不一样的。但是，我们的示例中是需要计算乘不同出行工具的成本，故我们采用策略模式进行设计、编码。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CalculateStragety</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 按距离来计算价格</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> km 公里</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回价格</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calculatePrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusStragety</span> <span class=\"keyword\">implements</span> <span class=\"title\">CalculateStragety</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 公交车价格计算策略</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubwayStragety</span> <span class=\"keyword\">implements</span> <span class=\"title\">CalculateStragety</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 地铁价格计算策略</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现: 出行价格计算器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TranficCalculator</span> </span>&#123;</span><br><span class=\"line\">\tCalculateStrategy mStrategy = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTranficCalculator calculator = <span class=\"keyword\">new</span> TranficCalculator();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置计算策略</span></span><br><span class=\"line\">\t\tcalculator.setStrategy( <span class=\"keyword\">new</span> BusStrategy() );</span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算价格</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"公交车乘16公里的价格: \"</span> </span><br><span class=\"line\">\t\t\t+ calculator.calculatePrice(<span class=\"number\">16</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrategy</span><span class=\"params\">(CalculateStrategy mStrategy)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mStrategy = mStrategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mStrategy.calculatePrice(km);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-12 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-12.svg\" alt=\"交通方案UML类图\"></p>\n  <center>图 2-12 交通方案的 UML 类图</center> \n\n</li>\n</ul>\n<h4 id=\"策略模式的实战应用\"><a href=\"#策略模式的实战应用\" class=\"headerlink\" title=\"策略模式的实战应用\"></a>策略模式的实战应用</h4><ul>\n<li><p>对于默认情况下，ImageLoader 会按照先后顺序加载图片，但在实际算法当中，相反顺序加载图片也是有可能的，即反序列加载图片。当然加载方式可看作多种策略，共同的目标是实现加载图片。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoadPolicy</span> </span>&#123; <span class=\"comment\">// 加载策略接口</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(BitmapRequest request1, BitmapRequest request2)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序加载策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoadPolicy</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(BitmapRequest request1, BitmapRequest request2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 按照添加到队列的序列号顺序来执行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> request1.serialNum - request2.serialNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 逆序加载策略，即从最后加入队列的请求进行加载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">pulbic <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReversePolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoadPolicy</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(BitmapRequest request1, BitmapRequest request2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 注意: Bitmap 请求要先执行最晚加入队列的请求，ImageLoader 的策略 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> request2.serialNum - request1.serialNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 因每个请求都有一序列号，序列号以递增形式增加，越晚加入队列的请求序列号越大。</span></span><br><span class=\"line\"><span class=\"comment\"> * 而请求队列是优先级队列，因此需要在图片加载请求类中实现 Comparable 接口，以实现对这些请求的排序处理。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapRequest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">BitmapRequest</span>&gt; </span>&#123; </span><br><span class=\"line\">\tLoadPolicy mLoadPolicy = <span class=\"keyword\">new</span> SerialPolicy();</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(BitmapRequest another)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 委托给 LoadPolicy 进行处理，实现按照策略模式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mLoadPolicy.compare(<span class=\"keyword\">this</span>, another);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户在配置 ImageLoader 时可以设置加载策略，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个策略会被设置给每个图片加载请求对象，具体如下：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">displayImage</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">final</span> ImageView imageView, <span class=\"keyword\">final</span> String uri, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">final</span> DisplayConfig config, <span class=\"keyword\">final</span> ImageListener listener)</span> </span>&#123;</span><br><span class=\"line\">\tBitmapRequest request = </span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> BitmapRequest(imageView, uri, config, listener);</span><br><span class=\"line\">\t<span class=\"comment\">// 加载的配置对象，如果没有设置则使用 ImageLoader 的配置</span></span><br><span class=\"line\">\trequest.displayConfig = request.displayConfig != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">\trequest.displayConfig : mConfig.displayConfig;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置加载策略</span></span><br><span class=\"line\">\trequest.setLoadPolicy(mConfig.loadPolicy);</span><br><span class=\"line\">\t<span class=\"comment\">// 添加到队列中</span></span><br><span class=\"line\">\tmImageQueue.addRequest(request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>图 2-13 是 ImageLoader 的 UML 类图。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-13.svg\" alt=\"ImageLoader的UML类图\"></p>\n  <center>图 2-13 ImageLoader 的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"总结-4\"><a href=\"#总结-4\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>策略模式的优点  <ul>\n<li>很好地演示了开闭原则，也就定义了抽象。  </li>\n<li>耦合度相对较低，扩展方法。</li>\n</ul>\n</li>\n<li>策略模式的缺点：随着策略的增加，子类会变得繁多。</li>\n</ul>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><ul>\n<li>状态模式和策略模式和结构几乎一样，但它们的目的本质完全相异。<ul>\n<li>策略模式：行为彼此独立，可相互替换。</li>\n<li>状态模式：行为是平行的，不可替换的。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态模式的定义\"><a href=\"#状态模式的定义\" class=\"headerlink\" title=\"状态模式的定义\"></a>状态模式的定义</h4><ul>\n<li>当一个对象的 <code>内在状态改变</code> 时允许 <code>改变其行为</code>，这个对象看起来像是改变了其类。</li>\n</ul>\n<h4 id=\"状态模式的使用场景\"><a href=\"#状态模式的使用场景\" class=\"headerlink\" title=\"状态模式的使用场景\"></a>状态模式的使用场景</h4><ul>\n<li>代码中包含大量与 <code>对象状态</code> 有关的条件语句，比如操作中含有庞大的多分支语句（<code>if-else</code> 或 <code>switch-case</code>），且这些分支依赖与该对象的状态。</li>\n<li>若使用状态模式来优化架构，即每一条件分支放于独立的类。</li>\n</ul>\n<h4 id=\"状态模式的-UML-类图\"><a href=\"#状态模式的-UML-类图\" class=\"headerlink\" title=\"状态模式的 UML 类图\"></a>状态模式的 UML 类图</h4><ul>\n<li><p>状态模式的 UML 类图如图 2-14 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-14.svg\" alt=\"状态模式的UML类图\"></p>\n  <center>图 2-14 状态模式的 UML 类图</center> \n\n</li>\n</ul>\n<h4 id=\"状态模式的简单示例\"><a href=\"#状态模式的简单示例\" class=\"headerlink\" title=\"状态模式的简单示例\"></a>状态模式的简单示例</h4><ul>\n<li><p>下面以电视遥控器为例演示状态模式的实现。便于理解，本示例的 UML 类图如图 2-15 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-15.svg\" alt=\"电视遥控器UML类图\"></p>\n  <center>图 2-15 电视遥控器 UML 类图</center> \n\n</li>\n</ul>\n<h4 id=\"状态模式实战\"><a href=\"#状态模式实战\" class=\"headerlink\" title=\"状态模式实战\"></a>状态模式实战</h4><ul>\n<li><p>在新浪微博中，用户在未登录的情况下点击转发按钮，此时会先让用户登录，然后再执行转发操作；如果已登录的情况下，那么用户输入转发的内容后就可以直接进行操作。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-16.svg\" alt=\"新浪微博用户状态管理UML类图\"></p>\n  <center>图 2-16 新浪微博用户状态管理 UML 类图</center> \n\n</li>\n</ul>\n<h4 id=\"总结-5\"><a href=\"#总结-5\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>状态模式的优点：将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转为结构清晰的状态类族。</li>\n<li>状态模式的缺点：必然增加系统类和对象的个数。</li>\n</ul>\n<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><h4 id=\"责任链模式的定义\"><a href=\"#责任链模式的定义\" class=\"headerlink\" title=\"责任链模式的定义\"></a>责任链模式的定义</h4><ul>\n<li>行为型设计模式。</li>\n<li>通俗定义：每个节点看作一对象，每一对象拥有不同的处理逻辑，将一请求从链式的首端发出，沿着链的路径一次传递每个节点对象，<code>层层递归</code> 直至有对象处理这个请求为止。</li>\n<li>标准定义：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成链，并沿着这条链传递该请求，直至有对象处理它为止。</li>\n</ul>\n<h4 id=\"责任链模式的使用场景\"><a href=\"#责任链模式的使用场景\" class=\"headerlink\" title=\"责任链模式的使用场景\"></a>责任链模式的使用场景</h4><ul>\n<li>多个对象可以处理同一请求，但具体由哪个对象处理则在 <code>运行时动态决定</code>。</li>\n<li>在请求处理者不明确的情况下向多个对象中的其一提交一个请求。</li>\n<li>需要动态指定一组对象处理请求。</li>\n<li>比如 Spring 拦截器、过滤器都是采用责任链的设计模式设计的。</li>\n</ul>\n<h4 id=\"责任链模式的-UML-类图\"><a href=\"#责任链模式的-UML-类图\" class=\"headerlink\" title=\"责任链模式的 UML 类图\"></a>责任链模式的 UML 类图</h4><ul>\n<li><p>责任链的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象处理者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Handler successor; <span class=\"comment\">// 下一节点的处理者</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 请求处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> condition 请求条件</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(String condition)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体的处理者1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(String condition)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(condition.equals(<span class=\"string\">\"ConcreteHandler1\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"ConcreteHandler1 handled\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tsuccessor.handleRequest(condition);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体的处理者2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(String condition)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(condition.equals(<span class=\"string\">\"ConcreteHandler2\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"ConcreteHandler2 handled\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tsuccessor.handleRequest(condition);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个 ConcreteHandler1 对象</span></span><br><span class=\"line\">\t\tConcreteHandler1 handler1 = <span class=\"keyword\">new</span> ConcreteHandler1();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个 ConcreteHandler2 对象</span></span><br><span class=\"line\">\t\tConcreteHandler2 handler2 = <span class=\"keyword\">new</span> ConcreteHandler2();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置 handler1 的下一个节点</span></span><br><span class=\"line\">\t\thandler1.successor = handler2;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理请求</span></span><br><span class=\"line\">\t\thandler1.handleRequest(<span class=\"string\">\"ConcreteHandler2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>责任链模式的 UML 类图如图 2-17 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-17.svg\" alt=\"责任链模式UML类图\"></p>\n  <center>图 2-17 责任链模式 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"责任链模式的简单实现\"><a href=\"#责任链模式的简单实现\" class=\"headerlink\" title=\"责任链模式的简单实现\"></a>责任链模式的简单实现</h4><ul>\n<li><p>在公司中报销费用中，审批的流程其实就是一个类似责任链的实例。例如，小明是请求的发起者，而处理者有组长、部门主管、经理和老板，对于不同额度的报销费用需要不同级的处理者审批，准确地说，每一类人代表这条链上的一个节点。</p>\n<p>  例如小民是请求的发起者，而老板则是处于链条顶端的类，小民从链的底端开始发出一个申请报账的请求，首先由组长处理该请求，组长比对后发现自己权限不够于是将该请求转发给位于链中下一个节点的主管，主管比对后发现自己权限不足又将该请求转发给经理，经理也基于同样的原因将请求转发给老板，这样层层转达直至请求被处理。即至始至终小民关心的是报账结果，而不用在乎处理者是谁。责任链模式在这里很好地将请求的发起者与处理者解耦。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象领导者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Leader nextHandler; <span class=\"comment\">// 上一级领导处理者</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 处理报账请求</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> money 能批复的报账额度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( money &lt; limit() ) &#123;</span><br><span class=\"line\">\t\t\thandle(money);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> != nextHandlder ) &#123;</span><br><span class=\"line\">\t\t\t\tnextHandler.handleRequest(money);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 自身能批复的额度权限</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 额度</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">limit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 处理报账行为</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> money 具体金额</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">pulbic <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupLeader</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">limit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">\t\tStsten.out.println(<span class=\"string\">\"组长批复报销\"</span> + money + <span class=\"string\">\"元\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">limit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">\t\tStsten.out.println(<span class=\"string\">\"主管批复报销\"</span> + money + <span class=\"string\">\"元\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">limit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">10000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">\t\tStsten.out.println(<span class=\"string\">\"经理批复报销\"</span> + money + <span class=\"string\">\"元\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">limit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">\t\tStsten.out.println(<span class=\"string\">\"老板批复报销\"</span> + money + <span class=\"string\">\"元\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 小民从组长开始发起请求申请报账</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMin</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造各个领导对象</span></span><br><span class=\"line\">\t\tGroupLeader groupLeader = <span class=\"keyword\">new</span> GroupLeader();</span><br><span class=\"line\">\t\tDirector director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">\t\tManager manager = <span class=\"keyword\">new</span> Manager();</span><br><span class=\"line\">\t\tBoss boss = <span class=\"keyword\">new</span> Boss();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置上一级领导处理者对象</span></span><br><span class=\"line\">\t\tgroupLeader.nextHandler = director;</span><br><span class=\"line\">\t\tdirector.nextHandler = manager;</span><br><span class=\"line\">\t\tmanager.nextHandler = boss;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 发起报账申请</span></span><br><span class=\"line\">\t\tgroupLeader.handleRequest(<span class=\"number\">50000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-18 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-18.svg\" alt=\"报账审核机制UML类图\"></p>\n  <center>图 2-18 报账审核机制 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"责任链模式实战\"><a href=\"#责任链模式实战\" class=\"headerlink\" title=\"责任链模式实战\"></a>责任链模式实战</h4><ul>\n<li><p>Android 中我们可以借鉴责任链模式的思想来优化 BroadcastReceiver 使之成为一个全局的责任链处理者。</p>\n</li>\n<li><p>我们知道 Broadcast 可以被分为两种:</p>\n<ul>\n<li>Normal Broadcast：普通广播，<code>异步广播</code>，发出时可被 <code>所有</code> 的接收者收到。</li>\n<li>Ordered Broadcast：有序广播，<code>依优先级依次传播</code>，直到有接收者将其终止或所有接收者都不终止它。</li>\n</ul>\n</li>\n<li><p>有序广播这一特性与我们的责任链模式很相近，通过它可实现一种全局的责任链事件处理。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 具体的实现思路是，通过 Intent 的限制值来限定最终的广播权归谁所有</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 Intent 中附加的限制值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> limit = intent.getIntExtra(<span class=\"string\">\"limit\"</span>, -<span class=\"number\">1001</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果限定值等于 1000 则处理，否则继续转发给下一个 Receiver</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"number\">1000</span> == limit ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取 Intent 中附加的字符串消息并 Toast</span></span><br><span class=\"line\">\t\t\tString msg = intent.getStringExtra(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">\t\t\tToast.makeText(context, msg, Toast.LENGTH_SHORT).show();\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 终止广播</span></span><br><span class=\"line\">\t\t\tabortBroadcast();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 添加信息发送给下一个 Receiver</span></span><br><span class=\"line\">\t\t\tBundle b = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">\t\t\tb.putString(<span class=\"string\">\"new\"</span>, <span class=\"string\">\"Message from FirstReceiver\"</span>);</span><br><span class=\"line\">\t\t\tsetResultExtras(b);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 Intent 中附加的限制值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> limit = intent.getIntExtra(<span class=\"string\">\"limit\"</span>, -<span class=\"number\">1001</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果限定值等于 100 则处理，否则继续转发给下一个 Receiver</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"number\">100</span> == limit ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取 Intent 中附加的字符串消息</span></span><br><span class=\"line\">\t\t\tString msg = intent.getStringExtra(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取上一个 Receiver 增加的消息</span></span><br><span class=\"line\">\t\t\tBundle b = getResultExtras(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\tString str = b.getString(<span class=\"string\">\"new\"</span>);</span><br><span class=\"line\">\t\t\tToast.makeText(context, msg + str, Toast.LENGTH_SHORT).show();\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 终止广播</span></span><br><span class=\"line\">\t\t\tabortBroadcast();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 添加信息发送给下一个 Receiver</span></span><br><span class=\"line\">\t\t\tBundle b = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">\t\t\tb.putString(<span class=\"string\">\"new\"</span>, <span class=\"string\">\"Message from FirstReceiver\"</span>);</span><br><span class=\"line\">\t\t\tsetResultExtras(b);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThirdReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取 Intent 中附加的限制值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> limit = intent.getIntExtra(<span class=\"string\">\"limit\"</span>, -<span class=\"number\">1001</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果限定值等于 10 则处理，否则继续转发给下一个 Receiver</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"number\">10</span> == limit ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取 Intent 中附加的字符串消息</span></span><br><span class=\"line\">\t\t\tString msg = intent.getStringExtra(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取上一个 Receiver 增加的消息</span></span><br><span class=\"line\">\t\t\tBundle b = getResultExtras(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\tString str = b.getString(<span class=\"string\">\"new\"</span>);</span><br><span class=\"line\">\t\t\tToast.makeText(context, msg + str, Toast.LENGTH_SHORT).show();\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 终止广播</span></span><br><span class=\"line\">\t\t\tabortBroadcast();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 添加信息发送给下一个 Receiver</span></span><br><span class=\"line\">\t\t\tBundle b = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">\t\t\tb.putString(<span class=\"string\">\"new\"</span>, <span class=\"string\">\"Message from FirstReceiver\"</span>);</span><br><span class=\"line\">\t\t\tsetResultExtras(b);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t\tsetContentView(R.layout.activity_order);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tButton btnSend = (Button) findViewById(R.id.order_send_btn);</span><br><span class=\"line\">\t\tbtnSend.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tIntent i = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">\t\t\t\ti.setAction(<span class=\"string\">\"com.aigestudio.action.ORDER_BROADCAST\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这里我们设置 limit = 100，即只有 SecondReceiver 才会处理它</span></span><br><span class=\"line\">\t\t\t\ti.putExtra(<span class=\"string\">\"limit\"</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t\ti.putExtra(<span class=\"string\">\"msg\"</span>, <span class=\"string\">\"Message from OrderActivity\"</span>);</span><br><span class=\"line\">\t\t\t\tsendOrderedBroadcast(i, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-6\"><a href=\"#总结-6\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>责任链模式的优点：对请求者和处理者关系解耦，提高代码灵活性。</li>\n<li>责任链模式的缺点：递归调用。特别是处理者太多，那么遍历定会影响性能。</li>\n</ul>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><h4 id=\"解释器模式的定义\"><a href=\"#解释器模式的定义\" class=\"headerlink\" title=\"解释器模式的定义\"></a>解释器模式的定义</h4><ul>\n<li>行为型设计模式。</li>\n<li>概念：给定一个语言，定义它的 <code>文法</code> 的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</li>\n<li>文法：例如我们熟悉的「主谓宾结构」，通过下述短语举例，我们可把短语抽象看作：I am a/an [noun.]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>主语</th>\n<th>谓语</th>\n<th>宾语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I</td>\n<td>am</td>\n<td>a designer</td>\n</tr>\n<tr>\n<td>I</td>\n<td>am</td>\n<td>a teacher</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>再举例：假设有如以 ab 开头 ef 结尾，中间排列 N(N&gt;=0) 个 cd 的字符串，如 <code>abcdcd...cdef</code>。</p>\n<ul>\n<li>在计算机科学中，我们将上述字符串中的 “a”、“b”、“c”、“d”、“e” 和 “f” 这 6 个字符称为一种形式语言的 <code>字符表</code>。</li>\n<li><p>而这些字符组成的集合，如 “abcdcd…cdef” 这样由字符表构成的字符串则称为 <code>形式语言</code>。注意这里的语言不是文法。</p>\n</li>\n<li><p>假设定义一个符号 S，从符号 S 出发推导上述字符串，即可得到如下推导式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">S ::= abA*ef  </span><br><span class=\"line\">A ::= cd</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>::=</code> 称为推导；  </li>\n<li><code>*</code> 表示闭包，上述推导式中意思是，符号 A 可以有 0 或 N 个重复；  </li>\n<li>非终结符号：<code>S</code> 和 <code>A</code> 则称非终结符号，即它们能推导出式子右边的表达式；  </li>\n<li>终结符号：”pqmn”，“ab”，“ef”，即无法再推导；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"解释器模式的使用场景\"><a href=\"#解释器模式的使用场景\" class=\"headerlink\" title=\"解释器模式的使用场景\"></a>解释器模式的使用场景</h4><ul>\n<li><p>某个 <code>简单语言</code> 需要解释执行且可将该语言中的语句表示为 <code>抽象语法树</code> 时可考虑使用解释器模式。</p>\n<blockquote>\n<p>如：有非终结符号 p+q+m-n，即该数学表示式可表示为一棵抽象语法树。如图 2-19 所示。</p>\n</blockquote>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-19.svg\" alt=\"p+q+m-n的抽象语法树\"></p>\n<center>图 2-19 p+q+m-n 的抽象语法树</center>\n</li>\n<li><p>某些特定的领域出现 <code>不断重复</code> 的问题时，可将该领域的问题转化为一种语法规则下的语句，然后构建解释器来解释该语句。比如英文字母的大小写转换、阿拉伯数字转为中文的数字等。</p>\n</li>\n</ul>\n<h4 id=\"解释器模式的-UML-类图\"><a href=\"#解释器模式的-UML-类图\" class=\"headerlink\" title=\"解释器模式的 UML 类图\"></a>解释器模式的 UML 类图</h4><ul>\n<li><p>解释器模式的 UML 类图如图 2-20 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-20.svg\" alt=\"解释器模式UML类图\"></p>\n  <center>图 2-20 解释器模式 UML 类图</center>\n\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 抽象的解析方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ctx 上下文环境对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">interpret</span><span class=\"params\">(Context ctx)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 终结符表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">interpret</span><span class=\"params\">(Context ctx)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 实现文法中与终结符有关的解释操作</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非终结符表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonterminalExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">interpret</span><span class=\"params\">(Context ctx)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 实现文法中与非终结符有关的解释操作</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 包含解释器之外的全局信息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据文法对特定句子构建抽象语法树后解释</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-7\"><a href=\"#总结-7\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>解释模式的优点：灵活的扩展性，即我们想对文法规则进行扩展延伸时，只需增加相应的非终结符解释器，并在构建抽象语法树时，使用到新增的解释器对象进行具体的解释即可。</li>\n<li>解释模式的缺点：  <ul>\n<li>对于每一条文法对应至少一个解释器，其会生成大量的类，导致后期维护困难； </li>\n<li>构建其抽象语法树会显得异常繁琐，甚至可能出现需要构建多棵抽象语法树的情况。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><h4 id=\"命令模式的定义\"><a href=\"#命令模式的定义\" class=\"headerlink\" title=\"命令模式的定义\"></a>命令模式的定义</h4><ul>\n<li>行为型设计模式。</li>\n<li>介绍：将一系列的方法调用封装，用户只需调用一个方法执行，那么所有这些被封装的方法就会被挨个执行调用。</li>\n<li>定义<ul>\n<li>将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化。</li>\n<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"命令模式的使用场景\"><a href=\"#命令模式的使用场景\" class=\"headerlink\" title=\"命令模式的使用场景\"></a>命令模式的使用场景</h4><ul>\n<li>需要抽象出待执行的动作，然后以参数的形式提供处理，类似过程设计中的 <code>回调机制</code>。</li>\n<li>在不同的时刻指定、排列和执行请求。一个命令对象可以有与初始请求无关的生存期。</li>\n<li>需要 <code>支持取消</code> 操作。</li>\n<li>需要 <code>支持事务</code> 操作。</li>\n<li>支持 <code>修改日志</code> 功能，若系统崩溃，这些修改可重做一遍。</li>\n</ul>\n<h4 id=\"命令模式的-UML-类图\"><a href=\"#命令模式的-UML-类图\" class=\"headerlink\" title=\"命令模式的 UML 类图\"></a>命令模式的 UML 类图</h4><ul>\n<li><p>命令模式的 UML 类图如图 2-21 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-21.svg\" alt=\"命令模式UML类图\"></p>\n  <center>图 2-21 命令模式 UML 类图</center>\n\n<ul>\n<li><strong>Receiver 接收者角色</strong>：该类负责具体实施或执行一个请求，通俗地说，执行具体逻辑的角色。</li>\n<li><strong>Command 命令角色</strong>：定义所有具体命令类的抽象接口。</li>\n<li><strong>ConcreteCommand 具体命令角色</strong>：该类实现了 Command 接口，在 execute() 方法中调用接收者角色的相关方法，在接收者和命令执行的具体行为之间加以弱耦和。</li>\n<li><strong>Invoker 请求者角色</strong>：该类的职责就是调用命令对象执行具体的请求，相关的方法我们称为行动方法。</li>\n</ul>\n</li>\n<li><p>这里其实大家可以看到，命令模式的应用其实可用一句话概述，就是将行为调用者与实现者解耦。命令模式简单代码如下：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收者类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 真正执行具体命令逻辑的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"执行具体操作\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象命令接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行具体操作的命令</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体命令类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Receiver receiver; <span class=\"comment\">// 持有一个对接受者对象的引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteCommand</span><span class=\"params\">(Receiver receiver)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.receiver = receiver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用接收者的相关方法来执行具体逻辑</span></span><br><span class=\"line\">\t\treceiver.action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 请求者类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Command command; <span class=\"comment\">// 持有一个对应命令对象的引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Invoker</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.command = command;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用具体命令对象的相关方法，执行具体命令</span></span><br><span class=\"line\">\t\tcommand.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个接受者对象</span></span><br><span class=\"line\">\t\tReceiver receiver = <span class=\"keyword\">new</span> Receiver();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据接收者对象构造一个命令对象</span></span><br><span class=\"line\">\t\tCommand command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据具体的对象构造请求者对象</span></span><br><span class=\"line\">\t\tInvoker invoker = <span class=\"keyword\">new</span> Invoker(command);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行请求方法</span></span><br><span class=\"line\">\t\tinvoker.action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"命令模式的简单实现\"><a href=\"#命令模式的简单实现\" class=\"headerlink\" title=\"命令模式的简单实现\"></a>命令模式的简单实现</h4><ul>\n<li><p>这里以古老的俄罗斯方块游戏为例，在命令模式下如何操控俄罗斯方块变换。游戏中含有 4 个按钮，即上下左右。设定玩游戏的人相当于我们的客户端，游戏上的 4 个按钮相当于请求者，而执行具体按钮命令的逻辑方法可看作命令角色。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接收者角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TetrisMachine</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toLeft</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 真正处理 “向左” 操作的逻辑代码</span></span><br><span class=\"line\">\t\tSystem.out.println(“向左”);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toRight</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 真正处理 “向右” 操作的逻辑代码</span></span><br><span class=\"line\">\t\tSystem.out.println(“向右”);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fastToBottom</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 真正处理 “快速落下” 操作的逻辑代码</span></span><br><span class=\"line\">\t\tSystem.out.println(“快速落下”);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 真正处理 “改变形状” 操作的逻辑代码</span></span><br><span class=\"line\">\t\tSystem.out.println(“改变形状”);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命令者抽象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 命令执行方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体命令者：向左移的命令类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeftCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 持有一个接收者俄罗斯方块游戏对象的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TetrisMachine machine;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeftCommand</span><span class=\"params\">(TetriMachine machine)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.machine = machine;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用游戏机里的具体方法执行操作</span></span><br><span class=\"line\">\t\tmachine.toLeft();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 具体命令者：向右移的命令类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RightCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 持有一个接收者俄罗斯方块游戏对象的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TetrisMachine machine;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RightCommand</span><span class=\"params\">(TetriMachine machine)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.machine = machine;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用游戏机里的具体方法执行操作</span></span><br><span class=\"line\">\t\tmachine.toRight();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体命令者：快速落下的命令类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FallCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 持有一个接收者俄罗斯方块游戏对象的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TetrisMachine machine;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FallCommand</span><span class=\"params\">(TetriMachine machine)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.machine = machine;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用游戏机里的具体方法执行操作</span></span><br><span class=\"line\">\t\tmachine.fastToBottom();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体命令者：改变形状的命令类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransformCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 持有一个接收者俄罗斯方块游戏对象的引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TetrisMachine machine;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransformCommand</span><span class=\"params\">(TetriMachine machine)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.machine = machine;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用游戏机里的具体方法执行操作</span></span><br><span class=\"line\">\t\tmachine.transform();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求者类：命令由按钮发起</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Buttons</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LeftCommand leftCommand; <span class=\"comment\">// 向左移动的命令对象引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> RightCommand rightCommand; <span class=\"comment\">// 向右移动的命令对象引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FallCommand fallCommand; <span class=\"comment\">// 快速落下的命令对象引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TransformCommand transformCommand; <span class=\"comment\">// 变换形状的命令对象引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置向左移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> leftCommand 向左移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeftCommand</span><span class=\"params\">(LeftCommand leftCommand)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.leftCommand = leftCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置向右移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> rightCommand 向右移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRightCommand</span><span class=\"params\">(RightCommand rightCommand)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rightCommand = rightCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置快速落下的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fallCommand 向左移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFallCommand</span><span class=\"params\">(FallCommand fallCommand)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.fallCommand = fallCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 设置变换形状的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> transformCommand 向左移动的命令对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransformCommand</span><span class=\"params\">(TransformCommand transformCommand)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.leftCommand = leftCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toLeft</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 按下按钮向左移动</span></span><br><span class=\"line\">\t\tleftCommand.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toRight</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 按下按钮向右移动</span></span><br><span class=\"line\">\t\trightCommand.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fall</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 按下按钮快速落下</span></span><br><span class=\"line\">\t\tfallCommand.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 按下按钮改变形状</span></span><br><span class=\"line\">\t\ttransformCommand.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 首先要有俄罗斯方块游戏</span></span><br><span class=\"line\">\t\tTetrisMachine machine = <span class=\"keyword\">new</span> TetrisMachine();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据游戏我们构造 4 种命令</span></span><br><span class=\"line\">\t\tLeftCommand leftCommand = <span class=\"keyword\">new</span> LeftCommand(machine);</span><br><span class=\"line\">\t\tRightCommand rightCommand = <span class=\"keyword\">new</span> RightCommand(machine);</span><br><span class=\"line\">\t\tFallCommand fallCommand = <span class=\"keyword\">new</span> FallCommand(machine);</span><br><span class=\"line\">\t\tTransformCommand transformCommand = <span class=\"keyword\">new</span> TransformCommand(machine);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 按钮可以执行不同的命令</span></span><br><span class=\"line\">\t\tButtons buttons = <span class=\"keyword\">new</span> Buttons();</span><br><span class=\"line\">\t\tbuttons.setLeftCommand(leftCommand);</span><br><span class=\"line\">\t\tbuttons.setRightCommand(rightCommand);</span><br><span class=\"line\">\t\tbuttons.setFallCommand(fallCommand);</span><br><span class=\"line\">\t\tbuttons.setTransformCommand(transformCommand);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 具体按下哪个按钮玩家决定</span></span><br><span class=\"line\">\t\tbuttons.toLeft();</span><br><span class=\"line\">\t\tbuttons.toRight();</span><br><span class=\"line\">\t\tbuttons.fall();</span><br><span class=\"line\">\t\tbuttons.transform();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-22 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-22.svg\" alt=\"命令模式实现俄罗斯方块游戏\"></p>\n  <center>图 2-22 命令模式实现俄罗斯方块游戏</center>\n</li>\n<li><p>对于大部分开发者来说，更愿意接受的形式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">TetrisMachine machine = <span class=\"keyword\">new</span> TetrisMachine();</span><br><span class=\"line\"><span class=\"comment\">// 实现怎样的控制方式，直接调用相关函数</span></span><br><span class=\"line\"><span class=\"comment\">// machine.toLeft();</span></span><br><span class=\"line\"><span class=\"comment\">// machine.toRight();</span></span><br><span class=\"line\"><span class=\"comment\">// machine.fastToBottom();</span></span><br><span class=\"line\"><span class=\"comment\">// machine.transform();</span></span><br><span class=\"line\">machine.toLeft();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调用逻辑做得如此复杂，其实是为了开发起来方便，即每次我们增加或修改游戏功能只需修改 TetrisMachine 类即可。</li>\n<li>当然，其实这样做是有原因的，即设计模式种有一条重要的原则：对修改关闭对扩展开放。具体好处是：<ul>\n<li>如修改功能、代码的具体逻辑，以上例为例，修改 TetrisMachine 类即可。</li>\n<li>此外，命令模式还可以实现命令记录的功能，如在 Buttons 里使用数据结构存储执行过的命令对象，需要时可恢复。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结-8\"><a href=\"#总结-8\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>命令模式的优点：更灵活的控制性以及更好的扩展性；更弱的耦合性。</li>\n<li>命令模式的缺点：类的膨胀，大量衍生类的创建。</li>\n</ul>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><h4 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h4><ul>\n<li>定义对象间一种 <code>一对多</code> 的 <code>依赖关系</code>，使得每当一个对象改变状态，则所有依赖与它的对象都会得到通知并被自动更新。</li>\n</ul>\n<h4 id=\"观察者模式的使用场景\"><a href=\"#观察者模式的使用场景\" class=\"headerlink\" title=\"观察者模式的使用场景\"></a>观察者模式的使用场景</h4><ul>\n<li>关联行为场景，即关联行为是可拆分的，而不是组合关系。</li>\n<li>事件多级触发场景。</li>\n<li>跨系统的消息交换场景，如消息队列、事件总线的处理机制。</li>\n</ul>\n<h4 id=\"观察者模式的-UML-类图\"><a href=\"#观察者模式的-UML-类图\" class=\"headerlink\" title=\"观察者模式的 UML 类图\"></a>观察者模式的 UML 类图</h4><ul>\n<li><p>观察者模式的 UML 类图如图 2-23 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-23.svg\" alt=\"观察者模式的UML类图\"></p>\n  <center>图 2-23 观察者模式的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"观察者模式实战\"><a href=\"#观察者模式实战\" class=\"headerlink\" title=\"观察者模式实战\"></a>观察者模式实战</h4><h4 id=\"总结-9\"><a href=\"#总结-9\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>观察者模式主要的作用就是对象解耦，将观察者与被观察者完全隔离，只依赖于 Observer 和 Obserable 抽象。</p>\n<blockquote>\n<p>如：ListView 就是运用了 Adapter 和观察者模式，使之它的扩展性、灵活性增强，且耦合度却很低。</p>\n</blockquote>\n</li>\n<li><p>观察者模式的优点  </p>\n<ul>\n<li>增强系统灵活性、可扩展性。 </li>\n<li>将观察者与被观察者之间是抽象耦合，应对业务变换。</li>\n</ul>\n</li>\n<li>观察者模式的缺点：应用观察者模式，需考虑开放效率和运行效率问题（一般考虑采用异步的方式）。</li>\n</ul>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><h4 id=\"备忘录模式的介绍\"><a href=\"#备忘录模式的介绍\" class=\"headerlink\" title=\"备忘录模式的介绍\"></a>备忘录模式的介绍</h4><ul>\n<li>行为型设计模式。</li>\n<li>用于保存对象当前状态，并在之后可再次恢复到此状态。</li>\n<li>保证被保存的对象状态不能被对象从外部访问，目的是为了保护好被保存对象状态的完整性及内部实现不向外暴露。</li>\n</ul>\n<h4 id=\"备忘录模式的定义\"><a href=\"#备忘录模式的定义\" class=\"headerlink\" title=\"备忘录模式的定义\"></a>备忘录模式的定义</h4><ul>\n<li>在不破坏封闭的前提下，捕获一个 <code>对象的内部状态</code>，并在该对象之外保存这个状态，这样以后就可将该对象恢复到原生保存的状态。</li>\n</ul>\n<h4 id=\"备忘录模式的-UML-类图\"><a href=\"#备忘录模式的-UML-类图\" class=\"headerlink\" title=\"备忘录模式的 UML 类图\"></a>备忘录模式的 UML 类图</h4><ul>\n<li><p>备忘录模式的 UML 类图如图 2-24 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-24.svg\" alt=\"备忘录模式的UML类图\"></p>\n  <center>图 2-24 备忘录模式的 UML 类图</center>\n\n<ul>\n<li><strong>Originator</strong>：负责创建一个备忘录，可以记录、恢复自身的内部状态。同时 Originator 还可以根据需要决定 Memoto 存储自身的哪些内部状态。</li>\n<li><p><strong>Memoto</strong>：备忘录角色，用于储存 Originator 的内部状态，并且可以防止 Originator 以外的对象访问 Memoto。</p>\n<blockquote>\n<p>备忘录角色的作用类似于 POJO 实体类，只作参数表示。</p>\n</blockquote>\n</li>\n<li><p><strong>Caretaker</strong>：负责储存备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"备忘录模式的简单实例\"><a href=\"#备忘录模式的简单实例\" class=\"headerlink\" title=\"备忘录模式的简单实例\"></a>备忘录模式的简单实例</h4><ul>\n<li><p>对于备忘录模式来说，比较贴切的场景应该是游戏中的存档功能，该功能就是将游戏进度存储到本地文件系统或者数据库中，下次再次进入时从本地加载进度，使得玩家能够继续上一次的游戏之旅。下面我们以“使命召唤”这款游戏为例简单演示备忘录模式的实现。</p>\n<p>  首先我们建立游戏类 CallOfDuty，备忘录类 Memoto 和负责管理 Memoto 的 CareTaker 类。玩游戏到某个节点对游戏进行存档，然后退出游戏，再重新进入时从存档中读取进度，并且进入存档时的进度。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ”使命召唤“ 游戏 ( 简化的数据模型，仅供简单演示 )</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallOfDuty</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCheckPoint = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLifeValue = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mWeapon = <span class=\"string\">\"沙漠之鹰\"</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 玩游戏</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quit</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 退出游戏</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Memoto <span class=\"title\">createMemoto</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 创建备忘录</span></span><br><span class=\"line\">\t\tMemoto memoto = <span class=\"keyword\">new</span> Memoto();</span><br><span class=\"line\">\t\tmemoto.mCheckPoint = mCheckPoint;</span><br><span class=\"line\">\t\tmemoto.mLifeValue = mLifeValue;</span><br><span class=\"line\">\t\tmemoto.mWeapon = mWeapon;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memoto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restore</span><span class=\"params\">(Memoto memoto)</span> </span>&#123; <span class=\"comment\">// 恢复游戏</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mCheckPoint = memoto.mCheckPoint;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mLifeValue = memoto.mLifeValue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mWeapon = memoto.mWeapon;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"恢复后的游戏属性: \"</span> + <span class=\"keyword\">this</span>.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@Overrride</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"CallOfDuty[mCheckPoint=..., mLifeValue=..., mWeapon=...]\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 备忘录类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memoto</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> mCheckPoint;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> mLifeValue;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String mWeapon;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Caretaker，负责管理 Memoto</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Caretaker</span> </span>&#123;</span><br><span class=\"line\">\tMemoto memoto = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">archive</span><span class=\"params\">(Memoto memoto)</span> </span>&#123; <span class=\"comment\">// 存档</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.memoto = memoto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Memoto <span class=\"title\">getMemoto</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 读取存档</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memoto;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tCallOfDuty game = <span class=\"keyword\">new</span> CallOfDuty();</span><br><span class=\"line\">\t\t<span class=\"comment\">// Step.01 游戏开始</span></span><br><span class=\"line\">\t\tgame.play();</span><br><span class=\"line\">\t\t<span class=\"comment\">// Step.02 游戏存档</span></span><br><span class=\"line\">\t\tCaretaker caretaker = <span class=\"keyword\">new</span> Caretaker();</span><br><span class=\"line\">\t\tcaretaker.archive( game.createMemoto() );</span><br><span class=\"line\">\t\t<span class=\"comment\">// Step.03 退出游戏</span></span><br><span class=\"line\">\t\tgame.quit();</span><br><span class=\"line\">\t\t<span class=\"comment\">// Step.04 恢复游戏</span></span><br><span class=\"line\">\t\tCallOfDuty newGame = <span class=\"keyword\">new</span> CallOfDuty();</span><br><span class=\"line\">\t\tnewGame.restore( caretaker.getMemoto() );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-25 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-25.svg\" alt=\"使命召唤的存储功能实现\"></p>\n  <center>图 2-25 使命召唤的存储功能实现</center>\n\n</li>\n</ul>\n<h4 id=\"总结-10\"><a href=\"#总结-10\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>备忘录模式是在不破坏封装的条件下，通过备忘录对象 (Memoto) 存储另外一个对象内部状态的快照，在需求的时候把对象还原到存储的状态。</li>\n<li>备忘录的优点：恢复状态机制；信息封装</li>\n<li>备忘录的缺点：消耗内存 </li>\n</ul>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><h4 id=\"迭代器模式的介绍\"><a href=\"#迭代器模式的介绍\" class=\"headerlink\" title=\"迭代器模式的介绍\"></a>迭代器模式的介绍</h4><ul>\n<li>又称游标 (Cursor) 模式，行为型设计模式。</li>\n<li>迭代器模式源于对容器的访问，若我们将遍历的方法封装在容器中，则存在问题：<ul>\n<li>不仅维护自身内部数据且要对外提供遍历的接口方法。</li>\n<li>不能对同一个容器同时进行多个遍历操作。</li>\n<li>不提供遍历方法，而让使用者自行实现，必暴露内部细节。  </li>\n</ul>\n</li>\n<li>解决方案：在客户访问类与容器直接插入一个第三者 <code>迭代器</code>。</li>\n</ul>\n<h4 id=\"迭代器模式的定义\"><a href=\"#迭代器模式的定义\" class=\"headerlink\" title=\"迭代器模式的定义\"></a>迭代器模式的定义</h4><ul>\n<li>提供一种方法 <code>顺序访问</code> 一个容器对象中的各个元素，而不需暴露该对象内部细节。</li>\n</ul>\n<h4 id=\"迭代器模式的-UML-类图\"><a href=\"#迭代器模式的-UML-类图\" class=\"headerlink\" title=\"迭代器模式的 UML 类图\"></a>迭代器模式的 UML 类图</h4><ul>\n<li><p>迭代器模式的 UML 类图如图 2-26 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-26.svg\" alt=\"迭代器模式的UML类图\"></p>\n  <center>图 2-26 迭代器模式的 UML 类图</center>\n\n<ul>\n<li><strong>Iterator</strong>：迭代器接口，负责定义、访问和遍历元素的接口。</li>\n<li><strong>ConcreteIterator</strong>：具体迭代器类，实现迭代器接口，并记录遍历的当前位置。  </li>\n<li><strong>Aggregate</strong>：容器接口，负责提供创建具体迭代器角色的接口。</li>\n<li><strong>ConcreteAggregate</strong>：具体容器类，具体迭代器角色与该容器相关联。</li>\n</ul>\n</li>\n<li><p>迭代器模式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代器接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 是否还有下一个元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> true 表示有，false 表示没有</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回当前位置的元素并将位置移至下一位</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> T 返回当前位置的元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体迭代器类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor = <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteIterator</span><span class=\"params\">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.list = list;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cursor != list.size();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tT obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.hasNext()) &#123;</span><br><span class=\"line\">\t\t\tobj = <span class=\"keyword\">this</span>.list.get(cursor++);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 容器接口</span></span><br><span class=\"line\">pulbic <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加一个元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> obj 元素对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span></span>; \t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除一个元素</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> obj 元素对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(T obj)</span></span>;\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取容器的迭代器</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 迭代器对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">Iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体容器类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Aggregate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlist.add(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tlist.remove(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteIterator&lt;T&gt;(list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAggregate&lt;String&gt; aggregate = <span class=\"keyword\">new</span> ConcreteAggregate&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\taggregate.add(<span class=\"string\">\"Aige \"</span>);</span><br><span class=\"line\">\t\taggregate.add(<span class=\"string\">\"Studio\\n\"</span>);</span><br><span class=\"line\">\t\taggregate.add(<span class=\"string\">\"SM \"</span>);</span><br><span class=\"line\">\t\taggregate.add(<span class=\"string\">\"Brother\\n\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tIterator&lt;String&gt; iterator = aggregate.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( iterator.hasNext() ) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(iterator.next());</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-11\"><a href=\"#总结-11\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>迭代器模式的优点：支持以不同的方式遍容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系。</li>\n<li>迭代器模式的缺点：类文件的增加。  </li>\n<li>当然几乎每一种高级语言都有相应的内置迭代器实现，故本章的内容在于了解思想而非应用。</li>\n</ul>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><h4 id=\"模板方法模式的介绍\"><a href=\"#模板方法模式的介绍\" class=\"headerlink\" title=\"模板方法模式的介绍\"></a>模板方法模式的介绍</h4><ul>\n<li><p>若我们知道一个算法所需的 <code>关键步骤</code>，并确定了这些步骤的 <code>执行顺序</code>，但某些步骤的具体 <code>实现未知</code> 或实现是随 <code>环境变化</code> 的。</p>\n</li>\n<li><p>例如，执行程度的流程大致为：  </p>\n<ul>\n<li>Step.01：检查代码正确性  </li>\n<li>Step.02：链接相关类库  </li>\n<li>Step.03：编译  </li>\n<li><p>Step.04：执行程序  </p>\n<blockquote>\n<p>即上述步骤的实现细节不一样，但执行流程是固定的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>模版方法给我们的启示是，写程序应该 “先有主体逻辑，再填实现细节”。</p>\n</li>\n</ul>\n<h4 id=\"模板方法模式的定义\"><a href=\"#模板方法模式的定义\" class=\"headerlink\" title=\"模板方法模式的定义\"></a>模板方法模式的定义</h4><ul>\n<li>定义一个操作的 <code>算法框架</code>。</li>\n<li>将步骤延迟到子类，使子类不改变算法结构即可重定义该算法的某些特定步骤。</li>\n</ul>\n<h4 id=\"模板方法模式的使用场景\"><a href=\"#模板方法模式的使用场景\" class=\"headerlink\" title=\"模板方法模式的使用场景\"></a>模板方法模式的使用场景</h4><ul>\n<li>多个子类有公有的方法且逻辑基本相同。</li>\n<li>重要复杂的算法，可把核心算法设计为模板方法，周边细节功能则由各个子类实现。</li>\n<li><p>重构时使用模板方法，即相同代码抽取到父类中，然后通过 <code>钩子函数</code> 约束其行为。</p>\n<blockquote>\n<p><code>钩子函数</code>：普通的抽象类多态，即它在模板方法模式中提供了改变原始逻辑的空间。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"模板方法模式的-UML-类图\"><a href=\"#模板方法模式的-UML-类图\" class=\"headerlink\" title=\"模板方法模式的 UML 类图\"></a>模板方法模式的 UML 类图</h4><ul>\n<li><p>模板方法模式的 UML 类图如图 2-27 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-27.svg\" alt=\"模板方法模式的UML类图\"></p>\n  <center>图 2-27 模板方法模式的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"总结-12\"><a href=\"#总结-12\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li><p>模板方法模式：<code>流程封装</code>，即把某个固定流程封装到一个 final 函数中，并让子类能够定制这个流程的某些或者所有步骤。</p>\n<blockquote>\n<p>要求父类提供共同代码，即提高代码复用性、可扩展性。</p>\n</blockquote>\n</li>\n<li><p>模板方法的优点  </p>\n<ul>\n<li>封装不变部分，扩展可变部分。</li>\n<li>提取公共部分代码。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><h4 id=\"访问者模式的介绍\"><a href=\"#访问者模式的介绍\" class=\"headerlink\" title=\"访问者模式的介绍\"></a>访问者模式的介绍</h4><ul>\n<li>将 <code>数据操作</code> 与 <code>数据结构</code> 分离的设计模式。</li>\n<li>软件系统拥有由许多对象构成的对象结构，这些对象拥有一个 accept() 方法接受访问者对象访问。</li>\n<li>访问者是一接口，拥有一个 visit() 方法对访问到的对象结构中不同类型的元素作出不同的处理。<ul>\n<li>在对象结构的一次访问中，遍历整个对象结构，对每个元素实施 accept() 方法。  </li>\n<li>每一元素的 accept() 方法会调用访问者的 visit() 方法，即访问者可针对对象结构设计不同的访问类来完成不同操作。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"访问者模式的定义\"><a href=\"#访问者模式的定义\" class=\"headerlink\" title=\"访问者模式的定义\"></a>访问者模式的定义</h4><ul>\n<li>封装用于某种数据结构中各元素操作，且在不改数据结构的前提下定义这些元素的新操作。</li>\n</ul>\n<h4 id=\"访问者模式的使用场景\"><a href=\"#访问者模式的使用场景\" class=\"headerlink\" title=\"访问者模式的使用场景\"></a>访问者模式的使用场景</h4><ul>\n<li>对同一对象结构中的对象进行不同且不相关的操作。</li>\n<li>需避免操作 “污染” 对象的类。</li>\n<li>增加新操作是不修改这些类。</li>\n<li>对象结构稳定，但经常需在对象结构上定义新操作。</li>\n</ul>\n<h4 id=\"访问者模式的-UML-类图\"><a href=\"#访问者模式的-UML-类图\" class=\"headerlink\" title=\"访问者模式的 UML 类图\"></a>访问者模式的 UML 类图</h4><ul>\n<li><p>访问者模式的 UML 类图如图 2-28 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-28.svg\" alt=\"访问者模式的UML类图\"></p>\n  <center>图 2-28 访问者模式的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"访问者模式的简单示例\"><a href=\"#访问者模式的简单示例\" class=\"headerlink\" title=\"访问者模式的简单示例\"></a>访问者模式的简单示例</h4><ul>\n<li><p>公司给员工进行业绩考核，评定由公司高层负责。但不同领域的管理人员对与员工的评定标准不一样。即我们把员工分为工程师和经理，评定员工分为 CTO 和 CEO。</p>\n<p>  假定 CTO 关注工程师的代码量，经理的新产品数量；CEO 关注工程师的 KPI，经理的 KPI 及新产品数量。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 员工基类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Staff</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> kpi; <span class=\"comment\">// 员工 KPI</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Staff</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\tkpi = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>); <span class=\"comment\">// 随机生成 10 内的值.</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">// 接受 Visitor 的访问</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工程师类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Engineer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Staff</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> codes; <span class=\"comment\">// 代码量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Engineer</span> <span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\tcodes = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">100000</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">\t\tvisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCodeLines</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 工程师一年内写的代码量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> codes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 经理类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title\">Staff</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> products; <span class=\"comment\">// 产品数量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Manager</span> <span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t\tproducts = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">\t\tvisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getProducts</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 经理一年内做的产品数量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> products;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 访问工程师类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Engineer engineer)</span></span>; \t</span><br><span class=\"line\">\t<span class=\"comment\">// 访问经理类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Manager leader)</span></span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CEO 访问者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CEOVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Engineer engineer)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Name:..., KPI:...\"</span>);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Manager mgr)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Name:..., KPI:..., Products:...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CTO 访问者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CTOVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Engineer engineer)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Name:..., Codes:...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Manager mgr)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Name:..., Products:...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessReport</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;Staff&gt; mStaffs = <span class=\"keyword\">new</span> LinkedList&lt;Staff&gt;();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BusinessReport</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmStaffs.add(<span class=\"keyword\">new</span> Manager(<span class=\"string\">\"Manager Wang.\"</span>));</span><br><span class=\"line\">\t\tmStaffs.add(<span class=\"keyword\">new</span> Manager(<span class=\"string\">\"Manager Lin.\"</span>));</span><br><span class=\"line\">\t\tmStaffs.add(<span class=\"keyword\">new</span> Manager(<span class=\"string\">\"Engineer Kael.\"</span>));</span><br><span class=\"line\">\t\tmStaffs.add(<span class=\"keyword\">new</span> Manager(<span class=\"string\">\"Engineer Chaos.\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 为访问者展示报表</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> visitor 公司高层，如 CEO、CTO</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showReport</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>( Staff staff : mStaffs ) &#123;</span><br><span class=\"line\">\t\t\tstaff.accept(visitor);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tBusinessReport report = <span class=\"keyword\">new</span> BusinessReport();</span><br><span class=\"line\">\t\treport.showReport( <span class=\"keyword\">new</span> CEOVisitor() );</span><br><span class=\"line\">\t\treport.showReport( <span class=\"keyword\">new</span> CTOVisitor() );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-29 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-29.svg\" alt=\"公司员工业绩考核\"></p>\n  <center>图 2-29 公司员工业绩考核</center>\n\n</li>\n</ul>\n<h4 id=\"总结-13\"><a href=\"#总结-13\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>对象结构足够稳定，但需要在对象结构上经常定义新操作，需要对对象结构中的对象进行不同不相关的操作，考虑使用访问者模式。</li>\n<li>访问者模式的优点  <ul>\n<li>单一职责原则，即各角色职责分离。  </li>\n<li>数据结构和作用于该结构上的 <code>操作解耦</code>。</li>\n</ul>\n</li>\n<li>访问者模式的缺点  <ul>\n<li>具体元素对访问者公布细节。  </li>\n<li>具体元素变更导致修改成本大。  </li>\n<li>违反依赖倒置原则，即为了 “区别对待” 而依赖了具体类，没有依赖抽象，如上例中的 Engineer 与 Manager。  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><h4 id=\"中介者模式的介绍\"><a href=\"#中介者模式的介绍\" class=\"headerlink\" title=\"中介者模式的介绍\"></a>中介者模式的介绍</h4><ul>\n<li>又称为调节者模式或调停者模式，行为型设计模式。</li>\n</ul>\n<h4 id=\"中介者模式的定义\"><a href=\"#中介者模式的定义\" class=\"headerlink\" title=\"中介者模式的定义\"></a>中介者模式的定义</h4><ul>\n<li>包装一系列对象相互作用的方式，使这些对象不必相互明显作用。</li>\n<li>将多对多的相互作用转化为一对多的相互作用。</li>\n<li>将对象的行为和协作抽象化。</li>\n</ul>\n<h4 id=\"中介者模式的使用场景\"><a href=\"#中介者模式的使用场景\" class=\"headerlink\" title=\"中介者模式的使用场景\"></a>中介者模式的使用场景</h4><ul>\n<li>对象间交互操作较多且每个对象的行为操作都依赖彼此时，为防止修改其中一对象的行为同时涉及修改很多其他对象的行为。</li>\n<li>该模式将对象间的 <code>多对多关系</code> 变成 <code>一对多关系</code>。</li>\n<li>中介者对象将系统从网状结构变成以调停者为中心的星形结构，以降低系统复杂性，提高可扩展性作用。</li>\n</ul>\n<h4 id=\"中介者模式的-UML-类图\"><a href=\"#中介者模式的-UML-类图\" class=\"headerlink\" title=\"中介者模式的 UML 类图\"></a>中介者模式的 UML 类图</h4><ul>\n<li><p>中介者模式的 UML 类图如图 2-30 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-30.svg\" alt=\"中介者模式的UML类图\"></p>\n  <center>图 2-30 中介者模式的 UML 类图</center>\n</li>\n<li><p>中介者模式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象中介者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> ConcreteColleagueA colleagueA; <span class=\"comment\">// 具体同事类 A</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> ConcreteColleagueB colleagueB; <span class=\"comment\">// 具体同事类 B</span></span><br><span class=\"line\">\t<span class=\"comment\">// 抽象中介方法、子类实现</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColleagueA</span><span class=\"params\">(ConcreteColleagueA colleagueA)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.colleagueA = colleagueA;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColleagueB</span><span class=\"params\">(ConcreteColleagueB colleagueB)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.colleagueB = colleagueB;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体中介者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcolleagueA.action();</span><br><span class=\"line\">\t\tcolleagueB.action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象同事</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Mediator mediator; <span class=\"comment\">// 中介者对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Colleague</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mediator = mediator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 同事角色的具体行为，由子类去实现</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体同事 A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueA</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Colleague A 将信息递交给中介者处理.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体同事 B</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleagueB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteColleagueB</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(mediator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Colleague B 将信息递交给中介者处理.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"中介者模式的简单实现\"><a href=\"#中介者模式的简单实现\" class=\"headerlink\" title=\"中介者模式的简单实现\"></a>中介者模式的简单实现</h4><ul>\n<li><p>便于理解，本示例的 UML 类图如图 2-31 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-31.svg\" alt=\"电脑内部硬件的交互\"></p>\n  <center>图 2-31 电脑内部硬件的交互</center>\n\n<ul>\n<li><p>中介者模式就是用来协调多个对象之间的交互，就像上例中的主板，没有主板这个中介者，那么电脑里的每一个零部件都要与其他零部件建立关联。</p>\n</li>\n<li><p>比如 CPU 要与内存交互，与显卡交互以及与 IO 设备交互，那么这样一来就会构成一个错综复杂的网状图，而中介者模式即将网状图变成一个结构清晰的星形图。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"中介者模式实战\"><a href=\"#中介者模式实战\" class=\"headerlink\" title=\"中介者模式实战\"></a>中介者模式实战</h4><ul>\n<li>协调多个交互的对象，Android 中这么多形形色色控件也算是交互对象。</li>\n<li>其中社交、网商等应用的用户登录模块，账号框、密码框、登录按钮之间的相互制约、联系，正是中介者模式的表现，具体的实例样式可自行尝试。</li>\n</ul>\n<h4 id=\"总结-14\"><a href=\"#总结-14\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>中介者模式的优点：将网状般的依赖关系转化为以中介者为中心的星形结构，即使用中介者模式可对这种依赖关系进行解耦使逻辑结构清晰。</li>\n<li>中介者模式的缺点：若几个类间的依赖关系并不复杂，使用中介者模式反而会使原本不复杂的逻辑结构变得复杂。</li>\n</ul>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><h4 id=\"代理模式的定义\"><a href=\"#代理模式的定义\" class=\"headerlink\" title=\"代理模式的定义\"></a>代理模式的定义</h4><ul>\n<li>结构型设计模式。</li>\n<li>为其他对象提供一种代理以控制目标对象的访问。</li>\n</ul>\n<h4 id=\"代理模式的使用场景\"><a href=\"#代理模式的使用场景\" class=\"headerlink\" title=\"代理模式的使用场景\"></a>代理模式的使用场景</h4><ul>\n<li>无法或不想直接访问某个对象或访问某对象存在困难。</li>\n<li>为保证客户端使用的透明性，委托对象与代理对象需实现相同的接口。</li>\n</ul>\n<h4 id=\"代理模式的-UML-类图\"><a href=\"#代理模式的-UML-类图\" class=\"headerlink\" title=\"代理模式的 UML 类图\"></a>代理模式的 UML 类图</h4><ul>\n<li><p>代理模式的 UML 类图如图 2-32 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-32.svg\" alt=\"代理模式的UML类图\"></p>\n  <center>图 2-32 代理模式的 UML 类图</center>\n\n<ul>\n<li><strong>Subject 抽象主题类</strong>：该类主要职责是声明真实主题与代理的共同接口方法，其可是抽象类或接口。</li>\n<li><strong>RealSubject 真实主题类</strong>：该类也被称为被委托类或者被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户类则通过代理类间接地调用真实主题类中定义的方法。</li>\n<li><strong>ProxySubject 代理类</strong>：该类也称为委托类或者代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中相应的接口方法执行，以起到代理的作用。</li>\n</ul>\n</li>\n<li><p>代理模式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象主题类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 一个普通的业务方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现抽象主题的真实主题类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Real Subjetc!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 代理类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxySubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> RealSubject mSubject; <span class=\"comment\">// 持有真实主题的引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxySubject</span><span class=\"params\">(RealSubject mSubject)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.mSubject = mSubject;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmSubject.visit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个真实主题对象</span></span><br><span class=\"line\">\t\tRealSubject real = <span class=\"keyword\">new</span> RealSubject();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 通过真实主题对象构造一个代理对象</span></span><br><span class=\"line\">\t\tProxySubject proxy = <span class=\"keyword\">new</span> ProxySubject(real);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用代理的相关方法</span></span><br><span class=\"line\">\t\tproxy.visit(); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"代理模式的简单实现\"><a href=\"#代理模式的简单实现\" class=\"headerlink\" title=\"代理模式的简单实现\"></a>代理模式的简单实现</h4><ul>\n<li><p>以生活中常有的例子，老板拖欠工资甚至克扣工资的情况，而最恰当的途径就是通过法律诉讼解决问题。一旦选择走法律途径解决该纠纷，那么不可避免地需请一个律师来作为自己的诉讼代理人。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 诉讼接口类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ILawsuit</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 提交申请</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">burden</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 进行举证</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">defend</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 开始辩护</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 诉讼完成</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体诉讼人</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMin</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILawsuit</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"老板拖欠工资，特此申请仲裁!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">burden</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"这是合同书和过去一年的银行工资流水!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defend</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"证据确凿!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"诉讼成功!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 代理律师</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lawyer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ILawsuit</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ILawsuit mLawsuit; <span class=\"comment\">// 持有一个具体被代理者的引用\t</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Lawyer</span><span class=\"params\">(ILawsuit lawsuit)</span> </span>&#123;</span><br><span class=\"line\">\t\tmLawsuit = lawsuit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmLawsuit.submit();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">burden</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmLawsuit.burden();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defend</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmLawsuit.defend();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmLawsuit.finish();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tILawsuit xiaomin = <span class=\"keyword\">new</span> XiaoMin();</span><br><span class=\"line\">\t\tILawsuit lawyer = <span class=\"keyword\">new</span> Lawyer(xiaomin);</span><br><span class=\"line\">\t\tlawyer.submit();</span><br><span class=\"line\">\t\tlawyer.burden();</span><br><span class=\"line\">\t\tlawyer.defend();</span><br><span class=\"line\">\t\tlawyer.finish();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-33 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-33.svg\" alt=\"律师作为诉讼代理人\"></p>\n<center>图 2-33 律师作为诉讼代理人</center>\n\n</li>\n</ul>\n<h4 id=\"静态代理与动态代理\"><a href=\"#静态代理与动态代理\" class=\"headerlink\" title=\"静态代理与动态代理\"></a>静态代理与动态代理</h4><ul>\n<li><p><code>静态代理</code>：代码由程序员自己或者通过一些自动化工具生成固定的代码（硬编码）再对其进行编译，即在代码运行前代理类的 Class 编译文件就已经存在。上述例子即为静态代理的实现模式。</p>\n</li>\n<li><p><code>动态代理</code>：通过 <code>反射机制</code> 动态地生成代理者的对象，即我们在编译阶段不需要知道代理者是谁，代理谁我们将在执行阶段决定。Java 提供了便捷的动态代理接口 InvocationHandler。  </p>\n<ul>\n<li><p>同样，以动态代理方式实现上述例子，本示例的 UML 类图如图 2-34 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-34.svg\" alt=\"动态代理的实现案例\"></p>\n</li>\n</ul>\n<center>图 2-34 动态代理的实现案例</center>\n</li>\n<li><p>动态代理方式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">IncocationHandler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object obj; <span class=\"comment\">// 被代理的类引用</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.obj = obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tObject proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\t\tObject result = method.invoke(obj, args);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tILawsuit xiaomin = <span class=\"keyword\">new</span> XiaoMin();</span><br><span class=\"line\">\tDynamicProxy proxy = <span class=\"keyword\">new</span> DynamicProxy(xiaomin);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 获取被代理类小民的 ClassLoader</span></span><br><span class=\"line\">\tClassLoader loader = xiaomin.getClass().getClassLoader();</span><br><span class=\"line\">\t<span class=\"comment\">// 动态构造一个代理者律师</span></span><br><span class=\"line\">\tILawsuit lawyer =(ILawsuit) Proxy.newProxyInstance(loader,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Class[] &#123;ILawsuit<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">proxy</span>)</span>;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t<span class=\"comment\">// 律师提交诉讼申请</span></span><br><span class=\"line\">\tlawyer.submit();</span><br><span class=\"line\">\t<span class=\"comment\">// 律师进行举证</span></span><br><span class=\"line\">\tlawyer.burden();</span><br><span class=\"line\">\t<span class=\"comment\">// 律师代替小民进行辩护</span></span><br><span class=\"line\">\tlawyer.defend();</span><br><span class=\"line\">\t<span class=\"comment\">// 完成诉讼</span></span><br><span class=\"line\">\tlawyer.finish();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><h4 id=\"组合模式的介绍\"><a href=\"#组合模式的介绍\" class=\"headerlink\" title=\"组合模式的介绍\"></a>组合模式的介绍</h4><ul>\n<li>又称 “部分整体” 模式，结构型设计模式。</li>\n<li><p>它将一组相似的对象看作一个对象处理，并根据一个树状结构来组合对象，然后提供一个统一的方法去访问相应对象。</p>\n</li>\n<li><p>例如公司组织结构的树状图，如图 2-35 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-35.svg\" alt=\"公司组织结构的树状图\"></p>\n<center>图 2-35 公司组织结构的树状图</center>\n</li>\n<li><p>在组合模式中，我们将这样的一个拥有分支的节点称之为枝干构件，位于树状结构顶部的枝干结构比较特殊，我们称为根结构件，因其为整个树状图的始端。同样对于像行政部和研发部这样没有分支的结构，我们称之为叶子结构，这样的一个结构就是组合模式的雏形。如图 2-36 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-36.svg\" alt=\"组合模式的雏形\"></p>\n  <center>图 2-36 组合模式的雏形</center>\n\n</li>\n</ul>\n<h4 id=\"组合模式的定义\"><a href=\"#组合模式的定义\" class=\"headerlink\" title=\"组合模式的定义\"></a>组合模式的定义</h4><ul>\n<li>将对象组合成 <code>树状结构</code> 以表示 “部分-整体” 的 <code>层次结构</code>，使得用户对单个对象和组合对象的使用具有一致性。</li>\n</ul>\n<h4 id=\"组合模式的使用场景\"><a href=\"#组合模式的使用场景\" class=\"headerlink\" title=\"组合模式的使用场景\"></a>组合模式的使用场景</h4><ul>\n<li>表示对象的 <code>部分-整体</code> 层次结构时。</li>\n<li>从一个整体中能够独立出部分模块或功能的场景。</li>\n</ul>\n<h4 id=\"组合模式的-UML-类图\"><a href=\"#组合模式的-UML-类图\" class=\"headerlink\" title=\"组合模式的 UML 类图\"></a>组合模式的 UML 类图</h4><ul>\n<li><p>组合模式的 UML 类图如图 2-37 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-37.svg\" alt=\"组合模式的UML类图\"></p>\n<center>图 2-37 组合模式的 UML 类图</center>\n</li>\n<li><p>上述所讲与依赖倒置原则相违背，既然是面向接口编程，则我们就该把焦点放在接口设计上，即在 Composite 的一些实现方法定义到 Component 中。</p>\n</li>\n<li><p>这样，我们会得到一个不一样的组合模式，也称为安全的组合模式，该安全组合模式的 UML 类图见图 2-38 所示。</p>\n<blockquote>\n<p>透明组合模式不管是叶子还是枝干节点都有相同的结构，那么意味着不能单一的 getChildren() 方法得到子字节的类型 (已是叶子节点)，则必须在方法实现的内部进行判断。</p>\n</blockquote>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-38.svg\" alt=\"安全的组合模式的UML类图\"></p>\n  <center>图 2-38 安全的组合模式的 UML 类图</center>\n</li>\n<li><p>安全组合模式的代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 透明的组合模式抽象根节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String name; <span class=\"comment\">// 节点</span></span><br><span class=\"line\">\t<span class=\"function\">pulbic <span class=\"title\">Component</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//具体的逻辑方法由子类实现</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@child</span> 子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addChild</span><span class=\"params\">(Component child)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@child</span> 子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">removeChild</span><span class=\"params\">(Component child)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index 子节点对应下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 子节点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Component <span class=\"title\">getChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 透明的组合模式具体枝干节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 存储节点的容器</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Component&gt; components = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Composite</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( <span class=\"keyword\">null</span> != components ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Component c : components) &#123;</span><br><span class=\"line\">\t\t\t\tc.doSomething();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addChild</span><span class=\"params\">(Component child)</span> </span>&#123;</span><br><span class=\"line\">\t\tcomponents.add(child);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">removeChild</span><span class=\"params\">(Component child)</span> </span>&#123;</span><br><span class=\"line\">\t\tcomponents.remove(child);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Component <span class=\"title\">getChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> components.get(index);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 透明的组合模式叶子节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Leaf</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addChild</span><span class=\"params\">(Component child)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"叶子节点没有子节点\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeChild</span><span class=\"params\">(Component child)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"叶子节点没有子节点\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Component <span class=\"title\">getChildren</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"叶子节点没有子节点\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个根节点</span></span><br><span class=\"line\">\t\tComponent root = <span class=\"keyword\">new</span> Composite(<span class=\"string\">\"Root\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造两个枝干节点</span></span><br><span class=\"line\">\t\tComponent branch1 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">\"Branch1\"</span>);</span><br><span class=\"line\">\t\tComponent branch2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">\"Branch2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造两个叶子节点</span></span><br><span class=\"line\">\t\tComponent leaf1 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">\"Leaf1\"</span>);</span><br><span class=\"line\">\t\tComponent leaf2 = <span class=\"keyword\">new</span> Leaf(<span class=\"string\">\"Leaf2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将叶子节点添加至枝干节点中</span></span><br><span class=\"line\">\t\tbranch1.addChild(leaf1);</span><br><span class=\"line\">\t\tbranch2.addChild(leaf2);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将枝干节点添加到根节点中</span></span><br><span class=\"line\">\t\troot.addChild(branch1);</span><br><span class=\"line\">\t\troot.addChild(branch2);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行方法</span></span><br><span class=\"line\">\t\troot.doSomething();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"组合模式的简单实现\"><a href=\"#组合模式的简单实现\" class=\"headerlink\" title=\"组合模式的简单实现\"></a>组合模式的简单实现</h4><ul>\n<li>在操作系统中，文件系统其实就是一种典型的组合模式例子。</li>\n<li><p>具体地，文件系统中文件就是可被具体程序执行的对象，文件夹就是可存放文件和文件夹的对象。文件系统的组合模式表示如图 2-39 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-39.svg\" alt=\"文件系统的组合模式表示\"></p>\n<center>图 2-39 文件系统的组合模式表示</center>\n</li>\n<li><p>便于理解，本实例的 UML 类图如图 2-40 所示。</p>\n<p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-40.svg\" alt=\"文件系统的组合模式实现\"></p>\n<center>图 2-40 文件系统的组合模式实现</center>\n</li>\n<li><p>文件系统的组合模式的代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示文件或文件夹的抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dir</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 声明一个 List 成员变量存储文件夹下的所有元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> List&lt;Dir&gt; dirs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name; <span class=\"comment\">// 当前文件或文件夹的名称</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dir</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 添加一个文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> dir 文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">addDir</span><span class=\"params\">(Dir dir)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 移除一个文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> dir 文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">rmDir</span><span class=\"params\">(Dir dir)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 清空文件夹下所有元素</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 输出文件夹目录结构</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取文件夹下所有的文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 文件夹下所有的文件或文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> List&lt;Dir&gt; <span class=\"title\">getFiles</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取文件或文件夹的名称</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 文件或文件夹的名称</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示文件夹的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Folder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dir</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Folder</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addDir</span><span class=\"params\">(Dir dir)</span> </span>&#123;</span><br><span class=\"line\">\t\tdirs.add(dir);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rmDir</span><span class=\"params\">(Dir dir)</span> </span>&#123;</span><br><span class=\"line\">\t\tdirs.remove(dir);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tdirs.clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println( getName() + <span class=\"string\">\"(\"</span> );</span><br><span class=\"line\">\t\tIterator&lt;Dir&gt; iterator = dirs.iterator();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( iterator.hasNext() ) &#123;</span><br><span class=\"line\">\t\t\tDir dir = iterator.next();</span><br><span class=\"line\">\t\t\tdir.print();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>( iterator.hasNext() ) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\",\\t\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\")\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Dir&gt; <span class=\"title\">getFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dirs;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 表示文件的类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">File</span> <span class=\"keyword\">extends</span> <span class=\"title\">Dir</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addDir</span><span class=\"params\">(Dir dir)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rmDir</span><span class=\"params\">(Dir dir)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Dir&gt; <span class=\"title\">getFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"文件类不能作为文件夹类来使用\"</span>);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造一个目录对象表示 C 盘根目录</span></span><br><span class=\"line\">\t\tDir diskC = <span class=\"keyword\">new</span> Folder(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// C 盘根目录下有一个文件 FileLog.txt</span></span><br><span class=\"line\">\t\tdiskC.addDir( <span class=\"keyword\">new</span> File(<span class=\"string\">\"Filelog.txt\"</span>) );\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// C 盘根目录下有3个子目录 windows、perflogs 和 Program File</span></span><br><span class=\"line\">\t\tDir dirWin = <span class=\"keyword\">new</span> File(<span class=\"string\">\"windows\"</span>);</span><br><span class=\"line\">\t\tDir dirPerf = <span class=\"keyword\">new</span> File(<span class=\"string\">\"perflogs\"</span>);</span><br><span class=\"line\">\t\tDir dirProg = <span class=\"keyword\">new</span> File(<span class=\"string\">\"Program File\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// windows 目录下有文件 explorer.exe</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// perflogs 目录下有文件 perflogs.txt</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Program File 目录下有文件 syslogs.txt</span></span><br><span class=\"line\">\t\tdirWin.addDir( <span class=\"keyword\">new</span> File(<span class=\"string\">\"explorer.exe\"</span>) );</span><br><span class=\"line\">\t\tdirPerf.addDir( <span class=\"keyword\">new</span> File(<span class=\"string\">\"perflogs.txt\"</span>) );</span><br><span class=\"line\">\t\tdirProg.addDir( <span class=\"keyword\">new</span> File(<span class=\"string\">\"syslogs.txt\"</span>) );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tdiskC.add(dirWin);</span><br><span class=\"line\">\t\tdiskC.add(dirPerf);</span><br><span class=\"line\">\t\tdiskC.add(dirProg);\t\t</span><br><span class=\"line\">\t\tdiskC.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-15\"><a href=\"#总结-15\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>组合模式与解释器模式有一定的类同，两者在迭代对象时都涉及递归的调用，但组合模式所提供的属性层次结构使我们能 <code>一视同仁</code> 对待单个对象的对象集合。</li>\n<li>组合模式的优点  <ul>\n<li>清楚定义分层次的复杂对象，表示对象的全部或部分层次，让高层模块忽略了层次差异，方便对整个层次结构进行控制。  </li>\n<li>高层模块可一致地使用一个组合结构或其中单个对象。  </li>\n<li>在组合模式中增加新的枝干结构和叶子构件很方便，无须对类库进行修改。  </li>\n<li>通过叶子对象和枝干对象的递归组合，形成复杂的树形结构，但对其控制却非常简单。</li>\n</ul>\n</li>\n<li>组合模式的缺点  <ul>\n<li>新增构件时，不好对枝干中的构件类型进行限制，不能依赖类型系统来施加这些约束，因为大多数情况下他们来自相同的抽象层。  </li>\n<li>因此必须进行类型检查来实现。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><h4 id=\"适配器模式的介绍\"><a href=\"#适配器模式的介绍\" class=\"headerlink\" title=\"适配器模式的介绍\"></a>适配器模式的介绍</h4><ul>\n<li>ListView、GirdView、RecyclerView 都需要使用 Adapter。</li>\n<li>两个没有关系的类型之间交互，一种解决方法是修改各自类接口，另一种则是使用一个 Adapter。在两种接口间创建一个 “混血儿” 接口，将两接口兼容。</li>\n</ul>\n<h4 id=\"适配器模式的定义\"><a href=\"#适配器模式的定义\" class=\"headerlink\" title=\"适配器模式的定义\"></a>适配器模式的定义</h4><ul>\n<li>把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法一起工作的两个类能一起工作。</li>\n</ul>\n<h4 id=\"适配器模式的使用场景\"><a href=\"#适配器模式的使用场景\" class=\"headerlink\" title=\"适配器模式的使用场景\"></a>适配器模式的使用场景</h4><ul>\n<li>系统需要使用现存类，而此类接口不符系统需求，即接口不兼容。</li>\n<li>需一个统一的输出接口，而输入端的类型不可预知。</li>\n</ul>\n<h4 id=\"适配器模式的-UML-类图\"><a href=\"#适配器模式的-UML-类图\" class=\"headerlink\" title=\"适配器模式的 UML 类图\"></a>适配器模式的 UML 类图</h4><ul>\n<li><p>适配器模式也分两种，即类适配器模式和对象适配器模式。</p>\n<ul>\n<li><p>类适配器模式，如图 2-41 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-41.svg\" alt=\"类适配器的UML类图\"></p>\n  <center>图 2-41 类适配器的 UML 类图</center>\n\n<p>  目标接口需要的是 operation2()，而 Adaptee 对象中有一个 operation3()，因此不兼容。故通过 Adapter 实现一个 operation2() 将 Adapter 的 operation3() 转换为 Target() 需要的 operation2()。</p>\n</li>\n<li><p>对象适配器模式，如图 2-42 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-42.svg\" alt=\"对象适配器的UML类图\"></p>\n<center>图 2-42 对象适配器的 UML 类图</center>\n\n<p>这种实现方式直接将要被适配的对象传递到 Adapter 中，使用组合的形式实现接口兼容的效果。即带来的好处有，在被适配的对象中不暴露方法细节；且相对类适配器，由于继承了被适配对象，在 Adapter 类中出现一些奇怪接口。因此对象适配器模式的实现更加灵活。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"适配器模式的简单示例\"><a href=\"#适配器模式的简单示例\" class=\"headerlink\" title=\"适配器模式的简单示例\"></a>适配器模式的简单示例</h4><ul>\n<li><p>以电源适配器为例，分别以类适配器和对象适配器模式阐述具体情况。</p>\n<ul>\n<li>5V 电压是 Target 接口。</li>\n<li>220V 电压是 Adaptee 类。</li>\n<li><p>将电压 220V 转换到 5V 是 Adapter 类。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 以类适配器模式实现 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Target 角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FiveVolt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getvolt5</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Adaptee 角色，需被转换的对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volt220</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getVolt220</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">220</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Adapter 角色，将 220V 的电压转换为 5V 电压</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoltAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Volt220</span> <span class=\"keyword\">implements</span> <span class=\"title\">FiveVolt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@OVerride</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getVolt5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tVoltAdapter adpter = <span class=\"keyword\">new</span> VoltAdapter();</span><br><span class=\"line\">\t\tSystem.out.println(输出电压：adapter.getVolt5);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 以对象适配器模式实现 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Target 角色</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FiveVolt</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getvolt5</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Adaptee 角色，需被转换的对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Volt220</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getVolt220</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">220</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Adapter 角色，将 220V 的电压转换为 5V 电压</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VoltAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">FiveVolt</span> </span>&#123;</span><br><span class=\"line\">\tVolt220 mVolt220;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VoltAdapter</span><span class=\"params\">(Volt220 adaptee)</span> </span>&#123;</span><br><span class=\"line\">\t\tmVolt220 = adaptee;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getVolt220</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mVolt220.getVolt220();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@OVerride</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getVolt5</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tVoltAdapter adpter = <span class=\"keyword\">new</span> VoltAdapter( <span class=\"keyword\">new</span> Volt220() );</span><br><span class=\"line\">\t\tSystem.out.println(输出电压：adapter.getVolt5);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"总结-16\"><a href=\"#总结-16\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>适配器模式的优点  <ul>\n<li>更好的复用性：系统需使用现有的类，而此类的接口不符系统需求，则通过适配器模式可让这些功能得到更好的复用。  </li>\n<li>更好的扩展性。  </li>\n</ul>\n</li>\n<li>适配器模式的缺点：若可对系统重构尽可能不使用适配器，过多使用适配器容易让系统凌乱，不易整体把握。</li>\n</ul>\n<h3 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h3><h4 id=\"装饰模式的介绍\"><a href=\"#装饰模式的介绍\" class=\"headerlink\" title=\"装饰模式的介绍\"></a>装饰模式的介绍</h4><ul>\n<li>又称为 <code>包装模式</code>，结构性设计模式。</li>\n<li>使用一种对客户端以透明方式来动态扩展对象的功能，同时它也是继承关系的一种替代方案。</li>\n</ul>\n<h4 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h4><ul>\n<li>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成子类更为灵活。</li>\n</ul>\n<h4 id=\"装饰模式的使用场景\"><a href=\"#装饰模式的使用场景\" class=\"headerlink\" title=\"装饰模式的使用场景\"></a>装饰模式的使用场景</h4><ul>\n<li>需要透明地、动态地扩展类的功能时，装饰模式不失一种理想方案。</li>\n</ul>\n<h4 id=\"装饰模式的-UML-类图\"><a href=\"#装饰模式的-UML-类图\" class=\"headerlink\" title=\"装饰模式的 UML 类图\"></a>装饰模式的 UML 类图</h4><ul>\n<li><p>装饰模式的 UML 类图如图 2-43 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-43.svg\" alt=\"装饰模式的UML类图\"></p>\n  <center>图 2-43 装饰模式的 UML 类图</center>\n\n<ul>\n<li><strong>Component 抽象组件</strong>：可以是一个接口或者抽象类，充当被装饰的原始对象。</li>\n<li><strong>ConcreteComponent 组件具体实现类</strong>：该类是 Component 类的基本实现，也是我们装饰的具体对象。</li>\n<li><strong>Decorator 抽象装饰者</strong>：其承担的职责是为了装饰我们的组件对象，其内部一定要有一个指向组件对象的引用。</li>\n<li><strong>ConcreteDecorator 抽象装饰者</strong>：对抽象装饰者做出具体实现。</li>\n</ul>\n</li>\n<li><p>装饰模式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象组件类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 抽象的方法：自由增加你需要的抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">operate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组件具体实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现细节</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象装饰者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Component component; <span class=\"comment\">// 持有一个 Component 对象的引用</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 必要的构造方法，需要一个 Component 类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> component Component 对象</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decorator</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.component = component;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcomponent.operate();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装饰者具体实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ConcreteDecoratorA</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(component);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\toperateA();</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.operate();</span><br><span class=\"line\">\t\toperateB();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operateA</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 自定义的装饰方法 A</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 装饰方法逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operateB</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 自定义的装饰方法 B</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 装饰方法逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 构造被装饰的组件对象</span></span><br><span class=\"line\">\t\tComponent component = <span class=\"keyword\">new</span> ConcreteComponent();\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 根据组件对象构造装饰者对象并调用，即给组件对象增加装饰者的功能方法</span></span><br><span class=\"line\">\t\tDecorator.decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA(component);</span><br><span class=\"line\">\t\tdecoratorA.operate();</span><br><span class=\"line\">\t\tDecorator.decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB(component);</span><br><span class=\"line\">\t\tdecoratorB.operate();</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-17\"><a href=\"#总结-17\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>装饰模式与代理模式的区别 (容易混淆)<ul>\n<li>装饰模式：以对客户端透明的方式 <code>扩展对象的功能</code>，即 <code>继承关系</code> 的一种 <code>替代方案</code>。</li>\n<li>代理模式：给一个对象提供一个代理对象，并由 <code>代理对象</code> 来控制对原有对象引用。 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><h4 id=\"享元模式的介绍\"><a href=\"#享元模式的介绍\" class=\"headerlink\" title=\"享元模式的介绍\"></a>享元模式的介绍</h4><ul>\n<li>又称 FlyWeight，代表轻量级的意思，结构型设计模式。</li>\n<li><code>对象池</code> 的一种实现。</li>\n<li><p>享元模式用来是尽可能减少内存使用量，它适用于可能存在大量重复对象的场景。  </p>\n<blockquote>\n<p>目的：缓存可共享的对象，达到对象共享，避免过多创建对象，即提升性能、避免内存移除。</p>\n</blockquote>\n</li>\n<li><p>享元对象</p>\n<ul>\n<li>内存状态：可共享，不随环境变化</li>\n<li>外部状态：不可共享，随环境变化</li>\n<li>对象容器：在经典的享元模式中，对象容器为一 Map，它的 <code>键</code> 是享元对象的 <code>内部状态</code>，它的 <code>值</code> 是 <code>享元对象本身</code>。</li>\n</ul>\n</li>\n<li><p>客户端通过这个内部状态从享元工厂中获取享元对象，若有缓存则使用缓存对象，否则创建一个享元对象并存入容器中。</p>\n</li>\n</ul>\n<h4 id=\"享元模式的定义\"><a href=\"#享元模式的定义\" class=\"headerlink\" title=\"享元模式的定义\"></a>享元模式的定义</h4><ul>\n<li>使用共享对象可有效地支持大量的细粒度的对象。</li>\n</ul>\n<h4 id=\"享元模式的使用场景\"><a href=\"#享元模式的使用场景\" class=\"headerlink\" title=\"享元模式的使用场景\"></a>享元模式的使用场景</h4><ul>\n<li>系统中存在大量的 <code>相似对象</code>。</li>\n<li>细粒度的对象都具备较接近的外部状态，且内部状态与环境无关，即对象没有特定身份。</li>\n<li>需要 <code>缓冲池</code> 的场景。</li>\n</ul>\n<h4 id=\"享元模式的-UML-类图\"><a href=\"#享元模式的-UML-类图\" class=\"headerlink\" title=\"享元模式的 UML 类图\"></a>享元模式的 UML 类图</h4><ul>\n<li><p>享元模式的 UML 类图如图 2-44 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-44.svg\" alt=\"享元模式的UML类图\"></p>\n  <center>图 2-44 享元模式的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"享元模式的简单示例\"><a href=\"#享元模式的简单示例\" class=\"headerlink\" title=\"享元模式的简单示例\"></a>享元模式的简单示例</h4><ul>\n<li><p>例1. 过年回家买火车票，无数人在客户端上订票 (有多次购票、刷票的情况)，即不断向服务端发送请求。</p>\n<ul>\n<li>而每次查询，服务器必须做出回应，具体地，用户查询输入出发地和目的地，查询结构返回值只有一趟列车的车票。而数以万计的人有同样需求，即不间断请求数据，每次重新创建一个查询的车票结果，即造成大量重复对象创建、销毁，使得服务器压力加重。</li>\n<li>享元模式正好适合解决该情形的问题，例如 A 到 B 地的车辆是有限的，车上铺位分硬卧、软卧和坐票三种，将这些可公用的对象缓存起来。用户查询时优先使用缓存，反之则重新创建。</li>\n</ul>\n</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-45 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-45.svg\" alt=\"网上订票系统的UML类图\"></p>\n  <center>图 2-45 网上订票系统的 UML 类图</center>\n</li>\n<li><p>本示例的代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Ticket</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTicketInfo</span><span class=\"params\">(String bunk)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// 火车票</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrainTicket</span> <span class=\"keyword\">implements</span> <span class=\"title\">Ticket</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String from; <span class=\"comment\">// 始发地</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String to; <span class=\"comment\">// 目的地</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String bunk; <span class=\"comment\">// 铺位</span></span><br><span class=\"line\">\tTrainTicket(String from, String to) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.from = from;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.to = to;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showTicketInfo</span><span class=\"params\">(String bunk)</span> </span>&#123;</span><br><span class=\"line\">\t\tprice = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">300</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"From:\"</span> + from</span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\"To:\"</span> + to</span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\"Bunk:\"</span> + bunk</span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\"Price:\"</span> + price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Map&lt;String, Ticket&gt; sTicketMap = </span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, Ticket&gt;();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Ticket <span class=\"title\">getTicket</span><span class=\"params\">(String from, String to)</span> </span>&#123;</span><br><span class=\"line\">\t\tString key = from + <span class=\"string\">\"-\"</span> + to;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( sTicketMap.containsKey(key) ) &#123; <span class=\"comment\">// 使用缓存</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> sTicketMap.get(key);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">\t\t\tTicket ticket = <span class=\"keyword\">new</span> TrainTicket(from, to);</span><br><span class=\"line\">\t\t\tsTicketMap.put(key, ticket);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ticket;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>例2. 我们知道 Java 中 String 是存在于常量池中，即一个 String 被定义之后它就被缓存到了常量池中，当其他地方使用同样的字符串，则直接使用缓存，而非创建。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tString str1 = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">\tString str2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">\tString str3 = <span class=\"string\">\"Hello \"</span> + <span class=\"string\">\"World\"</span>;</span><br><span class=\"line\">\tSystem.out.println( <span class=\"string\">\"\\nStr1 - Str3: \"</span> + str1.equals(str3)</span><br><span class=\"line\">\t\t+  <span class=\"string\">\"\\nStr2 - Str3: \"</span> + str2.equals(str3)</span><br><span class=\"line\">\t\t+  <span class=\"string\">\"\\nStr1 - Str2: \"</span> + str1.equals(str1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 输出的结果分别是：true，false，false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"总结-18\"><a href=\"#总结-18\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>享元模式的优点：大幅度地降低内存中对象的数量。</li>\n<li>享元模式的缺点  <ul>\n<li>为了使对象可共享，需将一些状态外部化，使程序的逻辑复杂化。  </li>\n<li>将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长。  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><h4 id=\"外观模式的介绍\"><a href=\"#外观模式的介绍\" class=\"headerlink\" title=\"外观模式的介绍\"></a>外观模式的介绍</h4><ul>\n<li>又称门面模式 （Facade 模式），结构型设计模式。</li>\n<li>通过一个外观类使得整个系统中接口只有一个 <code>统一的高层接口</code>，即这样降低用户使用成本，也对用户屏蔽了很多实现细节。</li>\n<li>外观模式是 <code>封装API</code> 的常用手段。</li>\n</ul>\n<h4 id=\"外观模式的定义\"><a href=\"#外观模式的定义\" class=\"headerlink\" title=\"外观模式的定义\"></a>外观模式的定义</h4><ul>\n<li>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。</li>\n<li>外观模式提供一个高层次接口，使得子系统更易于使用。</li>\n</ul>\n<h4 id=\"外观模式的使用场景\"><a href=\"#外观模式的使用场景\" class=\"headerlink\" title=\"外观模式的使用场景\"></a>外观模式的使用场景</h4><ul>\n<li><p>为一个复杂的子系统提供一个简单接口。</p>\n<blockquote>\n<p>对于系统进行定制、修改，这种易变性，使得隐藏子系统的具体实现变得尤为重要，对外隐藏子系统的具体实现，隔离变化。</p>\n</blockquote>\n</li>\n<li><p>构建一层次结构的子系统，子系统间相互依赖，则通过 Facade 接口进行通信，从而简化他们的依赖关系。</p>\n</li>\n</ul>\n<h4 id=\"外观模式的-UML-类图\"><a href=\"#外观模式的-UML-类图\" class=\"headerlink\" title=\"外观模式的 UML 类图\"></a>外观模式的 UML 类图</h4><ul>\n<li><p>外观模式的 UML 类图如图 2-46 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-46.svg\" alt=\"外观模式的UML类图\"></p>\n  <center>图 2-46 外观模式的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"总结-19\"><a href=\"#总结-19\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>外观模式的精髓在于 <code>封装</code>。通过一高层次结构为用户提供统一的 API 入口，使得用户通过一个类就基本能够操作整个系统。</li>\n<li>外观模式的优点  <ul>\n<li>对客户端隐藏子系统细节，因而减少客户对于子系统的耦合。  </li>\n<li>外观类对子系统的接口封装，使得系统更易于使用。  </li>\n</ul>\n</li>\n<li>外观模式的缺点：外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。</li>\n</ul>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><h4 id=\"桥接模式的介绍\"><a href=\"#桥接模式的介绍\" class=\"headerlink\" title=\"桥接模式的介绍\"></a>桥接模式的介绍</h4><ul>\n<li>又称桥梁模式，结构型设计模式。</li>\n<li>承接者连接 <code>两边</code> 的作用，两边指 <code>抽象部分</code> 和 <code>实现部分</code>。</li>\n</ul>\n<h4 id=\"桥接模式的定义\"><a href=\"#桥接模式的定义\" class=\"headerlink\" title=\"桥接模式的定义\"></a>桥接模式的定义</h4><ul>\n<li>将 <code>抽象部分</code> 和 <code>实现部分</code> 分离，使它们都可以独立地进行变化。</li>\n</ul>\n<h4 id=\"桥接模式的使用场景\"><a href=\"#桥接模式的使用场景\" class=\"headerlink\" title=\"桥接模式的使用场景\"></a>桥接模式的使用场景</h4><ul>\n<li>对于不希望使用继承或因多层次继承导致系统类的个数急剧增加的系统，考虑使用桥接模式。</li>\n<li>需要在构件的抽象化角色和具体角色之间增加更多灵活性，避免两层次间建立静态的继承关系，可通过桥接模式使它们在抽象层建立一个关联关系。</li>\n<li>一个类存在两个独立变化的维度，且这两个维度都需进行扩展。</li>\n<li>任何多维度变化类或多个树状类之间的耦合可通过桥接模式解耦。</li>\n</ul>\n<h4 id=\"桥接模式的-UML-类图\"><a href=\"#桥接模式的-UML-类图\" class=\"headerlink\" title=\"桥接模式的 UML 类图\"></a>桥接模式的 UML 类图</h4><ul>\n<li><p>桥接模式的 UML 类图如图 2-47 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-47.svg\" alt=\"桥接模式的UML类图\"></p>\n  <center>图 2-47 桥接模式的 UML 类图</center>\n\n<ul>\n<li><strong>Abstraction 抽象部分</strong>：该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分的对象来实现。该类一般为抽象类。</li>\n<li><strong>RefinedAbstraction 优化的抽象部分</strong>：抽象部分的具体实现，该类一般是对抽象部分的方法进行完善和扩展。</li>\n<li><strong>Implementor 实现部分</strong>：可以为接口或抽象类，其方法不一定要与抽象部分中的一致，一般情况下是由实现部分提供基本的操作，而抽象部分定义的则是基于实现部分这些基本操作的业务方法。</li>\n<li><strong>ConcreteImplementorA/B 实现部分的具体实现</strong>：完成实现部分中定义的具体逻辑。</li>\n</ul>\n</li>\n<li><p>桥接模式的简单代码实现：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现部分的抽象接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Implementor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 实现抽象部分的具体方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationImpl</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现部分具体的实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Implementor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象部分</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 声明一私有成员变量引用实现部分的对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Implementor mImplementor; </span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 通过实现部分对象的引用构造抽象部分的对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> implementor 实现部分对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Abstraction</span><span class=\"params\">(Implementor implementor)</span> </span>&#123;</span><br><span class=\"line\">\t\tmImplementor = implementor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过调用实现部分具体的方法实现具体的功能</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmImplementor.operationImpl();</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化的抽象部分</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RefinedAbstraction</span><span class=\"params\">(Implementor implementor)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(implementor);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 对 Abstraction 中的方法进行扩展</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refinedOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 忽略实现逻辑</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tRefinedAbstraction abstration = </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> RefinedAbstraction( <span class=\"keyword\">new</span> ConcreteImplementorA );</span><br><span class=\"line\">\t\tabstraction.operation();</span><br><span class=\"line\">\t\tabstraction.refinedOperation();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"桥接模式实战\"><a href=\"#桥接模式实战\" class=\"headerlink\" title=\"桥接模式实战\"></a>桥接模式实战</h4><ul>\n<li>View 的视图层级与执行真正的硬件绘制相关类之间的关系可看作是一种桥接模式。即模仿这种行为，我们可自定义控件以桥接的方式提供多种不同的实现机制。</li>\n<li>以进度条为例，我们可继承 View 类来实现进度条控件，自定义水平、垂直和圆形等不同形式的进度条。</li>\n<li><p>便于理解，本示例的 UML 类图如图 2-48 所示。</p>\n<p>  <img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-48.svg\" alt=\"进度条框架的UML类图\"></p>\n  <center>图 2-48 进度条框架的 UML 类图</center>\n\n</li>\n</ul>\n<h4 id=\"总结-20\"><a href=\"#总结-20\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>桥接模式，分离抽象与实现，其优点毋庸置疑，即灵活的扩展以及对客户来说透明的是实现。但不足之处在于运用桥接模式进行设计，是有一定难度的，需多加推敲与研究。</li>\n</ul>\n<h2 id=\"叁-MVC-与-MVP-模式\"><a href=\"#叁-MVC-与-MVP-模式\" class=\"headerlink\" title=\"叁 MVC 与 MVP 模式\"></a>叁 MVC 与 MVP 模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_3-2.svg\" alt=\"MVC模式的三个角色\"></p>\n<center>图 3-2 MVC模式的三个角色</center>\n\n<ul>\n<li><p>模型-视图-控制器 (Model-View-Controller，MVC)：是一种 <code>框架模式</code> ，而非设计模式。</p>\n<blockquote>\n<p>GOF 把 MVC 看作 3 种设计模式，即观察者模式、策略模式与组合模式的合体，也就是一个基于 <code>发布/订阅者模型</code> 的框架。</p>\n</blockquote>\n</li>\n<li><p>软件开发领域的 3 种级别重用：</p>\n<ul>\n<li>内部重用：同一应用中能公共使用的抽象块。</li>\n<li>代码重用：将通用模块组合成库或工具集，以便在多个应用和领域都能使用。</li>\n<li><p>应用框架重用：为专用领域提供通用的或者现成的基础结构，以获得最高级别的重用性。</p>\n<blockquote>\n<p>平时开发过程中，常见的框架模式除了 MVC 外，还有 MVVC、MTV、CBD、ORM 和 MVP。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>MVC 模式的优点：表现层与业务层分离实现，各司其职。若在实际项目中，即前端工程师专注界面的研发，后端工程师致力于业务逻辑。</p>\n</li>\n<li>MVC 模式的缺点：  <ul>\n<li>Model 和 View 严格分离，在调试应用程序时较困难。  </li>\n<li>小规模项目采用 MVC 模式反而显得工序更加繁琐。  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3><p><img src=\"/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_3-1.svg\" alt=\"MVP模式的三个角色\"></p>\n<center>图 3-1 MVP模式的三个角色</center>\n\n<ul>\n<li>数据存取-用户界面-交互中间人 (Model-View-Presenter，MVP)：分离显示层和逻辑层，它们之间通过接口进行通信，降低耦合。</li>\n<li><p>MVP 模式的三个角色</p>\n<ul>\n<li><strong>Presenter 交互中间人</strong>：View 和 Model 沟通的桥梁。它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务逻辑从 View 角色上抽离。</li>\n<li><strong>View 用户界面</strong>：在 Android 中，通常指 Activity、Fragment 或某个 View 控件，它含有一个 Presenter 成员变量，且 View 需实现以逻辑接口。将 View 上操作通过转交给 Presenter 实现，最后 Presenter 调用 View 逻辑接口将结果返回给 View。 </li>\n<li><strong>Model 数据的存取</strong>：主要提供数据的存取功能。Presenter 需通过 Model 层存储、获取数据。</li>\n</ul>\n</li>\n<li><p>区别于 MVC 模式：MVC 的主要特点  </p>\n<ul>\n<li>1) 用户可向 View 发送指令，再由 View 直接要求 Model 改变状态。  </li>\n<li>2) 用户可向 Controller 发送指令，再由 Controller 发送给 View。  </li>\n<li><p>3) Controller 起到时间路由的作用，同时业务逻辑都部署在 Controller 中。  </p>\n<blockquote>\n<p>View 可直接访问 Model，即 MVC 模式的耦合性还是相对较高的。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["Reading"],"tags":["UML","Android","Java","设计模式"]},{"title":"Python 3 快速上手教程","url":"/2018/09/life-is-short-we-need-python.html","content":"<ul>\n<li>本文以「 <a href=\"https://www.bilibili.com/video/av14184325\" target=\"_blank\" rel=\"noopener\">黑马 Python 从入门到精通</a> 」和「 <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">廖雪峰 Python 教程</a> 」为主线，学习之余，输出笔记。由于教程定位于入门，教授内容会有道不尽的地方，为此笔记还会补充视频中解释不详尽或遗漏的知识点。</li>\n<li>本文与「廖雪峰 Python 教程」的框架大体保持一致，没有特别的，就是科学的、优秀的方案得复用起来。大体框架编排如下（知识点细节见文章目录即可）：<ul>\n<li>Linux 基础，参考 <code>黑马 Python 从入门到精通教程</code>；  </li>\n<li>Python 基础，参考 <code>廖雪峰 Python 教程</code>；  </li>\n<li>项目实践，参考书籍 <code>利用 Python 进行数据分析</code> $^{[5]}$；  </li>\n</ul>\n</li>\n<li>最后，送上 Bruce Eckel 一句话 “Life is short,  you need python”。Python 的高效只有切身体验才会深有体会，期待您早日加入 Python 队伍。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"更新进度\"><a href=\"#更新进度\" class=\"headerlink\" title=\"更新进度\"></a>更新进度</h2><ul>\n<li>2018.11.05：更新 Python 基础部分内容「装饰器」；</li>\n<li>2018.10.14：更新 Python 基础部分内容「面向 I/O 编程」；</li>\n<li>2018.10.13：更新 Python 基础部分内容「错误/调试/测试」；</li>\n<li>2018.10.12：更新 Python 基础部分内容「面向对象高级编程」；</li>\n<li>2018.10.10：更新 Python 基础部分内容「模块、面向对象编程」；</li>\n<li>2018.09.21：更新 Python 基础部分内容「函数式编程」；</li>\n<li>2018.09.18：更新 Python 基础部分内容「语言基础、函数、高级特性」；</li>\n<li>2018.09.03：完成初稿，以及 Linux 基础部分内容；</li>\n</ul>\n<h2 id=\"参考书目\"><a href=\"#参考书目\" class=\"headerlink\" title=\"参考书目\"></a>参考书目</h2><ul>\n<li><code>Python 基础</code><ul>\n<li>📖 | 埃里克·马瑟斯.《 Python 编程：从入门到实践 》：<a href=\"https://book.douban.com/subject/26829016/\" target=\"_blank\" rel=\"noopener\">豆瓣评分</a></li>\n<li>📖 | Albert Sweigart.《 Python 编程快速上手 》：<a href=\"https://book.douban.com/subject/26836700/\" target=\"_blank\" rel=\"noopener\">豆瓣评分</a> </li>\n</ul>\n</li>\n<li><code>Python 进阶</code><ul>\n<li>📖 | David M. Beazley / Brian K. Jones.《 Python Cookbook 》：<a href=\"https://book.douban.com/subject/26381341/\" target=\"_blank\" rel=\"noopener\">中文版</a> | <a href=\"https://book.douban.com/subject/20491078/\" target=\"_blank\" rel=\"noopener\">英文版</a></li>\n<li>📖 | Luciano Ramalho. 《 Fluent Python 》：<a href=\"https://book.douban.com/subject/27028517/\" target=\"_blank\" rel=\"noopener\">中文版</a> | <a href=\"https://book.douban.com/subject/26278021/\" target=\"_blank\" rel=\"noopener\">英文版</a></li>\n</ul>\n</li>\n<li><code>Python 实践</code><ul>\n<li>📖 | Wes Mckinney.《 利用 Python 进行数据分析 》：<a href=\"https://book.douban.com/subject/25779298/\" target=\"_blank\" rel=\"noopener\">豆瓣评分</a></li>\n<li>📖 | Clinton W. Brownley.《 Python 数据分析基础 》：<a href=\"https://book.douban.com/subject/27100480/\" target=\"_blank\" rel=\"noopener\">豆瓣评分</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"教学资源\"><a href=\"#教学资源\" class=\"headerlink\" title=\"教学资源\"></a>教学资源</h2><ul>\n<li>📖 | 文章 | <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">廖雪峰. Python 3 教程. 2019.  liaoxuefeng.com</a></li>\n<li>📺 | 视频 | <a href=\"https://www.bilibili.com/video/av14184325\" target=\"_blank\" rel=\"noopener\">黑马程序员. Python 从入门到精通教程. 2017. bilibili.com</a></li>\n</ul>\n<h2 id=\"Linux-基础\"><a href=\"#Linux-基础\" class=\"headerlink\" title=\"Linux 基础\"></a>Linux 基础</h2><p>黑马的教程真的很基础向，生怕我们被拦在第一步，所以开篇讲解了一些 Linux  命令，方便 Python 环境配置之时有大概认知。</p>\n<h3 id=\"Linux-常用终端命令\"><a href=\"#Linux-常用终端命令\" class=\"headerlink\" title=\"Linux 常用终端命令\"></a>Linux 常用终端命令</h3><blockquote>\n<p>仅列举一些项目中常用的命令。</p>\n</blockquote>\n<ul>\n<li><p>LS 命令与通配符</p>\n<ul>\n<li><code>*</code>：代表任意个数个字符。</li>\n<li><code>?</code>：代表任意一个字符。</li>\n<li><code>[]</code>：表示可匹配字符组中任意一个。</li>\n<li><code>[abc]</code>：匹配 a、b、c 中的任意一个字符。</li>\n<li><p><code>[a-f]</code>：匹配从 a 到 f 范围内的任意一个字符。</p>\n<blockquote>\n<p>常使用 <code>ls -al</code> 显示当前文件目录所有文件的详细信息。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>CD 命令与切换目录</p>\n<ul>\n<li>相对路径：最前面不是 <code>/</code> 或 <code>~</code>，表示相对 <code>当前目录</code> 所在的目录位置。</li>\n<li><p>绝对路径：最前面是 <code>/</code> 或 <code>~</code>，表示从 <code>根目录 / Home 目录</code> 开始的具体目录位置。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 相对路径：返回上两级目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../../ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绝对路径：相当于 cd /Users/your username/</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Tree 命令：以树状结构显示文件目录结构，若 <code>tree -d</code> 则显示目录，不显示文件。</p>\n</li>\n<li><p>查看文件内容</p>\n<ul>\n<li><code>cat 文件名</code>：查看文件内容、创建文件、文件合并、追加文件内容等功能。</li>\n<li><code>more 文件名</code>：分屏显示文件内容。</li>\n<li><code>grep 搜索文本的文件名</code>：搜索文件文件内容。<ul>\n<li>例如搜索包含单词 “hello” 的文本，即 <code>grep &quot;hello&quot; sample.txt</code>。</li>\n<li>选项参数：<code>-n</code> 显示匹配行号；<code>-v</code> 显示不包含匹配文本的所有行；<code>-i</code> 忽略大小写。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Echo 命令与重定向</p>\n<ul>\n<li><code>echo</code> 命令：在终端中显示参数指定的文字。</li>\n<li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code>：<ul>\n<li><code>&gt;</code> 表示输出，会覆盖文件原有内容。</li>\n<li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾。</li>\n</ul>\n</li>\n<li><p><code>echo</code> 命令常结合 <code>重定向</code> 使用：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将字符串 \"Hello World\" 追加到</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World\"</span> &gt;&gt; sample.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>管道符 <code>|</code></p>\n<ul>\n<li>Linux 允许将一个命令的输出通过管道作为另一个命令的输入。</li>\n<li><p>ls 命令与 grep 命令的结合使用，如从 Home 目录下搜索包含 “python” 关键字的文件或者文件夹：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 Home 目录下搜索包含 \"python\" 关键字的文件或者文件夹</span></span><br><span class=\"line\">ls -al ~ | grep python</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Ifconfig 命令与 Ping 命令</p>\n<ul>\n<li><code>ifconfig</code> 命令可查看/配置计算机当前的网卡配置。</li>\n<li><p><code>ping</code> 命令一般用于检测当前计算机到目标计算机之间的网络是否畅通。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速查看网卡对应的 IP 地址</span></span><br><span class=\"line\">ifconfig | grep inet</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"远程登录和复制文件\"><a href=\"#远程登录和复制文件\" class=\"headerlink\" title=\"远程登录和复制文件\"></a>远程登录和复制文件</h3><h4 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h4><ul>\n<li>远程登录即通过 <code>SSH 客户端</code> 连接运行了 <code>SSH 服务器</code> 的远程机器上。</li>\n<li>SSH 是目前较可靠，专为 <code>远程登录会话</code> 和 <code>其他网络服务</code> 提供安全性协议。<ul>\n<li>有效防止远程管理过程中的信息泄露。</li>\n<li>对所有传输的数据进行加密，也能防止 DNS 欺骗和 IP 欺骗。</li>\n</ul>\n</li>\n<li>SSH 客户端是一种使用 <code>Secure Shell</code> 协议连接到远程计算机的软件程序。</li>\n<li>SSH 客户端简单使用访问服务器：<code>ssh [-p port] user@remote</code><ul>\n<li><code>user</code> 是远程机器上的用户名。</li>\n<li><code>remote</code> 是远程机器地址，可为 IP、域名或别名。</li>\n<li><code>port</code> 是 SSH 服务器监听的端口，若不指定端口默认为 22。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><ul>\n<li><p>SCP 即 <code>Secure Copy</code>，是一个在 Linux 下用来进行 <code>远程拷贝文件</code> 的命令。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从本地复制文件到远程机器桌面上</span></span><br><span class=\"line\">scp -P sample.py user@remote:Desktop/sample.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从远程机器桌面上复制文件夹到本地上</span></span><br><span class=\"line\">scp -P port -r user@remote:Desktop/sample ~/Desktop/sample</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"SSH-高级用法\"><a href=\"#SSH-高级用法\" class=\"headerlink\" title=\"SSH 高级用法\"></a>SSH 高级用法</h4><h5 id=\"免密码登录\"><a href=\"#免密码登录\" class=\"headerlink\" title=\"免密码登录\"></a>免密码登录</h5><p>免密码登录：即客户端访问服务端时，需要密码验证身份登录。</p>\n<ul>\n<li>Step.01. 配置公钥：执行 <code>ssh-keygen</code> 即生成 SSH 密钥。</li>\n<li><p>Step.02. 上传公钥到服务器：执行 <code>ssh-copy-id -p port user@remote</code>，让远程服务器记住我们的 <code>公钥</code>。</p>\n<blockquote>\n<p>1) 有关 SSH 配置信息都保存在 <code>/Home/your username/.ssh</code> 目录下。<br>2) 免密登录使用的是非对称加密算法 ( RSA )，即使用公钥加密的数据，需要使用私钥解密；使用私钥加密的数据，需要使用公钥解密。若有兴趣了解 <code>RSA 算法</code> 的原理及计算，可参考引用文章 [1]、[2]。</p>\n</blockquote>\n<p>  <img src=\"/images/illustration/Programme/2018/09/life-is-short-we-need-python_5-2-1.png\" alt=\"图5-2-1免密码登录实现原理图\"></p>\n  <center>图 5-2-1 免密码登录实现原理图</center>\n\n</li>\n</ul>\n<h5 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h5><p>配置别名：每次输入 <code>ssh -p port user@remote</code> 是非常繁琐重复的工作，配置别名的方式以替代上述这么一串命令代码。</p>\n<ul>\n<li><p>在 <code>/.ssh/config</code> 文件下追加以下内容 ( 需建立 Config 文件 )：</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host mac</span><br><span class=\"line\">HostName <span class=\"number\">192.168</span>.<span class=\"number\">10.1</span></span><br><span class=\"line\">User user</span><br><span class=\"line\">Port <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>命令输入 <code>ssh mac</code> 即可实现远程登录操作 ( SCP 同样原理 )。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若配置别名后，待验证命令的格式:</span></span><br><span class=\"line\"><span class=\"comment\"># 是否为: scp -r ~/Desktop/Sample mac:Desktop/Sample</span></span><br><span class=\"line\"><span class=\"comment\"># 还是: scp -P 22 -r ~/Desktop/Sample mac:Desktop/Sample</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"用户和权限\"><a href=\"#用户和权限\" class=\"headerlink\" title=\"用户和权限\"></a>用户和权限</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li>在 Linux 中，可指定每一用户针对不同的文件或者目录的不同权限。</li>\n<li>对文件 / 目录包含的权限有：</li>\n</ul>\n<center>表 5-3-1 文件/目录权限属性说明</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">权限</th>\n<th style=\"text-align:center\">英文</th>\n<th style=\"text-align:center\">缩写</th>\n<th style=\"text-align:center\">数字代号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读</td>\n<td style=\"text-align:center\">read</td>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写</td>\n<td style=\"text-align:center\">write</td>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">执行</td>\n<td style=\"text-align:center\">excute</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"组\"><a href=\"#组\" class=\"headerlink\" title=\"组\"></a>组</h4><ul>\n<li>为方便用户管理，提出组的概念。在实际开发中，可预先针对组设置好权限，然后将不同的用户添加到对应组中，从而不用依次为每个用户设置权限。</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">权限名称</th>\n<th style=\"text-align:center\">权限参数</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">user</td>\n<td style=\"text-align:center\">u</td>\n<td style=\"text-align:center\">文件的拥有者，一般指当前用户</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">group</td>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:center\">文件所属的群组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">other</td>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:center\">其他用户</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"LL-命令\"><a href=\"#LL-命令\" class=\"headerlink\" title=\"LL 命令\"></a>LL 命令</h4><ul>\n<li>LL 命令即 LS 命令的扩展用法 <code>ls -al</code>。</li>\n<li>LL 命令可查看文件夹下文件的详细信息，从左往右依次是：<ul>\n<li>权限：第一个字符是 <code>d</code>，表示目录；<code>-</code> 表示文件；</li>\n<li>硬链接数：通俗理解即有多少种方式可访问到当前目录 / 文件；</li>\n<li>拥有者：当前用户；</li>\n<li>组：当前用户所属的组；</li>\n<li>文件大小，修改时间，文件 / 目录名称.</li>\n</ul>\n</li>\n</ul>\n<center>表 5-3-2 \"ls -al\" 查看文件的权限信息说明</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">目录</th>\n<th style=\"text-align:center\">拥有者权限</th>\n<th style=\"text-align:center\">组权限</th>\n<th style=\"text-align:center\">其他用户权限</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">r w -</td>\n<td style=\"text-align:center\">r w -</td>\n<td style=\"text-align:center\">r - -</td>\n<td style=\"text-align:center\">文件权限示例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:center\">r w x</td>\n<td style=\"text-align:center\">r w x</td>\n<td style=\"text-align:center\">r - x</td>\n<td style=\"text-align:center\">目录权限示例</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Chmod-命令\"><a href=\"#Chmod-命令\" class=\"headerlink\" title=\"Chmod 命令\"></a>Chmod 命令</h4><ul>\n<li><p>Chmod 命令：可修改 <code>用户/组</code> 对 <code>文件/目录</code> 的权限。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一次性修改拥有者/组的权限</span></span><br><span class=\"line\">chmod +/-rwx 文件名/目录名</span><br><span class=\"line\"><span class=\"comment\"># 一次性定制给某拥有者/组赋予某文件或者目录权限</span></span><br><span class=\"line\"><span class=\"comment\"># 给予当前用户及所属群组对于该文件可读、可写、可执行权限</span></span><br><span class=\"line\">chmod ug=rwx 文件名</span><br><span class=\"line\"><span class=\"comment\"># 给予当前用户及所属群组对于该目录下所有文件可读、可写、可执行权限</span></span><br><span class=\"line\">chmod ug=rwx -R 目录名</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Sudo-命令\"><a href=\"#Sudo-命令\" class=\"headerlink\" title=\"Sudo 命令\"></a>Sudo 命令</h4><ul>\n<li><p>Sudo 命令：使用预设 ( root, 系统管理员 ) 的身份来执行命令。</p>\n<blockquote>\n<p>Linux 系统中，通常使用标准用户登录及使用系统，通常 <code>sudo</code> 命令临时获得权限用于系统的维护与和管理。在执行一些模块的安装过程或者配置过程中，你会经常用到它的。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"系统信息相关命令\"><a href=\"#系统信息相关命令\" class=\"headerlink\" title=\"系统信息相关命令\"></a>系统信息相关命令</h3><ul>\n<li>查询时间和日期<ul>\n<li><code>date</code>：查看系统时间。</li>\n<li><code>cal</code>：查看当月日历，<code>cal -y</code> 查看当年的日历。</li>\n</ul>\n</li>\n<li>磁盘和目录空间<ul>\n<li>df：<code>df -h</code>，Disk Free 显示磁盘剩余空间。</li>\n<li>du：<code>du -h</code>，Disk Usage 显示目录下的文件大小。</li>\n</ul>\n</li>\n<li><p>进程信息</p>\n<ul>\n<li>ps：<code>ps aux</code>，即 Process Status，查看进程的详细状况。</li>\n<li>top：动态显示运行中的进程并排序。</li>\n<li><p>kill：<code>kill [-9] 进程代号</code>，<code>-9</code> 表示强行终止，终止指定代号的进程。</p>\n<blockquote>\n<p>使用 <code>kill</code> 命令时，最好终止当前用户开启的进程，而不是终止 <code>root</code> 身份开启的进程。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他终端命令\"><a href=\"#其他终端命令\" class=\"headerlink\" title=\"其他终端命令\"></a>其他终端命令</h3><h4 id=\"查找文件\"><a href=\"#查找文件\" class=\"headerlink\" title=\"查找文件\"></a>查找文件</h4><p>查找文件：<code>find</code> 命令功能非常强大，通常在特定目录下搜索符合条件的文件。</p>\n<ul>\n<li>若省略路径，表示在当前文件夹下查找。</li>\n<li><p><code>find</code> 命令可结合 <code>通配符</code> 一起使用。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find [路径] -name <span class=\"string\">\"*.py\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h4><p>软链接：建立文件的软链接，通俗理解即 PC/MacOS 上的 <code>快捷方式</code>。</p>\n<ul>\n<li>源文件要使用绝对路径，即便于移动链接文件 (快捷方式) 仍能正常使用。</li>\n<li><p>没有 <code>-s</code> 选项是建立一个硬链接文件。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s 被链接的源文件 快捷方式的名称</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在 Linux 中，文件名和文件的数据是分开储存的。</p>\n<p>  <img src=\"/images/illustration/Programme/2018/09/life-is-short-we-need-python_5-5-1.png\" alt=\"图5-5-1软、硬链接访问文件数据\"></p>\n  <center>图 5-5-1 软、硬链接访问文件数据</center>\n\n</li>\n</ul>\n<h4 id=\"打包压缩\"><a href=\"#打包压缩\" class=\"headerlink\" title=\"打包压缩\"></a>打包压缩</h4><ul>\n<li><p><code>tar</code> 是 Linux 中最常用的备份工具 ( <strong>打包并不压缩</strong> )，其命令格式如下：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选项 c：生成档案文件 (.tar)</span></span><br><span class=\"line\"><span class=\"comment\"># 选项 x：解开档案文件</span></span><br><span class=\"line\"><span class=\"comment\"># 选项 v：列出归档/解档的详细过程，显示进程</span></span><br><span class=\"line\"><span class=\"comment\"># 选项 f：指定档案文件名称，选项 f 后应该紧跟 .tar 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打包文件：打包放于同一目录下</span></span><br><span class=\"line\">tar -cvf 打包文件.tar. 被打包文件路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解包文件</span></span><br><span class=\"line\">tar - xvf 打包文件 [-C 目标路径]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>tar</code> 与 <code>gzip</code> 命令结合可实现文件 <code>打包和压缩</code>，即 <code>tar</code> 只负责打包文件， <code>gzip</code> 负责压缩文件。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩文件：压缩文件放于同一目录下</span></span><br><span class=\"line\">tar - zcvf 打包文件.tar.gz 被压缩文件路径</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压缩文件</span></span><br><span class=\"line\">tar -zxvf 打包文件.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压缩文件到指定路径</span></span><br><span class=\"line\">tar -zxvf 打包文件.tar.gz [-C 目标路径]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Python-基础\"><a href=\"#Python-基础\" class=\"headerlink\" title=\"Python 基础\"></a>Python 基础</h2><h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><h4 id=\"Python-编程范式\"><a href=\"#Python-编程范式\" class=\"headerlink\" title=\"Python 编程范式\"></a>Python 编程范式</h4><ul>\n<li>Python 即是面向对象也是面向过程的语言 ：<ul>\n<li>面向对象：由 <code>数据</code> 和 <code>功能组合而成的对象</code> 构建而成的程序。</li>\n<li>面向过程：由 <code>过程</code> 或仅仅是 <code>可重用代码</code> 构建起来的程序。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Python-应用场景\"><a href=\"#Python-应用场景\" class=\"headerlink\" title=\"Python 应用场景\"></a>Python 应用场景</h4><ul>\n<li>操作系统管理：服务器运维的自动化脚本。</li>\n<li>数据科学计算：Pytorch、Tensorflow、Sklearn、NumPy、SciPy、Matplotlib 等。</li>\n<li>Web端程序：<ul>\n<li>mod_wsgi 模块：Apache 可运行用 Python 编写 Web 程序。</li>\n<li>常见 Web 框架：Django、TurboGears、Web2py、Zope 等。</li>\n</ul>\n</li>\n<li>服务端程序：Twisted ( 支持异步网络编程和多数标准的网络协议，包括客户端和服务端 )。</li>\n<li>桌面端程序：PyQt、PySide、wxPython、PyGTK 等。</li>\n</ul>\n<h4 id=\"Python-解释器\"><a href=\"#Python-解释器\" class=\"headerlink\" title=\"Python 解释器\"></a>Python 解释器</h4><ul>\n<li><p>当我们编写 Python 代码时，我们得到的是一个包含 Python 代码的以 <code>.py</code> 为扩展名的文本文件。要运行代码，就需要 Python 解释器去执行 <code>xxx.py</code> 文件。</p>\n</li>\n<li><p>CPython  </p>\n<ul>\n<li>当我们从 Python <a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">官方网站下载</a> 并安装好 Python 3.x 后，我们就直接获得了一个官方版本的解释器：<code>CPython</code> ( C 语言开发的 )。</li>\n<li>在命令行下运行  <code>python</code> 就是启动 CPython 解释器。</li>\n</ul>\n</li>\n<li><p>iPython   </p>\n<ul>\n<li>iPython 是基于 CPython 之上的一个交互式解释器，即 iPython 只是在交互方式上有所增强，但是执行 Python 代码的功能和 CPython 是完全一样的。</li>\n<li>在命令行下运行  <code>ipython</code> 即可启动 iPython 交互式解释器。</li>\n<li><p>CPython 用 <code>&gt;&gt;&gt;</code> 作为提示符，而 IPython 用 <code>In [序号]:</code> 作为提示符。</p>\n<p><img src=\"/images/illustration/Programme/2018/09/life-is-short-we-need-python_6-1-1.jpg\" alt=\"Python与iPython提示符表现形式\"></p>\n<center>CPython 与 iPython 提示符表现形式</center>\n</li>\n</ul>\n</li>\n<li><p>PyCharm：工欲善其事，必先利其器。为帮助开发者更便捷、更高效来开发 Python 程序，一款集成开发编辑器 ( IDE ) 显得格外重要。IDE 除了快捷键、插件外，重要的是它还支持 <code>调试程序</code>。</p>\n<blockquote>\n<p>当然，支持 Python 程序开发的 IDE 还有很多优秀的产品：如：<a href=\"http://marketplace.eclipse.org/content/pydev-python-ide-eclipse\" target=\"_blank\" rel=\"noopener\">Eclipse with PyDev</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><ul>\n<li>新建并运行 python 程序：<code>vi python_sample.py</code> 开始编写程序；通过 <code>python python_sample.py</code> 执行程序。</li>\n<li><p>以下为简单 Python 示例：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># \"#!\" 称为 Sha-bang，解释伴随行，此处用于指明执行脚本的解释器</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># python.py 文件若包含中文字符，Python2 要在文件头加入以下语句，Python3 是默认支持的：</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding=utf-8 -*-\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 是大小写敏感的</span></span><br><span class=\"line\">a = 100</span><br><span class=\"line\">A = 200</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> a &gt;= 100:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(-A)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h3><h4 id=\"代码注释\"><a href=\"#代码注释\" class=\"headerlink\" title=\"代码注释\"></a>代码注释</h4><ul>\n<li><p>行注释、块注释：行注释的风格与 Linux 中 Shell 脚本的注释相同，即以 <code>#</code> 开头的注释；块注释使用三个单引号 <code>&#39;</code> 或三个双引号 <code>&quot;</code> 包裹实现。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 行注释</span></span><br><span class=\"line\"><span class=\"comment\"># line 1...</span></span><br><span class=\"line\"><span class=\"comment\"># line 2...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">' 单引号块注释</span></span><br><span class=\"line\"><span class=\"string\">' line 1</span></span><br><span class=\"line\"><span class=\"string\">' line 2</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\" 双引号块注释</span></span><br><span class=\"line\"><span class=\"string\">\" line 1</span></span><br><span class=\"line\"><span class=\"string\">\" line 2</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><ul>\n<li><code>整型</code>：可处理 <code>任意大小</code> 的整数，当然包括 <code>负整数</code>。例如 0，1，100，-8080 等。</li>\n<li><code>浮点型</code>：即含有小数点的数，如 1.23，1.23e9 ( 1.23x10$^9$ )，1.23e-5 ( 1.23x10$^{-5}$ )<ul>\n<li>整数和浮点数在计算机内部存储的方式是不同的。  </li>\n<li>整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差。</li>\n</ul>\n</li>\n<li><code>字符型</code>：以单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> ( 表示方式不同而已 ) 括起来的任意文本。例如 <code>&#39;(1+2)\\%3 == 0&#39;</code>，或者 <code>&quot;The &#39;a&#39; is a lowercase letter of &#39;A&#39;&quot;</code>。</li>\n<li><code>布尔型</code>：True / Flase 两种值。<ul>\n<li>布尔运算：and、or、not，例如 <code>(3 &gt; 2) and (1 &gt; 2)</code>，输出 Flase。</li>\n</ul>\n</li>\n<li><code>空值</code>：None，注意 None 不能理解为 0，因为 0 是有意义的，而 None 是一个特殊的空值。</li>\n<li>Python 中数据类型是没有大小限制的，若想定义无限大，可定义为无限大，即 <code>inf</code>。</li>\n</ul>\n<h4 id=\"常量变量\"><a href=\"#常量变量\" class=\"headerlink\" title=\"常量变量\"></a>常量变量</h4><h5 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h5><ul>\n<li>常量：例如定义 <code>PI = 3.14159</code>，其实际也是变量，只是约定俗成罢了。这里 PI 可被重新赋值覆盖。</li>\n</ul>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><ul>\n<li>形如 <code>param = value</code> 的形式赋予变量值，但不用赋变量数据类型。</li>\n<li><p>变量的输入与输出：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># input() 默认输出 String 类型</span></span><br><span class=\"line\">high = int( input(Please enter your high:) )</span><br><span class=\"line\">print(<span class=\"string\">\"Your high is: %d\"</span> % high)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4><ul>\n<li>一个字节，表示的最大的整数就是 255，即十进制为 255，二进制为 <code>11111111</code>。若想表示更大的整数则需要更多的字节。</li>\n<li><code>ASCII</code>：127 个字符编码，即大小写字母、数字及特殊字符。例如大些字母 A，对应的 ASCII 为 65。<ul>\n<li>但处理中文显然一个字节是不够的（至少两个字节），且还不能与 ASCII 编码冲突，所以中国制定了<code>GB2312</code> 编码。  </li>\n<li>那么，问题是世界有上百种语言，日文编到 <code>Shift_JIS</code> 、韩文编到 <code>Euc-kr</code>，各国的标准不可避免会出现冲突，特别是在多语言混合文本中，显示将出现乱码。   </li>\n<li>为此，Unicode 编码应运而生 $^{[3]}$，Unicode把所有语言都统一到一套编码中，这样就不会再有乱码问题了。</li>\n</ul>\n</li>\n<li><code>Unicode</code>：2 字节及以上。为节约空间，可把 Unicode 编码转化为 “可变长编码” 的 UTF-8 编码。</li>\n<li><code>UTF-8</code>：根据数字大小编写 1 ~ 6 字节，英文字母 1 字节，汉字 3 字节（生僻字符用到 4 ~ 6 字节）。</li>\n<li><p>ACSII、Unicode 与 UTF-8 的关系</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th width=\"10%\">字符</th>\n      <th width=\"20%\">ASCII</th>\n      <th width=\"30%\">Unicode</th>\n      <th width=\"50%\">UTF-8</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>A</td>\n      <td>0100 0001</td>\n      <td>00000000 01000001</td>\n      <td>01000001</td>\n  </tr>\n  <tr>\n      <td>中</td>\n      <td>--</td>\n      <td>01001110 00101101</td>\n      <td>11100100 10111000 1010 1101</td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n<li><p>启示：计算机系统通用的字符编码工作方式，如下图所示。</p>\n<ul>\n<li>用记事本编辑时，从文件读取的 UTF-8 字符被转换为 Unicode 字符到内存里，当保存的时再把 Unicode 转换为 UTF-8 保存到文件；</li>\n<li><p>浏览网页时，服务器会把动态生成的 Unicode 内容转换为 UTF-8 再传输到浏览器。</p>\n<blockquote class=\"blockquote-center\"><p><img src=\"/images/illustration/Programme/2018/09/life-is-short-we-need-python_6-2-1.png\" alt> 计算机系统通用的字符编码工作方式</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符串-列表-元组-字典\"><a href=\"#字符串-列表-元组-字典\" class=\"headerlink\" title=\"字符串/列表/元组/字典\"></a>字符串/列表/元组/字典</h4><h5 id=\"字符串-Str\"><a href=\"#字符串-Str\" class=\"headerlink\" title=\"字符串 Str\"></a>字符串 Str</h5><ul>\n<li><p>Python 3 中，字符串是以 Unicode 编码的。</p>\n<ul>\n<li>Python 的字符串类型为 String，内存中以 Unicode 编码表示。若在网络中传输则可以把 String 类型的数据变成以字节为单位的 <code>Bytes</code>。</li>\n<li><p>encode 与 decode 函数：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 英文字符可用 ASCII 编码 Bytes</span></span><br><span class=\"line\"><span class=\"string\">\"ABC\"</span>.encode(<span class=\"string\">\"ascii\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 中文字符可用 UTF-8 编码</span></span><br><span class=\"line\"><span class=\"comment\"># 中文编码超过了 ASCII 编码的范围，强制使用 ASCII 编码会抛出异常</span></span><br><span class=\"line\"><span class=\"string\">\"中国\"</span>.encode(<span class=\"string\">\"utf-8\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>常用数据类型转换：</p>\n  <table>\n  <thead align=\"center\">\n  <tr>\n      <th width=\"20%\">函数格式</th>\n      <th width=\"30%\">使用示例</th>\n      <th width=\"50%\">描述</th>\n  </tr>\n  </thead>\n  <tbody align=\"center\">\n  <tr>\n      <td>int(x [,base])</td>\n      <td>int(\"8\")<br>int('A', base = 16)</td>\n      <td>可转换的包括 String 类型和其他数字类型，但高精度数字转换会丢失精度</td>\n  </tr>\n  <tr>\n      <td>float(x)</td>\n      <td>float(1)<br>float(\"1\")</td>\n      <td>可转换 String 和其他数字类型，不足的位数用 0 补齐，例如 1 会变成 1.0</td>\n  </tr>\n  <tr>\n      <td>comple(real,imag)</td>\n      <td>complex(\"1\")<br>complex(1,2)</td>\n      <td>第一个参数可以是 String 或者数字，第二个参数只能为数字类型，第二个参数没有时默认为 0</td>\n  </tr>\n  <tr>\n      <td>str(x)</td>\n      <td>str(1)</td>\n      <td>将数字转化为 String</td>\n  </tr>\n  <tr>\n      <td>repr(x)</td>\n      <td>repr(Object)</td>\n      <td>返回一个对象的 String 格式</td>\n  </tr>\n  <tr>\n      <td>eval(str)</td>\n      <td>eval(\"12+23\")</td>\n      <td>执行一个字符串表达式，返回计算的结果，如例子中返回 35</td>\n  </tr>\n  <tr>\n      <td>tuple(seq)</td>\n      <td>tuple((1,2,3,4))</td>\n      <td>参数可以是元组、列表或字典。若为字典时，返回字典的 key 组成的集合</td>\n  </tr>\n  <tr>\n      <td>list(s)</td>\n      <td>list((1,2,3,4))</td>\n      <td>将序列转变成一个列表，参数可为元组、字典、列表。若为字典时，返回字典的 key 组成的集合</td>\n  </tr>\n  <tr>\n      <td>set(s)</td>\n      <td>set(['b', 'r', 'u', 'o', 'n'])<br>set(\"asdfg\")</td>\n      <td>将一个可迭代对象转变为可变集合且去重复，返回结果可以用来计算差集 x - y、并集 x l y、交集 x & y</td>\n  </tr>\n  <tr>\n      <td>frozenset(s)</td>\n      <td>frozenset([0, 1, 2, 3, 4, 5])</td>\n      <td>将一个可迭代对象转变成不可变集合，参数为元组、字典、列表等</td>\n  </tr>\n  <tr>\n      <td>chr(x)</td>\n      <td>chr(0x30)</td>\n      <td>chr() 用一个范围在 range (0～255) 内的整数作参数，返回一个对应的字符。<br>返回值是当前整数对应的 ASCII 字符。</td>\n  </tr>\n  <tr>\n      <td>ord(x)</td>\n      <td>ord('a')</td>\n      <td>返回对应的 ASCII 数值，或者 Unicode 数值</td>\n  </tr>\n  <tr>\n      <td>hex(x)</td>\n      <td>hex(12)</td>\n      <td>把整数 x 转换为 16 进制字符串</td>\n  </tr>\n  <tr>\n      <td>oct(x)</td>\n      <td>oct(12)</td>\n      <td>把整数 x 转换为 8 进制字符串</td>\n  </tr>\n  </tbody>\n  </table>\n</li>\n<li><p>字符串输入和输出：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">\"Enter your name:\"</span>)</span><br><span class=\"line\">age = int( input(<span class=\"string\">\"Enter your age:\"</span>) )</span><br><span class=\"line\">print(<span class=\"string\">\"name: %s, age: %d\"</span> % (name, age))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>组成字符串的方式：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">str2 = <span class=\"string\">\"World\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># str3 组装成 \"HelloWorld\"</span></span><br><span class=\"line\">str3 = str1 + str2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 组装成 \"===HelloWorld===\"，此方式常用拼凑字符串</span></span><br><span class=\"line\"><span class=\"string\">\"===%s===\"</span> % (str1 + str2)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>字符串下标与取值：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">array = <span class=\"string\">\"ABCDE\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print( array[<span class=\"number\">0</span>] ) <span class=\"comment\"># 输出 A</span></span><br><span class=\"line\">print( array[<span class=\"number\">4</span>] ) <span class=\"comment\"># 输出 E</span></span><br><span class=\"line\">print( array[<span class=\"number\">-1</span>] ) <span class=\"comment\"># 输出 E</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切片</span></span><br><span class=\"line\">print( array[<span class=\"number\">0</span>:<span class=\"number\">3</span>] ) <span class=\"comment\"># 输出 ABC</span></span><br><span class=\"line\">print( array[<span class=\"number\">0</span>:<span class=\"number\">-1</span>] ) <span class=\"comment\"># 输出 ABCD</span></span><br><span class=\"line\">print( array[<span class=\"number\">0</span>:] ) <span class=\"comment\"># 输出 ABCDE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即以 2 为步进距离，从下标 0 开始取值至末尾，输出 ACE</span></span><br><span class=\"line\">print( array[<span class=\"number\">0</span>::<span class=\"number\">2</span>] )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即以 -1 为步进距离，从末尾开始取值至开端，逆序输出</span></span><br><span class=\"line\">print( array[<span class=\"number\">-1</span>::<span class=\"number\">-1</span>] )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>字符串常见操作</p>\n<ul>\n<li><p><code>find(s)</code> 与 <code>index(s)</code>：从目标字符串中寻找子串，找到会返回子串的起始下标；若找不到则返回 <code>-1</code>。index() 找到目标的情况和 find() 相同，找不到目标则会抛出异常。</p>\n<blockquote>\n<p>当然还有 rfind(s) 和 rindex()，即从右端开始寻找子字符串。</p>\n</blockquote>\n</li>\n<li><p><code>count(str, start, end)</code>：即在目标字符串 <code>myStr</code>，求得 <code>str</code> 在位置 start 和 end 之间出现的次数。</p>\n<blockquote>\n<p>例如：<code>myStr.count(str, start = 0, end = len(myStr))</code>，</p>\n</blockquote>\n</li>\n<li><p><code>replace(原始字符串, 目标字符串)</code> 或 <code>replace(原始字符串, 目标字符串，替代次数)</code>：</p>\n<blockquote>\n<p>例如：<code>myStr.replace(&quot;world&quot;, &quot;python&quot;)</code></p>\n</blockquote>\n</li>\n<li><p><code>split(str)</code>：根据 <code>str</code> 把原字符串切开。</p>\n</li>\n<li><p><code>splitlines(str)</code>：将字符串中的每一行切割开来。</p>\n<blockquote>\n<p>re.split(正则表达式, 目标字符串)，根据正则表达式切割字符。</p>\n</blockquote>\n</li>\n<li><p><code>capitalize()</code> 与 <code>title()</code>：前者是把字符串中的第一个字符转为大写字母，后者是把字符串中每个单词的首字母转为大写。</p>\n</li>\n<li><code>startsWith(str)</code> 与 <code>endsWith(str)</code>：前者是判断目标字符是否以字符串 str 开头，后者则是判断目标字符是否以字符串 str 结尾。</li>\n<li><code>lower()</code> 与 <code>upper()</code>：前者是将目标字符串全转为小写字母，后者是将字符串全转为大写字母。</li>\n<li><code>rstrip()</code>、<code>lstrip()</code> 与 <code>strip()</code>：去除字符串左边、右边或者两端的空白字符。</li>\n<li><code>partition(str)</code>：以 str 为中心，将目标字符串划分成左、中 ( str 本身 )、右三部分的字符串。</li>\n<li><code>isalpha()</code>、<code>isdigit()</code> 与 <code>isalnum()</code>：分别用于判断是否为字符，是否为数字和是否全为数字。</li>\n<li><p><code>join()</code>：例如 <code>str.join(array)</code>，即使用 str 将列表 array 的内容拼接起来。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">array = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]</span><br><span class=\"line\">str1 = <span class=\"string\">'&amp;'</span></span><br><span class=\"line\"><span class=\"comment\"># str2 被组装成 A&amp;B&amp;C，即将 str1 组装到字符数组中</span></span><br><span class=\"line\">str2 = str1.join(array)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"列表-List\"><a href=\"#列表-List\" class=\"headerlink\" title=\"列表 List\"></a>列表 List</h5><ul>\n<li>定义一个列表：<code>list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code> 或者 <code>student = [&#39;lucy&#39;, 25, &#39;female&#39;]</code>。</li>\n<li>列表的增删改查 ：<ul>\n<li>增加：<br>1) 在列表尾部追加元素：<code>list.append(&#39;D&#39;)</code><br>2) 自定义插入位置：<code>list.insert(位置，添加的内容)</code><br>3) 往一列表中添加另一个列表：<code>student + list</code> 或者 <code>student.extend(list)</code>  </li>\n<li>删除：<br>1) 出栈：<code>list.pop()</code> / 入栈：<code>list.append()</code><br>2) 根据下标来删除：<code>del list[0]</code>，清空列表 <code>del list[0::1]</code>  </li>\n<li>查询：<br>1) <code>(&#39;B&#39; in list)</code> 结果为 Ture<br>2) <code>(&#39;D&#39; not in list)</code> 结果为 Ture</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组 Tuple\"></a>元组 Tuple</h5><ul>\n<li><p>有序列表元组 ( Tuple )，与 List 不同，<code>Tuple 一旦初始化就不能修改</code>。</p>\n<blockquote>\n<p>定义一些常量参数时可用 Tuple。</p>\n</blockquote>\n</li>\n<li><p>定义：<code>tuples = (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)</code>。</p>\n</li>\n<li>歧义：<code>tuple = (1)</code> 相当于 <code>tuple = 1</code>；<code>tuple(-1, )</code> 才是元组列表。</li>\n<li><p>事实： Tuple 中存储的是 <code>引用</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tuple = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>])</span><br><span class=\"line\">tuple[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'X'</span></span><br><span class=\"line\">tuple[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'Y'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 事实上，'A' 和 'B' 被改变为 'X' 和 'Y'</span></span><br><span class=\"line\"><span class=\"comment\"># 即 Tuple 定义是不变的，只是 Tuple 上存储的 List 为引用</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>再议不可变对象：replace() 并没有改变字符串的内容，我们理解 <code>str</code> 是变量，<code>abc</code> 是字符串对象。replace() 相当于创建了新的字符串对象 <code>Abc</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'abc'</span></span><br><span class=\"line\">print( str.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>) ) <span class=\"comment\"># 输出 Abc</span></span><br><span class=\"line\">print(str) <span class=\"comment\"># 输出 abc</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"字典-Dict\"><a href=\"#字典-Dict\" class=\"headerlink\" title=\"字典 Dict\"></a>字典 Dict</h5><ul>\n<li>字典 ( Dict )，其他语言中又称 Map，使用键值 ( key-value ) 存储。</li>\n<li>定义：<code>dict = {&#39;name&#39;: &#39;Lucy&#39;, &#39;age&#39;：25, &#39;gender&#39;: &#39;female}</code>。</li>\n<li>字典的增删改查：<ul>\n<li>增加：<code>dict[&#39;high&#39;] = 175</code>，若对应键值存在即修改的效果。</li>\n<li>删除：<code>dict.pop(&#39;high&#39;)</code> / <code>del dict[&#39;high&#39;]</code></li>\n<li>查询：<code>dict.get(&#39;name&#39;)</code>，若找不到对应键值则抛出异常。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"集合-Set\"><a href=\"#集合-Set\" class=\"headerlink\" title=\"集合 Set\"></a>集合 Set</h5><ul>\n<li>Set 与 Dict 类似，是一组 key 的集合，但不存储 value。</li>\n<li><p>Set 可看成数学意义上的 <code>无序</code> 和 <code>无重复</code> 元素的集合。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print( set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]) ) <span class=\"comment\"># 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h4><ul>\n<li><p>标准条件判断语句：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;condition <span class=\"number\">1</span>&gt;:</span><br><span class=\"line\">    &lt;action <span class=\"number\">1</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;condition <span class=\"number\">2</span>&gt;:</span><br><span class=\"line\">    &lt;action <span class=\"number\">2</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> &lt;condition <span class=\"number\">3</span>&gt;: <span class=\"comment\"># if 嵌套</span></span><br><span class=\"line\">        &lt;action <span class=\"number\">3</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>三元表达式：在 Python 中，可将 <code>if-else</code> 语句放到一行里，语法如下：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># true-expr 或 false-expr 可以是任何 Python 代码</span></span><br><span class=\"line\">value = true-expr <span class=\"keyword\">if</span> condition <span class=\"keyword\">else</span> false-expr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上述三元表达式等同于标准条件判断语句的写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> condition:</span><br><span class=\"line\">    value = true-expr</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    value = false-expr</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h4><ul>\n<li><p><code>For</code> 循环与 <code>While</code> 循环</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For 循环</span></span><br><span class=\"line\">names = [<span class=\"string\">'LiMing'</span>, <span class=\"string\">'ZhangWei'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names</span><br><span class=\"line\">    print(name)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># While 循环</span></span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>( i&lt;<span class=\"number\">100</span> ):</span><br><span class=\"line\">    sum += <span class=\"number\">1</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Break</code> 与 <code>Continue</code></p>\n<ul>\n<li>Break：终止 ( 跳出 ) 循环。</li>\n<li>Continue：中断本次循环。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h4><ul>\n<li><p>定义函数使用 <code>def</code> 语句，依次写 <code>函数名</code>、<code>括号</code>、( 还可以包括 <code>参数</code> )、<code>冒号</code>。然后是 <code>函数体</code> ( 需缩进编写 )。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">FuncName</span><span class=\"params\">(param)</span>:</span></span><br><span class=\"line\">    &lt;action&gt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [返回参数]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>空函数：模块化设计，即先架构后编码。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">FuncName</span><span class=\"params\">(param)</span>:</span>   </span><br><span class=\"line\">    <span class=\"keyword\">pass</span> <span class=\"comment\"># 占位符：暂不书写代码逻辑</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>返回多个值：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    x = x + <span class=\"number\">1</span></span><br><span class=\"line\">    y = y + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y</span><br><span class=\"line\">    </span><br><span class=\"line\">x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>) <span class=\"comment\"># 其实返回的是一个 Tuple，即 (x, y)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h4><ul>\n<li><p>默认参数 ( 缺省参数 )：最大好处是降低调用函数难度，类似注册时，多数用户只关心核心的信息，即其余信息设置为默认值。</p>\n<blockquote>\n<p>注意：定义默认参数时，必须指向不变对象。如 n = 2，不能 n = m ( m 为变量 )</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n = <span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">\ts = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>):</span><br><span class=\"line\">\t    n = n - <span class=\"number\">1</span></span><br><span class=\"line\">\t    s = s * x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">\t</span><br><span class=\"line\">print( power(<span class=\"number\">5</span>) ) <span class=\"comment\"># 输出 25</span></span><br><span class=\"line\">print( power(<span class=\"number\">5</span>, <span class=\"number\">3</span>) ) <span class=\"comment\"># 计算 5 的 3 次方，输出 125</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>可变参数：顾名思义，可变参数就是传入的参数个数是可变的。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># def calculator(numbers)，即理解 numbers 为一个 tuple</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculator</span><span class=\"params\">(*numbers)</span>:</span> </span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n ** <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等价于 calculator( (1, 3, 5, 7) )</span></span><br><span class=\"line\">print( calculator(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>) ) <span class=\"comment\"># 输出 84</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>关键字参数：<br>  <code>可变参数</code> 允许你传入 0 个或任意个参数，这些参数在函数调用时自动组装为一个 <code>元组</code> ( Tuple )。<br>  <code>关键字参数</code> 允许你传入 0 个或任意个参数，这些关键字参数在函数内部自动组装成为一个 <code>词典</code> ( Dict )。  </p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span> </span><br><span class=\"line\">    print(<span class=\"string\">' name:'</span>, name, <span class=\"string\">' age:'</span>, age, <span class=\"string\">' others:'</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\">person(<span class=\"string\">'Lucy'</span>, <span class=\"number\">35</span>, city = <span class=\"string\">'Guangzhou'</span>, gender = <span class=\"string\">'M'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出  name: Lucy  age: 35  others: &#123;'city': 'Guangzhou', 'gender': 'M'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然，我们可先组装词典 dict，然后把该 dict 转换为关键字参数传进去</span></span><br><span class=\"line\">extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Guangzhou'</span>, <span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字典中的元素，拆分成独立的 Key-Value 键值，引用时前缀也要加 \"**\"</span></span><br><span class=\"line\">person(<span class=\"string\">'Jack Ma'</span>, <span class=\"number\">50</span>, **extra)</span><br><span class=\"line\"><span class=\"comment\"># 输出 name: Jack Ma  age: 50  others: &#123;'city': 'Guangzhou', 'gender': 'M'&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>参数组合：Python 中定义函数，可多种参数组合使用，但必须满足一下参数定义顺序：<code>必选参数</code>、<code>默认参数</code>、<code>可变参数</code>、<code>命名关键字</code> 和 <code>关键字参数</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(a, b, c = <span class=\"number\">0</span>, *args, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">' a='</span>, a, <span class=\"string\">' b='</span>, b, <span class=\"string\">' c='</span>, c, <span class=\"string\">' args='</span>, args, <span class=\"string\">' kw='</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出 a=1 b=2 c=3 args=('a', 'b') kw=&#123;'x'=99&#125;</span></span><br><span class=\"line\">func(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'x'</span>=<span class=\"number\">99</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结合 <code>tuple</code> 和 <code>dict</code>：即通过类似 <code>func(*args, **kw)</code> 形式调用函数。参数虽可自由组合使用，但不要组合太复杂，以造成可理解性较差的结果。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">args = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">kw = &#123;<span class=\"string\">'x'</span> = <span class=\"number\">5</span>, <span class=\"string\">'y'</span> = <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">func(*args, **kw)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h4><ul>\n<li><p>函数内部可以调用其他函数。若一个函数内部调用了其自身，即该函数为 <code>递归函数</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * fact(n - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>递归的过深调用会导致栈溢出。可通过 <code>尾递归</code> 优化。</li>\n<li><p>尾递归优化：解决递归调用栈溢出的方法，即函数返回时调用本身，并且 return 语句不能包含表达式。</p>\n<ul>\n<li>区别上述的 fact(n) 函数，由于 <code>return n * fact(n - 1)</code> 引入了乘法表达式，即非尾递归。</li>\n<li>而 <code>return fact_iter(num - 1, num * product)</code> 仅仅返回函数本身。</li>\n<li><p>这样，编译器 / 解释器就可对尾递归做优化，即使递归本身调用 n 次，都只占用一个栈帧，不会出现栈溢出的情况。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(n, <span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact_iter</span><span class=\"params\">(num, product)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(num <span class=\"number\">-1</span>, num * product)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h3><h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4><ul>\n<li><p>切片操作符：在 List 中指定 <code>索引范围</code> 的操作。<br>  索引范围具体为： <code>起始位置:结束位置:步进</code> ，注意步进数 ( 默认为 1，不能为 0 )。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出 [11, 22, 33]，即从小标为 0 开始，步进为 1，取前 3 个元素</span></span><br><span class=\"line\">print( list[<span class=\"number\">0</span>:<span class=\"number\">3</span>:<span class=\"number\">1</span>] )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>倒数切片：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出 ['A', 'B', 'C', 'D']，即从下标为 0 开始，切片至倒数第一个元素 (不含其本身)</span></span><br><span class=\"line\">print( list[<span class=\"number\">0</span>:<span class=\"number\">-1</span>] )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>字符串切片：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">'ABCDE'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出 ACE，即对字符串中所有字符作用，每隔两位取值</span></span><br><span class=\"line\">print( str[::<span class=\"number\">2</span>] )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>注意：<code>Tuple</code> 也是一种 <code>List</code>，唯一不同的是 Tuple 不可变，因此 Tuple 不可用切片操作。</li>\n</ul>\n<h4 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h4><ul>\n<li><p>迭代：给定一个 List 或 Tuple，通过 For 循环遍历这个 List 或 Tuple。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> str <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    print(str) <span class=\"comment\"># 输出 ABCDE</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>enumerate</code> 函数可以把一个 list 变成 <code>索引-元素树</code>，这样就可以在 For 循环中同时迭代 <code>索引</code> 和 <code>元素本身</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">list = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, value <span class=\"keyword\">in</span> enumerate(list):</span><br><span class=\"line\">    print(i, value)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h4><ul>\n<li><p>列表生成式：List Comprehensions，用于创建 List 的生成式。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">list1 = []</span><br><span class=\"line\"></span><br><span class=\"line\">list1 = [x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 输出 1x1，2x2，3x3, ..., 9x9</span></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">等价于：</span></span><br><span class=\"line\"><span class=\"string\">for num in range(1, 10):</span></span><br><span class=\"line\"><span class=\"string\">    list1.append(num ** 2)</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># for 循环与 if 判断配合，例如取得 10 以内的偶数，求其平方数</span></span><br><span class=\"line\">list2 = [ num**<span class=\"number\">2</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"keyword\">if</span> num%<span class=\"number\">2</span> == <span class=\"number\">0</span> ]</span><br><span class=\"line\"><span class=\"comment\"># 输出 2x2, 4x4, 6x6, 8x8</span></span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两层 for 循环</span></span><br><span class=\"line\">list3 = [ m+str(n) <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">4</span>) ]</span><br><span class=\"line\"><span class=\"comment\"># 输出 ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']</span></span><br><span class=\"line\">print(list3)</span><br><span class=\"line\"></span><br><span class=\"line\">list4 = [ m*n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">4</span>) ]</span><br><span class=\"line\"><span class=\"comment\"># 输出 ['A', 'AA', 'AAA', 'B', 'BB', 'BBB', 'C', 'CC', 'CCC']</span></span><br><span class=\"line\">print(list4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出当前目录下所有文件和目录名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os <span class=\"comment\"># 导入 os 模块</span></span><br><span class=\"line\">list = [d <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">'.'</span>)]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><ul>\n<li>引入：<code>列表生成式</code>，可直接创建一个列表。但受到内存限制，列表容量肯定是有限的。例如：我们需要一个包含 100 万个元素的列表 ( 列表中的元素按照某种算法推算出来 )，直接创建是不太现实的，那么我们是否可通过某种过程，实现 <code>动态推算</code> 并 <code>输出元素</code> ？ </li>\n<li>Generator：<code>生成器</code>，即不用一步到位创建 list 对象，而是通过循环过程中不断推算出后续的元素。在 Python中，把这种一边循环一边计算的机制称作 <code>Generator</code>。</li>\n<li><p>创建 Generator：把列表生成式的 <code>[]</code> 改成 <code>()</code> 即可。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 受到内存限制，运行过程中可能会崩掉</span></span><br><span class=\"line\">list = [ x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, int(<span class=\"number\">10e10</span>)) ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 简单生成器</span></span><br><span class=\"line\">generator = ( x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, int(<span class=\"number\">10e10</span>)) )</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> generator:</span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 简单示例：带 yield 的 Generator 函数</span></span><br><span class=\"line\"><span class=\"comment\"># 1) 在每次循环时都执行，遇到 yield 语句返回</span></span><br><span class=\"line\"><span class=\"comment\"># 2) 再次执行时，从上次返回的 yield 语句处继续执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">odd</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'First Return: '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    print(<span class=\"string\">'Second Return:'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Third Return:'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> &#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> odd():</span><br><span class=\"line\">    print(n)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Fibonacci 数列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(times)</span>:</span></span><br><span class=\"line\">    n, a, b = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; times:</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> b</span><br><span class=\"line\">        (a, b) = (b, a+b)</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'done'</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> fibonacci(<span class=\"number\">10</span>):</span><br><span class=\"line\">    print(n)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><ul>\n<li>可用于 for 循环的数据类型：<ul>\n<li>集合数据类型：list、tuple、dict (字典)、set、str (字符串)</li>\n<li>Generator 生成器和带 <code>yield</code> 的 Generator 函数</li>\n</ul>\n</li>\n<li><p>可用于 for 循环的对象统称为可迭代对象 <code>Iterable</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 isinstance() 判断一个对象是否为 Iterable 对象</span></span><br><span class=\"line\">form collections <span class=\"keyword\">import</span> Iterable</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance([], Iterable) <span class=\"comment\"># True</span></span><br><span class=\"line\">isinstance((x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)), Iterable) <span class=\"comment\"># True</span></span><br><span class=\"line\">isinstance(<span class=\"number\">100</span>, Iterable) <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成器是 <code>Iterator</code> 对象；List、Dict、Str 虽然是 Iterable 对象，但却不是 <code>Iterator</code>。<br>  我们可以通过 <code>iter()</code> 函数，把 List、Dict、Str 等 Iterable 转换达成 <code>Iterator</code>。</p>\n<blockquote>\n<p>Python 的迭代器 ( Iterator ) 对象表示的是一个数据流，即 Iterator 对象可被 <code>next()</code> 函数调用并不断返回下一个数据，直至没有数据时抛出 <code>StopIteration</code> 异常。</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">isinstance(iter([]), Iterator) <span class=\"comment\"># True</span></span><br><span class=\"line\">isinstance(iter(<span class=\"string\">'abc'</span>), Iterator) <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><ul>\n<li>函数：<ul>\n<li><code>模块化编程</code>，即把大段功能代码拆分、封装成模块，通过层层调用，把复杂任务解构成简单任务。</li>\n<li>这种分解称之为 <code>面向过程</code> 的程序设计。</li>\n<li>函数是面向过程程序设计的 <code>基本单元</code>。</li>\n</ul>\n</li>\n<li>函数式编程：<ul>\n<li>就是一种抽象程序很高的 <code>编程范式</code>；</li>\n<li>纯粹的函数式编程语言编写的函数没有变量；</li>\n<li>函数式编程的特点：允许函数作为 <code>参数</code>，作为另一函数的 <code>输入</code>。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><ul>\n<li><p>变量可指向函数：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接调用函数</span></span><br><span class=\"line\">x = abs(<span class=\"number\">-10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量可指向函数</span></span><br><span class=\"line\">f = abs</span><br><span class=\"line\">x = f(<span class=\"number\">-10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># x 的结果都为 10</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>函数名也是变量：函数名其实就是指向函数的变量。</p>\n<blockquote>\n<p>注意：<br>1) 而在实际编码当中，绝对不能这样写，只是为了说明函数名也是变量。<br>2) 若需恢复 abs 函数，请重启 Python 交互环境。  </p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">abs = <span class=\"number\">10</span></span><br><span class=\"line\">abs(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"># 即 abs 已指向一个整数 10，而不是指向求绝对值的函数。  </span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">    File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: <span class=\"string\">'int'</span> object <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> callble</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>传入函数：一个函数接收另一个函数作为参数，称为 <code>高阶函数</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 调用 add(-5, 6 abs) 时，计算的过程为：</span></span><br><span class=\"line\"><span class=\"comment\"># x = -5</span></span><br><span class=\"line\"><span class=\"comment\"># y = -6</span></span><br><span class=\"line\"><span class=\"comment\"># f = abs</span></span><br><span class=\"line\"><span class=\"comment\"># f(x) + f(y)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h5><ul>\n<li>Python 内建了 map() 和 reduce() 函数。</li>\n<li><p>Map / Reduce 的概念 ：</p>\n<ul>\n<li>MapReduce 是一种编程模型，是 <code>处理</code> 和 <code>生成</code> 大型数据集的相关实现。</li>\n<li><p>用户指定一映射函数 <code>map()</code> 处理键/值对，以生成一组<code>中间键/值对</code>；同时也指定 <code>reduce()</code> 函数用以 <code>合并</code> 含相同中间键所关联的所有中间值。</p>\n<blockquote>\n<p>为了更加透彻理解 MapReduce，可研读  Google 关于 MapReduce 的论文：<br><code>MapReduce: Simplified Data Processing on Large Clusters</code> $^{[4]}$。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"Map-函数\"><a href=\"#Map-函数\" class=\"headerlink\" title=\"Map 函数\"></a>Map 函数</h6><ul>\n<li><p>map() 函数：其接收 <code>两个参数</code>，第一个是 <code>函数</code>，第二个是 <code>Iterable</code>。即 map 将传入的 <code>函数</code> 依次 <code>作用</code> 到序列的 <code>每个元素</code>，并把结果作为新的 <code>Iterator</code> 返回。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例 1：有一个函数 f(x) = x*x，将其作用于一个 list = [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x ** <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1) map() 函数</span></span><br><span class=\"line\">r = map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">print(list(r)) <span class=\"comment\"># 输出 [1, 4, 9, 16, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2) 不需要 map() 函数的等价写法</span></span><br><span class=\"line\">list = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">    list.append( f(n) )</span><br><span class=\"line\">print(list) <span class=\"comment\"># 输出 [1, 4, 9, 16, 25]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例 2：map 作为高阶函数，事实上它把运算规则抽象了，如把 list 中数字转字符串</span></span><br><span class=\"line\">list( map(str, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]) ) <span class=\"comment\"># 输出 ['1', '2', '3', '4', '5']</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"Reduce-函数\"><a href=\"#Reduce-函数\" class=\"headerlink\" title=\"Reduce 函数\"></a>Reduce 函数</h6><ul>\n<li><p>reduce() 函数：其接收 <code>两个参数</code>，第一个是 <code>函数</code>，第二个是 <code>Iterable</code>。即 reduce 把结果继续和序列的 <code>下一个元素</code> 做 <code>累积计算</code>。</p>\n<blockquote>\n<p>reduce(f, [x1, x2, x3, x4]) 等价于 f( f( f(x1, x2), x3 ), x4 )</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\">print( reduce(add, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]) )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当然，上述的实例只是为了描述原理而设定，下面将结合 map() 与 reduce() 举例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一计算公式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一字符转数字的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">char2num</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    digits = &#123;<span class=\"string\">'0'</span>: <span class=\"number\">10</span>, <span class=\"string\">'1'</span>: <span class=\"number\">20</span>, <span class=\"string\">'2'</span>: <span class=\"number\">30</span>, <span class=\"string\">'3'</span>: <span class=\"number\">40</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits[s]</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># map/reduce 实现处理与计算的功能</span></span><br><span class=\"line\">print( reduce(fn, map(char2num, <span class=\"string\">'0123'</span>)) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h5><ul>\n<li>Python 内建了 <code>filter()</code> 函数，用于过滤序列。</li>\n<li><p>filter() 函数：接收 <code>两个参数</code>，一个是 <code>函数</code>，另一个是 <code>序列</code>。即 filter 把传入的函数作用于每个元素，然后根据返回值是 <code>True/False</code> 决定是否 <code>保留/丢弃</code> 该元素。</p>\n<blockquote>\n<p>filter() 函数返回的是一个 Iterator，即一个惰性序列，故需要强迫 filter() 完成计算结果，如 list() 函数获得所有结果。</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在一个 list 中，删掉偶数，只保留奇数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isOdd</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 输出 [1, 3, 5]</span></span><br><span class=\"line\">list( filter(isOdd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把一个序列中的空字符剔除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rejectBlankStr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 输出 ABC</span></span><br><span class=\"line\">list( filter(rejectBlankStr, [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">''</span>, <span class=\"literal\">None</span>, <span class=\"string\">'C'</span>]) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Sorted\"><a href=\"#Sorted\" class=\"headerlink\" title=\"Sorted\"></a>Sorted</h5><ul>\n<li><p>排序算法：排序的核心是 <code>比较两元素的大小</code>。若是数字则直接比较；但比较的若是字符串或两个字典，则比较过程需通过函数抽象实现。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出 [-6, 2, 12, 24, 36]</span></span><br><span class=\"line\">print( sorted( [<span class=\"number\">36</span>, <span class=\"number\">24</span>, <span class=\"number\">-6</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>] ) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>sorted()</code> 也是一高阶函数，可接收一个 key 函数来自定义排序:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出 [2, -6, 12, 24, 36]</span></span><br><span class=\"line\">print( sorted([<span class=\"number\">36</span>, <span class=\"number\">24</span>, <span class=\"number\">-6</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>], key = abs) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略大小写，实现字符串排序</span></span><br><span class=\"line\"><span class=\"comment\"># 实现字符串的比较是根据 ASCII 实现比较的</span></span><br><span class=\"line\">print( sorted([<span class=\"string\">'Bob'</span>, <span class=\"string\">'Lucy'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Danny'</span>], key = str.lower) ) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行反向排序，可传入第三个参数实现</span></span><br><span class=\"line\">print( sorted([<span class=\"string\">'Bob'</span>, <span class=\"string\">'Lucy'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Danny'</span>], key = str.lower, reverse = <span class=\"literal\">True</span>) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><h5 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h5><ul>\n<li><p>函数作为返回值：高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通常情况实现一个可变参数的求和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calcSum</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    ax = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        ax = ax + n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ax</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 若不想立刻求和，可不返回求和结果，而是求和函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lazySum</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        ax = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            ax = ax + n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 lazySum() 时，返回函数而不是结果</span></span><br><span class=\"line\">f = lazySum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 f，才真正计算求和的结果</span></span><br><span class=\"line\">f()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当每次调用 lazySum() 时，都会返回一个新的函数，既使传入参数相同</span></span><br><span class=\"line\">f1 = lazySum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">f2 = lazySum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">print( f1 == f2 ) <span class=\"comment\"># 输出 False</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><ul>\n<li>注意到上述例子返回的函数在其定义内部引用了局部变量 <code>args</code>，故当一个函数返回一个函数后，其内部的局部变量还被新函数引用。</li>\n<li><p>注意返回的函数并没有立刻执行，而是调用了 <code>f()</code> 才执行。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> i ** <span class=\"number\">2</span></span><br><span class=\"line\">        fs.append(f)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fs</span><br><span class=\"line\">    </span><br><span class=\"line\">f1, f2, f3 = count()</span><br><span class=\"line\"><span class=\"comment\"># 输出 9::9::9</span></span><br><span class=\"line\">print( str(f1()) + <span class=\"string\">'::'</span> + str(f2()) + <span class=\"string\">'::'</span> + str(f3()) ) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\" 实际结果为：f1() --&gt; 9，f2() --&gt; 9, f3() --&gt; 9</span></span><br><span class=\"line\"><span class=\"string\">\" 全部结果都为 9，原因在于返回的函数引用了变量 i，但它并非立刻执行</span></span><br><span class=\"line\"><span class=\"string\">\" 需等到 3 个函数都返回时，它们所引用的变量 i 已经变成了 3，故最终结果是 9</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若需引用循环的变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(j)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">g</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> j * j</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g</span><br><span class=\"line\">    </span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">4</span>):</span><br><span class=\"line\">        fs.append( f(i) ) <span class=\"comment\"># f(i) 立刻执行，i 的当前值被传入 f()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fs</span><br><span class=\"line\">    </span><br><span class=\"line\">f1, f2, f3 = count()</span><br><span class=\"line\"><span class=\"comment\"># 输出 1::4::9</span></span><br><span class=\"line\">print( str(f1()) + <span class=\"string\">'::'</span> + str(f2()) + <span class=\"string\">'::'</span> + str(f3()) )</span><br></pre></td></tr></table></figure>\n  <div class=\"note danger\"><p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或后续会发生变化的变量。</p></div>\n</li>\n</ul>\n<h4 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h4><ul>\n<li>当函数作为 <code>传入参数</code> 时，我们不需要显式地定义函数，直接传入匿名函数更便捷。</li>\n<li><p>关键字 <code>lambda</code> 表示匿名函数，冒号前面表示传入参数，后面为返回值 ( 一般为表达式运算后的结果 )，如 <code>lambda x, y : x+y</code></p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以 map() 函数为例</span></span><br><span class=\"line\"><span class=\"comment\"># 输出 [1, 4, 9, 16, 25]</span></span><br><span class=\"line\">print( list(map(<span class=\"keyword\">lambda</span> x : x ** <span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匿名函数实际为：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x ** <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匿名函数有一好处，即不必担心 <code>函数名冲突</code>。此外，匿名函数也是一个函数对象，可把匿名函数赋值给一个变量，再利用变量来调用。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> x : x ** <span class=\"number\">2</span></span><br><span class=\"line\">print( f(<span class=\"number\">5</span>) ) <span class=\"comment\"># 输出 25</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>匿名函数作为返回值返回：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span>: x * x + y * y</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h4><ul>\n<li><p>提示：对于装饰器，除了廖雪峰老师的教程外 ( 侧重原理讲解 )，还可参考程序员大咖的推文 <a href=\"https://mp.weixin.qq.com/s/0nZTAjeftR3Xa9T9TbQc-g\" target=\"_blank\" rel=\"noopener\">Python 装饰器的诞生过程</a> ( 侧重具体实现讲解 )。</p>\n</li>\n<li><p>引例：假设我们有 time() 函数，我们要增强 time() 函数的功能，比如在函数调用前后自动打印日志，但又不希望修改 time() 函数的定义。</p>\n<p>  这种在代码运行期间动态增加功能的方式，称之为 <code>装饰器 (Decorator)</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@log</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">time</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'2018-11-11 23:11'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>那么装饰器是如何实现的？在实现装饰器之前，我们有必要回顾函数的特性：</p>\n<ul>\n<li><code>函数作为变量传递</code>：函数作为变量来传递，代表的是一个函数对象。若函数不加括号，是不会执行的；</li>\n<li><code>函数作为参数传递</code>：一个函数可以接受另一个函数对象作为自己的参数，并对函数对象进行处理；</li>\n<li><code>函数作为返回值</code>：一个函数的返回值可以是另一个函数对象。</li>\n<li><p><code>函数嵌套及跨域访问</code>：一个函数 (主函数) 内部是可以嵌套另一个函数 (子函数) 的；</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 函数作为变量传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\">a = add <span class=\"comment\"># 作为变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数作为参数传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">excute</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(<span class=\"number\">3</span>)</span><br><span class=\"line\">excute(add) <span class=\"comment\"># 作为参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数作为返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_add</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> add <span class=\"comment\"># 作为返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数嵌套及跨域访问</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    x = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(x) <span class=\"comment\"># 被嵌套函数 inner 内部的 x 变量可以到封装域去获取</span></span><br><span class=\"line\">    inner()</span><br><span class=\"line\">    </span><br><span class=\"line\">outer()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Python 中的装饰器是通过闭包实现的，即闭包就是引用了外部变量的内部函数，而闭包的实现正是利用了以上函数特性。具体实现：</p>\n<ul>\n<li><code>问题</code>：观察打印结果，从 func() 到 closure()，func 变成了closure，具体是怎么装饰的呢？</li>\n<li><p><code>解释</code>：closure 实际上是 outer(func)，func 作为参数传进 outer，outer 的子函数 inner 对 func 返回的结果进行了一番装饰，返回了一个装饰后的结果，最后 outer 返回 inner，可以说 inner 就是装饰后的 func，这就是一个函数被装饰的过程，重点在于执行 outer(func) 这个步骤，即执行 closure()。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'函数 func'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span> <span class=\"comment\"># 函数嵌套</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'戴了 inner 帽子的'</span> + x() <span class=\"comment\"># 跨域访问，引用了外部变量 x</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner <span class=\"comment\"># 函数作为返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数 func 作为 outer 的参数，函数作为变量赋给 closure</span></span><br><span class=\"line\">closure = outer(func) </span><br><span class=\"line\"></span><br><span class=\"line\">print( func() ) <span class=\"comment\"># 执行原始函数</span></span><br><span class=\"line\">print( closure() ) <span class=\"comment\"># 执行闭包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\"># 函数 func</span></span><br><span class=\"line\"><span class=\"comment\"># 戴了 inner 帽子的函数 func</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>装饰器语法糖 <code>@</code>：Python 给我们提供了语法糖 <code>@</code>，我们想执行 outer(func)，只需要把 outer 函数 @ 到 func 函数的上即可。具体实现：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'戴了 inner 帽子的'</span> + x()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@outer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'函数 func'</span></span><br><span class=\"line\"></span><br><span class=\"line\">print( func() ) <span class=\"comment\"># 输出：戴了 inner 帽子的函数 func</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h4><ul>\n<li><p>例：int() 函数可把字符串转为整数，当且仅当传入字符串时，int() 函数默认按照 <code>10 进制转换</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print( int(<span class=\"string\">'12345'</span>) ) <span class=\"comment\"># 输出 12345</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># int() 函数提供额外 base 参数，默认值为 10</span></span><br><span class=\"line\"><span class=\"comment\"># 若传入 base 参数即可做 N 进制转换 ( N 进制转到 10 进制 )</span></span><br><span class=\"line\">print( int(<span class=\"string\">'10'</span>, base = <span class=\"number\">8</span>) ) <span class=\"comment\"># 输出 8</span></span><br><span class=\"line\">print( int(<span class=\"string\">'A'</span>, base = <span class=\"number\">16</span>) ) <span class=\"comment\"># 输出 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若我们要转换大量二进制字符串，则可通过定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">int2</span><span class=\"params\">(x, base = <span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> int(x, base)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 这样转换二进制就非常便捷了</span></span><br><span class=\"line\">print( int2(<span class=\"string\">'10000000'</span>) ) <span class=\"comment\"># 输出 128</span></span><br><span class=\"line\">print( int2(<span class=\"string\">'10101010'</span>) ) <span class=\"comment\"># 输出 170</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其实 <code>functools.partial</code> 就是帮助我们创建一个偏函数，即其作用就是把一个函数的某些参数固定住 ( 设置默认值 )，返回一个新函数。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\">int2 = functools.partial(int, base = <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建偏函数时，实际可接收 <code>函数对象</code>、<code>*args</code> 和 <code>**kw</code> 这三个参数。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">int2 = functools.partial(int, base = <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 相当于：</span></span><br><span class=\"line\">args = <span class=\"string\">'10001000'</span></span><br><span class=\"line\">kw = &#123;<span class=\"string\">'base'</span>: <span class=\"number\">2</span>&#125;\t</span><br><span class=\"line\">int(*args, **kw)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><h4 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>一个 <code>.py</code> 文件称之为一个模块 (Module)，模块可避免函数名和变量名冲突。</p>\n<blockquote>\n<p>⚠️ 尽量不与 Python 内置函数名称相冲突，详细可参考 Python 标准函数库 $^{[6]}$。</p>\n</blockquote>\n</li>\n<li><p>按目录来组织模块的方法，称为包 (Package)，可避免模块名称的冲突。</p>\n<blockquote>\n<p>⚠️ 创建模块的名称不能和 Python 自带的模块名称相冲突。例如系统自带 <code>sys</code> 模块。</p>\n</blockquote>\n<ul>\n<li><code>__init__.py</code> 该文件必须存在，否则 Python 就把当前 目录当作普通目录，而不是一个包了。</li>\n<li><code>__init__.py</code> 可以是空文件，也可含有代码。</li>\n<li><code>samplye.py</code> 的模块名称为 <code>mypython.sample</code>。</li>\n<li><p><code>__init__.py</code> 的模块名称为 <code>mypython</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mypython</span><br><span class=\"line\">  ├─ __init__.py</span><br><span class=\"line\">  ├─ sample.py</span><br><span class=\"line\">  └─ example.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h4><ul>\n<li><p>以内建的 <code>sys</code> 模块为例，编写 <code>sample</code> 模块:</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    args = sys.argv</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(args) &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> str <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            print(<span class=\"string\">'%s'</span> % str)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Empty paramter'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>作用域：在一模块中，我们可能会定义很多函数和变量。或许我们有这样的需求：有的函数和变量仅希望是在模块内部使用。Python 中通过 <code>_</code> 前缀实现的。</p>\n<ul>\n<li><p>正常的函数和变量名是公开的 (public)，可被直接引用。例如，<code>abc</code>、<code>x1</code>、<code>PI</code> 等。</p>\n</li>\n<li><p>非公开的函数和变量 (private)，不应该被直接引用。例如 <code>_xxx</code>、<code>__xxx</code>。</p>\n<blockquote>\n<p><code>不应该</code> 被直接引用，而不是不能被直接引用，因为 Python 并没有一种方法可以完全限制访问 private 函数或者变量。</p>\n</blockquote>\n</li>\n<li><p>使用 <code>private</code> 函数，实现代码封装和抽象的方法：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__sayHello</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    __sayHello(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数</span></span><br><span class=\"line\">greeting(<span class=\"string\">'Bob'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第三方模块\"><a href=\"#第三方模块\" class=\"headerlink\" title=\"第三方模块\"></a>第三方模块</h4><ul>\n<li>Python 中，安装第三方模块是通过包管理工具 <code>pip</code> 完成的。 <ul>\n<li>若是 <code>Mac/Linux</code> 用户，可跳过安装 <code>pip</code> 的步骤。</li>\n<li>若是 <code>Windows</code> 用户，则需要安装 <code>pip</code> 工具。( 安装方法自行搜索或参考 [7] )</li>\n</ul>\n</li>\n<li>安装完包管理工具 <code>pip</code>，可通过 <code>pip install Pillow</code> (Python 2.x) 或 <code>pip3 install Pillow</code> (Python 3.x) 命令安装 Python Imaging Library (处理图像的工具库)。</li>\n<li><p>当然，Python 使用过程中需要安装和使用大量的第三方库，若通过上述方式安装未免太过繁琐，故我们可考虑直接安装 <a href=\"https://www.baidu.com/link?url=wU4ubxmhQWv3nZxRpf8-49yE1jNiaKCbtn0a1tfl9V4OOvw4KG0FH0mbdC4REMDf&amp;wd=&amp;eqid=f287538e0000a002000000065bbc170c\" target=\"_blank\" rel=\"noopener\">Anaconda</a>。</p>\n<p>  Anaconda，其是一个基于 Python 的数据处理和科学计算的平台，他已经内置了许多非常有用的第三方库。在完整完 Anaconda 后，重新在命令行中键入 <code>python</code>，出现以下信息即安装成功，可正常导库使用：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">python <span class=\"number\">3.</span>x.x | Anconda, Inc. | ... on darwin</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy <span class=\"comment\"># 直接倒入第三方模块即可</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"模块搜索路径\"><a href=\"#模块搜索路径\" class=\"headerlink\" title=\"模块搜索路径\"></a>模块搜索路径</h4><ul>\n<li><p>当我们试图搜索某一模块，若找不到会报错。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> mymodule</span><br><span class=\"line\">Traceback (most recent call last)</span><br><span class=\"line\">    File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">ModuleNotFoundError: No module named <span class=\"string\">'mymodule'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>默认情况，Python 解释器会搜索当前目录，所有已安装内置模块和第三方模块，<code>搜索路径</code> 存放在 <code>sys 模块</code> 的 <code>path 变量</code> 中：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若需要添加搜索目录</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">'/User/kofe/mypython'</span>)</span><br><span class=\"line\">print(sys.path) <span class=\"comment\"># 查看是否已添加</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><ul>\n<li><p><code>面向对象编程</code>，Object Oriented Programming，简称 OOP。是一种程序设计思想。其把对象作为 <code>程序基本单元</code>，且对象中包含了 <code>数据</code> 和 <code>操作的函数</code>。</p>\n<blockquote>\n<p>面向对象的程序设计把计算机程序视为一组对象集合，而每个对象都可接收其他对象发送的消息并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>\n</blockquote>\n</li>\n<li><p>面向对象的程序可理解为：<code>程序 = 对象 + 对象</code>；<code>对象 = 成员变量 + 成员函数</code>。</p>\n</li>\n<li>对比 <code>面向过程编程</code>，即把计算机程序视为一系列的命令集合，或可理解为一组函数的顺序执行。</li>\n<li><p>面向过程的程序可理解：<code>程序 = 函数 + 算法</code>。 </p>\n</li>\n<li><p>在 Python 中，所有数据都可视为对象。当然，可以通过类来自定义对象的数据类型。例如，我们定义一个 <code>Student</code> 类型来代表学生的范畴：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># __xxx__ 为特殊变量或方法，有特殊用途，会在后面章节详细讲解</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printScore</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'name: %s, score: %s'</span> % (self.name, self.score))</span><br><span class=\"line\">        </span><br><span class=\"line\">stu1 = Student(<span class=\"string\">'Lucy'</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\">stu2 = Student(<span class=\"string\">'Danny'</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 给对象发送消息实际就是调用对应的关联函数</span></span><br><span class=\"line\">stu1.printScore()</span><br><span class=\"line\">stu2.printScore()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h4><ul>\n<li>面向对象的核心概念是 <code>类 (Class)</code> 和 <code>实例 (Instance)</code>，牢记类是抽象的模板。例如，上述的 <code>Student 类</code>，实例即根据类创建出一个个具体的对象 <code>stu1</code>、<code>stu2</code>。</li>\n<li><p>通过 <code>class</code> 关键字定义类：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若没有合适的继承类，则默认使用 object 类，这是所有类最终都会继承的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>创建类的实例，如 <code>stu = Student()</code></p>\n</li>\n<li><p>由于类起到模板的作用，因此可在创建实例时，通过特殊方法 <code>__init__()</code>，把属性绑定进去。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建实例时，不需要传入 self，即实例本身</span></span><br><span class=\"line\">stu = Student(<span class=\"string\">'Lucy'</span>, <span class=\"number\">95</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>数据封装</code>：访问实例本身的数据，不通过外部函数访问，而是通过类的内部定义访问数据的函数，这样实现数据封装。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'name: %s, score: %s'</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h4><ul>\n<li><p><code>私有变量</code>：让内部属性不被外部访问，在 Python 中，通过双下划线 <code>__</code> 开头，变量变成私有变量。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\">        self.__score = score</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\"># Getter 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__name  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__score</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># Setter 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setName</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.__name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setScore</span><span class=\"params\">(self, score)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Setter 方法修改属性值的好处，可定义规则约束有效值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>  <span class=\"number\">0</span>  &lt;= score &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">            self.__score = score</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Bad Score'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stu = Student(<span class=\"string\">'Bob'</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接访问会报错误:</span></span><br><span class=\"line\"><span class=\"comment\"># AttributeError: 'Student' object has no attribute '__name'</span></span><br><span class=\"line\">print( stu.__name ) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实现数据封装后</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 Getter 函数访问属性</span></span><br><span class=\"line\">print( stu.getName() )</span><br><span class=\"line\"><span class=\"comment\"># 使用 Setter 函数修改属性</span></span><br><span class=\"line\">stu.setName(<span class=\"string\">'Lucy'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Python 中，类似 <code>__xxx__</code> 的变量名，是 <code>特殊变量</code>，可直接访问。</p>\n</li>\n<li><p>在 Python 中，私有变量 <code>_xxx</code> 和 <code>__xxx</code>，也是可以外部访问的。其实 Python 编译器是会把变量名修改为 <code>_类名__变量名</code>，致使直接访问报错。例如：<code>_Student__name</code>，通过 <code>stu. _Student__name</code> 可实现外部访问 “私有变量”。</p>\n<blockquote>\n<p>⚠️ 当然，我们不建议这样做。因为不同版本的 Python 解释器可能会把 <code>__xxx</code> 改成不同变量名称。我们还是按照 <code>约定俗成</code> 的规定，视 <code>__xxx</code> 为私有变量。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"继承和多态\"><a href=\"#继承和多态\" class=\"headerlink\" title=\"继承和多态\"></a>继承和多态</h4><ul>\n<li><p><code>继承</code>：在面向对象程序设计中，可从某个现有类继承，新的类称为 <code>子类</code>，被继承的类称为 <code>基类、父类或超类</code>，例如：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Animal is running...'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Animal 实现了 run() 方法，Dog 继承 Animal 类</span></span><br><span class=\"line\"><span class=\"comment\"># Dog 作为子类自然也拥有了 run() 方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Dog is running...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然，子类还可以重写方法和增加方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Cat is running...'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Miao, Miao, Miao...'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>多态</code>：把不同子类对象都当作父类来看，可屏蔽不同子类对象之间的差异，写出通用代码。具体地，我们可从实例中理解多态：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTwice</span><span class=\"params\">(animal)</span>:</span></span><br><span class=\"line\">    animal.run()</span><br><span class=\"line\">    animal.run()</span><br><span class=\"line\">    </span><br><span class=\"line\">runTwice( Animal() ) <span class=\"comment\"># 输出：Animal is running...</span></span><br><span class=\"line\">runTwice( Dog() ) <span class=\"comment\"># 输出：Dog is running...</span></span><br><span class=\"line\">runTwice( Cat() ) <span class=\"comment\"># 输出：Cat is running...</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"获取对象信息\"><a href=\"#获取对象信息\" class=\"headerlink\" title=\"获取对象信息\"></a>获取对象信息</h4><ul>\n<li><p><code>type()</code> 函数：可判断对象类型</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基本类型</span></span><br><span class=\"line\">type(<span class=\"number\">12345</span>) <span class=\"comment\"># &lt;class 'int'&gt;</span></span><br><span class=\"line\">type(<span class=\"string\">'hello'</span>) <span class=\"comment\"># &lt;class 'str'&gt;</span></span><br><span class=\"line\">type(<span class=\"literal\">None</span>) <span class=\"comment\"># &lt;type(None) 'NoneType'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量指向函数或者类</span></span><br><span class=\"line\">type(abs) <span class=\"comment\"># &lt;class 'builtin_function_or_method'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># type() 函数返回类型</span></span><br><span class=\"line\">type(<span class=\"number\">12345</span>) == int <span class=\"comment\"># True</span></span><br><span class=\"line\">type(<span class=\"string\">'HelloWorld'</span>) == str <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断其他类型</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> types</span><br><span class=\"line\">type(abs) == types.BuiltinFunctionType <span class=\"comment\"># True</span></span><br><span class=\"line\">type(<span class=\"keyword\">lambda</span> x:x) == types.lambdaType <span class=\"comment\"># True</span></span><br><span class=\"line\">type( (x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)) ) == types.GeneratorType <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>isinstance()</code> 函数</p>\n<ul>\n<li>判断基本类型：<code>isinstance(&#39;abc&#39;, str)</code>，<code>isinstance(b&#39;a&#39;, bytes)</code>  </li>\n<li>判断 class 类型：如有继承关系，如 <code>object -&gt; Animal -&gt; Dog</code>，则有：<br>a = Animal() =&gt; isinstance(a, Animal) =&gt;True<br>d = Dog() =&gt; isinstance(d, Animal) =&gt;True<br>d = Dog() =&gt; isinstance(d, Dog) =&gt;True  </li>\n</ul>\n</li>\n<li><p><code>dir()</code> 函数：若要获得一个对象的 <code>所有属性和方法</code>，可使用该函数。它返回一个包含字符串的 <code>list</code>。例如，获得一个 str 对象的所有属性和方法。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出：['__add__', '__class__', ... 'zfill']</span></span><br><span class=\"line\">dir(<span class=\"string\">'abc'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>类似 <code>__xxx___</code> 的属性和方法在 Python 中都有特殊用途。如 <code>__len__()</code> 方法返回长度。调用 <code>len()</code> 函数，在函数内部实际是它自动地去调用该对象的 <code>__len__（)</code> 方法，故下面代码是等价的。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">len(<span class=\"string\">'abc'</span>) == <span class=\"string\">'abc'</span>.__len__() <span class=\"comment\"># 输出 True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>仅仅把属性和方法列出来是不够的，配合 <code>getattr()</code>、<code>setattr()</code> 及 <code>hasattr()</code>，我们可直接操作一个 <code>对象的状态</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Retangle</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">area</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.x * self.y</span><br><span class=\"line\"></span><br><span class=\"line\">rectangle = Rectangle(<span class=\"number\">5</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">hasattr(rectangle, <span class=\"string\">'z'</span>) <span class=\"comment\"># 是否含有属性 z</span></span><br><span class=\"line\">setattr(rectangle, <span class=\"string\">'z'</span>, <span class=\"number\">1</span>) <span class=\"comment\"># 设置一个属性 z，令其等于 1</span></span><br><span class=\"line\">getattr(rectangle, <span class=\"string\">'z'</span>) <span class=\"comment\"># 获取属性 z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以获得对象方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> hasattr(rectangle, <span class=\"string\">'area'</span>):</span><br><span class=\"line\">    fn = getattr(rectangle, <span class=\"string\">'area'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"实例属性和类属性\"><a href=\"#实例属性和类属性\" class=\"headerlink\" title=\"实例属性和类属性\"></a>实例属性和类属性</h4><ul>\n<li><p>给实例绑定属性的方法是通过 <code>实例变量</code> 赋值，或通过 <code>self 变量</code> 赋值。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># self 变量赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\"></span><br><span class=\"line\">stu = Student(<span class=\"string\">'Bob'</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\"><span class=\"comment\"># 实例变量赋值</span></span><br><span class=\"line\">stu.gender = <span class=\"string\">'male'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>给类绑定属性，直接在 <code>class</code> 中定义属性即可。</p>\n<blockquote>\n<p>Tips：编写程序时，不要对 <code>实例属性</code> 和 <code>类属性</code> 使用相同名称，若含有相同名称的实例属性，将屏蔽掉同名称的类属性。</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    grade = <span class=\"string\">'postgraduate'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">stu = Student(<span class=\"string\">'Lucy'</span>, <span class=\"number\">95</span>)</span><br><span class=\"line\">print( stu.grade ) <span class=\"comment\"># 与 print(Student.grade()) 效果相同</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"面向对象高级编程\"><a href=\"#面向对象高级编程\" class=\"headerlink\" title=\"面向对象高级编程\"></a>面向对象高级编程</h3><h4 id=\"使用-property\"><a href=\"#使用-property\" class=\"headerlink\" title=\"使用 @property\"></a>使用 @property</h4><ul>\n<li><p><code>引入</code>：在「<a href=\"https://www.kofes.cn/2018/09/life-is-short-we-need-python.html#访问限制\">访问限制</a>」章节中，我们通过 setScore() 和 getScore() 方法实现修改数据和获取数据，以实现数据封装。</p>\n<p>  那么本节提及 <code>@property</code>  属性，到底是何意图？先看看原始的 Setter 和 Getter 使用方法：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Getter 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__score</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"comment\"># Setter 方法</span></span><br><span class=\"line\">    <span class=\"comment\"># setXXX() 方法还可书写规则以约束输入数据或检查数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setScore</span><span class=\"params\">(self, score)</span>:</span>\t        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>  <span class=\"number\">0</span>  &lt;= score &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">            self.__score = score</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Bad Score'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">stu = Student()</span><br><span class=\"line\">stu.set_score(<span class=\"number\">90</span>)</span><br><span class=\"line\">print( stu.get_score() )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>改进</code>：在操作逻辑层面，Python 还提供了更多特性，既直接 <code>调用变量的方式操作属性</code>，又不破坏数据的封装特性，<code>@property 装饰器</code> 的作用就在于此。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.__score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@score.setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Score must be an integer!'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> value &gt; <span class=\"number\">100</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0 ~ 100!'</span>)</span><br><span class=\"line\">    self.__score = value</span><br><span class=\"line\">    </span><br><span class=\"line\">stu = Student()</span><br><span class=\"line\">stu.score = <span class=\"number\">90</span> <span class=\"comment\"># 实际转化为 s.set_score(90)</span></span><br><span class=\"line\">print( stu.score ) <span class=\"comment\"># 输出 90</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h4><ul>\n<li>继承是面向对象编程的一个重要的特性。通过继承，子类可以扩展父类的功能。</li>\n<li><p>在 Python 中，多实现多重继承，子类就可同时获得多个父类的所有功能。这种设计模式也叫 <code>MixIn</code>。</p>\n<blockquote>\n<p>⚠️ 同样是面向对象编程的语言，Java 只允许单继承，即一个类最多只能显示地继承于一个父类。当然，Java 要获得更多 “属性能力”，也可通过实现接口的方式实现。</p>\n</blockquote>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需求：我们赋予不同动物不同的能力</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Walking</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">walk</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Walking...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swimming</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swim</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Swimming...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flying</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fly</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Flying...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义一双栖动物：通过继承父类，从而获得对应能力</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Amphibian</span><span class=\"params\">(Walking, Swimming)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 定义一只天鹅：能走能飞能游泳</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swan</span><span class=\"params\">(Walking, Flying, Swimming)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"定制类\"><a href=\"#定制类\" class=\"headerlink\" title=\"定制类\"></a>定制类</h4><ul>\n<li><p>形如 <code>__xxx__</code> 的变量或者函数名在 Python 中是有特殊用途的。例如：<code>__slots__</code> 用于限制能绑定的属性，<code>__len__()</code> 方法返回对象本身的长度。</p>\n<p>  除此之外，Python 的 class 中还有许多这样有特殊用途的 <code>属性</code> 和 <code>函数</code>，可帮助我们定制属性和定制类。</p>\n</li>\n</ul>\n<h5 id=\"slots\"><a href=\"#slots\" class=\"headerlink\" title=\"__slots__\"></a>__slots__</h5><ul>\n<li><p>当我们创建一 class 实例后，可给该实例绑定 <code>任何</code> 属性和方法，这正体现了动态语言的灵活性。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">stu = Student()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绑定属性</span></span><br><span class=\"line\">stu.name = <span class=\"string\">'Bob'</span></span><br><span class=\"line\">stu.score = <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绑定方法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setAge</span><span class=\"params\">(self, age)</span>:</span></span><br><span class=\"line\">    self.age = age\t</span><br><span class=\"line\">stu.setAge = MethodType(setAge, stu) <span class=\"comment\"># 给实例绑定方法</span></span><br><span class=\"line\">stu.setAge(<span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上述方式只对本实例对象有效，若要所有实例对象起效，则需给 class 绑定方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setGrage</span><span class=\"params\">(self, grade)</span>:</span></span><br><span class=\"line\">    self.grade = grade</span><br><span class=\"line\">Student.setGrage = setGrage</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>动态绑定</code>：允许我们在程序运行的过程中动态给 class 添加功能 (方法)。</p>\n</li>\n<li><p><code>限定实例的属性</code>：定义特殊变量 <code>__slots__</code>，可限制 class 实例能添加的属性。</p>\n<ul>\n<li>当子类定义了 slots 时，子类会继承父类的 slots，那么子类实例能添加的属性是子类与父类 slots 的 <code>并集</code>。</li>\n<li><p>当子类定义中没有 slots 时，父类的 slots 对子类不起作用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __slots__ = (<span class=\"string\">'name'</span>, <span class=\"string\">'score'</span>, <span class=\"string\">'gender'</span>, <span class=\"string\">'age'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">stu = Student()</span><br><span class=\"line\">stu.email = <span class=\"string\">'admin@kofes.cn'</span> <span class=\"comment\"># email 不在限定内，会报 AttributeError 错误</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"getattr\"><a href=\"#getattr\" class=\"headerlink\" title=\"__getattr__\"></a>__getattr__</h5><ul>\n<li><p>正常情况下，当我们调用类的方法或属性，若不存在则会报错。例如定义 Student 类：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = <span class=\"string\">'Bob'</span></span><br><span class=\"line\">       </span><br><span class=\"line\">stu = Student()</span><br><span class=\"line\">print(stu.name) <span class=\"comment\"># 输出 Bob</span></span><br><span class=\"line\">print(stu.score) <span class=\"comment\"># 没有对应属性故会报 AttributeError 错误</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>要避免这个错误，除了补上 score 属性外，Python 还有另一个机制，即通过 <code>__getattr__()</code> 方法，动态返回一个属性。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = <span class=\"string\">'Bob'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'score'</span> == attr:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">90</span></span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\"># 注意：只有在没有找到属性的情况下，才调用 __getattr__</span></span><br><span class=\"line\"><span class=\"comment\"># 已有的属性，不会在 __getattr__ 中查找</span></span><br><span class=\"line\">print(stu.score) <span class=\"comment\"># 输出 90</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意：若在 __getattr__ 也没有匹配属性，则返回 None</span></span><br><span class=\"line\"><span class=\"comment\"># __getattr__ 默认返回 None</span></span><br><span class=\"line\">print(stu.age) <span class=\"comment\"># 输出 None</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>要让 class 只响应特定的几个属性，我们就要按照约定，抛出 <code>AttributeError</code> 错误即可：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.name = <span class=\"string\">'Bob'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, attr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'score'</span> == attr:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">90</span></span><br><span class=\"line\">        <span class=\"keyword\">raise</span> AttributeError(</span><br><span class=\"line\">            <span class=\"string\">'\\'Student\\' object has no attribute \\'%s\\''</span> % attr)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"iter\"><a href=\"#iter\" class=\"headerlink\" title=\"__iter__\"></a>__iter__</h5><ul>\n<li><p>若想让一个类用于 <code>for ... in</code> 循环，类似 list 或 tuple 那样，就必须实现一个 <code>__iter__()</code> 方法，该方法返回一个 <code>迭代对象</code>，然后 Python 的 For 循环就会不断调用该迭代对象的 <code>__next__()</code> 方法拿到循环的下一个值，直到遇到 <code>StopIteration</code> 错误时退出循环。</p>\n<p>  我们以斐波那契数列为例，写一个 Fib 类作用于 For 循环 ：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.a, self.b = <span class=\"number\">0</span>, <span class=\"number\">1</span> <span class=\"comment\"># 初始化两个计数器 a，b</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 方法重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self <span class=\"comment\"># 实例本身就是迭代对象，故返回自己</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\"># 方法重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.a, self.b = self.b, self.a + self.b <span class=\"comment\"># 计算下一个值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.a &gt; <span class=\"number\">100000</span>: <span class=\"comment\"># 退出循环的条件</span></span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.a <span class=\"comment\"># 返回下一个值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Fib 实例作用于 For 循环：  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fib():</span><br><span class=\"line\">    print(n)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于定制类，我们让其实现了 <code>__iter__()</code> 和 <code>__next__()</code> 方法，那么它就是一个 <code>Iterator</code> 类型的，这正是动态语言的特性。  </p>\n  <div class=\"note success\"><p>这种特性称为 <code>动态语言</code> 的 <code>鸭子类型</code>，动态语言并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p></div>\n</li>\n</ul>\n<h5 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"__call__\"></a>__call__</h5><ul>\n<li><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，使用 <code>instance.method()</code> 来调用。能不能直接在实例本身上调用呢？</p>\n<p>  答案是可以的。任何类，只需要定义一个 <code>__call__()</code> 方法，就可以直接对实例进行调用。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'My name is %s.'</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用方式</span></span><br><span class=\"line\">stu = Student(<span class=\"string\">'Bob'</span>)</span><br><span class=\"line\">stu() <span class=\"comment\"># 输出 My name is Bob.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"更多定制\"><a href=\"#更多定制\" class=\"headerlink\" title=\"更多定制\"></a>更多定制</h5><ul>\n<li>Python的 class 允许定义许多定制方法，让我们非常方便地生成特定的类。更多的定制方法请参考 Python 的官方文档：<a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\" target=\"_blank\" rel=\"noopener\">Special Method Names</a>。</li>\n</ul>\n<h4 id=\"使用枚举类\"><a href=\"#使用枚举类\" class=\"headerlink\" title=\"使用枚举类\"></a>使用枚举类</h4><ul>\n<li>在 Python 中，我们定义常量是采用 <code>约定俗成</code> 的方法来定义的，例如：<code>PI = 3.14159</code>。但其本质仍然是 <code>变量</code>。</li>\n<li><p>而本节介绍的枚举类，通过 <code>Enum</code> 定义一个 <code>class</code> 类型，然后，每个常量都是 class 的一个 <code>唯一实例</code>。例如：定义 <code>Month</code> 类型的枚举类。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum</span><br><span class=\"line\">Month = Enum(<span class=\"string\">'Month'</span>, (<span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Mar'</span>, <span class=\"string\">'Apr'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'Jun'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Jul'</span>, <span class=\"string\">'Aug'</span>, <span class=\"string\">'Sep'</span>, <span class=\"string\">'Oct'</span>, <span class=\"string\">'Nov'</span>, <span class=\"string\">'Dec'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, member <span class=\"keyword\">in</span> Month.__members__.items():</span><br><span class=\"line\">    <span class=\"comment\"># value 属性：则是自动赋给成员的 int 常量，默认从 1 开始计数</span></span><br><span class=\"line\">    print(name, <span class=\"string\">'=&gt;'</span>, member, <span class=\"string\">','</span>, member.value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">' 输出结果：</span></span><br><span class=\"line\"><span class=\"string\">' Jan =&gt; Month.Jan , 1</span></span><br><span class=\"line\"><span class=\"string\">' Feb =&gt; Month.Feb , 2</span></span><br><span class=\"line\"><span class=\"string\">' Mar =&gt; Month.Mar , 3</span></span><br><span class=\"line\"><span class=\"string\">' Apr =&gt; Month.Apr , 4</span></span><br><span class=\"line\"><span class=\"string\">' May =&gt; Month.May , 5</span></span><br><span class=\"line\"><span class=\"string\">' Jun =&gt; Month.Jun , 6</span></span><br><span class=\"line\"><span class=\"string\">' Jul =&gt; Month.Jul , 7</span></span><br><span class=\"line\"><span class=\"string\">' Aug =&gt; Month.Aug , 8</span></span><br><span class=\"line\"><span class=\"string\">' Sep =&gt; Month.Sep , 9</span></span><br><span class=\"line\"><span class=\"string\">' Oct =&gt; Month.Oct , 10</span></span><br><span class=\"line\"><span class=\"string\">' Nov =&gt; Month.Nov , 11</span></span><br><span class=\"line\"><span class=\"string\">' Dec =&gt; Month.Dec , 12</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然，我们还可以这样访问枚举类</span></span><br><span class=\"line\">print( Month.Jan ) <span class=\"comment\"># 输出 Month.Jan</span></span><br><span class=\"line\">print( Month(<span class=\"number\">1</span>) ) <span class=\"comment\"># 输出 Month.Jan</span></span><br><span class=\"line\">print( Month[<span class=\"string\">'Jan'</span>] ) <span class=\"comment\"># 输出 Month.Jan</span></span><br><span class=\"line\">print( Month.Jan.value ) <span class=\"comment\"># 输出 1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>若有需求，我们可精确地控制枚举类型，即从 <code>Enum</code> 派生出自定义类：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> enum <span class=\"keyword\">import</span> Enum, unique</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@unique</span></span><br><span class=\"line\"><span class=\"comment\"># @unique 装饰器可以帮助我们检查保证没有重复值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Weekday</span><span class=\"params\">(Enum)</span>:</span></span><br><span class=\"line\">    Sun = <span class=\"number\">0</span></span><br><span class=\"line\">    Mon = <span class=\"number\">1</span></span><br><span class=\"line\">    Tue = <span class=\"number\">2</span></span><br><span class=\"line\">    Wed = <span class=\"number\">3</span></span><br><span class=\"line\">    Thu = <span class=\"number\">4</span></span><br><span class=\"line\">    Fri = <span class=\"number\">5</span></span><br><span class=\"line\">    Sat = <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"错误-调试-测试\"><a href=\"#错误-调试-测试\" class=\"headerlink\" title=\"错误/调试/测试\"></a>错误/调试/测试</h3><h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><h5 id=\"返回错误码\"><a href=\"#返回错误码\" class=\"headerlink\" title=\"返回错误码\"></a>返回错误码</h5><ul>\n<li><p>在操作系统提供的调用中，返回错误码非常常见。比如打开文件的函数 open()，成功时返回文件描述符 (就是一个整数)，出错时返回 <code>-1</code>。同理，我们设计函数时，也可相仿地设置返回代码。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">RESULT_OK = <span class=\"number\">0</span></span><br><span class=\"line\">RESULT_FALSE = <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> false:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RESULT_FALSE</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RESULT_OK</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"异常错误\"><a href=\"#异常错误\" class=\"headerlink\" title=\"异常错误\"></a>异常错误</h5><ul>\n<li><p>高级语言通常都内置了一套 <code>try...except...finally...</code> 的错误处理机制，Python 也不例外，使用方法见实例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    result = <span class=\"number\">10</span> / int(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># result = 10 / 0</span></span><br><span class=\"line\">    print(<span class=\"string\">'result:'</span>, result)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"comment\"># 抛出非数值异常错误</span></span><br><span class=\"line\">    print(<span class=\"string\">'ValueError:'</span>, e)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    <span class=\"comment\"># 抛出被除数为零的异常错误</span></span><br><span class=\"line\">    print(<span class=\"string\">'ZeroDivisionError:'</span>, e)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 若没有错误发生可在 except 语句块后加一个 else</span></span><br><span class=\"line\">    <span class=\"comment\"># 当没有错误发生时，会自动执行else语句</span></span><br><span class=\"line\">    print(<span class=\"string\">'no error!'</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 若设置了 finally 则一定会被执行，但可不设置 finally 语句</span></span><br><span class=\"line\">    print(<span class=\"string\">'finally...'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>Python 的异常类型其实也是 class，所有的异常类型都继承自 BaseException，常见的错误类型和继承关系见：<a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\" target=\"_blank\" rel=\"noopener\">Python. Exception hierarchy</a></p>\n<p>  故在使用 except 时需要注意的是：它不但捕获该类型的错误，还把其子类也 “一网打尽”，例如：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    foo()</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">'ValueError'</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> UnicodeError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">'UnicodeError'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 假设 foo() 函数运行错误，则输出 \"ValueError\"</span></span><br><span class=\"line\"><span class=\"comment\"># 第二个 except 永远也捕获不到 UnicodeError</span></span><br><span class=\"line\"><span class=\"comment\"># 因为 UnicodeError 是 ValueError 的子类，即异常被第一个 except 给捕获了</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"调用栈\"><a href=\"#调用栈\" class=\"headerlink\" title=\"调用栈\"></a>调用栈</h5><ul>\n<li><p>在函数嵌套调用中，若错误没有被捕获，它就会一直往上抛，直至被 Python 解释器捕获，并打印一个错误信息然后程序退出。因此当发生错误时，一定要分析错误的 <code>调用栈</code> 信息，定位错误的位置，找出 <code>错误根源</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># err.py</span></span><br><span class=\"line\"><span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(src)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span> / int(src)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(src)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(src) * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    bar(<span class=\"string\">'0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">main() <span class=\"comment\"># 调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 抛出异常错误，错误的跟踪信息如下：</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">\"err.py\"</span>, line <span class=\"number\">11</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    main()</span><br><span class=\"line\">File <span class=\"string\">\"err.py\"</span>, line <span class=\"number\">9</span>, <span class=\"keyword\">in</span> main</span><br><span class=\"line\">    bar(<span class=\"string\">'0'</span>)</span><br><span class=\"line\">File <span class=\"string\">\"err.py\"</span>, line <span class=\"number\">6</span>, <span class=\"keyword\">in</span> bar</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(s) * <span class=\"number\">2</span></span><br><span class=\"line\">File <span class=\"string\">\"err.py\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> foo</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span> / int(s)</span><br><span class=\"line\">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h5><ul>\n<li><p>异常类型属于 class，捕获一个异常就是捕获到该 class 的一个实例。因此，异常并不是凭空产生而是 <code>有意</code> 创建并抛出的。Python 的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出异常。</p>\n<p>  如果要抛出错误，首先根据需要定义一个异常的 class，并选择好继承关系，然后用 <code>raise</code> 语句抛出一个异常实例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只有在必要的时候才定义我们自己的错误类型</span></span><br><span class=\"line\"><span class=\"comment\"># 尽量使用 Python 内置的错误类型，例如 ValueError，TypeError</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooError</span><span class=\"params\">(ValueError)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    n = int(s)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> == n:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> FooError(<span class=\"string\">'invalid value: %s'</span> % s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span> / n</span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"string\">'0'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><ul>\n<li>推荐 IDE 调试，即设置断点、单步执行，就需要一个支持调试功能的 IDE。目前比较好的 Python IDE 有： <code>PyCharm</code> 和 <code>Eclipse vs pyDev</code>。</li>\n</ul>\n<h4 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h4><ul>\n<li>单元测试是用来对一个 <code>模块</code>、<code>函数</code> 或 <code>类</code> 来进行正确性检验的 <code>测试</code> 工作。</li>\n<li>这种以 <code>测试驱动</code> 的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的 <code>测试用例</code>。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。</li>\n<li><p>为了编写单元测试，我们需要引入 Python 自带的 <code>unittest</code> 模块。以下为一个 <code>单元测试</code> 的示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承unittest.TestCase</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span><span class=\"params\">(unittest.TestCase)</span>:</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每个测试用例执行之后做操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'After each testcase...'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># 每个测试用例执行之前做操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Before each testcase...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># 必须使用 @classmethod 装饰器，所有 test 运行完后运行一次</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDownClass</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'After all testing...'</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"comment\"># 必须使用 @classmethod 装饰器，所有 test 运行前运行一次</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUpClass</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Before all testing...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testTestcaseA</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, <span class=\"number\">1</span>)  <span class=\"comment\"># 测试用例</span></span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testTestcaseB</span><span class=\"params\">(self, elem1 = <span class=\"string\">'a'</span>, elem2 = <span class=\"string\">'A'</span>)</span>:</span></span><br><span class=\"line\">        self.assertEqual(elem1, elem2)  <span class=\"comment\"># 测试用例</span></span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"comment\"># 一旦编写好单元测试就可运行单元测试，最简单的运行方式是在最后加上两行代码：</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面是一些常用的断言，也就是校验结果：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">assertEqual(a, b)\t\t<span class=\"comment\"># a == b</span></span><br><span class=\"line\">assertNotEqual(a, b)\t\t<span class=\"comment\"># a != b</span></span><br><span class=\"line\">assertTrue(x)\t\t\t<span class=\"comment\"># bool(x) is True</span></span><br><span class=\"line\">assertFalse(x)\t\t\t<span class=\"comment\"># bool(x) is False</span></span><br><span class=\"line\">assertIsNone(x)\t\t\t<span class=\"comment\"># x is None</span></span><br><span class=\"line\">assertIsNotNone(x)\t\t<span class=\"comment\"># x is not None</span></span><br><span class=\"line\">assertIn(a, b)\t\t\t<span class=\"comment\"># a in b</span></span><br><span class=\"line\">assertNotIn(a, b)\t\t<span class=\"comment\"># a not in b</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"面向-I-O-编程\"><a href=\"#面向-I-O-编程\" class=\"headerlink\" title=\"面向 I/O 编程\"></a>面向 I/O 编程</h3><ul>\n<li><p><code>I/O</code>：即输入/输出 ( Input/Output )。</p>\n</li>\n<li><p><code>I/O 接口</code>：是 <code>主机</code> 与 <code>被控对象</code> 进行 <code>信息交换</code> 的纽带。例如，程序运行时数据是在内存中驻留的，由 CPU 来执行计算、控制，其中涉及到的数据交换则由磁盘、网络等实现。具体地，I/O 接口的功能就是负责选址、传送命令、传送数据等。</p>\n</li>\n<li><p><code>I/O 编程</code>：<code>操作 I/O</code> 是由 <code>操作系统</code> 完成的，且操作系统会提供低级 <code>C 接口</code>，即对 I/O 操作进行 <code>封装</code>，高级语言通过调用 (函数) 的方式实现操作 I/O 的目的。Python 也不例外，即面向 I/O 接口编程。</p>\n</li>\n<li><p>程序完成 I/O 操作会有 Input 和 Output 两个 <code>数据流</code>：</p>\n<ul>\n<li><code>Stream (流)</code> 是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</li>\n<li><code>Input Stream</code> 就是数据从外面 (磁盘、网络) 流进内存，<code>Output Stream</code> 就是数据从内存流到外面去。</li>\n</ul>\n</li>\n<li><p>需要知道的是，CPU 的速度远远快于磁盘、网络等 I/O。因此，代码操作 I/O 接口时速度是会产生不匹配的问题，而同步和异步的区别就在于是否等待 I/O 执行的结果，故 I/O 编程有分 <code>同步模型</code> 和 <code>异步模型</code>。</p>\n<ul>\n<li><p><code>同步 I/O</code>：在一个线程中，CPU 执行代码的速度极快，然而，一旦遇到 I/O 操作，如读写文件、发送网络数据时，就需要等待 I/O 操作完成才能继续进行下一步操作。</p>\n<blockquote>\n<p>引用廖老师的例子，同步 I/O 指：去麦当劳点餐，你说 “来个汉堡”，服务员告诉你，对不起，汉堡要现做需等 5 分钟，于是你站在收银台前面等了 5 分钟，当拿到汉堡再去逛商场。</p>\n</blockquote>\n</li>\n<li><p><code>异步 I/O</code>：当代码需要执行一个耗时的 I/O 操作时，它只发出 I/O 指令并不等待 I/O 结果，然后去执行其他代码。一段时间后，当 I/O 返回结果时，再通知 CPU 进行处理。</p>\n<blockquote>\n<p>异步 I/O 指：你说“来个汉堡”，服务员告诉你，汉堡需要等 5 分钟，你可以先去逛商场，等做好了我们再通知你，这样你可以立刻去干别的事情 (逛商场)，这是异步 I/O。</p>\n</blockquote>\n</li>\n<li><p>同步 I/O 与 异步 I/O 模型的实现原理如图 6-10-1 所示：</p>\n<p><img src=\"/images/illustration/Programme/2018/09/life-is-short-we-need-python_6-10-1.png\" alt=\"图 6-10-1 同步 I/O 与 异步 I/O 模型的实现原理\"></p>\n<center>图 6-10-1 同步 I/O 与 异步 I/O 模型的实现原理</center>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"存-取本地数据\"><a href=\"#存-取本地数据\" class=\"headerlink\" title=\"存/取本地数据\"></a>存/取本地数据</h4><ul>\n<li>读写文件是最常见的 I/O 操作，Python 内置了读写文件的函数，用法和 C 是兼容的。</li>\n<li>在磁盘上读写文件的功能都是由操作系统提供的，即读写文件就是请求操作系统打开一个 <code>文件对象</code> (通常称为文件描述符)，通过操作系统提供的接口从这个文件对象中读取数据 (读文件)，或把数据写入这个文件对象  (写文件)。</li>\n</ul>\n<h5 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h5><ul>\n<li><p><code>open()</code> 函数，传入文件名和标示符：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 以只读方式读入 test.txt 文件</span></span><br><span class=\"line\">    file = open(<span class=\"string\">'/Users/kofe/test.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 若文件不存在，则抛出 IOError 的错误</span></span><br><span class=\"line\">    <span class=\"comment\"># Traceback (most recent call last):</span></span><br><span class=\"line\">    <span class=\"comment\"># File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span></span><br><span class=\"line\">    <span class=\"comment\"># FileNotFoundError: [Errno 2] No such file or directory: '...'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 若文件打开成功，调用 read() 方法可一次读取文件的全部内容</span></span><br><span class=\"line\">    <span class=\"comment\"># Python 把内容读到内存，用一个 str 对象表示**</span></span><br><span class=\"line\">    str = f.read()</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> file:</span><br><span class=\"line\">        f.close() <span class=\"comment\"># 文件使用完毕后必须关闭</span></span><br><span class=\"line\">           </span><br><span class=\"line\"><span class=\"comment\"># 当然，try...finally...  的写法实在太繁琐，故 Python 引入了 with 语句写法：</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/kofe/test.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">\tprint( file.read() )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取文件的方式：</span></span><br><span class=\"line\"><span class=\"comment\"># read()：适合文件较小，可一次性读取文件</span></span><br><span class=\"line\"><span class=\"comment\"># read(size)：若不能确定文件大小，通过反复调用读取文件</span></span><br><span class=\"line\"><span class=\"comment\"># readlines()：若是读取配置文件，行读取最为方便</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f.readlines():</span><br><span class=\"line\">    print(line.strip()) <span class=\"comment\"># 把末尾的 '\\n' 删掉</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"File-like-Object\"><a href=\"#File-like-Object\" class=\"headerlink\" title=\"File-like Object\"></a>File-like Object</h5><ul>\n<li>要想操纵一个文件你需要使用 <code>open()</code> 函数打开文件，<code>open()</code> 函数返回一个 <code>类文件对象 (File-like Object)</code>，这就是这个文件在 python 中的抽象表示。除了 File 外，还可以是内存的字节流，网络流，自定义流等。</li>\n<li>File-like Object 不要求从特定类继承，就如 <a href=\"http://localhost:4000/2018/09/life-is-short-we-need-python.html#iter\" target=\"_blank\" rel=\"noopener\">定制类.iter</a> 章节所提及的 <code>鸭子类型</code>，只要我们让 <code>class</code> 实现 <code>read()</code> 方法，它就是 File-like Object。</li>\n</ul>\n<h5 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h5><ul>\n<li><p>前面的操作是读取文本文件，且是 <code>UTF-8</code> 编码的文本文件。要读取二进制文件，例如图片、视频等，用 <code>rb</code> 模式打开文件即可：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">file = open(<span class=\"string\">'/Users/kofe/test.jpg'</span>, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">print( file.read() )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出十六进制表示的字节：</span></span><br><span class=\"line\"><span class=\"string\">b'\\xff\\xd8\\xff\\x18Exif\\x00...'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h5><ul>\n<li><p>写文件和读文件是一样的，唯一区别是调用 open() 函数时，传入标识符 <code>w</code> 或者 <code>wb</code> 表示写 <code>文本文件</code> 或 <code>写二进制文件</code>：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 写入文件后，务必要调用 f.close() 来关闭文件</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 Try...finally... ，或 With 语句的写法：</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/kofe/test.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">file.write(<span class=\"string\">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有模式的定义及含义可参考 Python 官方文档：<a href=\"https://docs.python.org/3/library/functions.html#open\" target=\"_blank\" rel=\"noopener\">Built-in Functions.open()</a></p>\n</li>\n</ul>\n<center>表 6-10-1 open() 函数操作文件的模式</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标识符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">只读模式 (默认)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">写入模式 (覆盖原文件)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:left\">追加模式 (文件存在则在文件尾部追加，反之则建立)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">b</td>\n<td style=\"text-align:left\">二进制格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">刷新打开的磁盘文件 (读与写)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"StringIO-BytesIO\"><a href=\"#StringIO-BytesIO\" class=\"headerlink\" title=\"StringIO/BytesIO\"></a>StringIO/BytesIO</h4><blockquote>\n<p><code>StringIO</code> 和 <code>BytesIO</code> 是在内存中操作 str 和 bytes 的方法。</p>\n</blockquote>\n<h5 id=\"StringIO\"><a href=\"#StringIO\" class=\"headerlink\" title=\"StringIO\"></a>StringIO</h5><ul>\n<li>数据读写不一定是文件，也可以在内存中读写。</li>\n<li><p>StringIO 顾名思义就是在内存中读写 str。要把 str 写入 StringIO，我们需要先创建一个 StringIO，然后像文件一样写入：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\">file = StringIO()</span><br><span class=\"line\">file.write(<span class=\"string\">'Welcome to\\n Python World!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    s = file.readline()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">''</span> == s:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print( s.strip() )</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 输出结果：</span></span><br><span class=\"line\">Welcome to</span><br><span class=\"line\">Python World!</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"BytesIO\"><a href=\"#BytesIO\" class=\"headerlink\" title=\"BytesIO\"></a>BytesIO</h5><ul>\n<li>StringIO 操作的只能是 str，如果要操作二进制数据，就需要使用 BytesIO。</li>\n<li><p>BytesIO 实现了在内存中读写 bytes。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\">file = BytesIO()</span><br><span class=\"line\">file.write( <span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>) )</span><br><span class=\"line\">print( file.getvalue() )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入的不是 str，而是经过 UTF-8 编码的 bytes：</span></span><br><span class=\"line\"><span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"操作文件和目录\"><a href=\"#操作文件和目录\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h4><ul>\n<li><p>若我们要操作文件、目录，可在命令行下面输入操作系统提供的各种命令来完成。例如 dir、cp 等命令。</p>\n</li>\n<li><p>若要在 Python 程序中执行这些目录和文件的操作怎么办？其实 Python 内置的 <code>os</code> 模块，可以直接调用操作系统提供的 <code>接口函数</code>。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 现实操作系统类型</span></span><br><span class=\"line\"><span class=\"comment\"># posix：Linux、Unix 或 Mac OS X</span></span><br><span class=\"line\"><span class=\"comment\"># nt：Windows</span></span><br><span class=\"line\">print( os.name )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h5><ul>\n<li><p>在操作系统中定义的环境变量，全部保存在 <code>os.environ</code> 这个变量中，可直接查看：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 操作系统中定义的环境变量，全部保存在os.environ 变量中</span></span><br><span class=\"line\">os.environ</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取某个环境变量的值：os.environ.get('key')</span></span><br><span class=\"line\">os.environ.get(<span class=\"string\">'PATH'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"操作文件和目录-1\"><a href=\"#操作文件和目录-1\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h5><ul>\n<li>操作文件和目录的函数一部分放在 <code>os</code> 模块中，一部分放在 <code>os.path</code> 模块中。</li>\n<li><p>查看、创建和删除目录可以这么调用：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前目录的绝对路径</span></span><br><span class=\"line\">os.path.abspath(<span class=\"string\">'.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在某个目录下创建一个新目录 (首先把新目录的完整路径表示出来)</span></span><br><span class=\"line\">os.path.join(<span class=\"string\">'/Users/kofe'</span>, <span class=\"string\">'testdir'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 然后创建一个目录</span></span><br><span class=\"line\">os.mkdir(<span class=\"string\">'/Users/michael/testdir'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删掉一个目录</span></span><br><span class=\"line\">os.rmdir(<span class=\"string\">'/Users/kofe/testdir'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把两个路径合成一个时，不要直接拼字符串，而要通过 os.path.join() 函数</span></span><br><span class=\"line\"><span class=\"comment\"># 同理，要拆分路径时，也不要直接去拆字符串，而要通过 os.path.split() 函数</span></span><br><span class=\"line\">os.path.split(<span class=\"string\">'/Users/kofe/testdir/file.txt'</span>)</span><br><span class=\"line\">(<span class=\"string\">'/Users/kofe/testdir'</span>, <span class=\"string\">'file.txt'</span>) <span class=\"comment\"># 返回一个元组 Tuple </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如：os.path.splitext() 可直接让你得到文件扩展名</span></span><br><span class=\"line\">os.path.splitext(<span class=\"string\">'/path/to/file.txt'</span>)</span><br><span class=\"line\">(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'.txt'</span>) <span class=\"comment\"># 返回一个元组 Tuple</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>文件操作：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对文件重命名</span></span><br><span class=\"line\">os.rename(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'test.py'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删掉文件</span></span><br><span class=\"line\">os.remove(<span class=\"string\">'test.py'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然而在 os 模块中没有关于复制的函数</span></span><br><span class=\"line\"><span class=\"comment\"># 借助 shutil 模块提供了copyfile() 的函数实现复制 (os 模块的补充)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>利用 Python 的特性操作文件或目录：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出当前目录下的所有目录</span></span><br><span class=\"line\">[x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">'.'</span>) <span class=\"keyword\">if</span> os.path.isdir(x)]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h4><ul>\n<li>在程序运行期间，变量都是在内存中存放的。当 <code>程序结束</code>，变量所占用的内存将被操作系统 <code>全部回收</code>。若在程序运行期间，有需求保存 <code>变量</code> 或者 <code>对象</code> 的 <code>数据</code> 和 <code>状态信息</code>，以待下次启动程序时可直接加载该变量或对象。</li>\n<li><code>序列化</code>：将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。</li>\n<li><code>反序列化</code>：可通过从存储区中读取或反序列化对象的状态，重新创建该对象。</li>\n<li><p>在 Python 中，序列化称为 <code>pickling</code>，在其他语言中也被称为 <code>serialization</code>、<code>marshalling</code>、<code>flattening</code> 等。Python 提供了 <code>pickle</code> 模块来实现序列化。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\">\t</span><br><span class=\"line\">dict = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">25</span>, <span class=\"string\">'score'</span>: <span class=\"number\">90</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Case.01. 对象/变量 =&gt; Bytes =&gt; File 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dump() 将序列化后的对象 obj 以二进制形式写入文件 file 中</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./dump.txt'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    pickle.dump(dict, file)</span><br><span class=\"line\"><span class=\"comment\"># load() 将序列化的对象从文件 file 中读取出来</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'./dump.txt'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    dict = pickle.load(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Case.02. 对象/变量 =&gt; Bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dumps() 方法不需要写入文件中，可直接返回一个序列化的 bytes 对象</span></span><br><span class=\"line\">dump = pickle.dumps(dict)</span><br><span class=\"line\"><span class=\"comment\"># loads() 则可直接读取一个序列化的 bytes 对象</span></span><br><span class=\"line\">dict_sub = pickle.loads(dump)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"JSON-基础\"><a href=\"#JSON-基础\" class=\"headerlink\" title=\"JSON 基础\"></a>JSON 基础</h4><ul>\n<li><p><code>引入</code>：Pickle 的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于 Python，且可能不同版本的 Python 彼此都不兼容。</p>\n<p>  若我们要在不同的编程语言之间传递对象，就必须把 <code>对象序列化为标准格式</code>，例如 XML，但 XML 需要解析读取。但更好的方法是序列化为 JSON，因为 JSON 表示出来就是一个 <code>字符串</code>，可以被所有语言读取，且方便地存储到磁盘或者通过网络传输。</p>\n</li>\n<li><p><code>JSON</code> 表示的对象就是标准的 <code>JavaScript</code> 语言的对象，JSON 和 Python 内置的数据类型对应如下：</p>\n</li>\n</ul>\n<center>表 6-10-2 JSON 类型与 Python 类型的数据类型对应表</center>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JSON 类型</th>\n<th style=\"text-align:center\">Python 类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{}</td>\n<td style=\"text-align:center\">dict</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[]</td>\n<td style=\"text-align:center\">list</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">“String”</td>\n<td style=\"text-align:center\">str</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10 / 3.14159</td>\n<td style=\"text-align:center\">int / float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true / false</td>\n<td style=\"text-align:center\">True / False</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">None</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li><p>Python 内置的 <code>json</code> 模块提供了非常完善的 Python 对象到 JSON 格式的转换：</p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">dict = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Bob'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">25</span>, <span class=\"string\">'score'</span>: <span class=\"number\">90</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dump() 方法可以直接把 JSON 写入一个 File-like Object</span></span><br><span class=\"line\"><span class=\"comment\"># dumps() 方法返回一个字符串，内容就是标准的 JSON</span></span><br><span class=\"line\">json_str = json.dumps(dict)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load() 方法从一个 File-like Object 中直接反序列化出对象</span></span><br><span class=\"line\"><span class=\"comment\"># loads() 把 JSON 的字符串反序列化为 Python 对象</span></span><br><span class=\"line\">json_str = <span class=\"string\">'&#123;\"name\": \"Bob\", \"age\": 25, \"score\": 90&#125;'</span></span><br><span class=\"line\">json.loads(json_str)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>由于 JSON 标准规定 JSON 编码是 <code>UTF-8</code>，所以我们总是能正确地在 Python 的 str 与 JSON 的字符串间转换。</li>\n</ul>\n<h4 id=\"JSON-进阶\"><a href=\"#JSON-进阶\" class=\"headerlink\" title=\"JSON 进阶\"></a>JSON 进阶</h4><ul>\n<li><p>Python 的 <code>dict = {&#39;key&#39;: value}</code> 对象可直接序列化为 JSON 的 <code>{&quot;key&quot;: value}</code>。但一般情况，我们常用 class 表示对象 ( 例如 <code>Student</code> 类 )，再序列化该对象：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, score)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行代码，将会报 TypeError 错误</span></span><br><span class=\"line\">stu = Student(<span class=\"string\">'Bob'</span>, <span class=\"number\">25</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\">print(json.dumps(stu))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>造成上述错误的原因是：Student 对象不是一个可序列化为 JSON 的对象。</p>\n<p>  其实，仔细观察 <code>dumps()</code> 的参数列表，可以发现除了第一个必须的 <code>obj</code> 参数外，<code>dumps()</code> 方法还提供了一大堆的 <a href=\"https://docs.python.org/3/library/json.html#json.dumps\" target=\"_blank\" rel=\"noopener\">可选参数</a>，这些可选参数可让我们来定制 JSON 序列化：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下 dumps() 不知道如何将 Student 实例变为 JSON 的 &#123;\"key\": value&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 我们只需为 Student 实例专门写一个转换 (组装) 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student2dict</span><span class=\"params\">(std)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: std.name,</span><br><span class=\"line\">        <span class=\"string\">'age'</span>: std.age,</span><br><span class=\"line\">        <span class=\"string\">'score'</span>: std.score</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这样，Student 实例首先被 student2dict() 函数转换成 dict，再被序列化为 JSON</span></span><br><span class=\"line\">print( json.dumps(stu, default = student2dict) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>当然，若我们遇到一个 Teacher 类的实例，照样无法序列化为 JSON。其实可以通过一种 <code>通用方法</code> 将任意 class 的实例变为 dict。</p>\n<p>  通常 class 的实例都有一个 <code>__dict__</code> 属性，它本身一个 <code>dict</code>，用来存储实例变量。也有少数例外，比如定义了 <code>__slots__</code> 的 class。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print( json.dumps(s, default = <span class=\"keyword\">lambda</span> obj: obj.__dict__) )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同理，我们需要把 JSON 反序列化为一个 Student 实例对象，<code>loads()</code> 方法首先转换出一个 <code>dict</code> 对象，然后我们传入的 <a href=\"https://docs.python.org/3/library/json.html#json.load\" target=\"_blank\" rel=\"noopener\">object_hook</a> 函数，其负责把 dict 转换为 Student 实例对象。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dict2student</span><span class=\"params\">(d)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Student( d[<span class=\"string\">'name'</span>], d[<span class=\"string\">'age'</span>], d[<span class=\"string\">'score'</span> ])</span><br><span class=\"line\">    </span><br><span class=\"line\">json_str = <span class=\"string\">'&#123;\"age\": 25, \"score\": 90, \"name\": \"Bob\"&#125;'</span></span><br><span class=\"line\">print( json.loads(json_str, object_hook = dict2student) )</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"同步-I-O\"><a href=\"#同步-I-O\" class=\"headerlink\" title=\"同步 I/O\"></a>同步 I/O</h4><ul>\n<li><p>在本章引言部分已讲述 同步 I/O 与 异步 I/O 模型的区别，同步模型即按普通顺序写执行代码：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">do_some_code()</span><br><span class=\"line\">file = open(<span class=\"string\">'/path/file.txt'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 线程停在此处等待 I/O 操作结果</span></span><br><span class=\"line\">r = file.read() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># I/O 操作完成后线程才能继续执行</span></span><br><span class=\"line\">do_some_code(r)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"异步-I-O\"><a href=\"#异步-I-O\" class=\"headerlink\" title=\"异步 I/O\"></a>异步 I/O</h4><ul>\n<li><p>在 I/O 操作过程中，由于一个 I/O 操作阻塞了当前线程，导致其他代码无法执行，故我们可使用多线程或者多进程来 <code>并发</code> 执行代码。然而，我们通过 <code>多线程和多进程</code> 的模型解决了 <code>并发</code> 问题，但现实情况是系统不能无上限地增加线程，因为系统切换线程的开销很大，一旦线程数量过多，CPU 花在线程切换上的时间就增多，则导致性能严重下降的结果。</p>\n<p>  CPU 高速执行能力和 I/O 设备的读写速度严重不匹配导致线程阻塞。多线程和多进程只是解决这一问题的一种方法，而另一种解决 I/O 问题的方法就是异步 I/O。</p>\n</li>\n<li><p><code>异步 I/O 模型</code> 需要一个 <code>消息循环</code>。在消息循环中，主线程不断地重复 <code>读取消息 / 处理消息</code> 这一过程：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">loop = get_event_loop()</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    event = loop.get_event()</span><br><span class=\"line\">    process_event(event)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h5><blockquote>\n<p>在开始异步 I/O 模型学习前，我们先来了解 <code>协程</code> 的概念。</p>\n</blockquote>\n<ul>\n<li><p>协程 ( Coroutine )，又称微线程、纤程。协程不是进程或线程，其执行过程更 <code>类似于</code> 子程序，或者说 <code>不带返回值的函数调用</code>。  </p>\n<p>  例如：A 调用 B，B 中又调用了 C。C 执行完毕返回，B 执行完毕返回，最后是 A 执行完毕。</p>\n<ul>\n<li><p>子程序调用是通过栈实现的，<code>一个线程</code> 就是执行 <code>一个子程序</code>。子程序调用总是 <code>一个入口</code>，<code>一次返回</code>，且 <code>调用顺序是明确的</code>。</p>\n</li>\n<li><p>而协程的调用和子程序是不同的。协程看上去也是子程序，但在执行过程中，<code>调用顺序不固定</code>，在子程序内部可中断转而执行别的子程序，在适当的时再返回来接着执行原子程序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">A</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">B</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'x'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'y'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 若由协程执行，在执行 A 的过程中可随时中断去执行 B</span></span><br><span class=\"line\"><span class=\"comment\"># B 也可能在执行过程中中断再去执行 A，则执行结果有：</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">x</span><br><span class=\"line\">y</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>从上述例子结果可看出，A、B 的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？</p>\n<ul>\n<li><p><code>协程极高的执行效率</code>：因为子程序切换不是线程切换，而是由程序自身控制。因此，没有线程切换的开销，和多线程相比，线程数量越多协程的性能优势就越明显。</p>\n</li>\n<li><p><code>不需要多线程的锁机制</code>：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，故执行效率相对多线程要高。</p>\n</li>\n</ul>\n</li>\n<li><p>因为协程是一个线程执行，是否可利用多核 CPU 获得更高的性能，若方案可行的话如何操作？最简单的方法是 <code>多进程</code> + <code>协程</code>，既充分利用多核，又充分发挥协程的高效率。</p>\n</li>\n<li><p>Python 对协程的支持是通过 <code>generator</code> 实现的，例如：</p>\n<ul>\n<li>传统 <code>生产者 - 消费者</code> 模型是：一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但有很大机率出现 <code>死锁</code>。</li>\n<li><p>若改用协程，生产者生产消息后，直接通过 <code>yield</code> 跳转到消费者开始执行，待消费者执行完毕后切换回生产者继续生产。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Step.03. consumer 通过 yield 取消息并处理，再通过 yield 把结果回传</span></span><br><span class=\"line\">        n = <span class=\"keyword\">yield</span> result</span><br><span class=\"line\">        print(<span class=\"string\">'[CONSUMER] Consuming %s...'</span> % n)</span><br><span class=\"line\">        result = <span class=\"string\">'OK:'</span> + str(n) <span class=\"comment\"># result 可能是 I/O 操作或耗时任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">produce</span><span class=\"params\">(c)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Step.01. 首先调用 c.send(None) 启动生成器</span></span><br><span class=\"line\">    c.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'[PRODUCER] Producing %s...'</span> % n)</span><br><span class=\"line\">        <span class=\"comment\"># Step.02. 当产生了东西后，通过 c.send(n) 切换到 consumer 执行</span></span><br><span class=\"line\">        result = c.send(n)</span><br><span class=\"line\">        <span class=\"comment\"># Step.04. produce 拿到 consumer 的处理结果，(或) 继续生产下条消息</span></span><br><span class=\"line\">        print(<span class=\"string\">'[PRODUCER] Consumer return: %s'</span> % result)       </span><br><span class=\"line\">    <span class=\"comment\"># Step.05. produce 决定不生产了，通过 c.close() 关闭 consumer，整个过程结束</span></span><br><span class=\"line\">    c.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数调用</span></span><br><span class=\"line\">cons = consumer()</span><br><span class=\"line\">produce(cons)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">[PRODUCER] Producing <span class=\"number\">1.</span>..</span><br><span class=\"line\">[CONSUMER] Consuming <span class=\"number\">1.</span>..</span><br><span class=\"line\">[PRODUCER] Consumer <span class=\"keyword\">return</span>: OK:<span class=\"number\">1</span></span><br><span class=\"line\">[PRODUCER] Producing <span class=\"number\">2.</span>..</span><br><span class=\"line\">[CONSUMER] Consuming <span class=\"number\">2.</span>..</span><br><span class=\"line\">[PRODUCER] Consumer <span class=\"keyword\">return</span>: OK:<span class=\"number\">2</span></span><br><span class=\"line\">[PRODUCER] Producing <span class=\"number\">3.</span>..</span><br><span class=\"line\">[CONSUMER] Consuming <span class=\"number\">3.</span>..</span><br><span class=\"line\">[PRODUCER] Consumer <span class=\"keyword\">return</span>: OK:<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Asyncio\"><a href=\"#Asyncio\" class=\"headerlink\" title=\"Asyncio\"></a>Asyncio</h5><ul>\n<li><code>asyncio</code> 是 <code>Python 3.4</code> 版本引入的标准库，直接内置了对异步 I/O 的支持。</li>\n<li><p><code>asyncio</code> 的编程模型是一个 <code>消息循环</code>。我们从 asyncio 模块中直接获取一个 <code>EventLoop</code> 的引用，然后把需要执行的协程扔到 EventLoop 中执行，就实现了异步 I/O，具体操作实例：</p>\n<ul>\n<li><code>@asyncio.coroutine</code> 把一个 <code>generator</code> 标记为 <code>coroutine</code> 类型，然后，我们就把这个 coroutine 扔到 EventLoop 中执行。</li>\n<li><p><code>hello()</code> 会首先打印出 <code>Hello world!</code>。然后，<code>yield from</code> 语法可以让我们方便地调用另一个 generator。由于 <code>asyncio.sleep()</code> 也是一个 <code>coroutine</code>，所以线程不会等待 <code>asyncio.sleep()</code>，而是直接中断并执行下一个消息循环。当 <code>asyncio.sleep()</code> 返回时，线程就可以从 <code>yield from</code> 拿到返回值 ( 此处是 None )，然后接着执行下一行语句。</p>\n<blockquote>\n<p>若我们把 asyncio.sleep(1) 看成是一个耗时一秒的 I/O 操作。在此期间，主线程并未等待，而是去执行 EventLoop 中其他可以执行的 coroutine，因此实现了 <code>并发执行</code>。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 异步调用 asyncio.sleep(1):</span></span><br><span class=\"line\">    r = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello again!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取 EventLoop</span></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\"><span class=\"comment\"># 执行 coroutine</span></span><br><span class=\"line\">loop.run_until_complete(hello())</span><br><span class=\"line\">loop.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><code>举一反三</code>：我们尝试用 Task 封装两个 coroutine：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'Hello world! (%s)'</span> % threading.currentThread())</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Hello again! (%s)'</span> % threading.currentThread())</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">tasks = [hello(), hello()]</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class=\"line\">loop.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"comment\"># 由打印当前线程名称可看出，两个 coroutine 由同一个线程并发执行的</span></span><br><span class=\"line\">Hello world! (&lt;_MainThread(MainThread, started <span class=\"number\">140735195337472</span>)&gt;)</span><br><span class=\"line\">Hello world! (&lt;_MainThread(MainThread, started <span class=\"number\">140735195337472</span>)&gt;)</span><br><span class=\"line\">(暂停约 <span class=\"number\">1</span> 秒)</span><br><span class=\"line\">Hello again! (&lt;_MainThread(MainThread, started <span class=\"number\">140735195337472</span>)&gt;)</span><br><span class=\"line\">Hello again! (&lt;_MainThread(MainThread, started <span class=\"number\">140735195337472</span>)&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>具体应用场景</code>：我们 asyncio 的异步网络连接来获取 sina、sohu 的首页。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wget</span><span class=\"params\">(host)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'wget %s...'</span> % host)</span><br><span class=\"line\">    connect = asyncio.open_connection(host, <span class=\"number\">80</span>)</span><br><span class=\"line\">    reader, writer = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> connect</span><br><span class=\"line\">    header = <span class=\"string\">'GET / HTTP/1.0\\r\\nHost: %s\\r\\n\\r\\n'</span> % host</span><br><span class=\"line\">    writer.write(header.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> writer.drain()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        line = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> reader.readline()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> line == <span class=\"string\">b'\\r\\n'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s header &gt; %s'</span> % (host, line.decode(<span class=\"string\">'utf-8'</span>).rstrip()))</span><br><span class=\"line\">    <span class=\"comment\"># Ignore the body, close the socket</span></span><br><span class=\"line\">    writer.close()</span><br><span class=\"line\"></span><br><span class=\"line\">loop = asyncio.get_event_loop()</span><br><span class=\"line\">tasks = [wget(host) <span class=\"keyword\">for</span> host <span class=\"keyword\">in</span> [<span class=\"string\">'www.sina.com.cn'</span>, <span class=\"string\">'www.sohu.com'</span>]</span><br><span class=\"line\">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class=\"line\">loop.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">wget www.sohu.com...</span><br><span class=\"line\">wget www.sina.com.cn...</span><br><span class=\"line\">(打印出sohu的header)</span><br><span class=\"line\">www.sohu.com header &gt; HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">www.sohu.com header &gt; Content-Type: text/html</span><br><span class=\"line\">...</span><br><span class=\"line\">(打印出 sina 的 header)</span><br><span class=\"line\">www.sina.com.cn header &gt; HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\">www.sina.com.cn header &gt; Date: Wed, <span class=\"number\">20</span> May <span class=\"number\">2015</span> <span class=\"number\">04</span>:<span class=\"number\">56</span>:<span class=\"number\">33</span> GMT</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async / Await\"></a>Async / Await</h5><ul>\n<li>用 asyncio 提供的 @asyncio.coroutine 可把一个 generator 标记为 coroutine 类型，然后在 coroutine 内部用 yield from 调用另一个 coroutine 实现异步操作。</li>\n<li><p>为简化并更好地标识异步 I/O，从 <code>Python 3.5</code> 开始引入了新语法 <code>async</code> 和 <code>await</code>，可以让 <code>coroutine</code> 的代码更简洁易读。请注意，async 和 await 是针对 coroutine 的新语法，即只需要做两步简单的替换：</p>\n<ul>\n<li>把 <code>@asyncio.coroutine</code> 替换为 <code>async</code>；</li>\n<li><p>把 <code>yield from</code> 替换为 <code>await</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># asyncio 原语法书写</span></span><br><span class=\"line\"><span class=\"meta\">@asyncio.coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">    result = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello again!\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 用新语法重新编写</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">    result = <span class=\"keyword\">await</span> asyncio.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Hello again!\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 剩下的代码保持不变</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"Aiohttp\"><a href=\"#Aiohttp\" class=\"headerlink\" title=\"Aiohttp\"></a>Aiohttp</h5><ul>\n<li><p>asyncio 可实现单线程并发 I/O 操作。若仅用在客户端，发挥的威力不大。若在服务器端，例如Web服务器，由于HTTP连接就是 I/O 操作，因此可以用 <code>单线程 + coroutine</code> 实现多用户的高并发支持。</p>\n<p>  asyncio 实现了 TCP、UDP、SSL 等协议，<code>aiohttp</code> 则是基于 asyncio 实现的 HTTP 框架。</p>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>[1] <a href=\"https://www.bilibili.com/video/av10742893?from=search&amp;seid=163310817147442185\" target=\"_blank\" rel=\"noopener\">Eddie Woo. The RSA Encryption Algorithm. 2017. bilibili.com</a>  </li>\n<li>[2] <a href=\"https://www.jianshu.com/p/3221e07d3310\" target=\"_blank\" rel=\"noopener\">John cui. 轻松学习RSA加密算法原理. 2018. jianshu.com</a>  </li>\n<li>[3] <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\" target=\"_blank\" rel=\"noopener\">廖雪峰. Python 教程. 2018. liaoxuefeng.com</a>  </li>\n<li>[4] <a href=\"https://dl.acm.org/citation.cfm?id=1327492\" target=\"_blank\" rel=\"noopener\">Dean J, Ghemawat S. MapReduce: simplified data processing on large clusters [J].<br>Communications of the ACM, 2008, 51(1): 107-113.</a>  </li>\n<li>[5] <a href=\"https://book.douban.com/subject/25779298/\" target=\"_blank\" rel=\"noopener\">Wes McKinney. 利用 Python 进行数据分析 [M]. 机械工业出版社, 2013</a>  </li>\n<li>[6] <a href=\"http://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener\">Python. The Python Standard Library. python.org</a> </li>\n<li>[7] <a href=\"https://blog.csdn.net/silence2015/article/details/56483892\" target=\"_blank\" rel=\"noopener\">渐行渐远silence. Windows 下多版本 Python 安装与 pip 安装和 pip 使用. 2017. csdn.net</a></li>\n</ul>\n","categories":["Programme"],"tags":["python","数据分析","linux","爬虫"]}]