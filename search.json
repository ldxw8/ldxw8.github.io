[{"title":"一个 APP 的诞生 ( 笔记 + 方法论 )","url":"/2018/03/Producting-An-Application.html","content":"\n## 序言\n\n[《 一个 APP 的诞生 》](https://book.douban.com/subject/26865230/)被定义是一本教科书、工具书，适合想通过 APP 实现自己的产品梦的受众通读，即通过本书可让你快速了解 APP 产品的整个流程，从零到一，创造 APP 产品。\n\n而通读本书籍后，或许你、我有同样的感受，即大部分内容是以设计师的角度看待问题的。这样，若你就是设计师，或许这将助你更加透彻理解 APP 的产出过程；若你是软件工程师，也可看待成是从另一角度理解软件过程。当然，这些知识只停留在书本层面，而对实际项目而言，有出入是无法避免的，但不失它的参考价值。简言之，这样一本图文并茂、实例贴近现实且含有众多跨界元素 (设计、开发、交互、产品等) 的工具书，特别是产品这一类别的书目 (下述还有同类型的书籍推荐)，不仅让你有机会感同身受业界优秀企业的工作流程，也是自身寻求产品方法论的不二选择。\n\n<!-- More -->\n\n- 推荐书目\n\t- 《 U一点·料 》：由阿里巴巴集团 1688.UED 团队历经多年实践之后的佳作，内容重实战、讲方法、求专业、论文化，且以 “道─术─器” 的思路为编排脉络，从设计观、思考体系、方法论上层层剖析，将零散的行业技术诀窍串成体系，对 “UED如何发展突破” 提出了自己的真知灼见。  \n\t贴上本书的 [豆瓣书评](https://book.douban.com/subject/26594029/)，供朋友评判，做出抉择。\n\t\n\t- 《 设计之下 》：由搜狐新闻客户端 UED 团队共同出品的佳作，分别以交互设计、视觉设计、设计师视觉，全面讲解了用户体验设计的流程和方法。  \n\t贴上本书的 [豆瓣书评](https://book.douban.com/subject/25817190/)，供朋友评判，做出抉择。\n- 更新进程\n\t- 2018.03.25 - 完成序言；\n\t- 2018.03.26 - 更新内容 (第 01 / 08 章)；\n\n## 零 思维导图 \n\n> 根据思维导图的架构，掌握知识；以及参考部分项目经验，文档归纳。\n\n- 前景探索\n\t- 竞品分析\n\t\t- 熟悉竞品分析的流程；\n\t\t- 明确竞品分析的每个部分包含的内容；\n\t\t- 分析报告的输出.\n\t- 用户研究\n\t\t- 了解用户研究的方法及它们的定义；\n\t\t- 用户画像  \n\t\t1) 掌握建立的流程；  \n\t\t2) 用户画像的分类，每种分类的使用方法及优缺点；  \n\t\t3) 用户画像的构成、价值.  \n- 设计规范及流程\n\t- 建立设计规范的特定情况；\n\t- iOS 和 Android 规范的差别；\n\t- 主要元素及作用.\n- 交互设计\n\t- 用户体验\n\t\t- 交互设计师的工作内容、状况分析及处理；\n\t\t- 紧密联系生活.\n\t- 交互设计的基本流程\n\t\t- 交互设计五要素：`人`、`目的`、`环境`、`媒介`、`行为`；\n\t\t- 基本流程.\n- 视觉设计\n\t- Ui 设计\n\t\t- Ui 设计制作流程；\n\t\t- 对未来设计趋势的了解与把握.\n\t- 图标品质的提升\n\t- 界面细节设计\n\t\t- 栅格系统提升界面易读性与可用性；\n\t\t- 切图标注的知识与技能；\n\t\t- 设计资源命名及文件分类整理.\n- 开发实现\n\t- 如何与产品、运营、开发配合工作\n\t\t- 互联网企业中产品开发实现过程；\n\t\t- 主要工作岗位职责和工作性质，以及岗位配合的注意事项.\n\t- 发布制作完成的 APP\n\t\t- 发布方式\n\t\t- 常见市场\n- 线上运营\n\t- 运营的定义\n\t\t- 什么是运营及运营的目标；\n\t\t- 运营手段及运营岗位.\n\t- 线上运营活动：策划线上活动流程\n\t- H5 页面和 Banner 设计\n- 服务设计\n\n\t> 推荐阅读 *This is service design thinking* \\\\(^{[1]}\\\\)\n\t\n\t- 服务设计的概念\n\t- 服务设计的流程\n\t- 工具箱：熟悉常见服务设计工具\n- 跨界设计\n\n## 壹 前景探索\n\n### 竞品分析\n竞品分析，能带来的价值：\n\n- 企业：优势 (Strength，S) 和 劣势 (Weakness，W)\n- 设计：User Interface\n\n#### 为什么要竞品分析\n- 知己知彼\n\t- 市场：红海 (已经市场空间)；蓝海 (还不存在的产品)\n\t- 动向：目标人群、运营策略、用户体验、用户反馈\n- 设计灯塔：权衡利益与设计成本的关系\n\n#### 如何做竞品分析\n- `确立` 竞争对手\n\t- 市场目标一致；\n\t- 目标用户相同；\n\t- 产品功能相同、相似；\n\t- 用户需求相同.\n\t\t\n> 选择优质和合适的竞品，再进行分析。如表 1-1 所示，定位于即时通信类 APP ，即所要考虑的竟品类型及竞争关系。\n\t\n<center>表 1-1 即时通信类 APP 的竟品类型及竞争关系</center>\n\n| 考虑因素 | 主要分析对象 | 参考分析对象 |\n| :------ | :--------- | :--------- |\n| 市场目标方向一致、目标用户群体大致相同、功能用户需求相似 | QQ、微信 | 陌陌、JUJU |\n| 市场目标方向不一致、功能需求互补 | YY、斗鱼 | -- |\n\n- `挖掘` 对手信息\n\t- 搜集资料\n\t\t- 数据资料，例如：APP 下载量，市场方面数据等。\n\t\t- 其他信息，例如：APP 新闻动态，研究报告，APP 评价等。\n\t- 搜集渠道\n\t\t- 公司内部资源\n\t\t- 运营部门\n\t\t- 搜索引擎\n\n- `分析` 数据信息\n\t- [分析数据模型](#分析数据信息)\n\t- 整合收集的信息 (企业战略、目标人群、交互设计、视觉设计、运营策略等)\n\n- `输出` 分析报告 -- [可视化输出](#输出分析报告)\n\n#### 分析数据信息\n\n- 分析数据模型\n\t- `SWOT` 模型，即道斯矩阵、态势分析法，经常用于企业战略制定、竞争对手分析。\n\t\n\t详细解释见：[MBAlib.智库百科.SWOT分析模型](http://wiki.mbalib.com/wiki/%E9%81%93%E6%96%AF%E7%9F%A9%E9%98%B5)\n\n\t> `SWOT` 分别代表企业的优势 (Stength)、劣势 (Weakness)、机会 (Opportunity) 和威胁 (Threats)。\n\t\n\t- 波士顿矩阵 \\\\(^{[2,3]}\\\\)，四象限分析法。详细解释见：[MBAlib.智库百科.波士顿矩阵](http://wiki.mbalib.com/wiki/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E7%9F%A9%E9%98%B5)\n\n\t- KANO 模型 \\\\(^{[4]}\\\\)，一种典型的定性分析模型，经常用于绩效指标分类。其定义了顾客需求的三个层次：基本型需求、期望型需求和兴奋型需求。详细解释见：[MBAlib.智库百科.KANO 模型](http://wiki.mbalib.com/wiki/KANO%E6%A8%A1%E5%9E%8B)\n\n- 关于 SWOT 分析模型\n\t- SW：竞争优势指一企业超越其竞争对手的能力，这种能力有助于实现企业的主要目标 -- 盈利。  \n\t- OT：不利发展趋势所形成的挑战。\n\n<center>表 1-2 SWOT 分析模型</center>\n\n| 发展趋势 (负) | 条件 | 发展趋势 (正) |\n| :----: | :----: | :----: |\n| 劣势 (Weakness，W) | 企业自身自身实力与竞争对手比较 | 优势 (Strength，S) |\n| 威胁 (Threats，T) | 外部环境变化对企业可能的影响 | 机遇 (Opportunity，O) |\n\n> 举例：对蚂蜂窝 APP 实行 SWOT 分析法\t\n\n- `S`：旅游攻略是蚂蜂窝进军移动端的拳头产品，手持海量 UGC 数据和攻略引擎技术。\n- `W`：盈利模式单一，知识与传统 OTA 合作的佣金 + 广告模式)。\n- `O`：OTA & O2O。\n- `T`：行业壁垒；变现能力还能支持技术和运营走多远？\n\n- 关于波士顿矩阵：波士顿矩阵区分出4种业务组合，如表 1-3 所示。\n\n<center>表 1-3 波士顿矩阵业务组合</center>\n\n|   | 销售增长率 | 市场占有率 |\n| :--- | :--- | :--- |\n| 明星类产品 | 高 | 高 |\n| 瘦狗类产品 | 低 | 低 |\n| 问题类产品 | 高 | 低 |\n| 现金牛类产品 | 低 | 高 |\n\n#### 输出分析报告\n- 竞品分析包括内容\n\t- 市场趋势、行业现状； -- `SWOT 分析法`\n\t- 竞品的企业愿景、APP 定位、发展策略；\n\t- 目标用户，用户画像；\n\t- 核心功能；\n\t- 交互设计；\n\t- APP 优缺点；\n\t- 运营及推广策略；\n\t- 总结并建议.\n\n### 用户研究\n用户研究最终的输出产物之一就是用户画像，即用户研究 => 用户画像。\n\n#### 一般方法\n- 场景观察：正常的工作环境或其他产品合适的 `物理场景` 中观察用户并与其交流。\n- 可用性测试：用户在一定场景下使用产品。由可用性工程师对 `用户操作过程、习惯` 等进行 `观察、记录和测量`，以评估产品的可用性问题。\n- 问卷调查：用 `统一、严格设计的问卷` 收集研究对象有关的 `心理特征` 和 `行为数据` 资料。\n- 访谈研究：在访问用户过程中，提示被访者对某一问题的 `潜在冬季、新年、态度和感情`。\n\n\t> 潜在冬季、新年、态度和感情？\n\n- 焦点小组：定性研究方法。一定的组织结构，让用户一起进行 `互动`，用以激发新的思考和想法。\n- 桌面研究：对已收集信息进行调研活动，即对二手资料进行搜集、筛选，并判断问题是否已经 `局部解决` 或 `全部解决`。\n- 专家评估：组织各领域专家运用专业方面知识和经验，通过直观归纳，对产品过去、现在及发展过程进行综合分析、研究，再作判断。\n\n#### 用户画像\n\n- 输出用户画像的流程\n\t- 获取研究用户信息\n\t- 细分用户群\n\t- 建立并丰富用户画像\n\n- 建立用户画像的方法\n\t- `定性` 用户画像\n\t- 经 `定量验证` 的 `定性` 用户画像\n\t- `定量` 用户画像\n\t\n\t> 定性 (性质) 研究：创立理论的过程。即 `具体向抽象转化`，形成理论。通常以 `访谈、观察` 等方法收集第一手描述性资料 (归纳法)。 \n\t> \n\t> 定量 (度量) 研究：`提出理论假设`，使用 `问卷` 等工具收集具有数量关系的资料，对资料进行 `量化`，以 `数据形式` 验证假设。\n\n- 定性用户画像 -- `直接分用户群`\n\t- 步骤  \n\t1) 定性研究访谈；  \n\t2) 细分用户群；  \n\t3) 建立细分群体的用户画像。 \n\t- 定性用户画像优缺点\n\t\t- 优点 - 省时省力、简单、需要专业人员少。\n\t\t- 缺点 - 缺少数据支持和验证。\n\t\t\n- 经定量验证的定性用户画像 -- `分了用户群再验证`\n\t- 步骤  \n\t1) 定性研究访谈；  \n\t2) 细分用户群；  \n\t3) 定量验证细分群体；  \n\t4) 建立细分群体的用户画像。  \n\t- 经定量验证的定性用户画像优缺点\n\t\t- 优点 - 有一定的定量验证工作，需要少量的专业人员。\n\t\t- 缺点 - 工作量较大，成本较高。\n\t\t\n- 定量用户画像 -- `验证了再分用户群`\n\t- 步骤  \n\t1) 定性研究；  \n\t2) 多个细分假设；  \n\t3) 通过定量收集细分数据；  \n\t4) 聚类分析细分用户；  \n\t5) 建立细分群体的用户画像。  \n\t- 定量用户画像的优缺点\n\t\t- 优点 - 有充分的佐证、更加科学、需要大量的专业人员。\n\t\t- 缺点 - 工作量较大，成本高。\n\n- 用户画像包含以下元素：\n\t- 基本信息 (姓名、照片、年龄、家庭状况、收入、工作)；\n\t- 典型场景；\n\t- 目标和动机；\n\t- 需求和痛点；\n\t- 对 APP 的态度；\n\n\t如图 1-1 以音乐沉侵爱好者为例，建立用户画像。\n\t\n<center>图 1-1 音乐沉侵爱好者的用户画像</center>\n![音乐沉侵爱好者的用户画像](/images/illustration/Reading/2018/03/Producting_An_Application_1-1.png )\n\n#### 调查问卷设计\n设计问卷的目的是为了更好地手机信息或者定量去验证定性研究的结果。故在问卷设计的过程中，呀把握调查的目的和需求，具体可分为以下几个步骤：\n\n- 问卷设计流程\n\t- 确定所需要的信息\n\t\t- 调研目的\n\t\t- 竞品分析文档\n\t\t- 用户画像\n\t- 确定问题顺序：`先易后难`\n\t- 问卷的测试和修改\n\t\t- 投放预测试\n\t\t- 问题修改\n\n- 设计问卷题目\n\t- 用户基本信息 (年龄、爱好、APP 相关生活行为)\n\t- 用户使用 APP 典型场景 (碎片化时间使用，使用频次)\n\t- 用户的痛点与需求\n\t\n\t> 可参考书本 P27-30 的实例，全民 K 歌用户体验调研问卷。\n\t\n## 贰 交互设计\n\n### 用户体验\n- 用户体验，即站在用户角度考虑问题。\n- 交互设计师\n\t- 核心价值：沟通\n\t- 工作流程：\n\t\t- 对重要或者紧急设计任务进行准备、分工、安排；\n\t\t- 写解决方案，画稿；\n\t\t- 评审待确认的设计；\n\t\t- 总结方案，输出结果，同步给部门；\n\t\t- 输出设计稿，与产品、研发及时沟通；\n\t\t- 与项目接口人沟通.\n\t\n### 交互设计基本流程\n\n#### 交互五要素\n- 人 (Amber)：有记录灵感的设计师，有需求的人称之为用户。\n- 媒介 (Tools)：用户使用的设备。\n- 行为 (Behavior)：用户的具体操作。\n- 目的 (Purpose)：要达到某种的效果。\n- 环境 (Enviroment)：用户使用的设备，这里指手机。\n\t\n<center>图 2-1 交互设计五元素</center>\n![交互设计五元素](/images/illustration/Reading/2018/03/Producting_An_Application_2-1.png )\n\t\n#### 如何参与一个项目\n\n交互设计师接到一个项目或者需求后，他们的工作流程基本按照以下流程执行，即需求分析、信息架构设计、流程图设计、原型设计、最终进入产品的可用性测试，当然需求分析阶段完成后，也可以进行可用性测试，以验证方案的可行性。图 2-2 描述了交互设计师如何参与一个项目。\n\t\n<center>图 2-2 交互设计师如何参与一个项目</center>\n![交互设计师如何参与一个项目](/images/illustration/Reading/2018/03/Producting_An_Application_2-2.png ) \n\t\n> 提示：实例中，我们以便签 APP 为主题展开讨论的。\n\n- 1) 需求分析\n\t- 了解需求\n\t- 用户调研\n\t- 需求定位：竟品分析、头脑风暴、绘制故事板、人物建模 (用户画像)、产品数据\n\t- `实例`：在需求分析阶段，我们从诸多研究方法和数据中简明得出便签 APP 的产品定位：  \n\t\t- 产品定义\n\t\t\t- 使用人群 -- `设计师、学设计的学生`  \n\t\t\t- 主要功能 -- `记录想法、分享想法`  \n\t\t- 用户需求\n\t\t\t- 使用目标 -- `随时随地记录想法、把想法分享给同事和朋友`  \n\t\t\t- 使用场景 -- `商场、会议、课堂、工作、训练、作图`  \n\t\t\t- 用户目标 -- `操作方便快捷、耗流量少、学习成本低`\n\n- 2) 信息架构\n\t- 需求收集\n\t- 需求删减\n\t- 定义优先级\n\t- 用户任务\n\t- `实例`：根据需求分析得到的信息，接下来便梳理架构，开始架构草图设计。如图 2-2 所示。\n \n\t<center>图 2-3 信息架构图</center>\n\t![信息架构图](/images/illustration/Reading/2018/03/Producting_An_Application_2-3.png ) \n\t\n- 3) 流程图\n\t- 操作流程\n\t- 页面流\n\t- 布局设计\n\n- 4) 原型设计\n\t- 交互原型\n\t- 交互说明\n\t- 设计规范\n\t- 项目跟进\n\n- 5) 测试\n\t- 可用性测试\n\t- A/B 测试\n\t- 用户反馈\n\t- 产品数据\n\n#### 需求分析的考虑因素\n在产品设计的整个过程中，要充分考虑商业需求和用户体验的平衡。如图 2-4 所示，展示了需求收集需要考虑的因素。\n\n需求的删减是需求分析中很有必要的步骤，他是设计师们综合考虑各种因素，取舍得到的结果。\n\n<center>图 2-4 需求收集需要考虑的因素</center>\n![信息架构图](/images/illustration/Reading/2018/03/Producting_An_Application_2-4.png )\n\n#### 如何组织需求\n- 1) 定义信息优先级\n\t- 产品定位：核心功能，意味着这些功能的优先级最高。\n\t- 真实需求：区分次要需求。它们是围绕核心功能进行拓展的。\n\t- 需求删减：权衡删减需求。\n- 2) 信息架构：深度和广度要均衡。\n\n#### 流程图设计\n- 确定信息架构\n- 确定用户任务\n- 如何完成操作\n\n\t完成任务方法即我们所说的流程，任务流程是根据用户实际操作的心理和行为来确定的。  \n\t\n\t[实例] 人在使用纸质版的便签的流程：  \n\t\n\t- 首先拿出纸和笔；\n\t- 纸上记录想法；\n\t- 粘贴醒目的地方便于查看。\n\t\n\t在现实中使用便签的过程和在手机上使用便签的实际操作步骤基本吻合，如图 2-5 所示，展示了添加便签的流程图。\n\t\n\t> 这里的流程图设计，可以使用 C 语言程序设计中的程序流程图。\n\t\n<center>图 2-5 添加便签的流程图素</center>\n![添加便签的流程图](/images/illustration/Reading/2018/03/Producting_An_Application_2-5.png )\n\n#### 原型设计及设计原则\n- 确立功能和逻辑后\n- 设计草图\n- 低保真线框图\n\t\n图 2-6 与图 2-7 是本人早期设计的沙漏记事 APP 的低保真线稿，强制插入了一段广告哈。而对应的高保真原型图，可参考对应的专题介绍。[「沙漏记事」APP](http://www.zcool.com.cn/work/ZMTU3NjcxMTI=.html)\n\t\n<center>图 2-6 沙漏记事 APP 低保真线稿 1</center>\n![沙漏记事APP低保真线稿](/images/illustration/Reading/2018/03/Producting_An_Application_2-6.jpg )\n\n<center>图 2-7 沙漏记事 APP 低保真线稿 2</center>\n![沙漏记事APP低保真线稿](/images/illustration/Reading/2018/03/Producting_An_Application_2-7.jpg )\n\n#### 总结\n- 交互设计基本流程\n\t- 需求收集和分析\n\t- 定义优先级\n\t- 信息架构设计\n\t- 流程设计\n\t- 原型设计\n- 需求分析过程，要综合考虑 `商业`、`项目`、`用户` 三要素。\n\n## 参考资料\n[[1] Schneider, Jakob. This is service design thinking [M]. Canada: BIS Publishers, 2011](https://book.douban.com/subject/5397784/)  \n[2] 赵晋. 波士顿矩阵分析在实际案例中的运用[J]. 中国高新技术企业,2008,(8).  \n[3] 张镜天. 波士顿矩阵在酒类营销中的运用[J]. 中国酒业. 2006,(1).  \n[4] 上海质量科学研究院. 顾客满意的测量、分析与改进[M]. 中国标准出版社,2009.10.  ","tags":["规范"],"categories":["Reading"]},{"title":"Android 设计模式之实践与案例 ( 笔记 + 速记手册 )","url":"/2018/01/Design-Pattern-Based-on-Android.html","content":" \n## 序言\n\n在你接触过的安卓项目当中，如监听器、适配器、迭代器等并不陌生，然而它们无不体现着设计模式的精髓。设计与模式的结合，往往与设计能力与代码质量息息相关。同理，逆过来思考此类问题，对于一些优秀项目、源码的理解障碍往往是对其设计 (逻辑、性能、解耦等) 的理解，而非源码本身。而作为开发者，知其然知其所以然，这也正是我们深入学习设计模式的理由之一。\n\n当然，我们还要正视学习设计模式的心态。掌握了各种设计模式，并不代表你的设计能力与代码质量就会突飞猛进，同样在项目中运用设计模式也不是生搬硬套就解决问题了，在《 [Head First 设计模式](https://book.douban.com/subject/2243615/) 》一书中，则把设计模式的使用心智分为：初学者、中级人员和悟道者，虽有“玄学”的味道，但也恰当。即没有最好的模式，而是你综合众多因素，根据经验、方法来筛选合适的设计模式与你的项目结合，运用。\n\n最后，对于设计模式的学习，不要局限于《 [Android 源码设计模式](https://book.douban.com/subject/26644935/) 》本身，你可以搭配一些经典论文、综述，或者书籍，以至于怀疑一个问题的正误，多比对、多思考，以得到最精确的理解。\n\n<!-- More -->\n\n- 推荐书目：\n\t- 《 设计模式之禅 》：待补充\n\t- 《 设计模式（可复用面向对象软件的基础）》：待补充\n\n- 更新进程\n\t- 2018.01.30 - 完成序言；\n\t- 2018.01.31 - 更新第壹章；\n\t- 2018.02.05 - 更新第贰章 ( 共 23 种设计模式 )；\n\t- 2018.03.19 - 更新完毕.\n\n## 总览\n\n- [零 本书架构](#零-本书架构)\n- [壹 面向对象编程六大原则](#壹-面向对象编程六大原则)\n- [贰 二十三种设计模式解析](#贰-二十三种设计模式解析)\n- [叁 MVC 与 MVP 模式](#叁-MVC-与-MVP-模式)\n\n\n## 零 本书架构\n\n### 面向对象六大原则\n\n- 单一职责原则\n> 优化代码第一步。即就一个类而言，应该有且仅有一个引起它变化的原因。\n\n- 开闭原则\n> 让程序更稳定，更灵活。即软件中的对象（类、模块、函数等）应该对于扩展是开放的，但对于修改是封闭的。\n\n- 里氏替换原则\n> 构建扩展性更好的系统。\n\n- 依赖倒置原则  \n> 让项目拥有变化能力，即依赖抽象，不依赖具体实现。\n\n- 接口隔离原则\n> 系统拥有更高灵活性。\n\n- 迪米特原则\n> 也称为「最少知识原则」。即一个对象应对其他对象有最少的了解。\n\n### 二十三种设计模式\n\n| 模式名称 | 一句话描述 |\n| :--- | :--- |\n| 单例模式 | 一个类只有一个实例 |\n| Build 模式 | 自由拓展你的项目 |\n| 原型模式 | 使程序运行更高效 |\n| 工厂方法模式 | 生成复杂对象 |\n| 抽象工厂模式 | - |\n| 策略模式 | 时势造英雄 |\n| 状态模式 | 随遇则安 |\n| 责任链模式 | 使编程更有灵活性 |\n| 解释器模式 | 化繁为简的翻译机 |\n| 命令模式 | 让程序畅通执行 |\n| 观察者模式 | 解决、解耦的钥匙 |\n| 备忘录模式 | 编程中的后悔药 |\n| 迭代器模式 | 解决问题的第三者 |\n| 模块方法模式 | 抓住问题的核心 |\n| 访问者模式 | 数据结构与操作分离 |\n| 中介者模式 | 调解者模式或调停者模式 |\n| 代理模式 | 委托模式 |\n| 组合模式 | 物以类聚 |\n| 适配器模式 | 得心应手粘合剂 |\n| 装饰模式 | 动态给对象添加额外职责 |\n| 享元模式 | 对象共享，避免创建多对象 |\n| 外观模式 | 统一编程接口 |\n| 桥接模式 | 连接两地的交通枢纽 |\n\n### MVC 与 MVP 模式\n\n\n## 壹 面向对象编程六大原则\n\n### 单一职责原则\n\n- Single Responsibility Principle，SRP.\n- 即就一个类而言，应该仅有一个引起它变化的原因。\n\n> 如何划分一个类，一个函数的职责？每个人的经验不同，观点看法也不同，故视具体任务而定。但它也有一些基本的知道原则：  \n> \n> * 两个完全不一样的功能就不应该放到同一个类中。\n> * 一个类中应该是一组相关性很高的函数、数据的封装。\n\n### 开闭原则\n\n- Open Close Principle，OCP.\n- 即软件中的对象（类、模块、函数等）应该对于扩展是开放的，但对于修改是封闭的。\n- 勃兰特·梅耶. 《面向对象软件构造》中提倡：\n\t- 新的或改变的特性应通过新建不同的类实现，新建的类可通过 `继承` 的方式来重用原类的代码。\n\t- 已存在的实现类对于修改是封闭的，但新的实现类可通过 `覆写父类的接口` 应对变化。\n\n> 开闭原则知道我们，当软件需变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。\n\n### 里氏替换原则\n\n> **往往开闭原则与里氏替换原则是生死相依、不离不弃的。**\n\n\n- Liskov Substitution Principle，LSP。\n- 所有引用基类的地方必须能透明地使用其子类的对象。\n\n```Java\npublic abstract class View {\n\tpublic abstract void draw();\n\tpublic void measure(int width, int height) {\n\t\t// 测量视图的大小\n\t}\n}\n\npublic class Button extends View {\n\tpublic draw() {\n\t\t// 绘制按钮\n\t}\t\n}\n\npublic class Windows {\n\tpublic show(View child) {\n\tchild.draw();\n\t}\n}\n```\n\n> 上述例子中，任何继承自 View 类的子类都可以设置给 show 方法，即里氏替换。这样千变万化的 View 传递给 Window，Window 只管组织 View，并显示在屏幕上。\n\n### 依赖倒置原则\n\n- Dependence Inversion Principle，DIP.\n- 一种特定的解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节。\n- 依赖倒置原则的几个关键点：\t\n\t- 高层模块不应该依赖低层模块，两者都应以来其抽象（接口或抽象类）\n \n\t> 高层模块指调用端，低层模块指实现类。\n\t\n\t- 抽象不应该依赖细节\n\t- 细节应依赖抽象\n- 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系。一句话概括：`面向接口编程，面向抽编程`\n\n```Java\n/*\n * 设计一款实现图片缓冲功能的接口，具体的缓冲实现方式、细节，根据实际情况编写。\n */\n\npublic interface ImageChache {\t// ImageCache 缓存抽象\n\tpublic Bitmap get(String url);\n\tpublic void put(String url, Bitmap bmp);\n}\n\npublic class MemoryCache implements ImageCache {\n\t// 根据实际需求，再实现具体细节\n}\n\npublic class ImageLoader {\n\t// 图片缓存类，依赖抽象，不依赖细节\n\tImageCache mCache = new MemoryCache();\n\t\n\tpublic void displayImage(String url, ImageView imageView) {\n\t\tBitmap bmp = mCache.get(url);\n\t\tif(null == bmp){\n\t\t\tdownloadImageAsync(url, imageView);\n\t\t} else {\n\t\t\timageView.setImageBitmap(bmp);\n\t\t}\n\t}\n\t\n\tpublic void setImageCache(ImageCache cache) {\n\t\tmCache = cache;\n\t}\n}\n```\n\n### 接口隔离原则\n\n- Interface Segregation Principles，ISP.\n- 类间的依赖关系应建立在最小的接口上。ISP 将非常庞大、臃肿的接口拆分成更小的和更具体的接口。IPS的目的是系统解开耦合。\n\n> 如上例中，ImageLoader 中的 ImageCache，ImageLoader 只需要知道该缓存对象有存、取缓存图片的接口即可，其他一概不管。\n\n### 迪米特原则\n\n- 一个对象应对其他对象有最少的了解、即类的内部如何实现与调用者、依赖者没关系，调用者或依赖者之需知道它需要的方法即可，其他一概不管。\n\n- 图 1-1 展示了租客、中介与房间相互之间的需求关系。\n\n\t![租客、中介与房间关系](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_1-1.png )\n\t<center>图 1-1 租客、中介与房间关系</center>   \n\n\t因为租客只需要房子，即把需求转达中介，对房子具体的租金、维修、签约等交由中介处理，租客不需要再了解细节。改进效果见图 1-2。\n\n\t![租客、中介与房间关系](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_1-2.png )\n\t<center>图 1-2 改进：租客、中介与房间的关系</center>  \n\n## 贰 二十三种设计模式解析\n\n### 单例模式\n#### 单例模式的定义\n- 确保某 `一个类只有一个实例` ，而且自行实例化并向整个系统提供这个实例。\n\n\t> `一个类只有一个实例` ：避免产生多个对象消耗过多资源，如访问 I/O 和数据库等资源。\n\n\n#### 单例模式 UML 类图\n![单例模式示意图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-1.png )\n<center>图 2-1 单例模式示意图</center> \n\n- 实现单例模式主要有如下几个关键点：\n\t- `构造函数` 不对外开放，一般设为 `私有` ；\n\t- 通过一个 `静态方法` 或者 `枚举返回` 单例类对象；\n\t- 确保单例类的对象有且只有一个，尤其多线程环境下；\n\t- 确保单例类对象在 `反序列化` 时不会重新构建对象；\n\t\n\t> 序列化：将对象的状态信息转换为可以存储或传输的形式的过程。一般将一个对象存储至一个储存媒介，例如档案或是记亿体缓冲等。在网络传输过程中，可以是字节或是XML等格式。  \n\t> \n\t> 反序列化：而字节的或XML编码格式可以还原完全相等的对象。这个相反的过程又称为反序列化。\n \n#### 单例模式的简单示例\n例如一个公司只有一个 CEO，一个应用只有一个 Application 对象等。下面以公司里的 CEO 为例来简单演示，即一个公司可有几个 VP，无数个员工，但 CEO 只有一个。\n\n```Java\n// 员工的基类\npublic class Staff { \n\tpublic void work(){\n\t\t// 忽略执行细节\n\t}\n}\n\n// 副总裁类\npublic class VP extends Staff {\n\tpublic void work() {\n \t\t// 覆写执行细节\n\t}\n}\n\n// 饿汉单例模式：声明静态对象时已初始化\npublic class CEO extends Staff { // 公司保证只有一个 CEO\n\tprivate static final CEO mCeo = new CEO();\n\tprivate CEO(){}\n\tpublic static CEO getCeo() {\n\t\treturn mCeo;\n\t}\n\tpublic void work() {\n\t\t// 覆写执行细节\n\t}\n}\n\n/*\n * 实际中使用：\n * CEO 类不能通过 new 的形式构造对象，只能通过 CEO.getCeo() 函数获取。\n * CEO 对象是静态对象，并在声明时已初始化，保证 CEO 对象的唯一性。\n */\n \nStaff ceo1 = CEO.getCeo();\t\nStaff ceo2 = CEO.getCeo();\n```\n\n#### 单例模式的其他实现方式\n##### 懒汉模式\n- 声明一静态对象；\n- 调用 getInstance() 方法初始化 ( 用时才初始化，即惰性处理机制 )\n\n```Java\n// 懒汉单例模式：用时才初始化，即惰性处理机制\npublic class Singleton {\n\tprivate static Singleton instantce;\n\tprivate Singleton() {}\n\t\n\t// 添加 synchronized 关键字，即 getInstance() 是一个同步方法\n\tpublic static synchronized Singleton getInstance() {\n\t\tif( null == instance ) {\n\t\t\tinstance = new Singleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n\n- 懒汉单例模式的优缺点：  \n\t- 优点 - 使用时才实例化，一定程度上节约资源。  \n\t- 缺点 - 每次调用 getInstance() 都进行同步，造成不必要同步开销。\n\n##### Double CheckLock (DCL)\n\n```Java\npublic class Singleton {\n\t// private static Singleton sInstance = null;\n\tprivate volatile static Singleton sInstance = null; // 保证 sInstance 对象每次都是从主内存存、读取。\n\t\n\tprivate Singleton() {}\n\t\n\tpublic void doSomething() {\n\t\tSystem.out.println(\"do sth.\");\n\t}\n\t\n\tpublic static Singleton getInstance() {\n\t\tif( null == sInstance ) { // 避免不必要同步\n\t\t\tsynchronized(Singleton.class) {\n\t\t\t\tif( null == sInstance ) { // 此处判空操作，是因为 Java 编译器允许处理器乱序执行，具体解析见注解\n\t\t\t\t\tsInstance = new Singleton();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sInstance;\n\t}\n}\n```\n\nDCL 又称「丑陋的优化」？  \n\nDCL 虽一定程度解决了资源消耗，多余同步、线程安全等问题，但某种情况下还是会出现失效问题 ( 双重检查锁定(DCL) )，即称「丑陋的优化」。\n\n- 线程A，执行 `sInstance = new Singleton();`，编译器会编译成多条汇编指令，具体汇编指令的分工为：  \n\t- Step.01 给 Singleton 实例分配内存；  \n\t- Step.02 调用 Singleton() 的构造函数；  \n\t- Step.03 将 sInstance 对象指向分配的内存空间；  \n\t\n- 然而 Java 编译器允许处理器乱序执行，即有「1-2-3」或「1-3-2」的执行顺序。\n- 若执行「1-3-2」的顺序，这样会使 DCL 的优化失效，即第三步执行完毕，sInstance 非空，线程B取走 sInstance。再使用时就会报错。\n\n##### 静态内部类单例模式\n\n```Java\npublic class Singleton {\n\tprivate Singleton() {}\n\tpublic static Singleton getInstance() {\n\t\treturn SingletonHolder.sInstance;\n\t}\n\tprivate static class SingletonHolder { // 静态内部类\n\t\tprivate static final Singleton sInstance = new Singleton();\n\t}\n}\n```\n\n第一次加载 Singleton 的 getInstance() 方法才会使 sInstance 被初始化。因此，第一次调用 getInstance() 方法会导致虚拟机加载 SingletonHolder 类.\n\n> 内部类是延时加载的，只会在第一次使用时加载，不使用不加载。这样，即保证了线程安全，又保证单例对象唯一性，同时也延迟单例的实例化。\n\n##### 枚举单例\n\n```Java\n// 默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例。\npublic enum SingletonEnum {\n\tINSTANCE;\n\tpublic void doSomething() {\n\t\tSystem.out.println(\"do sth.\");\n\t}\n}\n```\n\n#### 总结\n- 不管以哪种形式实现单例模式，它们的核心原理都是将 `构造函数私有化` ，并通过 `静态方法获取一个唯一的实例` 。\n\n\t> 获取实例的过程须保证线程安全，防止反序列化导致重新生成实例对象等。\n\n- 选择哪种实现形式取决项目本身，如是否是复杂的并发环境、JDK 版本是否过低、单例对象的资源消耗等。\n- 单例模式的优缺点\n\t- 优点  \n\t1) 只生成一个实例，减少系统的性能开销；  \n\t2) 当一对象的产生需要较多资源时，如读取配置、产生其他依赖对象时，可通过应用启动时直接产生一个单例对象，永久驻留内存。  \n\t- 缺点  \n\t1) 单例模式一般没有接口，扩展性难；  \n\t2) 单例对象若持有 Context，那么很容易引发内存泄漏，此时需注意传递给单例对象的 Context 应该是 `Application.Context` 。\n \n### Bulider 模式\n#### Bulider 模式的定义\n- 创建型设计模式。\n- 将一个复杂对象的 `构建` 与它的 `表示` 分离，使得同样的构建过程可以创建不同的表示。\n- Builder 模式是一步步创建一个复杂对象的，它允许用户在不知内部构建细节的情况下，可以更精细地控制对象的构造流程。\n\n#### Builder 模式的使用场景\n- 产品类非常复杂，或产品类中调用顺序不同产生不同的作用，这时需要使用 Builder 模式。\n- 初始化一个对象特别复杂，如参数多，且很多参数都具有默认值。\n\n#### Builder 模式的UML类图\n![Builder模式示意图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-2.png )\n<center>图 2-2 Builder 模式示意图</center> \n\n#### Builder 模式的简单实现\n\n便于理解，本示例的 UML 类图见图 2-3。\n\n![计算机组装过程](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-3.png )\n<center>图 2-3 计算机组装过程</center> \n\n```Java\n/*\n * 下述程序以计算机组装过程简化为：构建主机，设置操作系统，设置显示器。\n */\n \n// 计算机抽象类，即 Product 角色\npublic abstract class Computer {\n\tprotected String mBoard;\n \tprotected String mDisplay;\n \tprotected String mOS;\n \tprotected Computer() {}\n \tpublic void setBoard(String board) { // 设置 CPU 核心数\n \t\tmBoard = board;\n \t}\n \tpublic void setDisplay(String display) { // 设置内存\n \t\tmDisplay = display;\n \t}\n \tpublic abstract void setOS();\n \t@override\n \tpublic String toString() {\n \t\treturn \"Computer[...]\";\n \t}\n }\n \n// 具体的 Computer 类 - MacBook\npublic class Macbook extends Computer {\n \tprotected Macbook() {}\n \t@override\n \tpublic void setOS() {\n \t\tmOS = \"MAC OSX 10.10\";\n\t}\n}\n \n// 抽象 Builder 类\npublic abstract class Builder {\n \tpublic abstract class Builder {\n \t\tpublic abstract void buildBoard(String board); // 设置主机\n \t\tpublic abstract void buildOS(); // 设置操作系统\n \t\tpublic abstract void buildDisplay(String display); // 设置显示器\n \t\tpublic abstract Computer create(); // 创建 Computer\n\t}\n}\n \n// 具体的 Builder 类 - MacbookBuilder\npublic class MacbookBuilder extends Builder {\n \tprivate Computer mComputer = new Macbook();\n \tpublic void buildBoard(String board){\n \t\tmComputer.setBoard(board);\n \t}\n \tpublic void buildDisplay(String display) {\n \t\tmComputer.setDisplay(display);\n \t}\n \tpublic void buildOS() {\n \t\tmComputer.setOS();\n \t}\n \tpublic Computer create() {\n \t\treturn mComputer;\n \t}\n}\n \n// Director 类，负责构造 Computer\npublic class Director {\n \tBuilder mBuilder = null;\n \tpublic Director(Builder builder) {\n \t\tmBuilder = builder;\n \t}\n \tpublic void construct(String board, String display) {\n \t\tmBuilder.buildBoard(board);\n \t\tmBuilder.buildDisplay(display);\n\t\tmBuilder.buildOS();\n \t}\n}\n\n// 客户端实现\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tBuilder builder = new MacbookBuilder(); // 构造器\n \t\tDirector pcDirector = new Director(builder); // Director\n \t\t// 封装构建过程\n \t\tpcDirector.construct(\"英特尔主板\", \"Retina 显示器\");\n \t\tSystem.out.println(\"Computer Info: \" + builder.create().toString());\n \t}\n}\n```\n\n#### Builder 模式实战\n```Java\n/*\n * 知名图片加载库：Universal-Image-Loader\n */\n\nImageLoaderConfiguration config = new ImageLoaderConfiguration\n.Builder(context) // 用户只能通过 Builder 对象构建 ImageLoaderConfiguration 对象，这就是构建和表示相分离\n.threadPriority(Thread_NORM_PRIORITY_2)\n.denyCacheImageMultipleSizesInMemory()\n.discCacheFileNameGenerator( new MD5FileNameGenerator() )\n.tasksProcessingOrder(QueueProcessingType.LIFO)\n.bulider();\n\nImageLoader.getInstance().init(config);\n```\n\n#### 总结\n- Builder 模式，通过作为配置类的构建器将配置的构建和表示分离开来，同时也将配置从目标类中隔离出来，避免过多的 Setter 方法暴露在目标类当中。\n- Builder 模式的优缺点\n\t- 优点  \n\t1) 良好的封装性，不必知道产品内部组成的细节；  \n\t2) 建造者独立，易于扩展。\n\t- 缺点  \n\t1) 产生多余 Builder 对象及 Director 对象，消耗内存。\n\n### 原型模式\n#### 原型模式的定义\n- 创建型的模式。\n- 定义：用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。\n\t- 原型拥有样板实例，可克隆内部属性一致的对象。\n\t- 原型模式多用于创建复杂的或构建耗时的实例，即复制一个已经存在的实例可使程序运行更高效。\n\n#### 原型模式的使用场景\n- 类初始化需消耗非常多的资源 ( 数据、硬件资源等 )。\n- 通过 new 产生一个对象需要非常繁琐的数据准备或访问权限。\n- 一个对象需提供其他对象访问，且各调用者可能都需修改其值时，可考虑用原型模式或拷贝多个对象以供调用者使用，即 `保护性拷贝` 。\n\n#### 原型模式的 UML 类图\n![Builder模式示意图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-4.png )\n<center>图 2-4 原型模式的 UML 类图</center> \n\n#### 原型模式的简单实现\n便于理解，本示例的 UML 类图见图 2-5。\n\n![WordDocument文档编辑器](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-5.png )\n<center>图 2-5 WordDocument 文档编辑器</center> \n\n```Java\n/*\n * WordDocument 具有文字、图片编辑功能的简单文档处理类。且为保护源文件，其可在克隆对象上作内容修改。\n */\n\npublic class WordDocument implements Cloneable {\n\t// WordDocument 扮演 ConcretePrototype 角色\n\t// Cloneable 扮演 Prototype 角色\n\tprivate String mText; // 文本\n\tprivate ArrayList<String> mImages = new ArrayList<String>(); // 图片名列表\n\tpublic WordDocument() {\n\t\t// 忽略实现细节\n\t}\n\t@Override\n\tprotected WordDocument clone() {\n\t\ttry {\n\t\t\tWordDocument doc = (WordDocument) super.clone();\n\t\t\tdoc.mText = this.mText;\n\t\t\tdoc.mImages = this.mImages;\n\t\t\treturn doc;\n\t\t} catch(Exception e) {\n\t\t}\n\t\treturn null;\n\t}\n\tpublic String getText() {\n\t\treturn mText;\n\t}\n\tpublic void setText(String mText) {\n\t\tthis.mText = mText;\n\t}\n\tpublic List<String> getImage() {\n\t\treturn mImages;\n\t}\n\tpublic void addImage(String img) {\n\t\tthis.mImages.add(img);\n\t}\n\tpublic void showDocument() {\n\t\tSystem.out.println(\"Text:\" + mText);\n\t\tSystem.out.println(\"Images List:\");\n\t\tfor(String imgName:mImages) {\n\t\t\tSystem.out.println(\"image name:\" + imgName);\n\t\t}\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tWordDocument originDoc = new WordDocument();\n\t\t\n\t\t/* Partion A start */\n\t\toriginDoc.setText(\"This is a Aircle\");\n\t\toriginDoc.addImage(\"Image A\");\n\t\t/* Partion A end */\n\t\toriginDoc.showDocument();\n\t\t\n\t\tWordDocument secDoc = originDoc.clone();\n\t\tsecDoc.showDocument();\n\t\tsecDoc.setText(\"This is a Paper\"); // 只是改变了引用指向\n\t\tsecDoc.showDocument();\n\t\toriginDoc.showDocument(); // 还是输出 Partion A 的结果\n\t}\n}\n```\n\n> 注：通过 clone() 拷贝对象时并不会执行构造函数。如果在构造函数中需要一些特殊的初始化操作类型，在使用 Cloneable 实现拷贝时，注意构造函数不会执行的问题。\n\n#### 浅拷贝和深拷贝\n- 浅拷贝：上述例子实际上只是一个浅拷贝，也称 `影子拷贝`，即只是副本文档引用原始文档的字段。\n\n ![浅拷贝示意图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-6.png )\n <center>图 2-6 浅拷贝示意图</center> \n\n ```Java\n secDoc.setText(\"This is a Paper.\");\n secDoc.addImage(\"Image B\");\n secDoc.showDocument(); // Case 1\n originDoc.showDocument(); // Case 2\n\n // Case 1，2 都增加了图片 “Image B”，原因是 secDoc 只是单纯指向了 this.mImages\n ```\n\n- 深拷贝：为了解决浅拷贝所带来的“问题” ( 视具体问题而定 )，引入深入拷贝。\n\n ```Java\n @Override\n protected WordDocument clone() {\n \ttry {\n \t\tWordDocument doc = (WordDocument) super.clone();\n \t\tdoc.mText = this.mText;\n \t\t// doc.mImages 指向 mImages 的一份拷贝，而不是 this.mImages 本身\n \t\tdoc.mImages = (ArrayList<String>) this.mImages.clone();\t\t\n \t\treturn doc;\n \t} catch(Exception e) {\n \t}\n \treturn null;\n }\n ```\n\n#### 原型模式实战\n```Java\n/*\n * 在线用户信息修改 (需登录后修改用户信息)\n */\n\n// 用户实体类\npublic class User {\n\tpublic int age;\n\tpublic String name;\n\tpublic String phoneNum;\n\tpublic Adress,adress;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User[age=...]\";\n\t}\n}\n\n// 登录接口\npublic interface Login (\n\tvoid login();\n)\n\npublic class LoginImpl implements Login {\n\t@Override\n\tpublic void login() {\n\t\tUser loginedUser = new User(); // 登录服务器，获取用户信息\n\t\tloginedUser.age = 12;\n\t\tloginedUser.name = \"Mr.Sample\";\n\t\tloginedUser.address = new Address(\"BeiJing\", \"HaiDing\", \"Garden Rd\");\n\t\t\n\t\t// 登录完成后，将用户信息设置到 Session:\n\t\tLoginSession.getLoginSession()\n\t\t\t.setLoginedUser(loginedUser)\n\n\t}\n}\n\n// 登录 Session\npublic class LoginSession {\n\tstatic LoginSession sLoginSession = null;\n\tprivate User longinedUser; // 已登录用户\n\tprivate LoginSession() {}\n\tpublic static LoginSession getLoginSession() {\n\t\tif(null == sLoginSession) {\n\t \t\tsLoginSession = new LoginSession();\n\t \t}\n\t \treturn sLoginSession;\n\t}\n\t\n\t// 包级私有：即不加任何修饰符，该模式(默认访问模式)下，只允许在同一包中进行访问\n\tvoid setLoginedUser(User user) { // 设置已登录用户信息，不对外开放\n\t\tloginedUser = user;\n\t}\n\t\n\tpublic User getLoginedUser() {\n\t\treturn loginedUser;\n\t}\n}\n\n/* Partion A : 以下是实际执行部分，可能在不同包的某个类下执行 */\n\n// 获取已登录的 User 对象\nUser newUser = LoginSession.getLoginSession().getLoginedUser();\n// 更新用户信息\nnewUser.address = new Adress(\"BeiJing\", \"ChaoYang\", \"DaWang Rd\");\n```\n\n用户信息的更新，限定于与 LoginSession 类在同一包下才能执行，即 Partion A 的操作，使这样的限定失效。我们可作以下改进：\n\n- 在 User 类中实现 Cloneable 接口。\n- 在 LoginSession 中将 getLoginedUser() 改为 `return loginedUser.clone()` ，即在任何地方调用，获得的都是用户拷贝的对象，修改只是作用于拷贝的对象。\n\n\n```Java\n// 实现 Cloneable 接口\npublic class User implements Cloneable { // 用户实体类\n\tpublic int age;\n\tpublic String name;\n\tpublic String phoneNum;\n\tpublic Adress,adress;\n\t\n\t@Override\n\tpublic User clone() {\n\t\tUser user = null;\n\t\ttry {\n\t\t\tuser = (User) super.clone();\n\t\t} catch(CLoneNotSupportedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn user;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User[age=...]\";\n\t}\n}\n\npublic class LoginSession { \n\t// 即管在任何地方调用，获得的都是用户拷贝的对象\n\tpublic User getLoginedUser() {\n\t\treturn loginedUser.clone();\n\t}\n}\n```\n#### 总结\n- 原型模式的优缺点\n\t- 优点 - 原型模式是在内存中二进制的拷贝，比 new 一个对象性能更优。\n\t- 缺点 - 内存中拷贝，构造函数是不会执行的。\n\n### 工厂方法模式\n#### 工厂方法模式的定义\n- 创建型设计模式。\n- 定义一个用于创建对象的接口，让子类决定实例化哪个类。\n\n#### 工厂方法模式的使用场景\n- 复杂对象的创建，而用 New 就可以完成创建的对象则不必使用工厂方法了。\n\n#### 工厂方法模式的 UML 类图\n工厂方法模式的 UML 如图 2-7 所示。\n\n![浅拷贝示意图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-7.png )\n<center>图 2-7 工厂方法模式 UML 类图</center> \n \n```Java\npublic abstract class Product {\n\tpublic abstract void method();\n}\npublic class ConcreteProductA extends Product { // 具体产品 A\n\t@Override\n\tpublic void method() {\n\t\tSystem.out.println(\"我是具体的产品A.\");\n\t}\n}\npublic class ConcreteProductB extends Product { // 具体产品 B\n\t@Override\n\tpublic void method() {\n\t\tSystem.out.println(\"我是具体的产品B.\");\n\t}\n}\n\npublic abstract class Factory { // 抽象工厂类\n\t/*\n\t * @return 具体的产品对象\n\t */\n\t public abstract Product createProduct();\n}\npublic class ConcreteFactory extends Factory {\n\t@Override\n\tpublic Product createProduct() {\n\t\t// 返回具体产品 A 或者具体产品 B\n\t\t// return new ConcreteProductA();\n\t\t// return new ConcreteProductB();\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tFactory factory = new ConcreteFactory();\n\t\tProduct p = factory.createProduct();\n\t\tp.method();\n\t}\n}\n```\n\n另外，我们可以利用反射的方式实现多工厂方法模式，具体见下述代码。\n\n```Java\npublic abstract class Factory {\n\n\t/*\n \t* 具体生产什么由子类去实现\n \t* @param clz 产品对象类类型\n \t* @return 具体的产品对象\n \t*/ \t\n \tpublic abstract<T extends Product> T createProduct(class<T> clz);\n}\n\npublic class ConcreteFactory extends Factory {\n\t@Override\n\tpublic <T extends Product> T createProduct(class<T> clz) {\n\t\tProduct p = null;\n\t\ttry {\n\t\t\tp = (Product) class.forName(clz.getName()).newInstance();\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn (T) p;\n\t}\n}\n\n// 客户端中实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tFactory factory = new ConcreteFactory();\n\t\tProduct p = factory.createProduct(ConcreteProductA.class);\n\t\tp.method();\n\t}\n}\n```\n\n#### 工厂方法模式的简单实现\n某汽车厂主要就是组装某款 SUV 车型，比如 Q3、Q5、Q7，对于这类车型来说，内部结构差异并不是很大，因此一条生产线足以应付 3 种车型，对于该类生产线可提供一抽象类定义。\n\n便于理解，本示例的 UML 类图见图 2-8。\n\n![某工厂生产某车型的工厂方法](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-8.png )\n<center>图 2-8 某工厂生产某车型的工厂方法</center> \n \n```Java\npublic abstract class AudiFactory {\n\n\t/*\n\t * 某工厂生产某种车型的工厂方法\n\t * @param clz 具体的 SUV 型号类型\n\t * @return 具体型号的 SUV 车对象\n \t */\n\tpublic abstract<T extends AudiCar> T createAudiCar(class<T> clz);\n}\n\npublic class AudiCarFactory extends AudiFactory {\n\t@Override\n\tpublic <T extends AudiCar> T createProduct(class<T> clz) {\n\t\tProduct p = null;\n\t\ttry {\n\t\t\tp = (AudiCar) class.forName(clz.getName())\n\t\t\t\t.newInstance(); \n\t\t} catch() {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn (T) p;\n\t}\n}\n\n// 汽车的抽象产品类\npublic abstract class AudiCar {\n\tpublic abstract void drive();\n\tpublic abstract void selfNavigation();\n}\n\n// 具体车型：Q3\npublic class AudiQ3 exntends AudiCar {\n\t@Override\n\tpublic void drive() {\n\t\tSystem.out.println(\"Q3 Launched!\");\n\t}\n\t@Override\n\tpublic void selfNavigation() {\n\t\tSystem.out.println(\"Q3 starts a auto-navigation!\");\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tAudiFactory factory = new AudiFactory();\n\t\tAudiQ3 audiQ3 = factory.createProduct(AudiQ3.class);\n\t\taudiQ3.dirve();\n\t\taudiQ3.selfNavigation();\t\n\t}\n}\n```\n#### 工厂方法模式的实战\nAndroid 数据持久化有很多方式，如 SharedPreferences (XML)、SQLite (关系数据库)。对数据操作的方法无非就是增、删、改、查，若我们将每种数据储存的方式作为一个产品类，在抽象产品类中定义对数据操作的方法，即我们宏观层面把握操作的逻辑，具体的实现逻辑由储存数据的方式决定。\n\n```Java\npublic abstract class IOHandler {\n\tpublic abstract void add(String id, String name);\n\tpublic abstract void remove(String id);\n\tpublic abstract void update(String id, String name);\n\tpublic abstract String query(String id);\n}\n\npublic class FileHandler extends IOHandler { // 普通文件存储\n\t@Override\n\tpublic void add(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\t@Override\n\tpublic void remove(String id) {\n\t\t/* 业务逻辑 */ }\n\t@Override\n\tpublic void update(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\t@Override\n\tpublic String query(String id) {\n\t\t/* 业务逻辑 */ \n\t\treturn \"AigeStudio\";\n\t}\n}\n\npublic class XMLHandler extends IOHandler { // XML 文存储\n\tpublic void add(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\tpublic void remove(String id) {\n\t\t/* 业务逻辑 */ }\n\tpublic void update(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\tpublic String query(String id) {\n\t\t/* 业务逻辑 */\n\t\treturn \"SMBrother\";\n\t}\n}\n\npublic class DBHandler extends IOHandler { // SQLite 数据库存储\n\tpublic void add(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\tpublic void remove(String id) {\n\t\t/* 业务逻辑 */ }\n\tpublic void update(String id, String name) {\n\t\t/* 业务逻辑 */ }\n\tpublic String query(String id) {\n\t\t/* 业务逻辑 */\n\t\treturn \"Android\";\n\t}\n}\n\npublic class IOFactory {\n\t\n\t/*\n\t * 获取 IO 处理者\n\t * @param clz IOHandler 类型的类类型\n\t * @return IOHandler 对象\n\t */\n\t \n\tpublic static <T extends IOHandler> T getIOHandler(class<T> clz) {\n\t\tIOHandler handler = null;\n\t \ttry {\n\t \t\thandler = (IOHandler) class.forName(clz.getName())\n\t \t\t\t.newInstance();\n\t \t} catch(Exception e) {\n\t \t\te.printStackTrace();\n\t \t}\n\t\treturn (T) handler;\n\t}\n}\n\n// 客户端实现\npublic class FactoryActivity extends Activity {\n\t@override\n\tprotected void onCreate(Bundle saveInstanceState) {\n\t\tsuper.onCreate(saveInstanceState);\n\t\tsetContentView(R.layout.activity_factory);\n\t\t\n\t\t// 获取显示查询内容的 TextView 对象\n\t\tfinal TextView tvContent = (TextView) this.findViewById(R.id.factory_content_tv);\n\t\t// 获取查询普通文件数据的按钮对象，并设置监听\n\t\tButton btnFile = (Button) this.findViewById(R.id.factory_file_btn);\n\t\tbtnFile.setOnClickListener(new View.OnClickListener() {\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tIOHandler handler = IOFactory.getIOHanHandler(FileHandler.class);\n\t\t\t\tLog.d(\"AigeStudio\", handler.query(\"4455645646\"));\n\t\t\t\ttvContent.setText(handler.query(\"4455645646\"));\n\t\t\t}\n\t\t});\n\t}\n}\n```\n\n### 抽象工厂模式\n#### 抽象工厂模式的定义\n- 创建型设计模式。\n- 为创建一组相关或者是相互依赖的对象 提供一个 `接口` ，而不需要指定它们的具体类。\n\n#### 抽象工厂模式的使用场景\n一个对象族有相同约束时可以使用抽象工厂模式。如：  \nAndroid、iOS、Window Phone 下都有短信软件和拨号软件，两者属于软件范畴，但由于操作系统平台不一样，其代码实现细节也是有差异的，则我们可考虑使用抽象工厂方法模式去产生不同平台下的同款软件。\n\n#### 抽象工厂模式的 UML 类图\n抽象工厂方法模式的 UML 如图 2-9 所示。\n\n![抽象工厂方法模式UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-9.png )\n<center>图 2-9 抽象工厂方法模式 UML 类图</center> \n\n```Java\npublic abstract class AbstractProductA { // 抽象产品类 A\n    public abstractvoid method();\n}\n \npublic abstract class AbstractProductB { // 抽象产品类 B\n    public abstractvoid method();\n}\n \npublic class ConcreteProducxtA1 extends AbstractProductA { // 具体产品类 A1\n    @Override\n    public void method() {\n        System.out.println(\"具体产品 A1 的方法.\");\n    }\n}\n \npublic class ConcreteProducxtA2 extends AbstractProductA { // 具体产品类 A2\n    @Override\n    public void method() {\n        System.out.println(\"具体产品 A2 的方法.\");\n    }\n}\n \npublic class ConcreteProducxtB1 extends AbstractProductB { // 具体产品类 B1\n    @Override\n    public void method() {\n \t    System.out.println(\"具体产品 B1 的方法.\");\n    }\n}\n \npublic class ConcreteProducxtB2 extends AbstractProductB { // 具体产品类 B2\n    @Override\n    public void method() {\n        System.out.println(\"具体产品 B2 的方法.\");\n    }\n }\n \npublic abstract class AbstractFactory { // 抽象工厂类\n \n    /**\n     * 创建产品 A 的方法\n     * @return 产品 A 的对象\n     */\n    public abstract AbstractProductA createProductA();\n \t \n    /**\n     * 创建产品 B 的方法\n     * @return 产品 B的对象\n     */\n    public abstract AbstractProductB createProductB();\n}\n \npublic class ConcreteFactory1 extends AbstractFactory { // 具体工厂类1\n    @Override\n    public abstract AbstractProductA createProductA1() {\n        return new ConcreteProductA1();\n    };\n    @Override\n    public abstract AbstractProductB createProductB1() {\n        return new ConcreteProductB1();\n    };\n}\n \npublic class ConcreteFactory2 extends AbstractFactory { // 具体工厂类2\n    @Override\n    public abstract AbstractProductA createProductA2() {\n        return new ConcreteProductA2();\n    };\n    @Override\n    public abstract AbstractProductB createProductB2() {\n        return new ConcreteProductB2();\n    };\n}\n```\n\n#### 抽象工厂模式的简单实现\n在简单工厂模式的简单实现中，我门以车厂生产汽车为例。虽 Q3、Q5、Q7 同为一车系，但三者之间的零部件产别却很大，如 Q3、Q7 当中，Q3 装配的是国产发动机，普通轮胎和普通制动系统；Q7 则装配的是进口发动机，全尺寸越野轮胎和制动性能极好的制动系统。\n\n即同为一系列车，大家共有部件有发动机、轮胎和制动系统等，由于具体的部件品质不同，装配的细节又不同。故我们可将抽象工厂模式应用当中，化繁为简。具体的架构如图 2-10 的 UML 类图所示。\n\n![车厂生产同系列汽车的抽象工厂模式](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-10.png )\n<center>图 2-10 车厂生产同系列汽车的抽象工厂模式</center>\n \n```Java\npublic abstract class CarFactory {\n\t/**\n\t * 生产轮胎\n\t * @return ITire 轮胎\n\t */\n \tpublic abstract ITire createTire();\n \t\n\t/**\n\t * 生产发动机\n\t * @return IEngine 发动机\n\t */\n \tpublic abstract IEngine createEngine();\n \t\n\t/**\n\t * 生产制动系统\n\t * @return IBrake 制动系统\n\t */\n\tpublic abstract IBrake createBrake();\n}\n \npublic interface ITire { // 轮胎\n\tvoid tire();\n}\n \npublic class NormalTire implements ITire {\n\t@Override\n\tpublic void tire() {\n\t\tSystem.out.println(\"普通轮胎\");\n\t}\n}\n \npublic class SUVTire implements ITire {\n\t@Override\n\tpublic void tire() {\n\t\tSystem.out.println(\"越野轮胎\");\n\t}\n}\n \npublic interface IEngine() { // 发动机\n\tvoid engine();\n}\n \npublic class DomesticEngine implements IEngine {\n\t@Override\n\tpublic void engine() {\n\t\tSystem.out.println(\"国产发动机\");\n\t}\n}\n \npublic class ImportEngine implements IEngine {\n\t@Override\n\tpublic void engine() {\n\t\tSystem.out.println(\"进口发动机\");\n\t}\n}\n \npublic interface IBrake { // 制动系统\n\tvoid brake();\n}\n \npublic class NormalBrake implements IBrake {\n\t@Override\n\tpublic void brake() {\n\t\tSystem.out.println(\"普通制动\");\n\t}\n}\n  \npublic class SeniorBrake implements IBrake {\n\t@Override\n\tpublic void brake() {\n\t\tSystem.out.println(\"高级制动\");\n\t}\n}\n\npublic class Q3Factory extends CarFactory { // Q3工厂类\n\t@Override\n\tpublic ITire createTire() {\n\t\treturn new NormalTire();\n\t}\n\t@Override\n\tpublic IEngine createEngine() {\n\t\treturn new Domestic Engine();\n\t}\n\t@Override\n\tpublic IBrake createBrake() {\n\t\treturn new NormalBrake();\n\t}\n}\n \npublic class Q3Factory extends CarFactory { // Q3工厂类\n\t@Override\n\tpublic ITire createTire() {\n\t\treturn new NormalTire();\n\t}\n\t@Override\n\tpublic IEngine createEngine() {\n\t\treturn new DomesticEngine();\n\t}\n\t@Override\n\tpublic IBrake createBrake() {\n\t\treturn new NormalBrake();\n\t}\n}\n \npublic class Q7Factory extends CarFactory { // Q7 工厂类\n\t@Override\n\tpublic ITire createTire() {\n\t\treturn new SUVTire();\n\t}\n\t@Override\n\tpublic IEngine createEngine() {\n\t\treturn new ImportEngine();\n\t}\n\t@verride\n\tpublic IBrake createBrake() {\n\t\treturn new SeniorBrake();\n\t}\n}\n \n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 构造一个生产 Q3 的工厂\n\t\tCarFactory factoryQ3 = new Q3Factory();\n\t\tfactoryQ3.createTire().tire();\n\t\tfactoryQ3.createEngine().engine();\n\t\tfactoryQ3.createBrake().brake();\n \t\t\n\t\t// 构造一个生产 Q7 的工厂\n\t\tCarFactory factoryQ7 = new Q7Factory();\n\t\tfactoryQ7.createTire().tire();\n\t\tfactoryQ7.createEngine().engine();\n\t\tfactoryQ7.createBrake().brake();\n\t}\n}\n```\n\n#### 总结\n- 抽象工厂方法模式的优缺点\n\t- 优点 - 分离接口与实现，即客户端使用抽象工厂的创建对象，客户端不知具体实现是谁，客户端只是面向产品的接口编程而已，使其从具体的产品实现中解耦。\n\t- 缺点  \n\t1) 类文件的爆炸性增加。  \n\t2) 不太容易扩展新的产品类，因为每当增加一个产品类，就需修改抽象工厂，故所有具体工厂类均会被修改。\n\n### 策略模式\n#### 策略模式的介绍\n实现某功能，可以有多种算法或策略选择，例如排序算法，有插入排序、归并排序、冒泡排序等。\n\n> 思考：多种排序算法，可以写在一个类中，一个方法对应一种具体排序。但是缺点也是很明显，即臃肿；维护成本高，且容易引发错误；每增加一种排序需修改封装类的源码。  \n> \n> 改进：提供一个统一接口，不同的算法或策略有不同的实现类。\n\n\n#### 策略模式的使用场景\n- 针对同类问题的多种处理方式，仅仅是 `具体行为` 有差别。\n- 需要安全地封装多种 `同类型` 的操作。\n- 出现同一抽象类，有多个子类，而又需使用 `if-else` 或 `switch-case`  来选择具体子类。\n\n\t> 但缺点也明显，耦合性高；代码臃肿难维护。\n\n#### 策略模式的 UML 类图\n策略模式的 UML 如图 2-11 所示。\n\n![策略模式UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-11.png )\n<center>图 2-11 策略模式 UML 类图</center> \n\n#### 策略模式的简单实现\n下面以在北京乘坐公共交通工具的费用计算来演示一简单示例。在 2014 年 12 月 20 号之后，北京提高公交价格，不在是单一票价制，而是分段计费。显然，公交车和地铁的价格计算方式是不一样的。但是，我们的示例中是需要计算乘不同出行工具的成本，故我们采用策略模式进行设计、编码。\n\n便于理解，本示例的 UML 类图如图 2-12 所示。\n\n![交通方案UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-12.png )\n<center>图 2-12 交通方案的 UML 类图</center> \n\n```Java\npublic interface CalculateStragety {\n\t/**\n\t * 按距离来计算价格\n\t * @param km 公里\n\t * @return 返回价格\n\t */\n\tint calculatePrice();\n}\n\npublic class BusStragety implements CalculateStragety {\n\t@Override\n\tpublic int calculatePrice(int km) {\n\t\t// 公交车价格计算策略\n\t}\n}\n\npublic class SubwayStragety implements CalculateStragety {\n\t@Override\n\tpublic int calculatePrice(int km) {\n\t\t// 地铁价格计算策略\n\t}\n}\n\n// 客户端实现: 出行价格计算器\npublic class TranficCalculator {\n\tCalculateStrategy mStrategy = null;\n\t\n\tpublic static void main(String[] args) {\n\t\tTranficCalculator calculator = new TranficCalculator();\n\t\t// 设置计算策略\n\t\tcalculator.setStrategy( new BusStrategy() );\n\t\t// 计算价格\n\t\tSystem.out.println(\"公交车乘16公里的价格: \" + calculator.calculatePrice(16));\n\t}\n\t\n\tpublic void setStrategy(CalculateStrategy mStrategy) {\n\t\tthis.mStrategy = mStrategy;\n\t}\n\t\n\tpublic int calculatePrice(int km) {\n\t\treturn mStrategy.calculatePrice(km);\n\t}\n}\n```\n\n#### 策略模式的实战应用\n对于默认情况下，ImageLoader 会按照先后顺序加载图片，但在实际算法当中，相反顺序加载图片也是有可能的，即反序列加载图片。当然加载方式可看作多种策略，共同的目标是实现加载图片。图 2-13 是 ImageLoader 的 UML 类图。\n\n![ImageLoader的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-13.png)\n<center>图 2-13 ImageLoader 的 UML 类图</center>\n\n```Java\npublic interface LoadPolicy { // 加载策略接口\n\tpublic int compare(BitmapRequest request1, BitmapRequest request2);\n}\n\n/**\n * 顺序加载策略\n */\npublic class SerialPolicy implements LoadPolicy {\n\t@Override\n\tpublic int compare(BitmapRequest request1, BitmapRequest request2) {\n\t\t// 按照添加到队列的序列号顺序来执行\n\t\treturn request1.serialNum - request2.serialNum;\n\t}\n}\n\n/**\n * 逆序加载策略，即从最后加入队列的请求进行加载\n */\npulbic class ReversePolicy implements LoadPolicy {\n\t@Override\n\tpublic int compare(BitmapRequest request1, BitmapRequest request2) {\n\t// 注意: Bitmap 请求要先执行最晚加入队列的请求，ImageLoader 的策略 \n\treturn request2.serialNum - request1.serialNum;\n\t}\n}\n\n/** \n * 因每个请求都有一序列号，序列号以递增形式增加，越晚加入队列的请求序列号越大。\n * 而请求队列是优先级队列，因此我们需要在图片加载请求类中实现 Comparable 接口，以实现对这些请求的排序处理。\n */\npublic class BitmapRequest implements Comparable<BitmapRequest> { // 加载策略\n\tLoadPolicy mLoadPolicy = new SerialPolicy();\n\t@Override\n\tpublic int compareTo(BitmapRequest another) {\n\t\t// 委托给 LoadPolicy 进行处理，实现按照策略模式\n\t\treturn mLoadPolicy.compare(this, another);\n\t}\n}\n\n/**\n * 用户在配置 ImageLoader 时可以设置加载策略，\n * 这个策略会被设置给每个图片加载请求对象，具体如下：\n */\npublic void displayImage(final ImageView imageView, final String uri, final DisplayConfig config, final ImageListener listener) {\n\tBitmapRequest request = new BitmapRequest(imageView, uri, config, listener);\n \t\n\t// 加载的配置对象，如果没有设置则使用 ImageLoader 的配置\n\trequest.displayConfig = request.displayConfig != null ?\n\t\trequest.displayConfig : mConfig.displayConfig;\n \t// 设置加载策略\n \trequest.setLoadPolicy(mConfig.loadPolicy);\n \t// 添加到队列中\n\tmImageQueue.addRequest(request);\n}\n```\n\n#### 总结\n- 策略模式的优缺点\n\t- 优点  \n\t1) 很好地演示了开闭原则，也就定义了抽象。  \n\t2) 耦合度相对较低，扩展方法。\n\t- 缺点 - 随着策略的增加，子类会变得繁多。\n\n### 状态模式\n- 状态模式和策略模式和结构几乎一样，但它们的目的本质完全相异。\n\t- 状态模式：行为是平行的，不可替换的。\n\t- 策略模式：行为彼此独立，可相互替换。\n\n#### 状态模式的定义\n当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。\n\n#### 状态模式的使用场景\n代码中包含大量与对象状态有关的条件语句。如操作中含有庞大的多分支语句 ( `if-else` 或 `switch-case` )，且这些分支依赖与该对象的状态。\n\n若使用状态模式来优化架构，即每一条件分支放于独立的类。\n\n#### 状态模式的 UML 类图\n![状态模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-14.png)\n<center>图 2-14 状态模式的 UML 类图</center> \n\n#### 状态模式的简单示例\n下面以电视遥控器为例演示状态模式的实现。便于理解，本示例的 UML 类图如图 2-15 所示。\n\n![电视遥控器UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-15.png)\n<center>图 2-15 电视遥控器 UML 类图</center> \n\n#### 状态模式实战\n在新浪微博中，用户在未登录的情况下点击转发按钮，此时会先让用户登录，然后再执行转发操作；如果已登录的情况下，那么用户输入转发的内容后就可以直接进行操作。\n\n![新浪微博用户状态管理UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-16.png)\n<center>图 2-16 新浪微博用户状态管理 UML 类图</center> \n\n#### 总结\n- 状态模式的优缺点\n\t- 优点 - 将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转为结构清晰的状态类族。\n\t- 缺点 - 必然增加系统类和对象的个数。\n\n### 责任链模式\n#### 责任链模式的定义\n- 行为型设计模式。\n- 通俗定义：每个节点看作一对象，每一对象拥有不同的处理逻辑，将一请求从链式的首端发出，沿着链的路径一次传递每个节点对象，直至有对象处理这个请求为止。\n- 标准定义：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成链，并沿着这条链传递该请求，直至有对象处理它为止。\n\n#### 责任链模式的使用场景\n- 多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。\n- 在请求处理者不明确的情况下向多个对象中的其一提交一个请求。\n- 需要动态指定一组对象处理请求。\n\n#### 责任链模式的 UML 类图\n责任链模式的 UML 类图如图 2-17 所示。\n\n![责任链模式UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-17.png)\n<center>图 2-17 责任链模式 UML 类图</center>\n\n```Java\n// 抽象处理者\npublic abstract class Handler {\n\tprotected Handler successor; // 下一节点的处理者\n\t/**\n\t * 请求处理\n\t * @param condition 请求条件\n\t */\n\tpublic abstract void handleRequest(String condition);\n}\n\n// 具体的处理者1\npublic class ConcreteHandler1 extends Handler {\n\t@Override\n\tpublic void handleRequest(String condition) {\n\t\tif(condition.equals(\"ConcreteHandler1\")) {\n\t\t\tSystem.out.println(\"ConcreteHandler1 handled\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tsuccessor.handleRequest(condition);\n\t\t}\n\t}\n}\n\n// 具体的处理者2\npublic class ConcreteHandler1 extends Handler {\n\t@Override\n\tpublic void handleRequest(String condition) {\n\t\tif(condition.equals(\"ConcreteHandler2\")) {\n\t\t\tSystem.out.println(\"ConcreteHandler2 handled\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tsuccessor.handleRequest(condition);\n\t\t}\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 构造一个 ConcreteHandler1 对象\n\t\tConcreteHandler1 handler1 = new ConcreteHandler1();\n\t\t// 构造一个 ConcreteHandler2 对象\n\t\tConcreteHandler2 handler1 = new ConcreteHandler2();\n\t\t// 设置 handler1 的下一个节点\n\t\thandler1.successor = handler2;\n\t\t// 设置 handler2 的下一个节点\n\t\thandler2.successor = handler1;\n\t\t// 处理请求\n\t\thandler1.handleRequest(\"ConcreteHandler2\");\n\t}\n}\n```\n\n#### 责任链模式的简单实现\n在公司中报销费用中，审批的流程其实就是一个类似责任链的实例。例如，小明是请求的发起者，而处理者有组长、部门主管、经理和老板，对于不同额度的报销费用需要不同级的处理者审批，准确地说，每一类人代表这条链上的一个节点。\n\n例如小民是请求的发起者，而老板则是处于链条顶端的类，小民从链的底端开始发出一个申请报账的请求，首先由组长处理该请求，组长比对后发现自己权限不够于是将该请求转发给位于链中下一个节点的主管，主管比对后发现自己权限不足又将该请求转发给经理，经理也基于同样的原因将请求转发给老板，这样层层转达直至请求被处理。即至始至终小民关心的是报账结果，而不用在乎处理者是谁。责任链模式在这里很好地将请求的发起者与处理者解耦。\n\n便于理解，本示例的 UML 类图如图 2-18 所示。\n\n![报账审核机制UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-18.png)\n<center>图 2-18 报账审核机制 UML 类图</center>\n\n```Java\n// 抽象领导者\npublic abstract class Leader {\n\tprotected Leader nextHandler; // 上一级领导处理者\n\t\n\t/**\n\t * 处理报账请求\n\t * @param money 能批复的报账额度\n\t */\n\tpublic final void handleRequest() {\n\t\tif( money < limit() ) {\n\t\t\thandle(money);\n\t\t} else {\n\t\t\tif( null != nextHandlder ) {\n\t\t\t\tnextHandler.handleRequest(money);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * 自身能批复的额度权限\n\t * @return 额度\n\t */\n\tpublic abstract int limit();\n\t\n\t/**\n\t * 处理报账行为\n\t * @param money 具体金额\n\t */\n\tpulbic abstract void handle(int money);\n}\n\npublic class GroupLeader extends Leader {\n\t@Override\n\tpublic int limit() {\n\t\treturn 1000;\n\t}\n\t@Override\n\tpublic void handle(int money) {\n\t\tStsten.out.println(\"组长批复报销\" + money + \"元\");\n\t}\n}\n\npublic class Director extends Leader {\n\t@Override\n\tpublic int limit() {\n\t\treturn 5000;\n\t}\n\t@Override\n\tpublic void handle(int money) {\n\t\tStsten.out.println(\"主管批复报销\" + money + \"元\");\n\t}\n}\n\npublic class Manager extends Leader {\n\t@Override\n\tpublic int limit() {\n\t\treturn 10000;\n\t}\n\t@Override\n\tpublic void handle(int money) {\n\t\tStsten.out.println(\"经理批复报销\" + money + \"元\");\n\t}\n}\n\npublic class Boss extends Leader {\n\t@Override\n\tpublic int limit() {\n\t\treturn Integer.MAX_VALUE;\n\t}\n\t@Override\n\tpublic void handle(int money) {\n\t\tStsten.out.println(\"老板批复报销\" + money + \"元\");\n\t}\n}\n\n// 小民从组长开始发起请求申请报账\npublic class XiaoMin {\n\tpublic static void main(String[] args) {\n\t\t// 构造各个领导对象\n\t\tGroupLeader groupLeader = new GroupLeader();\n\t\tDirector director = new Director();\n\t\tManager manager = new Manager();\n\t\tBoss boss = new Boss();\n\t\t\n\t\t// 设置上一级领导处理者对象\n\t\tgroupLeader.nextHandler = director;\n\t\tdirector.nextHandler = manager;\n\t\tmanager.nextHandler = boss;\n\t\t\n\t\t// 发起报账申请\n\t\tgroupLeader.handleRequest(50000);\n\t}\n}\n```\n\n#### 责任链模式实战\nAndroid 中我们可以借鉴责任链模式的思想来优化 BroadcastReceiver 使之成为一个全局的责任链处理者。\n\n我们知道 Broadcast 可以被分为两种:\n\n- Normal Broadcast：普通广播，异步广播，发出时可被所有的接收者收到。\n- Ordered Broadcast：有序广播，依优先级依次传播的，直到有接收者将其终止或所有接收者都不终止它。\n\n有序广播这一特性与我们的责任链模式很相近，通过它可实现一种全局的责任链事件处理。\n\n```Java\n// 具体的实现思路是，通过 Intent 的限制值来限定最终的广播权归谁所有\npublic class FirstReceiver extends BroadcastReceiver {\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\t// 获取 Intent 中附加的限制值\n\t\tint limit = intent.getIntExtra(\"limit\", -1001);\n\t\t\n\t\t// 如果限定值等于 1000 则处理，否则继续转发给下一个 Receiver\n\t\tif( 1000 == limit ) {\n\t\t\t// 获取 Intent 中附加的字符串消息并 Toast\n\t\t\tString msg = intent.getStringExtra(\"msg\");\n\t\t\tToast.makeText(context, msg, Toast.LENGTH_SHORT).show();\t\t\n\t\t\t// 终止广播\n\t\t\tabortBroadcast();\n\t\t} else {\n\t\t\t// 添加信息发送给下一个 Receiver\n\t\t\tBundle b = new Bundle();\n\t\t\tb.putString(\"new\", \"Message from FirstReceiver\");\n\t\t\tsetResultExtras(b);\n\t\t}\n\t}\n}\n\npublic class SecondReceiver extends BroadcastReceiver {\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\t// 获取 Intent 中附加的限制值\n\t\tint limit = intent.getIntExtra(\"limit\", -1001);\n\t\t\n\t\t// 如果限定值等于 100 则处理，否则继续转发给下一个 Receiver\n\t\tif( 100 == limit ) {\n\t\t\t// 获取 Intent 中附加的字符串消息\n\t\t\tString msg = intent.getStringExtra(\"msg\");\n\t\t\t\n\t\t\t// 获取上一个 Receiver 增加的消息\n\t\t\tBundle b = getResultExtras(true);\n\t\t\tString str = b.getString(\"new\");\n\t\t\t\n\t\t\tToast.makeText(context, msg + str, Toast.LENGTH_SHORT).show();\t\t\n\t\t\t// 终止广播\n\t\t\tabortBroadcast();\n\t\t} else {\n\t\t\t// 添加信息发送给下一个 Receiver\n\t\t\tBundle b = new Bundle();\n\t\t\tb.putString(\"new\", \"Message from FirstReceiver\");\n\t\t\tsetResultExtras(b);\n\t\t}\n\t}\n}\n\npublic class ThirdReceiver extends BroadcastReceiver {\n\t@Override\n\tpublic void onReceive(Context context, Intent intent) {\n\t\t// 获取 Intent 中附加的限制值\n\t\tint limit = intent.getIntExtra(\"limit\", -1001);\n\t\t\n\n\t\t// 如果限定值等于 10 则处理，否则继续转发给下一个 Receiver\n\t\tif( 10 == limit ) {\n\t\t\t// 获取 Intent 中附加的字符串消息\n\t\t\tString msg = intent.getStringExtra(\"msg\");\n\t\t\t\n\t\t\t// 获取上一个 Receiver 增加的消息\n\t\t\tBundle b = getResultExtras(true);\n\t\t\tString str = b.getString(\"new\");\n\t\t\t\n\t\t\tToast.makeText(context, msg + str, Toast.LENGTH_SHORT).show();\t\t\n\t\t\t// 终止广播\n\t\t\tabortBroadcast();\n\t\t} else {\n\t\t\t// 添加信息发送给下一个 Receiver\n\t\t\tBundle b = new Bundle();\n\t\t\tb.putString(\"new\", \"Message from FirstReceiver\");\n\t\t\tsetResultExtras(b);\n\t\t}\n\t}\n}\n\n// 客户端实现\npublic class OrderActivity extends Activity {\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_order);\n\t\t\n\t\tButton btnSend = (Button) findViewById(R.id.order_send_btn);\n\t\tbtnSend.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tIntent i = new Intent();\n\t\t\t\ti.setAction(\"com.aigestudio.action.ORDER_BROADCAST\");\n\t\t\t\ti.putExtra(\"limit\", 100);\n\t\t\t\ti.putExtra(\"msg\", \"Message from OrderActivity\");\n\t\t\t\tsendOrderedBroadcast(i, null);\n\t\t\t}\n\t\t});\n\t}\n}\n\n// 这里我们设置 limit = 100，即只有 SecondReceiver 才会处理它。\n```\n\n#### 总结\n- 责任链模式的优缺点\n\t- 优点 - 对请求者和处理者关系解耦，提高代码灵活性。\n\t- 缺点 - 递归调用。特别是处理者太多，那么遍历定会影响性能。\n\n### 解释器模式\n\n#### 解释器模式的定义\n- 行为型设计模式。\n- 概念：给定一个语言，定义它的 `文法` 的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。\n- 文法：例如我们熟悉的「主谓宾结构」，通过下述短语举例，我们可把短语抽象看作：I am a/an [noun.]\n\n| 主语 | 谓语 | 宾语 |\n| --- | --- | --- |\n| I | am | a designer |\n| I | am | a teacher |\n\n- 再举例：假设有如以 ab 开头 ef 结尾，中间排列 N(N>=0) 个 cd 的字符串。\n> abcdcd...cdef\n\n 在计算机科学中，我们将上述字符串中的 “a”、“b”、“c”、“d”、“e” 和 “f” 这 6 个字符称为一种形式语言的 `字符表`。\n\n 而这些字符组成的集合，如 “abcdcd...cdef” 这样由字符表构成的字符串则称为 `形式语言`。注意这里的语言不是文法。\n\n 假设定义一个符号 S，从符号 S 出发推导上述字符串，即可得到如下推导式：\n\n ```Java\n S ::= abA*ef  \n A ::= cd\n ```\n \n - `::==` 称为推导；  \n - `*` 表示闭包，上述推导式中意思是，符号 A 可以有 0 或 N 个重复；  \n - 非终结符号：`S` 和 `A` 则称非终结符号，即它们能推导出式子右边的表达式；  \n - 终结符号：\"pqmn\"，“ab”，“ef”，即无法再推导；\n\n#### 解释器模式的使用场景\n- 某个 `简单语言` 需要解释执行且可将该语言中的语句表示为 `抽象语法树` 时可考虑使用解释器模式。\n\n\t> 如：有非终结符号 p+q+m-n，即该数学表示式可表示为一棵抽象语法树。如图 2-19 所示。\n\n![p+q+m-n的抽象语法树](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-19.png)\n<center>图 2-19 p+q+m-n 的抽象语法树</center>\n\n- 某些特定的领域出现不断重复的问题时，可将该领域的问题转化为一种语法规则下的语句，然后构建解释器来解释该语句。\n\n\t> 英文字母的大小写转换；阿拉伯数字转为中文的数字...   \n\t> 即它们都是一个个终结符，不同的只是具体内容。\n\t\n#### 解释器模式的 UML 类图\n解释器模式的 UML 类图如图 2-20 所示。\n\n![解释器模式UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-20.png)\n<center>图 2-20 解释器模式 UML 类图</center>\n\n```Java\npublic abstract class AbstractExpression {\n\t/**\n\t * 抽象的解析方法\n\t * @param ctx 上下文环境对象\n\t */\n\tpublic abstract void interpret(Context ctx);\n}\n\n// 终结符表达式\npublic class TerminalExpression extends AbstractExpression {\n\t@Override\n\tpublic abstract void interpret(Context ctx) {\n\t\t// 实现文法中与终结符有关的解释操作\n\t}\n}\n\n// 非终结符表达式\npublic class NonterminalExpression extends AbstractExpression {\n\t@Override\n\tpublic abstract void interpret(Context ctx) {\n\t\t// 实现文法中与非终结符有关的解释操作\n\t}\n}\n\npublic class Context {\n\t// 包含解释器之外的全局信息\n}\n\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 根据文法对特定句子构建抽象语法树后解释\n\t}\n}\n```\n\n#### 总结\n- 解释模式的优缺点\n\t- 优点 - 灵活的扩展性，即我们想对文法规则进行扩展延伸时，只需增加相应的非终结符解释器，并在构建抽象语法树时，使用到新增的解释器对象进行具体的解释即可。\n\t- 缺点  \n\t1) 对于每一条文法对应至少一个解释器，其会生成大量的类，导致后期维护困难； \n\t2) 构建其抽象语法树会显得异常繁琐，甚至可能出现需要构建多棵抽象语法树的情况。\n\n### 命令模式\n\n#### 命令模式的定义\n- 行为型设计模式。\n- 介绍：将一系列的方法调用封装，用户只需调用一个方法执行，那么所有这些被封装的方法就会被挨个执行调用。\n- 定义：\n - 将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化。\n - 对请求排队或者记录请求日志，以及支持可撤销的操作。\n\n#### 命令模式的使用场景\n- 需要抽象出待执行的动作，然后以参数的形式提供处理 (类似过程设计中的回调机制)。\n- 在不同的时刻指定、排列和执行请求。一个命令对象可以有与初始请求无关的生存期。\n- 需要支持取消操作。\n- 需要支持事务操作。\n- 支持修改日志功能，若系统崩溃，这些修改可重做一遍。\n\n#### 命令模式的 UML 类图\n命令模式的 UML 类图如图 2-21 所示。\n\n![命令模式UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-21.png)\n<center>图 2-21 命令模式 UML 类图</center>\n\n**Receiver：接收者角色**  \n该类负责具体实施或执行一个请求，通俗地说，执行具体逻辑的角色。\n\n**Command：命令角色**  \n定义所有具体命令类的抽象接口。\n\n**ConcreteCommand：具体命令角色**  \n该类实现了 Command 接口，在 execute() 方法中调用接收者角色的相关方法，在接收者和命令执行的具体行为之间加以弱耦和。\n\n**Invoker：请求者角色**  \n该类的职责就是调用命令对象执行具体的请求，相关的方法我们称为行动方法。\n\n这里其实大家可以看到，命令模式的应用其实可用一句话概述，就是将行为调用者与实现者解耦。\n\n```Java\n// 接收者类\npublic class Receiver {\n\t/**\n\t * 真正执行具体命令逻辑的方法\n\t */\n\tpublic void action() {\n\t\tSystem.out.println(\"执行具体操作\");\n\t}\n}\n\n// 抽象命令接口\npublic interface Command {\n\t/**\n\t * 执行具体操作的命令\n\t */\n\tvoid execute();\n}\n\n// 具体命令类\npublic class ConcreteCommand implements Command {\n\tprivate Receiver receiver; // 持有一个对接受者对象的引用\n\tpublic ConcreteCommand(Receiver receiver) {\n\t\tthis.receiver = receiver;\n\t}\n\t@Override\n\tpublic void execute() {\n\t\t// 调用接收者的相关方法来执行具体逻辑\n\t\treceiver.action();\n\t}\n}\n\n// 请求者类\npublic class Invoker {\n\tprivate Command command; // 持有一个对应命令对象的引用\n\t\n\tpublic Invoker() {\n\t\tthis.command = command;\n\t}\n\t\n\tpublic void action() {\n\t\t// 调用具体命令对象的相关方法，执行具体命令\n\t\tcommand.execute();\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 构造一个接受者对象\n\t\tReceiver receiver = new Receiver();\n\t\t// 根据接收者对象构造一个命令对象\n\t\tCommand command = new ConcreteCommand(receiver);\n\t\t// 根据具体的对象构造请求者对象\n\t\tInvoker invoker = new Invoker(command);\n\t\t// 执行请求方法\n\t\tinvoker.action();\n\t}\n}\n```\n\n#### 命令模式的简单实现\n这里以古老的俄罗斯方块游戏为例，在命令模式下如何操控俄罗斯方块变换。游戏中含有 4 个按钮，即上下左右。设定玩游戏的人相当于我们的客户端，游戏上的 4 个按钮相当于请求者，而执行具体按钮命令的逻辑方法可看作命令角色。\n\n便于理解，本示例的 UML 类图如图 2-22 所示。\n\n![命令模式实现俄罗斯方块游戏](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-22.png)\n<center>图 2-22 命令模式实现俄罗斯方块游戏</center>\n\n```Java\n// 接收者角色\npublic class TetrisMachine {\n\n\tpublic void toLeft() { // 真正处理 “向左” 操作的逻辑代码\n\t\tSystem.out.println(“向左”);\n\t}\n\t\n\tpublic void toRight() { // 真正处理 “向右” 操作的逻辑代码\n\t\tSystem.out.println(“向右”);\n\t}\n\t\n\tpublic void fastToBottom() { // 真正处理 “快速落下” 操作的逻辑代码\n\t\tSystem.out.println(“快速落下”);\n\t}\n\t\n\tpublic void transform() { // 真正处理 “改变形状” 操作的逻辑代码\n\t\tSystem.out.println(“改变形状”);\n\t}\t\n}\n\n// 命令者抽象\npublic interface Command {\n\t/**\n\t * 命令执行方法\n\t */\n\tvoid execute();\n}\n\n// 具体命令者：向左移的命令类\npublic class LeftCommand implements Command {\n\t// 持有一个接收者俄罗斯方块游戏对象的引用\n\tprivate TetrisMachine machine;\n\tpublic LeftCommand(TetriMachine machine){\n\t\tthis.machine = machine;\n\t}\n\t@Override\n\tpublic void execute() {\n\t\t// 调用游戏机里的具体方法执行操作\n\t\tmachine.toLeft();\n\t}\n}\n\n// 具体命令者：向右移的命令类\npublic class RightCommand implements Command {\n\t// 持有一个接收者俄罗斯方块游戏对象的引用\n\tprivate TetrisMachine machine;\n\tpublic RightCommand(TetriMachine machine){\n\t\tthis.machine = machine;\n\t}\n\t@Override\n\tpublic void execute() {\n\t\t// 调用游戏机里的具体方法执行操作\n\t\tmachine.toRight();\n\t}\n}\n\n// 具体命令者：快速落下的命令类\npublic class FallCommand implements Command {\n\t// 持有一个接收者俄罗斯方块游戏对象的引用\n\tprivate TetrisMachine machine;\n\tpublic FallCommand(TetriMachine machine){\n\t\tthis.machine = machine;\n\t}\n\t@Override\n\tpublic void execute() {\n\t\t// 调用游戏机里的具体方法执行操作\n\t\tmachine.fastToBottom();\n\t}\n}\n\n// 具体命令者：改变形状的命令类\npublic class TransformCommand implements Command {\n\t// 持有一个接收者俄罗斯方块游戏对象的引用\n\tprivate TetrisMachine machine;\n\tpublic TransformCommand(TetriMachine machine){\n\t\tthis.machine = machine;\n\t}\n\t@Override\n\tpublic void execute() {\n\t\t// 调用游戏机里的具体方法执行操作\n\t\tmachine.transform();\n\t}\n}\n\n// 请求者类：命令由按钮发起\npublic class Buttons {\n\tprivate LeftCommand leftCommand; // 向左移动的命令对象引用\n\tprivate RightCommand rightCommand; // 向右移动的命令对象引用\n\tprivate FallCommand fallCommand; // 快速落下的命令对象引用\n\tprivate TransformCommand transformCommand; // 变换形状的命令对象引用\n\t\n\t/**\n\t * 设置向左移动的命令对象\n\t * @param leftCommand 向左移动的命令对象\n\t */\n\tpublic void setLeftCommand(LeftCommand leftCommand) {\n\t\tthis.leftCommand = leftCommand;\n\t}\n\t\n\t/**\n\t * 设置向右移动的命令对象\n\t * @param rightCommand 向右移动的命令对象\n\t */\n\tpublic void setRightCommand(RightCommand rightCommand) {\n\t\tthis.rightCommand = rightCommand;\n\t}\n\t\n\t/**\n\t * 设置快速落下的命令对象\n\t * @param fallCommand 向左移动的命令对象\n\t */\n\tpublic void setFallCommand(FallCommand fallCommand) {\n\t\tthis.fallCommand = fallCommand;\n\t}\n\t\n\t/**\n\t * 设置变换形状的命令对象\n\t * @param transformCommand 向左移动的命令对象\n\t */\n\tpublic void setTransformCommand(TransformCommand transformCommand) {\n\t\tthis.leftCommand = leftCommand;\n\t}\n\t\n\tpublic void toLeft() { // 按下按钮向左移动\n\t\tleftCommand.execute();\n\t}\n\t\n\tpublic void toRight() { // 按下按钮向右移动\n\t\trightCommand.execute();\n\t}\n\t\n\tpublic void fall() { // 按下按钮快速落下\n\t\tfallCommand.execute();\n\t}\n\t\n\tpublic void transform() { // 按下按钮改变形状\n\t\ttransformCommand.execute();\n\t}\n}\n\n// 客户端实现\npublic class Player {\n\tpublic static void main(String[] args) {\n\t\t// 首先要有俄罗斯方块游戏\n\t\tTetrisMachine machine = new TetrisMachine();\n\t\t\n\t\t// 根据游戏我们构造 4 种命令\n\t\tLeftCommand leftCommand = new LeftCommand(machine);\n\t\tRightCommand rightCommand = new RightCommand(machine);\n\t\tFallCommand fallCommand = new FallCommand(machine);\n\t\tTransformCommand transformCommand = new TransformCommand(machine);\n\t\t\n\t\t// 按钮可以执行不同的命令\n\t\tButtons buttons = new Buttons();\n\t\tbuttons.setLeftCommand(leftCommand);\n\t\tbuttons.setRightCommand(rightCommand);\n\t\tbuttons.setFallCommand(fallCommand);\n\t\tbuttons.setTransformCommand(transformCommand);\n\t\t\n\t\t// 具体按下哪个按钮玩家决定\n\t\tbuttons.toLeft();\n\t\tbuttons.toRight();\n\t\tbuttons.fall();\n\t\tbuttons.transform();\n\t}\n}\n```\n\n对于大部分开发者来说，更愿意接受的形式：\n\n```Java\nTetrisMachine machine = new TetrisMachine();\n\n// 实现怎样的控制方式，直接调用相关函数\n// machine.toLeft();\n// machine.toRight();\n// machine.fastToBottom();\n// machine.transform();\n\nmachine.toLeft();\n```\n\n调用逻辑做得如此复杂，其实是为了开发起来方便，即每次我们增加或修改游戏功能只需修改 TetrisMachine 类即可。\n当然，其实这样做是有原因的，即设计模式种有一条重要的原则：对修改关闭对扩展开放。具体好处是：\n\n- 如修改功能、代码的具体逻辑，以上例为例，即修改 TetrisMachine 类即可。\n- 此外，命令模式还可以实现命令记录的功能，如在 Buttons 里使用数据结构存储执行过的命令对象，需要时可恢复。\n\n#### 总结\n- 命令模式的优缺点\n\t- 优点 - 更灵活的控制性以及更好的扩展性；更弱的耦合性。\n\t- 缺点 - 类的膨胀，大量衍生类的创建。\n\n### 观察者模式\n\n#### 观察者模式的定义\n定义对象间一种 `一对多` 的 `依赖关系`，使得每当一个对象改变状态，则所有依赖与它的对象都会得到通知并被自动更新。\n\n#### 观察者模式的使用场景\n- 关联行为场景，即关联行为是可拆分的，而不是“组合”关系。\n- 事件多级触发场景。\n- 跨系统的消息交换场景，如消息队列、事件总线的处理机制。\n\n#### 观察者模式的 UML 类图\n观察者模式的 UML 类图如图 2-23 所示。\n\n![观察者模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-23.png)\n<center>图 2-23 观察者模式的 UML 类图</center>\n\n#### 观察者模式实战\n\n#### 总结\n- 观察者模式主要的作用就是对象解耦，将观察者与被观察者完全隔离，只依赖于 Observer 和 Obserable 抽象。\n\n> 如：ListView 就是运用了 Adapter 和观察者模式，使之它的扩展性、灵活性增强，且耦合度却很低。\n\n- 观察者模式的优缺点\n\t- 优点  \n\t1) 增强系统灵活性、可扩展性；  \n\t2) 将观察者与被观察者之间是抽象耦合，应对业务变换。\n\t- 缺点 - 应用观察者模式，需考虑开放效率和运行效率问题 (一般考虑采用异步的方式)\n\n### 备忘录模式\n\n#### 备忘录模式的介绍\n- 行为型设计模式。\n- 用于保存对象当前状态，并在之后可再次恢复到此状态。\n- 保证被保存的对象状态不能被对象从外部访问，目的是为了保护好被保存对象状态的完整性及内部实现不向外暴露。\n\n#### 备忘录模式的定义\n在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可将该对象恢复到原生保存的状态。\n\n#### 备忘录模式的 UML 类图\n备忘录模式的 UML 类图如图 2-24 所示。\n\n![备忘录模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-24.png)\n<center>图 2-24 备忘录模式的 UML 类图</center>\n\n**Originator**  \n负责创建一个备忘录，可以记录、恢复自身的内部状态。同时 Originator 还可以根据需要决定 Memoto 存储自身的哪些内部状态。\n\n**Memoto**  \n备忘录角色，用于储存 Originator 的内部状态，并且可以防止 Originator 以外的对象访问 Memoto。\n\n**Caretaker**\n负责储存备忘录，不能对备忘录的内容进行操作和访问，只能够将备忘录传递给其他对象。\n\n#### 备忘录模式的简单实例\n对于备忘录模式来说，比较贴切的场景应该是游戏中的存档功能，该功能就是将游戏进度存储到本地文件系统或者数据库中，下次再次进入时从本地加载进度，使得玩家能够继续上一次的游戏之旅。下面我们以“使命召唤”这款游戏为例简单演示备忘录模式的实现。\n\n首先我们建立游戏类 CallOfDuty，备忘录类 Memoto 和负责管理 Memoto 的 CareTaker 类。玩游戏到某个节点对游戏进行存档，然后退出游戏，再重新进入时从存档中读取进度，并且进入存档时的进度。\n\n便于理解，本示例的 UML 类图如图 2-25 所示。\n\n![使命召唤的存储功能实现](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-25.png)\n<center>图 2-25 使命召唤的存储功能实现</center>\n\n```Java\n// ”使命召唤“ 游戏 ( 简化的数据模型，仅供简单演示 )\npublic class CallOfDuty {\n\tprivate int mCheckPoint = 1;\n\tprivate int mLifeValue = 100;\n\tprivate String mWeapon = \"沙漠之鹰\";\n \n\tpublic void play() { // 玩游戏\n\t\t// 忽略实现细节\n\t}\n \n\tpublic void quit() { // 退出游戏\n\t\t// 忽略实现细节\n\t}\n \n\tpublic Memoto createMemoto() { // 创建备忘录\n \t\tMemoto memoto = new Memoto();\n \t\tmemoto.mCheckPoint = mCheckPoint;\n \t\tmemoto.mLifeValue = mLifeValue;\n \t\tmemoto.mWeapon = mWeapon;\n \t\treturn memoto;\n\t}\n \n \tpublic void restore(Memoto memoto) { // 恢复游戏\n \t\tthis.mCheckPoint = memoto.mCheckPoint;\n \t\tthis.mLifeValue = memoto.mLifeValue;\n \t\tthis.mWeapon = memoto.mWeapon;\n \t\tSystem.out.println(\"恢复后的游戏属性: \" + this.toString());\n\t}\n \n \t@Overrride\n\tpublic String toString() {\n\t\treturn \"CallOfDuty[mCheckPoint=..., mLifeValue=..., mWeapon=...]\"\n\t}\n}\n\n// 备忘录类\npublic class Memoto {\n\tpublic int mCheckPoint;\n\tpublic int mLifeValue;\n\tpublic String mWeapon;\n}\n\n// Caretaker，负责管理 Memoto\npublic class Caretaker {\n\tMemoto memoto = null;\n\t\n\tpublic void archive(Memoto memoto) { // 存档\n\t\tthis.memoto = memoto;\n\t}\n\t\n\tpublic Memoto getMemoto() { // 读取存档\n\t\treturn memoto;\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tCallOfDuty game = new CallOfDuty();\n\t\t\n\t\t// Step.01 游戏开始\n\t\tgame.play();\n\t\t\n\t\t// Step.02 游戏存档\n\t\tCaretaker caretaker = new Caretaker();\n\t\tcaretaker.archive( game.createMemoto() );\n\t\t\n\t\t// Step.03 退出游戏\n\t\tgame.quit();\n\t\t\n\t\t// Step.04 恢复游戏\n\t\tCallOfDuty newGame = new CallOfDuty();\n\t\tnewGame.restore( caretaker.getMemoto() );\n\t}\n}\n```\n\n#### 总结\n- 备忘录模式是在不破坏封装的条件下，通过备忘录对象 (Memoto) 存储另外一个对象内部状态的快照，在需求的时候把对象还原到存储的状态。\n- 备忘录的优缺点\n\t- 优点 - 恢复状态机制；信息封装\n\t- 缺点 - 消耗内存 \n \n### 迭代器模式\n\n#### 迭代器模式的介绍\n- 又称游标 (Cursor) 模式，行为型设计模式。\n- 迭代器模式源于对容器的访问，若我们将遍历的方法封装在容器中，则存在问题：\n\t- 不仅维护自身内部数据且要对外提供遍历的接口方法。\n\t- 不能对同一个容器同时进行多个遍历操作。\n\t- 不提供遍历方法，而让使用者自行实现，必暴露内部细节。  \n \n\t解决方案：在客户访问类与容器直接插入一个第三者 `迭代器`。\n\n#### 迭代器模式的定义\n提供一种方法顺序访问一个容器对象中的各个元素，而不需暴露该对象内部细节。\n\n#### 迭代器模式的 UML 类图\n迭代器模式的 UML 类图如图 2-26 所示。\n\n![迭代器模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-26.png)\n<center>图 2-26 迭代器模式的 UML 类图</center>\n\n**Iterator：迭代器接口**  \n迭代器接口，负责定义、访问和遍历元素的接口。\n\n**ConcreteIterator：具体迭代器类**  \n具体迭代器类，实现迭代器接口，并记录遍历的当前位置。  \n\n**Aggregate：容器接口**  \n容器接口，负责提供创建具体迭代器角色的接口。\n\n**ConcreteIterator：具体容器类**\n具体容器类，具体迭代器角色与该容器相关联。\n\n```Java\n// 迭代器接口\npublic interface Iterator<T> {\n\t/**\n\t * 是否还有下一个元素\n\t * @return true 表示有，false 表示没有\n\t */\n\tboolean hasNext();\n\t\n\t/**\n\t * 返回当前位置的元素并将位置移至下一位\n\t * @return T 返回当前位置的元素\n\t */\n\tT next();\n}\n\n// 具体迭代器类\npublic class ConcreteIterator<T> implements Iterator<T> {\n\tprivate List<T> list = new ArrayList<T>();\n\tprivate int cursor = 0;\n\t\n\tpublic ConcreteIterator(List<T> list) {\n\t\tthis.list = list;\n\t}\n\t\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn cursor != list.size();\n\t}\n\t\n\t@Override\n\tpublic T next() {\n\t\tT obj = null;\n\t\tif( this.hasNext()) {\n\t\t\tobj = this.list.get(cursor++);\n\t\t}\n\t\treturn obj;\n\t}\n}\n\n// 容器接口\npulbic interface Aggregate<T> {\n\t/**\n\t * 添加一个元素\n\t * @param obj 元素对象\n\t */\n\tvoid add(T obj); \n\t\n\t/**\n\t * 移除一个元素\n\t * @param obj 元素对象\n\t */\n\tvoid remove(T obj);\n\t\n\t/**\n\t * 获取容器的迭代器\n\t * @return 迭代器对象\n\t */\n\tIterator<T> Iterator();\n}\n\n// 具体容器类\npublic class ConcreteAggregate<T> implements Aggregate<T> {\n\tprivate List<T> list = new ArrayList<T>();\n\t\n\t@Override\n\tpublic void add() {\n\t\tlist.add(obj);\n\t}\n\t\n\t@Override\n\tpublic void remove() {\n\t\tlist.remove(obj);\n\t}\n\t\n\t@Override\n\tpublic Iterator<T> iterator() {\n\t\treturn new ConcreteIterator<T>(list);\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tAggregate<String> aggregate = new ConcreteAggregate<>();\n\t\t\n\t\taggregate.add(\"Aige \");\n\t\taggregate.add(\"Studio\\n\");\n\t\taggregate.add(\"SM \");\n\t\taggregate.add(\"Brother\\n\");\n\t\t\n\t\tIterator<String> iterator = aggregate.iterator();\n\t\twhile( iterator.hasNext() ) {\n\t\t\tSystem.out.println(iterator.next());\n\t\t}\t\n\t}\n}\n```\n\n#### 总结\n- 迭代器模式的优缺点\n\t- 优点 - 支持以不同的方式遍容器对象，也可以有多个遍历，弱化了容器类与遍历算法之间的关系。\n\t- 缺点 - 类文件的增加。  \n- 当然几乎每一种高级语言都有相应的内置迭代器实现，故本章的内容在于了解而非应用。\n\n### 模板方法模式\n\n#### 模板方法模式的介绍\n若我们知道一个算法所需的关键步骤，并确定了这些步骤的执行顺序，但某些步骤的具体实现是未知的，或实现是随着环境变化的。\n\n> 例如，执行程度的流程大致为：  \n> Step.01：检查代码正确性  \n> Step.02：链接相关类库  \n> Step.03：编译  \n> Step.04：执行程序  \n> 即上述步骤不一样 ( 实现细节 )，但执行流程是固定的。\n\n#### 模板方法模式的定义\n- 定义一个操作的 `算法框架`。\n- 将步骤延迟到子类，使子类不改变算法结构即可重定义该算法的某些特定步骤。\n\n#### 模板方法模式的使用场景\n- 多个子类有公有的方法，且逻辑基本相同。\n- 重要复杂的算法，可把核心算法设计为模板方法，周边细节功能则由各个子类实现。\n- 重构时，使用模板方法，即相同代码抽取到父类中，然后通过 `钩子函数` 约束其行为。\n\n\t> 钩子函数：普通的抽象类多态，即它在模板方法模式中提供了改变原始逻辑的空间。\n\n#### 模板方法模式的 UML 类图\n模板方法模式的 UML 类图如图 2-27 所示。\n\n![模板方法模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-27.png)\n<center>图 2-27 模板方法模式的 UML 类图</center>\n\n#### 总结\n- 模板方法模式：流程封装，即把某个固定的流程封装到一个 final 函数中，并让子类能够定制这个流程中的某些或者所有步骤。\n\n\t> 要求父类提供共同代码，即提高代码复用性、可扩展性。\n\n- 模板方法的优缺点\n\t- 优点  \n\t1) 封装不变部分，扩展可变部分。  \n\t2) 提取公共部分代码。  \n\t- 缺点：代码阅读有难度？\n\n### 访问者模式\n\n#### 访问者模式的介绍\n- 将 `数据操作` 与 `数据结构` 分离的设计模式。\n- 软件系统拥有由许多对象构成的对象结构，这些对象类拥有一 accept() 方法接受访问者对象访问。\n- 访问者是一接口，拥有一 visit() 方法对访问到的对象结构中不同类型的元素作出不同的处理。\n\n\t> * 在对象结构的一次访问中，遍历整个对象结构，对每个元素实施 accept() 方法。  \n\t> * 每一元素的 accept() 方法会调用访问者的 visit() 方法，即访问者可针对对象结构设计不同的访问类来完成不同操作。\n\n#### 访问者模式的定义\n封装用于某种数据结构中各元素操作，且在不改数据结构的前提下定义这些元素的新操作。\n\n#### 访问者模式的使用场景\n- 对一对象结构中的对象进行不同且不相关的操作。\n- 需避免操作“污染”对象的类。\n- 增加新操作是不修改这些类。\n- 对象结构稳定，但经常需在对象结构上定义新操作。\n\n#### 访问者模式的 UML 类图\n访问者模式的 UML 类图如图 2-28 所示。\n\n![访问者模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-28.png)\n<center>图 2-28 访问者模式的 UML 类图</center>\n\n#### 访问者模式的简单示例\n公司给员工进行业绩考核，评定由公司高层负责。但不同领域的管理人员对与员工的评定标准不一样。即我们把员工分为工程师和经理，评定员工分为 CTO 和 CEO。\n\n假定 CTO 关注工程师的代码量，经理的新产品数量；CEO 关注工程师的 KPI，经理的 KPI 及新产品数量。\n\n便于理解，本示例的 UML 类图如图 2-29 所示。\n\n![公司员工业绩考核](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-29.png)\n<center>图 2-29 公司员工业绩考核</center>\n\n```Java\n// 员工基类\npublic abstract class Staff {\n\tpublic String name;\n\tpublic int kpi; // 员工 KPI\n\tpublic Staff(String name) {\n\t\tthis.name = name;\n\t\tkpi = new Random().nextInt(10); // 随机生成 10 内的值.\n\t}\n\t\n\t// 接受 Visitor 的访问\n\tpublic abstract void accept(Visitor visitor);\n}\n\n// 工程师类型\npublic class Engineer extends Staff {\n\tprivate int codes; // 代码量\n\t\n\tpublic Engineer (String name) {\n\t\tsuper(name);\n\t\tcodes = new Random().nextInt(100000)\n\t}\n\t\n\t@Override\n\tpublic void accept(Visitor visitor) {\n\t\tvisitor.visit(this);\n\t}\n\t\n\tpublic int getCodeLines() { // 工程师一年内写的代码量\n\t\treturn codes;\n\t}\n}\n\n// 经理类型\npublic class Manager extends Staff {\n\tprivate int products; // 产品数量\n\t\n\tpublic Manager (String name) {\n\t\tsuper(name);\n\t\tproducts = new Random().nextInt(10);\n\t}\n\t\n\t@Override\n\tpublic void accept(Visitor visitor) {\n\t\tvisitor.visit(this);\n\t}\n\t\n\tpublic int getProducts() { // 经理一年内做的产品数量\n\t\treturn products;\n\t}\n}\n\npublic interface Visitor {\n\t// 访问工程师类型\n\tpublic void visit(Engineer engineer); \n\t\n\t// 访问经理类型\n\tpublic void visit(Manager leader); \n}\n\n// CEO 访问者\npublic class CEOVisitor implements Visitor {\n\t@Override\n\tpublic void visit(Engineer engineer) {\n\t\tSystem.out.println(\"Name:..., KPI:...\");\n\t}\n\t\n\t@Override\n\tpublic void visit(Manager mgr) {\n\t\tSystem.out.println(\"Name:..., KPI:..., Products:...\");\n\t}\n}\n\n// CTO 访问者\npublic class CTOVisitor implements Visitor {\n\t@Override\n\tpublic void visit(Engineer engineer) {\n\t\tSystem.out.println(\"Name:..., Codes:...\");\n\t}\n\t\n\t@Override\n\tpublic void visit(Manager mgr) {\n\t\tSystem.out.println(\"Name:..., Products:...\");\n\t}\n}\n\npublic class BusinessReport {\n\tList<Staff> mStaffs = new LinkedList<Staff>();\n\t\n\tpublic BusinessReport() {\n\t\tmStaffs.add(new Manager(\"Manager Wang.\"));\n\t\tmStaffs.add(new Manager(\"Manager Lin.\"));\n\t\tmStaffs.add(new Manager(\"Engineer Kael.\"));\n\t\tmStaffs.add(new Manager(\"Engineer Chaos.\"));\n\t}\n\t\n\t/**\n\t * 为访问者展示报表\n\t * @param visitor 公司高层，如 CEO、CTO\n\t */\n\tpublic void showReport(Visitor visitor) {\n\t\tfor( Staff staff : mStaffs ) {\n\t\t\tstaff.accept(visitor);\n\t\t}\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tBusinessReport report = new BusinessReport();\n\t\treport.showReport( new CEOVisitor() );\n\t\treport.showReport( new CTOVisitor() );\n\t}\n}\n```\n\n#### 总结\n- 对象结构足够稳定，需在对象结构上经常定义新操作，且需对对象结构中的对象进行很多不同且不相关的操作，考虑访问者模式。\n- 访问者模式的优缺点\n\t- 优点  \n\t1) 单一职责原则，即各角色职责分离。  \n\t2) 数据结构和作用于该结构上的操作解耦。  \n\t- 缺点  \n\t1) 具体元素对访问者公布细节。  \n\t2) 具体元素变更导致修改成本大。  \n\t3) 违反依赖倒置原则，即为了“区别对待”而依赖了具体类，没有依赖抽象，如上例中的 Engineer 与 Manager。  \n\t\n### 中介者模式\n\n#### 中介者模式的介绍\n- 又称为调节者模式或调停者模式，行为型设计模式。\n\n#### 中介者模式的定义\n- 包装一系列对象相互作用的方式，使这些对象不必相互明显作用。\n- 将多对多的相互作用转化为一对多的相互作用。\n- 将对象的行为和协作抽象化。\n\n#### 中介者模式的使用场景\n- 对象间交互操作较多且每个对象的行为操作都依赖彼此时，为防止修改其中一对象的行为同时涉及修改很多其他对象的行为。\n- 该模式将对象之间的多对多关系变成一对多关系。\n- 中介者对象将系统从网状结构变成以调停者为中心的星形结构，以降低系统复杂性，提高可扩展性作用。\n\n#### 中介者模式的 UML 类图\n中介者模式的 UML 类图如图 2-30 所示。\n\n![中介者模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-30.png)\n<center>图 2-30 中介者模式的 UML 类图</center>\n\n```Java\n// 抽象中介者\npublic abstract class Mediator {\n\tprotected ConcreteColleagueA colleagueA; // 具体同事类 A\n\tprotected ConcreteColleagueB colleagueB; // 具体同事类 B\n\t\n\t// 抽象中介方法、子类实现\n\tpublic abstract void method();\n\t\n\tpublic void setColleagueA(ConcreteColleagueA colleagueA) {\n\t\tthis.colleagueA = colleagueA;\n\t}\n\t\n\tpublic void setColleagueB(ConcreteColleagueB colleagueB) {\n\t\tthis.colleagueB = colleagueB;\n\t}\n}\n\n// 具体中介者\npublic class ConcreteMediator extends Mediator {\n\t@Override\n\tpublic void method() {\n\t\tcolleagueA.action();\n\t\tcolleagueB.action();\n\t}\n}\n\n// 抽象同事\npublic abstract class Colleague {\n\tprotected Mediator mediator; // 中介者对象\n\t\n\tpublic Colleague(Mediator mediator) {\n\t\tthis.mediator = mediator;\n\t}\n\t\n\t// 同事角色的具体行为，由子类去实现\n\tpublic abstract void action();\n}\n\n// 具体同事 A\npublic class ConcreteColleagueA extends Colleague {\n\tpublic ConcreteColleagueA(Mediator mediator) {\n\t\tsuper(mediator);\n\t}\n\t\n\t@Override\n\tpublic void action() {\n\t\tSystem.out.println(\"Colleague A 将信息递交给中介者处理.\");\n\t}\n}\n\n// 具体同事 B\npublic class ConcreteColleagueB extends Colleague {\n\tpublic ConcreteColleagueB(Mediator mediator) {\n\t\tsuper(mediator);\n\t}\n\t\n\t@Override\n\tpublic void action() {\n\t\tSystem.out.println(\"Colleague B 将信息递交给中介者处理.\");\n\t}\n}\n```\n\n#### 中介者模式的简单实现\n便于理解，本示例的 UML 类图如图 2-31 所示。\n\n![电脑内部硬件的交互](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-31.png)\n<center>图 2-31 电脑内部硬件的交互</center>\n\n中介者模式就是用来协调多个对象之间的交互，就像上例中的主板，没有主板这个中介者，那么电脑里的每一个零部件都要与其他零部件建立关联。\n\n比如 CPU 要与内存交互，与显卡交互以及与 IO 设备交互，那么这样一来就会构成一个错综复杂的网状图，而中介者模式即将网状图变成一个结构清晰的星形图。\n\n#### 中介者模式实战\n协调多个交互的对象，Android 中这么多形形色色控件也算是交互对象。其中社交、网商等应用的用户登录模块，账号框、密码框、登录按钮之间的相互制约、联系，正是中介者模式的表现，具体的实例样式可自行尝试。\n\n#### 总结\n- 中介者模式的优缺点\n\t- 优点 - 将网状般的依赖关系转化为以中介者为中心的星形结构，即使用中介者模式可对这种依赖关系进行解耦使逻辑结构清晰。\n\t- 缺点 - 若几个类间的依赖关系并不复杂，使用中介者模式反而会使原本不复杂的逻辑结构变得复杂。\n\n### 代理模式\n\n#### 代理模式的定义\n- 结构型设计模式。\n- 为其他对象提供一种代理以控制对这个对象的访问。\n\n#### 代理模式的使用场景\n- 无法或不想直接访问某个对象或访问某对象存在困难。\n- 为保证客户端使用的透明性，委托对象与代理对象需实现相同的接口。\n\n#### 代理模式的 UML 类图\n代理模式的 UML 类图如图 2-32 所示。\n\n![代理模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-32.png)\n<center>图 2-32 代理模式的 UML 类图</center>\n\n**Subject：抽象主题类**  \n该类主要职责是声明真实主题与代理的共同接口方法，其可是抽象类或接口。\n\n**RealSubject：真实主题类**  \n该类也被称为被委托类或者被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户类则通过代理类间接地调用真实主题类中定义的方法。\n\n**ProxySubject：代理类**  \n该类也称为委托类或者代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中相应的接口方法执行，以起到代理的作用。\n\n```Java\n// 抽象主题类\npublic abstract class Subject {\n\t// 一个普通的业务方法\n\tpublic abstract void visit();\n}\n\n// 实现抽象主题的真实主题类\npublic class RealSubject extends Subject {\n\tpublic void visit() {\n\t\tSystem.out.println(\"Real Subjetc!\");\n\t}\n}\n\n// 代理类\npublic class ProxySubject extends Subject {\n\tprivate RealSubject mSubject; // 持有真实主题的引用\n\t\n\tpublic ProxySubject(RealSubject mSubject) {\n\t\tthis.mSubject = mSubject;\n\t}\n\t\n\t@Override\n\tpublic void visit() {\n\t\tmSubject.visit();\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String args) {\n\t\t// 构造一个真实主题对象\n\t\tRealSubject real = new RealSubject();\n\t\t// 通过真实主题对象构造一个代理对象\n\t\tProxySubject proxy = new ProxySubject(real);\n\t\t// 调用代理的相关方法\n\t\tproxy.visit(); \n\t}\n}\n```\n\n#### 代理模式的简单实现\n以生活中常有的例子，老板拖欠工资甚至克扣工资的情况，而最恰当的途径就是通过法律诉讼解决问题。一旦选择走法律途径解决该纠纷，那么不可避免地需请一个律师来作为自己的诉讼代理人。\n\n便于理解，本示例的 UML 类图如图 2-33 所示。\n\n![律师作为诉讼代理人](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-33.png)\n<center>图 2-33 律师作为诉讼代理人</center>\n\n```Java\n// 诉讼接口类\npublic interface ILawsuit {\n\tvoid submit(); // 提交申请\n\tvoid burden(); // 进行举证\n\tvoid defend(); // 开始辩护\n\tvoid finish(); // 诉讼完成\n}\n\n// 具体诉讼人\npublic class XiaoMin implements ILawsuit {\n\t@Override\n\tpublic void submit() {\n\t\tSystem.out.println(\"老板拖欠工资，特此申请仲裁!\");\n\t}\n\t@Override\n\tpublic void burden() {\n\t\tSystem.out.println(\"这是合同书和过去一年的银行工资流水!\");\n\t}\n\t@Override\n\tpublic void defend() {\n\t\tSystem.out.println(\"证据确凿!\");\n\t}\n\t@Override\n\tpublic void finish() {\n\t\tSystem.out.println(\"诉讼成功!\");\n\t}\n}\n\n\n// 代理律师\npublic class Lawyer implements ILawsuit {\n\tprivate ILawsuit mLawsuit; // 持有一个具体被代理者的引用\n\t\n\tpublic Lawyer(ILawsuit lawsuit) {\n\t\tmLawsuit = lawsuit;\n\t}\n\t@Override\n\tpublic void submit() {\n\t\tmLawsuit.submit();\n\t}\n\t@Override\n\tpublic void burden() {\n\t\tmLawsuit.burden();\n\t}\n\t@Override\n\tpublic void defend() {\n\t\tmLawsuit.defend();\n\t}\n\t@Override\n\tpublic void finish() {\n\t\tmLawsuit.finish();\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\n\t\tILawsuit xiaomin = new XiaoMin();\n\t\tILawsuit lawyer = new Lawyer(xiaomin);\n\n\t\tlawyer.submit();\n\t\tlawyer.burden();\n\t\tlawyer.defend();\n\t\tlawyer.finish();\n\t}\n}\n```\n\n- 静态代理  \n\t代码由程序员自己或者通过一些自动化工具生成固定的代码再对其进行编译，即说在我们的代码运行前代理类的 Class 编译文件就已经存在。上述例子即为静态代理的实现模式。\n\n- 动态代理  \n\t通过反射机制动态地生成代理者的对象，即我们在编译阶段不需要知道代理者是谁，代理谁我们将在执行阶段决定。Java 提供了便捷的动态代理接口 InvocationHandler。  \n\t同样，以动态代理方式实现上述例子，本示例的 UML 类图如图 2-34 所示。\n\t\n![动态代理的实现案例](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-34.png)\n<center>图 2-34 动态代理的实现案例</center>\n\n```Java\npublic class DynamicProxy implements IncocationHandler {\n\tprivate Object obj; // 被代理的类引用\n\t\n\tpublic DynamicProxy(Object obj) {\n\t\tthis.obj = obj;\n\t}\n\t@Override\n\tpublic Object invoke(\n\tObject proxy, Method method, Object[] args) throws Throwable {\n\t\tObject result = method.invoke(obj, args);\n\t\treturn result;\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tILawsuit xiaomin = new XiaoMin();\n\t\tDynamicProxy proxy = new DynamicProxy(xiaomin);\n\t\t\n\t\t// 获取被代理类小民的 ClassLoader\n\t\tClassLoader loader = xiaomin.getClass().getClassLoader();\n\t\t// 动态构造一个代理者律师\n\t\tILawsuit lawyer =(ILawsuit) Proxy.newProxyInstance(loader,\n\t\t\tnew Class[] {ILawsuit.class}, proxy);\n\t\t)\n\t\t// 律师提交诉讼申请\n\t\tlawyer.submit();\n\t\t// 律师进行举证\n\t\tlawyer.burden();\n\t\t// 律师代替小民进行辩护\n\t\tlawyer.defend();\n\t\t// 完成诉讼\n\t\tlawyer.finish();\n\t}\n}\n```\n\n#### 总结\n- 代理模式的优缺点\n\t- 优点 - 代理模式可看作一种针对性优化。\n\t- 缺点 - 暂没有明显的缺点。\n\n### 组合模式\n\n#### 组合模式的介绍\n- 又称部分整体模式，结构型设计模式。\n- 它将一组相似的对象看作一个对象处理，并根据一个树状结构来组合对象，然后提供一个统一的方法去访问相应对象。\n\n\t例如公司组织结构的树状图，如图 2-35 所示。\n\n\t![公司组织结构的树状图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-35.png)\n<center>图 2-35 公司组织结构的树状图</center>\n\n\t在组合模式中，我们将这样的一个拥有分支的节点称之为枝干构件，位于树状结构顶部的枝干结构比较特殊，我们称为根结构件，因其为整个树状图的始端。同样对于像行政部和研发部这样没有分支的结构，我们称之为叶子结构，这样的一个结构就是组合模式的雏形。如图 2-36 所示。\n\n\t![组合模式的雏形](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-36.png)\n<center>图 2-36 组合模式的雏形</center>\n\n#### 组合模式的定义\n将对象组合成 `树状结构` 以表示 \"部分-整体\" 的 `层次结构`，使得用户对单个对象和组合对象的使用具有一致性。\n\n#### 组合模式的使用场景\n- 表示对象的 `部分-整体` 层次结构时。\n- 从一个整体中能够独立出部分模块或功能的场景。\n\n#### 组合模式的 UML 类图\n组合模式的 UML 类图如图 2-37 所示。\n\n![组合模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-37.png)\n<center>图 2-37 组合模式的 UML 类图</center>\n\n上述所讲与依赖倒置原则相违背，既然是面向接口编程，则我们就该把焦点放在接口设计上，即在 Composite 的一些实现方法定义到 Component 中。\n\n这样，我们会得到一个不一样的组合模式，也称为安全的组合模式，该安全组合模式的 UML 类图见图 2-38 所示。\n\n透明组合模式不管是叶子还是枝干节点都有相同的结构，那么意味着不能单一的 getChildren() 方法得到子字节的类型 (已是叶子节点)，则必须在方法实现的内部进行判断。\n\n![安全的组合模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-38.png)\n<center>图 2-38 安全的组合模式的 UML 类图</center>\n\n```Java\n// 透明的组合模式抽象根节点\npublic abstract class Component {\n\tprotected String name; // 节点\n\t\n\tpulbic Component(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t/**\n\t * 具体的逻辑方法由子类实现\n\t */\n\tpublic abstract void doSomething();\n\t\n\t/**\n\t * 添加子节点\n\t * @child 子节点\n\t */\n\tpublic abstract void addChild(Component child);\n\t\n\t/**\n\t * 移除子节点\n\t * @child 子节点\n\t */\n\tpublic abstract void removeChild(Component child);\n\t\n\t/**\n\t * 获取子节点\n\t * @param index 子节点对应下标\n\t * @return 子节点\n\t */\n\tpublic abstract Component getChildren(int index);\n}\n\n// 透明的组合模式具体枝干节点\npublic class Composite extends Component {\n\n\t// 存储节点的容器\n\tprivate List<Component> components = new ArrayList<>();\n\t\n\tpublic Composite(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void doSomething() {\n\t\tSystem.out.println(name);\n\t\tif( null != components ) {\n\t\t\tfor(Component c : components) {\n\t\t\t\tc.doSomething();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void addChild(Component child) {\n\t\tcomponents.add(child);\n\t}\n\t\n\t@Override\n\tpublic  void removeChild(Component child) {\n\t\tcomponents.remove(child);\n\t}\n\t\n\t@Override\n\tpublic Component getChildren(int index) {\n\t\treturn components.get(index);\n\t}\n}\n\n// 透明的组合模式叶子节点\npublic class Leaf extends Component {\n\tpublic Leaf(String name) {\n\t\tsuper(name);\n\t}\n\t\n\t@Override\n\tpublic void doSomething() {\n\t\tSystem.out.println(name);\n\t}\n\t\n\t@Override\n\tpublic void addChild(Component child) {\n\t\tthrow new UnsupportedOperationException(\"叶子节点没有子节点\");\n\t}\n\t\n\t@Override\n\tpublic  void removeChild(Component child) {\n\t\tthrow new UnsupportedOperationException(\"叶子节点没有子节点\");\n\t}\n\t\n\t@Override\n\tpublic Component getChildren(int index) {\n\t\tthrow new UnsupportedOperationException(\"叶子节点没有子节点\");\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 构造一个根节点\n\t\tComponent root = new Composite(\"Root\");\n\t\t\n\t\t// 构造两个枝干节点\n\t\tComponent branch1 = new Composite(\"Branch1\");\n\t\tComponent branch2 = new Composite(\"Branch2\");\n\t\t\n\t\t// 构造两个叶子节点\n\t\tComponent leaf1 = new Leaf(\"Leaf1\");\n\t\tComponent leaf2 = new Leaf(\"Leaf2\");\n\t\t\n\t\t// 将叶子节点添加至枝干节点中\n\t\tbranch1.addChild(leaf1);\n\t\tbranch2.addChild(leaf2);\n\t\t\n\t\t//将枝干节点添加到根节点中\n\t\troot.addChild(branch1);\n\t\troot.addChild(branch2);\n\t\t\n\t\t// 执行方法\n\t\troot.doSomething();\n\t}\n}\n```\n\n#### 组合模式的简单实现\n在操作系统中，文件系统其实就是一种典型的组合模式例子。\n\n具体地，文件系统中文件就是可被具体程序执行的对象，文件夹就是可存放文件和文件夹的对象。文件系统的组合模式表示如图 2-39 所示。\n\n![文件系统的组合模式表示](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-39.png)\n<center>图 2-39 文件系统的组合模式表示</center>\n\n便于理解，本实例的 UML 类图如图 2-40 所示。\n\n![文件系统的组合模式实现](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-40.png)\n<center>图 2-40 文件系统的组合模式实现</center>\n\n```Java\n// 表示文件或文件夹的抽象类\npublic abstract class Dir {\n\t/**\n\t * 声明一个 List 成员变量存储文件夹下的所有元素\n\t */\n\tprotected List<Dir> dirs = new ArrayList<>();\n\tprivate String name; // 当前文件或文件夹的名称\n\tpublic Dir(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\t/**\n\t * 添加一个文件或文件夹\n\t * @param dir 文件或文件夹\n\t */\n\tpublic abstract void addDir(Dir dir);\n\t\n\t/**\n\t * 移除一个文件或文件夹\n\t * @param dir 文件或文件夹\n\t */\n\tpublic abstract void rmDir(Dir dir);\n\t\n\t/**\n\t * 清空文件夹下所有元素\n\t */\n\tpublic abstract void clear();\n\t\n\t/**\n\t * 输出文件夹目录结构\n\t */\n\tpublic abstract void print();\n\t\n\t/**\n\t * 获取文件夹下所有的文件或文件夹\n\t * @return 文件夹下所有的文件或文件夹\n\t */\n\tpublic abstract List<Dir> getFiles();\n\t\n\t/**\n\t * 获取文件或文件夹的名称\n\t * @return 文件或文件夹的名称\n\t */\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n\n// 表示文件夹的类\npublic class Folder extends Dir {\n\tpublic Folder(String name) {\n\t\tsuper(name);\n\t}\n\t@Override\n\tpublic void addDir(Dir dir) {\n\t\tdirs.add(dir);\n\t}\n\t@Override\n\tpublic void rmDir(Dir dir) {\n\t\tdirs.remove(dir);\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tdirs.clear();\n\t}\n\t@Override\n\tpublic void print() {\n\t\tSystem.out.println( getName() + \"(\" );\n\t\tIterator<Dir> iterator = dirs.iterator();\n\t\twhile( iterator.hasNext() ) {\n\t\t\tDir dir = iterator.next();\n\t\t\tdir.print();\n\t\t\tif( iterator.hasNext() ) {\n\t\t\t\tSystem.out.println(\",\\t\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\")\");\n\t}\n\t@Override\n\tpublic List<Dir> getFiles() {\n\t\treturn dirs;\n\t} \n}\n\n// 表示文件的类\npublic class File extends Dir {\n\tpublic File(String name) {\n\t\tsuper(name);\n\t}\n\t@Override\n\tpublic void addDir(Dir dir) {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\");\n\t}\n\t@Override\n\tpublic void rmDir(Dir dir) {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\");\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"文件类不能作为文件夹类来使用，即文件不支持添加也不支持删除\");\n\t}\n\t@Override\n\tpublic void print() {\n\t\tSystem.out.println(getName());\n\t}\n\t@Override\n\tpublic List<Dir> getFiles() {\n\t\tthrow new UnsupportedOperationException(\n\t\t\t\"文件类不能作为文件夹类来使用\");\n\t} \n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\t// 构造一个目录对象表示 C 盘根目录\n\t\tDir diskC = new Folder(\"C\");\n\t\t\n\t\t// C 盘根目录下有一个文件 FileLog.txt\n\t\tdiskC.addDir( new File(\"Filelog.txt\") );\n\t\t\n\t\t// C 盘根目录下有3个子目录 windows、perflogs 和 Program File\n\t\tDir dirWin = new File(\"windows\");\n\t\tDir dirPerf = new File(\"perflogs\");\n\t\tDir dirProg = new File(\"Program File\");\n\t\t\n\t\t// windows 目录下有文件 explorer.exe\n\t\t// perflogs 目录下有文件 perflogs.txt\n\t\t// Program File 目录下有文件 syslogs.txt\n\t\tdirWin.addDir( new File(\"explorer.exe\") );\n\t\tdirPerf.addDir( new File(\"perflogs.txt\") );\n\t\tdirProg.addDir( new File(\"syslogs.txt\") );\n\t\t\n\t\tdiskC.add(dirWin);\n\t\tdiskC.add(dirPerf);\n\t\tdiskC.add(dirProg);\n\t\t\n\t\tdiskC.print();\n\t}\n}\n```\n\n#### 总结\n- 组合模式与解释器模式有一定的类同，两者在迭代对象时都涉及递归的调用，但组合模式所提供的属性层次结构使我们能 `一视同仁` 对待单个对象的对象集合。\n- 组合模式的优缺点\n\t- 优点  \n\t1) 清楚定义分层次的复杂对象，表示对象的全部或部分层次，让高层模块忽略了层次差异，方便对整个层次结构进行控制。  \n\t2) \u0010高层模块可一致地使用一个组合结构或其中单个对象。  \n\t3) 在组合模式中增加新的枝干结构和叶子构件很方便，无须对类库进行修改。  \n\t4) 通过叶子对象和枝干对象的递归组合，形成复杂的树形结构，但对其控制却非常简单。\n\t- 缺点  \n\t1) 新增构件时，不好对枝干中的构件类型进行限制，不能依赖类型系统来施加这些约束，因为大多数情况下他们来自相同的抽象层。  \n\t2) 因此必须进行类型检查来实现。\n\t\n### 适配器模式\n\n#### 适配器模式的介绍\n- ListView、GirdView、RecyclerView 都需要使用 Adapter。\n- 两个没有关系的类型之间交互，一种解决方法是修改各自类接口；另一种情况是使用一个 Adapter，在两种接口间创建一个 “混血儿” 接口，将两接口兼容。\n\n#### 适配器模式的定义\n把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法一起工作的两个类能一起工作。\n\n#### 适配器模式的使用场景\n- 系统需要使用现存类，而此类接口不符系统需求，即接口不兼容。\n- 需一个统一的输出接口，而输入端的类型不可预知。\n\n#### 适配器模式的 UML 类图\n适配器模式也分两种，即类适配器模式和对象适配器模式。\n\n- 类适配器模式，如图 2-41 所示。\n\n![类适配器的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-41.png)\n<center>图 2-41 类适配器的 UML 类图</center>\n\n目标接口需要的是 operation2()，而 Adaptee 对象中有一个 operation3()，因此不兼容。故通过 Adapter 实现一个 operation2() 将 Adapter 的 operation3() 转换为 Target() 需要的 operation2()。\n\n- 对象适配器模式，如图 2-42 所示。\n\n![对象适配器的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-42.png)\n<center>图 2-42 对象适配器的 UML 类图</center>\n\n这种实现方式直接将要被适配的对象传递到 Adapter 中，使用组合的形式实现接口兼容的效果。即带来的好处有，在被适配的对象中不暴露方法细节；且相对类适配器，由于继承了被适配对象，在 Adapter 类中出现一些奇怪接口。因此对象适配器模式的实现更加灵活。\n\n#### 适配器模式的简单示例\n以电源适配器为例，分别以类适配器和对象适配器模式阐述具体情况。\n\n- 5V 电压是 Target 接口。\n- 220V 电压是 Adaptee 类。\n- 将电压 220V 转换到 5V 是 Adapter 类。 \n\n```Java\n/**\n * 以类适配器模式实现\n */\n\n// Target 角色\npublic interface FiveVolt {\n\tpublic int getvolt5();\n}\n\n// Adaptee 角色，需被转换的对象\npublic class Volt220 {\n\treturn 220;\n}\n\n// Adapter 角色，将 220V 的电压转换为 5V 电压\npublic class VoltAdapter extends Volt220 implements FiveVolt {\n\t@OVerride\n\tpublic int getVolt5() {\n\t\treturn 5;\n\t}\n}\n\n// 客户端实现\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tVoltAdapter adpter = new VoltAdapter();\n\t\tSystem.out.println(输出电压：adapter.getVolt5);\n\t}\n}\n\n\n/**\n * 以对象适配器模式实现\n */\n \n // Target 角色\npublic interface FiveVolt {\n\tpublic int getvolt5();\n}\n\n// Adaptee 角色，需被转换的对象\npublic class Volt220 {\n\treturn 220;\n}\n\n// Adapter 角色，将 220V 的电压转换为 5V 电压\npublic class VoltAdapter implements FiveVolt {\n\n\tVolt220 mVolt220;\n\t\n\tpublic VoltAdapter(Volt220 adaptee) {\n\t\tmVolt220 = adaptee;\n\t}\n\t\n\tpublic int getVolt220() {\n\t\treturn mVolt220.getVolt220();\n\t}\n\t\n\t@OVerride\n\tpublic int getVolt5() {\n\t\treturn 5;\n\t}\n}\n\n// 客户端实现\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tVoltAdapter adpter = new VoltAdapter( new Volt220() );\n\t\tSystem.out.println(输出电压：adapter.getVolt5);\n\t}\n}\n```\n\n#### 总结\n- 适配器模式的优缺点\n\t- 优点  \n\t1) 更好的复用性：系统需使用现有的类，而此类的接口不符系统需求，则通过适配器模式可让这些功能得到更好的复用。  \n\t2) 更好的扩展性。  \n\t- 缺点 - 若可对系统重构，尽可能不使用适配器，过多使用适配器，容易让系统凌乱，不易整体把握。\n\n### 装饰模式\n\n#### 装饰模式的介绍\n- 又称为包装模式，结构性设计模式。\n- 使用一种对客户端透明的方式来动态地扩展对象的功能，同时它也是继承关系的一种替代方案。\n\n#### 装饰模式的定义\n动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式相比生成子类更为灵活。\n\n#### 装饰模式的使用场景\n需要透明地、动态地扩展类的功能时，装饰模式不失一种理想方案。\n\n#### 装饰模式的 UML 类图\n装饰模式的 UML 类图如图 2-43 所示。\n\n![装饰模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-43.png)\n<center>图 2-43 装饰模式的 UML 类图</center>\n\n**Component：抽象组件**  \n可以是一个接口或者抽象类，充当被装饰的原始对象。\n\n**ConcreteComponent：组件具体实现类**   \n该类是 Component 类的基本实现，也是我们装饰的具体对象。\n\n**Decorator：抽象装饰者**  \n其承担的职责是为了装饰我们的组件对象，其内部一定要有一个指向组件对象的引用。\n\n**ConcreteDecorator：抽象装饰者**  \n对抽象装饰者做出具体实现。\n\n```Java\n// 抽象组件类\npublic abstract class Component {\n\t/**\n\t * 抽象的方法：自由增加你需要的抽象方法\n\t */\n\tpublic abstract void operate();\n}\n\n// 组件具体实现类\npublic class ConcreteComponent extends Component {\n\t@Override\n\tpublic void operate() {\n\t\t// 忽略实现细节\n\t}\n}\n\n// 抽象装饰者\npublic abstract class Decorator extends Component {\n\tprivate Component component; // 持有一个 Component 对象的引用\n\t\n\t/**\n\t * 必要的构造方法，需要一个 Component 类型的对象\n\t * @param component Component 对象\n\t */\n\tpublic Decorator(Component component) {\n\t\tthis.component = component;\n\t}\n\t\n\t@Override\n\tpublic void operate() {\n\t\tcomponent.operate();\n\t}\n}\n\n// 装饰者具体实现类\npublic class ConcreteDecoratorA extends Decorator {\n\tprotected ConcreteDecoratorA(Component component) {\n\t\tsuper(component);\n\t}\n\t@Override\n\tpublic void operate() {\n\t\toperateA();\n\t\tsuper.operate();\n\t\toperateB();\n\t}\n\t\n\tpublic void operateA() { // 自定义的装饰方法 A\n\t\t// 装饰方法逻辑\n\t}\n\tpublic void operateB() { // 自定义的装饰方法 B\n\t\t// 装饰方法逻辑\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\n\t\t// 构造被装饰的组件对象\n\t\tComponent component = new ConcreteComponent();\n\t\t\n\t\t// 根据组件对象构造装饰者对象并调用，即给组件对象增加装饰者的功能方法\n\t\tDecorator.decoratorA = new ConcreteDecoratorA(component);\n\t\tdecoratorA.operate();\n\t\t\n\t\tDecorator.decoratorB = new ConcreteDecoratorB(component);\n\t\tdecoratorB.operate();\n\t}\t\n}\n```\n\n#### 装饰模式实战\n其实装饰模式并不复杂，也不陌生，它就是一种 `类间的封装`，例如我们常在 Activity 的 onCreate() 方法中做一些相关的初始化操作。\n\n```Java\npublic class DecoratorActivity extends Activity {\n\t@Override\n\tprotected void onCreate(Bundle saveInstanceState) {\n\t\tsuper.onCreate(saveInstanceState);\n\t\t\n\t\tinitViews();\n\t\tfindViews();\n\t\tsetListeners();\n\t}\n\t\n\tprivate void initViews() {\n\t\tsetContentView(R.layout.activity_main);\n\t}\n\tprivate void findViews() {\n\t\t// 匹配组件\n\t}\n\tprivate void setListeners() {\n\t\t// 设置组件的监听器\n\t}\n}\n```\n\n#### 总结\n- 装饰模式与代理模式的区别 (容易混淆)\n\t- 装饰模式：以对客户端透明的方式 `扩展对象的功能`，即继承关系的一个替代方案。\n\t- 代理模式：给一个对象提供一个代理对象，并由 `代理对象` 来控制对原有对象引用。 \n\n\t> 代理模式，即对代理的对象施加控制。\n\n### 享元模式\n\n#### 享元模式的介绍\n- 又称 FlyWeight，代表轻量级的意思，结构型设计模式。\n- `对象池` 的一种实现。\n- 享元模式用来是尽可能减少内存使用量，它适用于可能存在大量重复对象的场景。  \n\t\n\t> 目的：缓存可共享的对象，达到对象共享，避免过多创建对象，即提升性能、避免内存移除。\n- 享元对象\n\t- 内存状态：可共享，不随环境变化\n\t- 外部状态：不可共享，随环境变化\n\t- 对象容器：在经典的享元模式中，对象容器为一 Map，它的 `键` 是享元对象的`内部状态`，它的 `值` 是 `享元对象本身`。\n- 客户端通过这个内部状态从享元工厂中获取享元对象，若有缓存则使用缓存对象，否则创建一个享元对象并存入容器中。\n\n#### 享元模式的定义\n使用共享对象可有效地支持大量的细粒度的对象。\n\n#### 享元模式的使用场景\n- 系统中存在大量的 `相似对象`。\n- 细粒度的对象都具备较接近的外部状态，且内部状态与环境无关，即对象没有特定身份。\n- 需要 `缓冲池` 的场景。\n\n#### 享元模式的 UML 类图\n享元模式的 UML 类图如图 2-44 所示。\n\n![享元模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-44.png)\n<center>图 2-44 享元模式的 UML 类图</center>\n\n#### 享元模式的简单示例\n例1. 过年回家买火车票，无数人在客户端上订票 (有多次购票、刷票的情况)，即不断向服务端发送请求。\n\n而每次查询，服务器必须做出回应，具体地，用户查询输入出发地和目的地，查询结构返回值只有一趟列车的车票。而数以万计的人有同样需求，即不间断请求数据，每次重新创建一个查询的车票结果，即造成大量重复对象创建、销毁，使得服务器压力加重。\n\n享元模式正好适合解决该情形的问题，例如 A 到 B 地的车辆是有限的，车上铺位分硬卧、软卧和坐票三种，将这些可公用的对象缓存起来。用户查询时优先使用缓存，反之则重新创建。\n\n便于理解，本示例的 UML 类图如图 2-45 所示。\n\n![网上订票系统的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-45.png)\n<center>图 2-45 网上订票系统的 UML 类图</center>\n\n```Java\npublic interface Ticket {\n\tpublic void showTicketInfo(String bunk);\n}\n\n// 火车票\npublic class TrainTicket implements Ticket {\n\tpublic String from; // 始发地\n\tpublic String to; // 目的地\n\tpublic String bunk; // 铺位\n\t\n\tTrainTicket(String from, String to) {\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\t\n\t@Override\n\tpublic void showTicketInfo(String bunk) {\n\t\tprice = new Random().nextInt(300);\n\t\tSystem.out.println(\"From:\" + from\n\t\t\t+ \"To:\" + to\n\t\t\t+ \"Bunk:\" + bunk\n\t\t\t+ \"Price:\" + price);\n\t}\n}\n\npublic class TicketFactory {\n\tstatic Map<String, Ticket> sTicketMap = \n\t\tnew ConcurrentHashMap<String, Ticket>();\n\t\t\n\tpublic static Ticket getTicket(String from, String to) {\n\t\tString key = from + \"-\" + to;\n\t\t\n\t\tif( sTicketMap.containsKey(key) ) { // 使用缓存\n\t\t\treturn sTicketMap.get(key);\n\t\t} else { // 创建对象\n\t\t\tTicket ticket = new TrainTicket(from, to);\n\t\t\tsTicketMap.put(key, ticket);\n\t\t\treturn ticket;\n\t\t}\n\t}\n}\n```\n\n例2. 我们知道 Java 中 String 是存在于常量池中，即一个 String 被定义之后它就被缓存到了常量池中，当其他地方使用同样的字符串，则直接使用缓存，而非创建。\n\n```Java\npublic void testString() {\n\tString str1 = \"Hello World\";\n\tString str2 = new String(\"Hello World\");\n\tString str3 = \"Hello \" + \"World\";\n\t\n\tSystem.out.println( \"\\nStr1 - Str3: \" + str1.equals(str3)\n\t\t+  \"\\nStr2 - Str3: \" + str2.equals(str3)\n\t\t+  \"\\nStr1 - Str2: \" + str1.equals(str1));\n\n\t// 输出的结果分别是：true，false，false\n}\n```\n\n#### 总结\n- 享元模式的优缺点\n\t- 优点 - 大幅度地降低内存中对象的数量。\n\t- 缺点  \n\t1) 为了使对象可共享，需将一些状态外部化，使程序的逻辑复杂化。  \n\t2) 将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长。  \n\n### 外观模式\n\n#### 外观模式的介绍\n- 又称门面模式 (Facade模式)，结构型设计模式。\n- 通过一个外观类使得整个系统中接口只有一个 `统一的高层接口`，即这样降低用户使用成本，也对用户屏蔽了很多实现细节。\n- 外观模式是 `封装API` 的常用手段。\n\n#### 外观模式的定义\n- 要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。\n- 外观模式提供一个高层次接口，使得子系统更易于使用。\n\n#### 外观模式的使用场景\n- 为一个复杂的子系统提供一个简单接口。\n\n\t> 对于系统进行定制、修改，这种易变性，使得隐藏子系统的具体实现变得尤为重要，对外隐藏子系统的具体实现，隔离变化。\n- 构建一层次结构的子系统，子系统间相互依赖，则通过 Facade 接口进行通信，从而简化他们的依赖关系。\n\n#### 外观模式的 UML 类图\n外观模式的 UML 类图如图 2-46 所示。\n\n![外观模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-46.png)\n<center>图 2-46 外观模式的 UML 类图</center>\n\n#### 总结\n- 外观模式的精髓在于 `封装`。通过一高层次结构为用户提供统一的 API 入口，使得用户通过一个类就基本能够操作整个系统。\n- 外观模式的优缺点\n\t- 优点  \n\t1) 对客户端隐藏子系统细节，因而减少客户对于子系统的耦合。  \n\t2) 外观类对子系统的接口封装，使得系统更易于使用。  \n\t- 缺点  \n\t1) 外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。\n\n### 桥接模式\n\n#### 桥接模式的介绍\n- 又称桥梁模式，结构型设计模式。\n- 承接者连接 `两边` 的作用，两边指抽象部分和实现部分。\n\n#### 桥接模式的定义\n将 `抽象部分` 和 `实现部分` 分离，使它们都可以独立地进行变化。\n\n#### 桥接模式的使用场景\n- 对于不希望使用继承或因多层次继承导致系统类的个数急剧增加的系统，考虑使用桥接模式。\n- 需要在构件的抽象化角色和具体角色之间增加更多灵活性，避免两层次间建立静态的继承关系，可通过桥接模式使它们在抽象层建立一个关联关系。\n- 一个类存在两个独立变化的维度，且这两个维度都需进行扩展。\n- 任何多维度变化类或多个树状类之间的耦合可通过桥接模式解耦。\n\n#### 桥接模式的 UML 类图\n桥接模式的 UML 类图如图 2-47 所示。\n\n![桥接模式的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-47.png)\n<center>图 2-47 桥接模式的 UML 类图</center>\n\n**Abstraction：抽象部分**  \n该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分的对象来实现。该类一般为抽象类。\n\n**RefinedAbstraction：优化的抽象部分**  \n抽象部分的具体实现，该类一般是对抽象部分的方法进行完善和扩展。\n\n**Implementor：实现部分**  \n可以为接口或抽象类，其方法不一定要与抽象部分中的一致，一般情况下是由实现部分提供基本的操作，而抽象部分定义的则是基于实现部分这些基本操作的业务方法。\n\n**ConcreteImplementorA/B：实现部分的具体实现**  \n完成实现部分中定义的具体逻辑。\n\n```Java\n// 实现部分的抽象接口\npublic interface Implementor {\n\t/**\n\t * 实现抽象部分的具体方法\n\t */\n\tpublic void operationImpl();\n}\n\n// 实现部分具体的实现\npublic class ConcreteImplementorA implements Implementor {\n\t@Override\n\tpublic void operationImpl() {\n\t\t// 忽略实现逻辑\n\t}\n}\n\n// 抽象部分\npublic abstract class Abstraction {\n\t// 声明一私有成员变量引用实现部分的对象\n\tprivate Implementor mImplementor; \n\t\n\t/**\n\t * 通过实现部分对象的引用构造抽象部分的对象\n\t * @param implementor 实现部分对象的引用\n\t */\n\tpublic Abstraction(Implementor implementor) {\n\t\tmImplementor = implementor;\n\t}\n\t\n\t/**\n\t * 通过调用实现部分具体的方法实现具体的功能\n\t */\n\tpublic void operation() {\n\t\tmImplementor.operationImpl();\n\t}\t\n}\n\n// 优化的抽象部分\npublic class RefinedAbstraction extends Abstraction {\n\tpublic RefinedAbstraction(Implementor implementor) {\n\t\tsuper(implementor);\n\t}\n\t\n\t/**\n\t * 对 Abstraction 中的方法进行扩展\n\t */\n\tpublic void refinedOperation() {\n\t\t// 忽略实现逻辑\n\t}\n}\n\n// 客户端实现\npublic class Client {\n\tpublic static void main(String[] args) {\n\t\tRefinedAbstraction abstration = \n\t\t\tnew RefinedAbstraction( new ConcreteImplementorA );\n\t\t\t\n\t\tabstraction.operation();\n\t\tabstraction.refinedOperation();\n\t}\n}\n```\n\n#### 桥接模式实战\nView 的视图层级与执行真正的硬件绘制相关类之间的关系可看作是一种桥接模式。即模仿这种行为，我们可自定义控件以桥接的方式提供多种不同的实现机制。\n\n以进度条为例，我们可继承 View 类来实现进度条控件，自定义水平、垂直和圆形等不同形式的进度条。\n\n便于理解，本示例的 UML 类图如图 2-48 所示。\n\n![进度条框架的UML类图](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_2-48.png)\n<center>图 2-48 进度条框架的 UML 类图</center>\n\n#### 总结\n桥接模式，分离抽象与实现，其优点毋庸置疑，即灵活的扩展以及对客户来说透明的是实现。但不足之处在于运用桥接模式进行设计，是有一定难度的，需多加推敲与研究。\n\n## 叁 MVC 与 MVP 模式\n\n### MVC\n- 模型 - 视图 - 控制器 (Model - View - Controller，MVC)，是一种 `框架模式` ，而非设计模式。\n\n\t> GOF 把 MVC 看作3种设计模式，即观察者模式、策略模式与组合模式的合体，也就是一个基于 `发布/订阅者模型` 的框架。\n- 软件开发领域的3种级别重用：\n\t- 内部重用：同一应用中能公共使用的抽象块。\n\t- 代码重用：将通用模块组合成库或工具集，以便在多个应用和领域都能使用。\n\t- 应用框架重用：为专用领域提供通用的或者现成的基础结构，以获得最高级别的重用性。\n\n\t> 平时开发过程中，常见的框架模式除了 MVC 外，还有 MVVC、MTV、CBD、ORM 和 MVP。\n- MVC 模式的优缺点\n\t- 优点 - 表现层与业务层分离实现，各司其职。若在实际项目中，即前端工程师专注界面的研发，后端工程师致力于业务逻辑。\n\t- 缺点：  \n\t1) Model 和 View 严格分离，在调试应用程序时较困难。  \n\t2) 小规模项目，采用 MVC 模式反而显得工序更加繁琐。  \n\t\n### MVP\n- 数据的存取 - 用户界面 - 交互中间人 (Model - View - Presenter，MVP)，分离显示层和逻辑层，它们之间通过接口进行通信，降低耦合。\n\n- MVP 模式的三个角色\n\t- **Presenter：交互中间人**  \n\tView 和 Model 沟通的桥梁。它从 Model 层检索数据后，返回给 View 层，使得 View 和 Model 之间没有耦合，也将业务逻辑从 View 角色上抽离。\n\t\n\t- **View：用户界面**  \n\t在 Android 中，通常指 Activity、Fragment 或某个 View 控件，它含有一个 Presenter 成员变量，且 View 需实现以逻辑接口。将 View 上操作通过转交给 Presenter 实现，最后 Presenter 调用 View 逻辑接口将结果返回给 View。 \n\t \n\t- **Model：数据的存取**  \n\t主要提供数据的存取功能。Presenter 需通过 Model 层存储、获取数据。\n\n![MVP模式的三个角色](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_3-1.png)\n<center>图 3-1 MVP模式的三个角色</center>\n\n- 与 MVC 模式的区别\n\t- MVC 特点  \n\t1) 用户可向 View 发送指令，再由 View 直接要求 Model 改变状态。  \n\t2) 用户可向 Controller 发送指令，再由 Controller 发送给 View。  \n\t3) Controller 起到时间路由的作用，同时业务逻辑都部署在 Controller 中。  \n\n\t> View 可直接访问 Model，即 MVC 模式的耦合性还是相对较高的。\n\t\n![MVC模式的三个角色](/images/illustration/Reading/2018/01/Design-Pattern-Based-on-Android_3-2.png)\n<center>图 3-2 MVC模式的三个角色</center>","tags":["设计模式"],"categories":["Reading"]},{"title":"基于 Hexo 框架在 Github 上搭建博客","url":"/2018/01/Hexo-Installation-Guide.html","content":"\n## 序言\n\nHexo\\\\(^{[1]}\\\\)，一个快速、简洁且高效的博客框架，若以个人博文为主导需求，它的强大毋庸置疑。    \n\nHexo 支持 GitHub Flavored Markdown 的所有功能；且基于 Node.Js 所带来的超快生成速度，百页博文秒级渲染；开放性 API 以及丰富的插件等，即功能来得纯粹，不失个性化定制，上手容易且操作便捷。更重要的一点，它是开源的、免费的博客框架，数据保存在本地以及 Github 上，相信在众多博客产品中选择、博弈，相信 Hexo 的表现不会令你失望。\n\n对于 Hexo 的安装、使用教程尽量遵照官方使用文档的流程操作，而本文则将侧重于 Hexo 的优化体验、实用插件等方面的内容分享。\n\n若想了解详情可访问「[hexo.io](https://hexo.io/)」。\n\n<!-- more -->\n\n## 壹 搭建环境\n\n- Mac OS、Windows 环境下的配置流程和步骤大同小异，而搭建环境的大致流程为：  \n - Git 环境配置 ( Windows )\n - Node.Js 环境配置\n - Github 账号注册和配置\n - Hexo 的安装和配置\n- 考虑到是流程操作类的文章，为简单起见，则我们以 MacOS 和 Windows 版本分别说明情况：\n - [MacOS 版本](#MacOS-版本)\n - [Windows 版本](#Windows-版本)\n\n\n### MacOS 版本\n#### 配置环境\n\n-  Xcode: Hexo的编译依赖于 Xcode\n - Xcode 可自行到 Apple App Store 下载\n-  Node.Js: Hexo 是基于 Node.Js 开发的\n - [官方下载](https://nodejs.org/)\n - 本地安装，文件包为「Node-Vx.x.x.pkg」\n - 检测是否安装成功，当然返回版本信息即成功安装\n\n\t```bash\n\t# 终端下输入命令:  \n\tnode -v  \n\tnpm -v\n\t```\n \n- Github Account ( **已有账号、项目可忽略** )\n - 注册账号「[GitHub](https://github.com/)」\n - 创建代码库 \n\n\t> 具体操作步骤:  \n\t> 1. Add ( 右上角「+」图标 ) > New Repository；  \n\t> 2. Repository Name，填写`yourname.github.io`；        \n\t> 3. Repository Description，填写`简单描述`；\n \n - 配置代码库\n \n\t> 具体操作步骤:  \n\t> 1. 进入项目「yourname.github.io」；  \n\t> 2. Settings > GitHub Pages，开启`GH-Pages`功能；  \n\t> 3. 点击「Launch Automatic Page Generator」；\n\n\t> 第三步说明:  \n\t> Github 将会自动替你创建出一个 GH-Pages 的页面。若配置没有问题，约15分钟后，yourname.github.io 就可以正常访问了，配置结束。\n\t\n#### 安装 HEXO\n##### 安装 HEXO\n- 本地选择安装目录\n \n ```bash\n cd your-hexo-site \n ```\n\n- 在线安装 HEXO ( [NPM淘宝源](http://npm.taobao.org/) )\n\n ```bash\n npm install hexo-cli -g  \n hexo init  \n hexo install\n ```\n\t\t\n- 检测是否安装成功，当然返回版本信息即成功安装\n \n ```bash\n hexo -v\n ```\n \n##### 运作 HEXO \n- 本地运作 HEXO\n\n ```bash\n hexo server\t# 或简写 hexo s\n ```\n\n- 当终端提示以下信息，则本地配置工作基本完成。\n\n\t> Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.\n\n##### 使用 HEXO\n\n> [注意] 此项操作，需要确保在 Hexo 安装目录下执行。\n\n- 新建一篇博文 ( 当然，更新过往的文章只需修改「Hexo > Source > _Posts」目录下相应的 MarkDown 文件 )\n\n ```bash\n hexo new post \"Article Title\"\n ```\n\t\n- 生成博文 ( 生成静态网页 )\n \n ```bash\n hexo generate\n ```\n\n##### 部署至 GitHub\n- 部署至 Git 的准备工作\n \n ```bash\n # 在部署前，还需要安装「Git部署插件」:  \n npm install hexo-deployer-git --save\n \n # 若没有安装该插件，会出现情况：\n # deloyer not found:git\n ```\n \n- 再者，与 Github 连接前需要获得授权，不然会出现以下情况 ( 本机没有配置 Public Key ):\n     \n\t> Permission denied (publickey).  \n\t> fatal: Could not read from remote repository.  \n\t> Please make sure you have the correct access rights and the repository exists.\n\t\n- 配置「SSH KEY / Public KEY」\n\n\t> [注意] 若之前机器上配置了 Git 的信息，请跳过该步骤。\n   \n\t```bash\n\t# 1. 配置 Git 的 UserName 和 Email \n\t# “YourAnonymousName\"，可以替换成自己的用户名   \n\tgit config --global user.name \"YourAnonymousName\"  \n\t# \"UserName@xxx.com\"，替换成自己的邮箱  \n\tgit config --global user.email \"UserName@xxx.com\"  \n\t\n\t# 2. 检查是否已经有 SSH KEY\t \n\t# Step01. 列出该目录下的文件；\n\t# Step02. 看是否存在「id_isa」和「id_isa.pub」文件；\n\tcd ~/.ssh\n\tls\n\t \n\t# Step03. 若存在则跳过，没有则执行此步骤「生成密钥」.\n\t# 邮箱「UserName@xxx.com」替换成自己的邮箱\n\tssh-keygen -t rsa -C \"UserName@xxx.com\"\n\t\t\n\t# 3. 登陆 Github, 添加 SSH KEY\n\t# Step01. Avatar(头像) > Settings > Personal Settings > SSH and GPG keys； \n\t# Step02. New SSH KEY，把「id_isa.pub」的密钥粘贴过去即可.  \n\t \n\t# 4. 测试是否配置成功\t\n\tssh -T git@github.com\n\t# 提示「Hi YourName! You've successfully authenticated, but GitHub does not provide shell. access.」即成功配置。\n\t```\n\n- 配置「_config.yml」文件  \n\n - 在 Hexo 安装目录下找到 _config.yml 文件，如「~/你的安装目录/Hexo/_config.yml」。找到「deploy」字段，修改配置。\n\n\t > deploy:  \n\t > type: git  \n\t > repo: https://github.com/yourname/yourname.github.io.git  \n\t > branch: master  \n\n - 注意: 冒号后面含一个空格；使用 Github 不用 branch 字段；若使用多个 deployer，则有：\n\t\n\t ```bash\n\t deploy:\n\t - type: git\n\t repo:\n\t - type: heroku \n\t repo:\n\t ```\n\n- 部署至 Git\n \n\t```bash\n\thexo deploy\t  \n\thexo d -g\t# 即在部署之前先生成\n\t```\n\n### Windows 版本\n#### 配置环境\n\n> Github 账号注册和配置和 Hexo 的安装和配置，在 Windows 与 MacOS 上是通用的。因此，在 Windows 版本中，主要阐述 Node.Js和 Git 的安装和配置即可。\n\n- Node.Js 的安装和准备\n - 下载并安装「[Node.Js for Windows x86/x64 bit](https://nodejs.org/en/download/)」\n - 检测是否安装成功，当然返回版本信息即成功安装\n\n\t```bash  \n\tnode -v  \n\tnpm -v\n\t```\n\t\n- Git 的安装和准备\n - 下载并安装「[Git for Windows x86/x64 bit](https://git-scm.com/download/win)」\n - 检测是否安装成功，当然返回版本信息即成功安装\n\n\t```bash \n\tgit --version\n\t```\n\n## 贰 优化拓展\t\n至此，Hexo 的安装以及 GitHub 的配置工作暂告一段落。能正常运行使用 Hexo 是没问题的，而下面的章节则是对 Hexo 的扩展和个性化定制，根据自己的需求挑选阅读、实践。\n\n### 套用一款主题\n\nHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。\n\n在 Hexo 中有两份主要的配置文件，其名称都是「_config.yml」。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为「`站点配置文件`」， 后者称为「`主题配置文件`」。\n\n具体以 NexT\\\\(^{[2]}\\\\) 为例说明，安装步骤如下。\n\n#### 下载主题  \n\n如果你熟悉 Git， 建议你使用`克隆最新版本`的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。\n\n```bash\n# 克隆最新版本\ncd your-hexo-site  \ngit clone https://github.com/iissnan/hexo-theme-next. themes/next\n\n# 快速更新\ncd themes/next\ngit pull\n```\n\n#### 启用主题  \n- 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到`theme`字段，并将其值更改为`next`。\n \n\t> theme: next\n\n- 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。\n \n\t```bash\n \thexo clean\n\t```\n\t\n#### 主题设定\n- 选择 Scheme\n\n Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：\n \n - Muse - 默认 Scheme，黑白主调，大量留白  \n - Mist - Muse 的紧凑版本，整洁有序的单栏外观  \n - Pisces - 双栏 Scheme，小家碧玉似的清新  \n\n\t```bash\n\t#scheme: Muse\n\t#scheme: Mist\n\tscheme: Pisces\n\t```\n\n\t> Scheme 的切换通过更改`主题配置文件`，搜索「scheme」关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。\n\t\n- 设置语言\n\n\t编辑`站点配置文件`， 将`language`设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下 ( 更多请语言配置请参考下述表格 )：\n \n\t> language: zh-Hans  \n\n| 语言 | 代码 | 设定示例 |\n| :---- | :---- | :---- |\n| English | en | language: en |\n| 简体中文 | zh-Hans\t| language: zh-Hans |\n| Français | fr-FR | language: fr-FR |\n| Português | pt | language: pt or pt-BR |\n| 繁體中文 | zh-hk | language: zh-hk |\n| Русский\t | язык\tru | language: ru |\n| Deutsch | de | language: de |\n| 日本語 | ja | language: ja |\n| Indonesian | id | language: id |\n| Korean | ko | language: ko |\n\n- 设置菜单\n\n\t菜单配置包括三个部分，第一是菜单项 ( 名称和链接 )，第二是菜单项的显示文本，第三是菜单项对应的图标。\n \n\tNexT 使用的是 [Font Awesome](http://fontawesome.io/)\\\\(^{[3]}\\\\) 提供的图标，600+ 的图标可满足大部分需求，且适配 Retina 屏幕。\n \n\t编辑`主题配置文件`，修改以下内容：\n \n \t{% note warning %} 请注意键值（如 home）的大小写要严格匹配。 {% endnote %}\n \n - 设定菜单内容，对应的字段是`menu`，菜单内容的设置格式是：`item name: link`。其中`item name`是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。\n\n\t ```bash\n\t menu:\n\t home: /\n\t archives: /archives\n\t #about: /about\n\t #categories: /categories\n\t tags: /tags\n\t #commonweal: /404.html\n\t \n\t # 若你的站点运行在子目录中，请将链接前缀的/去掉\n\t ```\n\n\t NexT 默认的菜单项有( 标注 `*` 的项表示需要手动创建这个页面 )：\n\n| 键值 | 设定值| 显示文本(简体中文) | \n| :--- | :--- | :--- |  \n| home | home: / | 主页 |  \n| archives | archives: /archives | 归档页 |  \n| categories | categories: /categories | 分类页 `*` |  \n| tags | tags: /tags | 标签页 `*` |  \n| about | about: /about | \t关于页面 `*` |  \n| commonweal | commonweal: /404.html\t | 公益 404 `*` |  \n\t\n - 设置菜单项的显示文本，在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用这个名称查找对应的语言翻译，并提取显示文本。\n \n\t 这些翻译文本放置在 NexT 主题目录下的`languages/{language}.yml` （ {language} 为你所使用的语言 )。\n\n\t 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件`languages/zh-Hans.yml`，在`menu`字段下添加一项：\n\t \n\t ```bash\n\t menu:\n\t home: 首页\n\t archives: 归档\n\t categories: 分类\n\t tags: 标签\n\t about: 关于\n\t search: 搜索\n\t commonweal: 404\n\t something: 有料\n\t ```\n\n - 设定菜单项的图标，对应的字段是`menu_icons`。\n \n\t ```bash\n\t menu_icons:\n\t enable: true\n\t # Icon Mapping.\n\t home: home\n\t about: user\n\t categories: th\n\t tags: tags\n\t archives: archive\n\t commonweal: heartbeat\n\t \n\t #  此设定格式是「item name: icon name」\n\t # 「item name」与上一步所配置的菜单名字对应\n\t # 「icon name」是 Font Awesome 图标的名字\n\t # 「enable」用于控制是否显示图标，你可以设置成「false」来去掉图标\n\t ```\n\t  \n- 设置侧栏 \n\n\t可以通过修改`主题配置文件`中的`sidebar`字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。\n \n - 设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：\n \n\t > left - 靠左放置  \n\t > right - 靠右放置  \n\n\t 目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。\n\n\t ```bash\n\t sidebar:  \n\t position: left\n\t ```\n\n - 设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：\n\n\t > post - 默认行为，在文章页面（ 拥有目录列表 ）时显示  \n\t > always - 在所有页面中都显示  \n\t > hide - 在所有页面中都隐藏（ 可以手动展开 ）  \n\t > remove - 完全移除  \n\n\t ```bash\n\t sidebar:\n\t display: post\n\t ```\n\n\t 已知侧栏在 use motion: false 的情况下不会展示。影响版本5.0.0及更低版本。\n\t\n- 设置头像\n\n\t编辑`主题配置文件`， 修改字段`avatar`，值设置成头像的链接地址。其中，头像的链接地址可以是：\n \n - 站外链接\n \n\t > avatar: http://example.com/avatar.png\n\t\n - 站内资源 \n\n\t > 放置在「source/images/」目录下，images 为自建目录   \n\t > avatar: avatar: /images/avatar.png\n\t\n### 揽收实用插件\n\n## 叁 参考资料\n\n[[1] HexoJs. 使用文档. 2018](https://hexo.io/docs/)  \n[[2] NexT. 使用文档. 2018](http://theme-next.iissnan.com/getting-started.html)  \n[[3] Dave Gandy. Font Awesome Accessibility](http://fontawesome.io/accessibility/)  \n[[4] 徐俊. 手把手教你搭建属于自己的博客. CSDN. 2017](http://blog.csdn.net/gdutxiaoxu/article/details/53576018) ","tags":["hexo"],"categories":["Project"]},{"title":"Java In a Nutshell ( 读书笔记 + Awsome Docs )","url":"/2017/09/Java-in-a-Nutshell.html","content":"\n## 序言\n\n首先，《 Java In a Nutshell 》中文版翻译为《 Java 技术手册 》，但本文标题沿用的仍是英文版标题，其实这样的选择是有缘由的 (小吐槽)。Nutshell 有核桃壳之意，In a Nutshell 意为概览。当然也可按字面上通俗理解，Java In a Nutshell 即在意义层面上，相比 “技术手册” 来得更有韵味。\n\n由于对图灵出品的 O'Reilly 动物书情有独钟，至此本篇文章以动物书系列之 [Java 技术手册](https://book.douban.com/subject/26674131/) 为主要框架，开启我的 Java 语言学习旅程。\n\n当然，通读一遍本书之后，你会发现本书对 Java 基础知识部分的讲述一定是有所欠缺的，所以课后补充工作很有必要。如通过参考其他 Java 书籍（下文中有参考书目推荐）、优秀博文的补充，核心需求就是要输出一份便于常翻阅、可复用的读书笔记、学习笔记。\n\n需要说明的是，笔记当中会包含实际项目当中深入了解、研究的知识点，如 Class 类文件结构、Java 范型等。既经由分析、解决、随之文档化的过程，这不仅仅可作为自己的案例库，也可用于分享、交流。毕竟自身的知识面是非常有限的，有不恰当之处、不正确的地方，欢迎广大朋友的帮忙、斧正，互为补足。\n\n<!-- more -->\n\n- 参考书目\n\n > 基础篇\n\t\n - 《 Java 技术手册 》:  O'Reilly 动物书系列，因本书籍不会刻意去阐述面向对象编程（Object Oriented Programming，OOP）的相关概念、内容，适合对 OOP、Java 编程语言有一定了解后，所使用的学习材料。\n \n > 进阶篇\n \n - 《 Java编程思想 / Thinking in Java 》：待阅读。贴上本书豆瓣的书评，供朋友评判，做出抉择。[TIJ(中文第四版)](https://book.douban.com/subject/2130190/) | [TIJ(英文第四版)](https://book.douban.com/subject/2061172/)\n\n- 优秀博文 (主要的采集源：Guihub、CSDN)\n\t- [ 索引 - 小土刀. Java 资源索引. 2012. wdxtub.com](http://wdxtub.com/2012/09/11/awesome-java/) \n\t- [ 索引 - Akullpp. Awsome Java. 2018. github.com](https://github.com/akullpp/awesome-java)\n\t- [ 规范 - BlankJ. Java / Android 开发规范. 2017. github.com](https://github.com/Blankj/AndroidStandardDevelop)\n\t- [ API - BieZhi. 30 Seconds Of Java8. 2018. github.com](https://github.com/biezhi/30-seconds-of-java8)\n \n- 开源项目\n\t- [ BieZhi. Awesome Java Leetcode. 2018. github.com](https://github.com/Blankj/awesome-java-leetcode)\n\n\t> 转载自 BieZhi，学习数据结构和算法或打算刷 LeetCode 的伙伴们推荐阅读。\n\n\t- [ CTOlib. Java 实战类库与框架. 2018. ctolib.com](https://www.ctolib.com/java/categoriesallsub.html)\n\n- 更新进程\n\t- 2017.09.01 - 整理 Notes 草稿；\n\t- 2017.09.14 - 输出 Markdown 文档；  \n\t- 2018.01.30 - 完成序言；\n\t- 2018.03.20 - 更新正文 (第 05 / 10 章)；\n\n## 总览\n\n- [壹 Java 环境介绍](#壹-Java-环境介绍)  \n- [贰 Java 基本句法](#贰-Java-基本句法)\n- [叁 Java 面向对象编程](#叁-Java-面向对象编程])\n- [肆 Java 类型系统](#肆-Java-类型系统)  \n- [伍 Java 的面向对象设计](#伍-Java-的面向对象设计)  \n- [陆 Java 实现内存管理和并发编程的方式](#)  \n- [柒 编程和文档约定](#)  \n- [捌 使用 Java 集合](#)  \n- [玖 处理常见的数据格式](#)  \n- [拾 处理文件和I/O](#)  \n- [拾壹 类加载、反射和方法句柄](#)  \n\n## 壹 Java 环境介绍\n\n### JVM - 程序、环境\n- Java 虚拟机 (Java Virtual Machine，JVM)。\n- JVM 是一个程序，提供运行 Java 程序所需的运行时环境。\n- 应用代码的容器。\n- 提供一个安全、跨平台的执行环境。\n- Java 源码 -> Java 字节码 (*.class) -> JVM (即字节码格式程序的解码器，即图 1-1 中的解释器)。\n\n### Java 程序的生命周期\n\n- Java 代码的编译和加载\n\n\t整个流程从 Java 源码开始，经过 Javac 程序处理后得到类文件，类文件保存的是编译源码后得到的 Java 字节码。类文件是 Java 平台能处理的最小功能单位，也是把新代码传给运行中程序的唯一方式。\n\n\t新的类文件通过类加载机制载入虚拟机，从而把新类型提供给解释器执行。\n\n\tJava 代码的编译和加载过程，如图 1-1 所示。\n\n![Java代码的编译和加载过程](/images/illustration/Programme/2017/09/Java_in_a_Nutshell_1-1.png)\n<center>图 1-1 Java 代码的编译和加载过程</center>\n\n- 其中，涉及了 `机器码` 与 `字节码` 的概念\n\n\t- 机器码 (Machine Code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据。  \n\t通常意义上来理解的话，机器码就是计算机可以直接执行，并且执行速度最快的代码。\n\t\n\t- 字节码 (Bytecode)，是一种包含执行程序、由一序列 `数据对` 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。  \n\t通常情况下字节码通常不像源码一样可以让人阅读，而是编码后的数值常量、引用、指令等构成的序列。\n\t   \n\t> 关于字节码文件，即 Class 类文件，根据Java虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构表示，如下述代码所示。   \n\t> 若想了解更多 Class 文件结构的内容，可参考周志明老师写的《深入理解Java虚拟机》\\\\(^{[1]}\\\\)，其中有对 Class 文件结构的详细介绍。  \n\t> \n\t> 延伸：其实每种类型的文件的头都有着 4 个字节的作用域，则把其称为魔数，它的作用是唯一标识该文件所属类型。\n\t\n\t```Java\n\tClassFile {  \n      u4 magic;  \n      u2 minor_version;  \n      u2 major_version;  \n      u2 constant_pool_count;  \n      cp_info constant_pool[constant_pool_count-1];  \n      u2 access_flags;  \n      u2 this_class;  \n      u2 super_class;  \n      u2 interfaces_count;  \n      u2 interfaces[interfaces_count];  \n      u2 fields_count;  \n      field_info fields[fields_count];  \n      u2 methods_count;  \n      method_info methods[methods_count];  \n      u2 attributes_count;  \n      attribute_info attributes[attributes_count];  \n\t}  \n\t```\n\n###  Java 和其他语言比较\n\n<center>表 1-1 Java 与 C 语言的区别</center>\n\n| Java | C    |\n| :--- | :--- |\n| Java 是面向对象的语言 | C 是面向过程的语言 |\n| 通过类文件实现可移植性 | C 需要重新编译实现移植 |\n| 没有指针 | 有指针 |\n| 垃圾回收提供了自动内存管理功能 | 无法从低层布局内存 (结构体) |\n\n<center>表 1-2 Java 与 PHP 语言的区别</center>\n\n| Java | PHP  |\n| :--- | :--- |\n| Java 是静态类型语言 | PHP 是动态类型语言 |\n| Java 支持多线程操作 | PHP 不支持多线程 |\n\n\n- 书本中，关于静态语言与动态语言的区别，即在于编译时还是运行时检测错误。\n- 对于类型系统的概念，众说纷纭，如何理解静态、动态类型语言，推荐知乎 [rainoftime](https://www.zhihu.com/question/19918532/answer/21647195) 的回答： \n\n\t- Program Errors  \n\tTrapped errors：导致程序终止执行，例如：零为被除数、Java 数组越界访问。  \n\tUntrapped errors：出错后继续执行，但可能出现任意行为。如 C 里的缓冲区溢出、Jump 到错误地址。\n\t\n\t- Forbidden Behaviours   \n\t语言设计时，可以定义一组 Forbidden behaviors，它必须包括所有 Untrapped errors，但可能包含 Trapped errors。\n\t\n\t- Well behaved、ill behaved  \n\twell behaved: 如果程序执行不可能出现 Forbidden behaviors, 则为 Well behaved。   \n\till behaved: 否则为 ill behaved。  \n\n\t有了上面的概念，再讨论强、弱类型，静态、动态类型强、弱类型。\n\n\t- 强类型 ( Strongly typed )  \n\t如果一种语言的所有程序都是 Well behaved，即不可能出现 Forbidden behaviors，则该语言为 Strongly typed。\n\t\n\t- 弱类型 ( Weakly typed)  \n\t否则为 Weakly typed。譬如 C 语言的缓冲区溢出，属于 Trapped errors，即属于 Forbidden behaviors，故 C 是弱类型。 \n\t \n\t弱类型语言类型检查更不严格，如偏向于容忍隐式类型转换。譬如说 C 语言的 int 型可强转为 double 型。这样的结果是：容易产生 Forbidden behaviours，所以是弱类型的。\n\n\t- 静态类型 (Statically)\n\t如果在编译时拒绝 ill behaved 程序，则是 Statically typed。\n\t\n\t- 动态类型 (Dynamiclly)  \n\t如果在运行时拒绝 ill behaviors, 则是 Dynamiclly typed。\n\n<center>表 1-3 Java 与 JavaScript 语言的区别</center>\n\n| Java | JavaScript (Js) |\n| :--- | :--- |\n| Java 是静态类型语言 | Js 是动态类型语言 |\n| Java 使用基于类的对象 | JS 使用基于原型的对象 |\n| Java 提供良好的对象封装 | -- |\n| Java 支持多线程操作 | Js 不支持多线程 |\n\n## 贰 Java 基本句法\n\n### 词法结构\n{% note success %} \n说明：词法结构的内容与 Java / Android 开发规范的内容有所交集，可参阅上述推荐的优秀博文：  \n[BlankJ. Java / Android 开发规范. 2017. github.com](https://github.com/Blankj/AndroidStandardDevelop)。\n{% endnote %}\n\n- Java 编码使用的是 Unicode 字符集。\n- 需要区分大小写与空白的情况\n\t- 关键字使用小写 (class、interface、abstract、public、static 等)；\n\t- 函数、方法名称使用 `驼峰式命名法`；\n\t- `宏定义` 使用全大写字母的命名风格；\n- 注释：单行注释、多行注释和块注释\n\n\t```Java\n\t// 单行注释：注释的内容\n\n\t/* 多行注释：注释的内容 */\n\n\t/**\n\t * 块注释的风格：\n\t * 注释的内容 1\n\t * 注释的内容 2\n\t */\n\t```\n\n- 保留字  \n如 interface、class、public、private、protected、true、null 等，是不能单用来命名变量名称和类名称的。\n- 标识符：Java 程序中某个部分的名称，例如类、类中方法和方法中声明的变量。\n\t- 不能以数字开头；\n\t- 不能包含标点符号；\n\t- 可以使用货币符号 (¥或$)；\n\t\n\t> 货币符号主要用在自动生成的源码中，例如 Javac 生成的代码。不在标识符中使用货币符号，可避免自己的标识符和自动生成的标识符冲突。\n\t\n- 字面量  \n直接出现在 Java 源码中的值，包括 整数 `1`、浮点数 `3.141`，单引号字符 `'A'`、双引号字符 `\"Hello\"` 以及保留字 `true、false、null`。\n\n### 基本数据类型\n\n| 类型  | 取值 | 默认值 | 大小 | 范围 |\n| :--- | :--- | :--- | :--- | :--- |\n| boolean | true/false  | false | 1 位 | NA |\n| char    | Unicode 字符 | \\u0000 | 16 位 | \\u0000 ~ \\uFFFF |\n| byte    | 有符号的整数  | 0 | 8 位 | [-128, 127] |\n| short   | 有符号的整数  | 0 | 16 位 | [-32768, 32767] |\n| int     | 有符号的整数  | 0 | 32 位 | [-2147483648, 2147483647] |\n| long    | 有符号的整数  | 0 | 64 位 | [-9223372036854775808, 9223372036854775807] |\n| float   | IEEE 154 浮点数 | 0.0 | 32 位 | [1.4E-25, 3.4028235E+38] |\n| double  | IEEE 754 浮点数 | 0.0 | 64 位 | [4.9E-324, 1.7976931348623157E+308] |\n\n#### 布尔类型\n表示两种个逻辑状态，可表示开或关，也可是与否。\n\n- 零或非零表逻辑\n\n\t```Java\n\twhile(1) { // -7,-1,1,8...等非零数值都可作为条件体 \n\t    // 永真循环，条件体内为非零数值，即逻辑为真，若没有终止操作会一直操作下去\n\t}\n\t```\n- 对象体表逻辑\n\n\t```Java\n\tObject obj = new Object();\n\n\tif( null != obj) {\n\t    // 忽略实现细节\n\t}\n\t```\n\t\n#### 字符类型\n- 普通字符\n- 转义字符\n\n| 名称  | 符号 |\n| :--- | :--- |\n| 退格符\t\t| \\b |\n| 水平制表符\t| \\t |\n| 换行符\t\t| \\n |\n| 换页符\t\t| \\f |\n| 回车符\t\t| \\r |\n| 双引号\t\t| \\\\\" |\n| 八进制\t\t| \\000 |\n| 十六进制\t\t| \\u0000 |\n\n> 在上表中，以取双引号为例，只需附加上反斜杆 `\\` 即可。  \n> 例如：`\\\\`、`\\\"` `\\'`。\n\n### 表达式和运算符\n\n- 运算符概述\n\t- 优先级：与 [C语言类同](https://www.kofes.cn/2017/04/C-Programming-Design-Learning.html#4-1-关系运算符及其优先次序) (单目运算符 > 双目运算符 > 三目运算符)\n\t- 结合方式：从左向右\n\t\n- 算术运算符：加 `+`、减 `-`、乘 `*`、除 `/`、求模 `%`、负号 `-`。\n\n- 字符串连接符：`\"Hello\" + \"World\"` 相当于 `“HelloWorld”`。\n\n- 递增、递减运算符：操作数必须是变量、数组中的元素或对象的字段。\n\n- 比较运算符：等于 `==`、不等于 `!=`、小于 `<`、大于 `>`、大于等于 `>=`、小于等于 `<=`。\n\n- 逻辑运算符：条件与 `&&`、条件或 `||`、逻辑非 `!`。\n\n- 位运算符和位移运算符\n\t- 按位补码 `~`：把操作数的每一位反相，0变1，1变0  \n\t~12 => ~00001100 => 11110011 => -13\n\t- 位与 `&`   \n\t10 & 7 => 00001010 & 00000111\t=>\t00000010 => 2\n\t- 位或 `|`  \n\t10 | 7 => 00001010 | 00000111\t=>\t00001111 => 15\n\t- 位异或 `^`：相异为真  \n\t10 ^ 7 => 00001010 ^ 00000111\t=>\t00001101 => 13\n\t\n- 左移 `<<`：高位丢掉，右边补零，向左移动 n 位，相当于乘以 2\\\\(^{n}\\\\)。\n\n\t```Java\n\t左移运算的实例：\n\n\t10 << 1 => 00001010 << 1 => 00010100 => 20 => 10 * 2\n\t07 << 3 => 00000111 << 3 => 00111000 => 56 => 07 * 2^3\n\t-1 << 2 => 11111111 << 2 => 11111100 => -4 => -1 * 2^2\n\n\t// -1<<2 => 11111111<<2：即负数是补码形式存储的。\n\t```\n\n- 带符号右移 `>>`：高位 `补符号`，左侧操作数为正数则 `高位补0`，左侧操作数为负数则 `高位补1`。向右移动 n 位，相当于除以 2\\\\(^{n}\\\\)。\n\n\t```Java\n\t10 >> 1  => 00001010 >> 1 => 0 0000101 => 05 => 10 / 2\n\t27 >> 3  => 00011011 >> 3 => 000 00011 => 03 => 27 / 2^3\n\t-50 >> 2 => 11001110 >> 2 => 11 110011 => -13\n\t```\n\n- 赋值运算符 与 条件运算符\n\n\t```Java\n\te = a < b ? c :d; // 条件运算符鼻赋值运算符优先级高\n\t```\n\n- 特殊运算符\n\t- 访问对象成员 `.`\n\t- 访问数组中元素 `[]`\n\t- 调用方法 `()`\n\t- lambda 表达式 `->`\n\t- 创建对象 `new`\n\t- 类型转换及校正 `()`，\n\n### 语句\n\n- 选择结构和循环结构和 C 语言的相差无几，这里就不详细列举。\n\n- synchronized 语句\n\n\t```Java\n\tsynchronized( Expression ) {\n        // Statements\n\t}\n\t```\n\t`Expression` 表达式的计算结果必须是一个对象或数组。`Statements` 是能导致破坏的代码块。\n\n\t即 Java 解析器为 `Expression` 计算得到的对象或数组获取一个排它锁，直到语句块执行完毕再释放。只要某个线程拥有对象的排它锁，其他线程就不能再获取这个锁。\n\n- throw 语句\n\n\t```Java\n\t// throw expression;\n\n\tpublic static double factorial(int x) {\n\tdouble fact;\n\t\n\tif( x < 0 ) {\n\t    throw new IllegalArgumentException(\"x must be >= 0.\");\n\t} else {\n\t    for(fact=1.0; x > 1; fact *= x, x--) {\n\t        // Nothing\n\t    }\n\t}\n\treturn fact;\n\t}\n\t```\n\n- try/catch/finall 语句\n\n\t```Java\n\ttry {\n        // 正常情况，从上往下执行\n        // 也有可能跑出异常，或是 throw 语句直接抛出异常\n\t} catch( SomeException e1 ) {\n        // 处理 SomeException 或其子类型的异常对象\n        // 使用名称 e1 引用那个异常对象\n\t} catch( AnotherException e2 ) {\n        // 处理 AnotherException，使用名称 e2 引用传入的异常对象\n\t} finally {\n        // 不管 try 子句的结束方式如何，这段代码都会执行。\n        // 但是 try 子句中调用了 System.exit()，解析器会马上退出，而不执 finally 子句。\n\t}\n\t```\n\n\t即 Java 解析器执行 throw 语句，会立即停止常规程序执行，开始捕获或处理异常的异常处理程序 ( try/catch/finally 语句编写 )。\n\n### 方法\n\n#### 定义方法\n- 方法的定义都是以签名开头，后面跟着方法主体。方法主体，即放在花括号里的任意语句序列。方法签名包括下述内容：\n\n\t- 方法名称；\n\t- 方法所用参数的数量、顺序、类型和名称；\n\t- 方法的返回值类型；\n\t- 方法抛出的已检异常 ( 下述有解释：已检异常和未检异常 )；\n\t- 提供方法额外信息的多个方法修饰符.\n\n- 方法签名的格式：`modifiers` `type` `name(paramlist)` [ throws `exceptions` ]  \n\t- `modifiers` : 指零个或多个特殊的修饰符关键字；  \n\t- `type` : 指明方法的返回类型；  \n\t- `name` : 即方法名称；  \n\t- `paramlist` : 指形参列表；  \n\t- `exceptions` : 抛出已检异常.  \n\n#### 方法修饰符\n| 修饰符 | 作用描述 |\n| :---- | :------ |\n| abstract | abstract 修饰方法，类本身也必须声明 abstract。 |\n| final | final 修饰的方法不能被子类覆盖或隐藏。 |\n| public、protected、private | 这些访问修饰符指定方法是否能在定义它的类之外使用，或能在何处使用。 |\n| synchronized | synchronized 修饰符的作用是实现线程安全的方法 (避免两个线程同时执行该方法)。 |\n| static | static 声明的方法是类方法。 |\n\n#### 已检异常和未检异常\n- 已检异常和未检异常 -- `什么情况抛出异常`\n\t- 已检异常：明确的特定情况下抛出。\n\t> 例如：FileNotFoundException -- 打开某个文件却不在目录中。\n\t\n\t- 未检异常：任何方法任何时候都可能抛出。\n\t> 例如：OutOfMemoryError、NullPointerException。\n\t\n- 区分已检和未检异常，记两点：  \n\t1. 异常是 Throwable 对象；  \n\t2. 异常分两种类型：Error (未检) 和 Exception (已检).\n\n- 处理已检异常：在方法签名的 throws 子句中声明这个异常。Java 编译器检查方法签名，若没有声明会导致编译出错，故叫已检异常。\n\t\n\t```Java\n\tpublic static estimateHomePageSize(String host) throw IOException {\n\t    URL url = new URL(\"htts://\" + host);\n\t    try( InputStream in = url.openStream() ) {\n\t        return in.available();\n\t    }\n\t}\n\t```\n\t\n#### 变长参数列表\n- 变长参数列表：方法可声明为数量不定的参数。\n\n\t```Java\n\tpublic static int max(int first, int...rest) { \n        // int...rest 相当于 int[] rest\n        // 省略实现细节\n\t}\n\t```\n\n### 介绍类和对象\n\n关于类最重要的事情是，它们定义了一种新数据类型。例如定义一个 Point 类表示笛卡尔二维坐标系中的数据点。\n\n- 定义类\n\n\t```Java\n\tpublic class Point {\n\t    public double x, y;\n\t    public Point(double x, double y) {\n\t        this.x = x;\n\t        this.y = y;\n\t    }\n\t    public double distanceFromOrigin() {\n\t        return Math.sqrt(x*x,y*y);\n\t    }\n\t}\n\t```\n\n- 创建对象与使用对象\n\n\t```Java\n\tPoint point = new Point(2.0, 3.5);\n\tSystem.out.println( \"Sqrt(x, y):\" + point.distanceFromOrigin() );\n\t```\n\n- 再谈数据类型\n\t谈论数据类型时，得分开数据类型和数据类型的值。Char 类型的值表示某个具体的字符，而 Point 类是一种新的数据类型，用于表示坐标 (x, y)，Point 类为引用类型，即聚合类型，而 Point 类表示的值是对象。\n\n| 数据类型 | 数据类型的值 |\n| :------ | :--------- | \n| char   | unicode 字符 |\n| Point 类 | point 对象 |\n\n- lambda 表达式：其实就是没有名称的函数，`某个类中定义的匿名方法`。  \n\n\t> 某个类中定义的匿名方法：Java 不允许脱离类的概念运行方法。\n\n\t定义 lambda 表达式：( paramlist ) -> { Statements }\n\t\n\t```Java\n\tRunable r = () -> { System.out.println(\"Hello World.\"); }\n\t```\n\n### 数组\n\n#### 数组的类型\n数组中元素的类型可是任何有效的 Java 类型，包括数组类型。\n\n```Java\n// byte 是基本类型\nbyte b;\n\n// byte[] 是由 byte 类型的值组成的数组\nbyte[] arrayOfBytes;\n\n// byte[][] 是由 byte[] 类型的值组成的数组\nbyte[][] arrayOfArrayOfBytes;\n\n// String[] 是由字符串组成的数组\nString[] points;\n```\n\n#### 创建和初始化数组\nJava 在运行时 `初始化数组` 有个推论：数组初始化程序中的 `表达式` 可能会在运算时计算，而且不一定非要使用 `编译时常量`。\n\n```Java\nPoint[] point = \n\t{circle1.getCenterPoint(), circle2.getCenterPoint()}\n\t\t\nString[] lines = new String[50]; // 中括号中使用非负整数\nString[] greetings = \n\tnew String[] {\"Hello\", \"World\", \"I'm Kofes.\"}\n```\n\n#### 使用数组\n- 数组的边界：a[ 0...a.length-1 ]\n- 迭代数组：遍历数组\n\n```Java\nint[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23 };\nint sumOfPrimes = 0;\n\t\nfor( int = 0; i < primes.length; i++ ) {\n    sumOfPrimes += prime[i];\n}\n\t\n// 等价于上一个 for 循环\nfor( int p : primes ) sumOfPrimes += p;\n```\n\n#### 多维数组\n\n```Java\nint[][] products = new int[10][]; // 正确\nint[][] products = new int[][10]; // 错误，指定的维度必须位于最左边\n\nfor( int i = 0; i < 10; i++ ) {\n    products[i] = new int[10];\n}\n```\n\n### 引用类型\n- 引用类型与基本类型\n\t- 引用类型  \n\t1) 引用类型由用户定义，可有无限多个。  \n\t2) 即聚合类型，保存零或多个基本值或对象。\n\t- 基本类型  \n\t1) 8 种基本类型由 Java 语言定义，不能由我们自己定义新基本类型。  \n\t2) 基本类型表示单个值。  \n\t3) 基本类型需要 1 到 8 字节的内存空间。\n\n- 处理对象和引用副本\n\n\t```Java\n\tPoint p = new Point(1.0, 2.0);\n\tPoint q = p; // 因变量 p 和 q 保存的引用都指向同一对象。\n\tSystem.out.println(p.x); // 1.0\n\tq.x = 13.0;\n\tSystem.out.println(p.x); // 13.0\n\t```\n\n- 比较对象，即 `==` 与 `x.equal()` 的区别\n\t- `==` 比较引用类型时，比较的是引用是否指向同一对象。\n\t- `x.equal()` 比较的是对象内容是否一样。\n\t\n\t```Java\n\tString letter = \"O\";\n\tString s = \"Hello\";\n\tString t = \"Hell\" + letter;\n\t\n\tif( s==t ) {\n\t    System.out.println(\"equal\"); // 显然不等\n\t}\n\tif( s.equal(t) ) {\n\t    System.out.println(\"equal\"); // 内容相等\n\t}\n\t```\n\n### 包和 Java 命名空间\n- 声明包：package org.apache.commons.net;\n\n\t> package 指定类属于哪个包 (Java 代码的第一行标记，除注释和空格外)\n\t\n- 导入类型\n\t\n\t```Java\n\t// 现不用输入 java.io.File 了，输入 File 定义即可\n\timport java.io.File; \n\tFile file = new File();\t\n\t\n\t// java.io 包中的所有类都可以使用简称\n\timport java.io.*;\n\t```\n\n- 导入静态成员\n\n\t```Java\n\timport static java.lang.Math.*;\n\tMath.sqrt( abs(sin(x)) ); // 直接使用 sqrt( abs(sin(x)) );\n\t```\n\n- Java 文件结构\n\t- `一个` 可选的 package 指令；\n\t- `零个或多个` import 或者 import static 指令；\n\t- Java 文件中 `只有一个` 声明 public 的类，且类名必须与文件名相同.\n\t\n\t> public 类的目的是供其他包中的类使用。不管类是否为 public，一个文件只定义一个类，并且名称相同，是良好的编程习惯。\n\n## 叁 Java 面向对象编程\n\n### 类\n#### 面向对象的基本概念\n- 类\n\t- 由一些保存值的数据字段和处理这些值的方法组成。\n\t- 类定义一种新的引用类型。\n\n\t> 例如：Point 类，表示所有笛卡尔二维坐标点。\n- 对象：类的实例，对象一般通过实例化类来创建。\n\n#### 定义类的句法\n\n```Java\npublic class IntegerNumber extends Number\n\timplements Serialzable, Comparable {\n\t// 类的成员 (成员变量和成员方法)\n}\n```\n\n### 字段和方法\n\n- 类字段\n- 类方法\n\n\t> 类字段、类方法：关联在类自身上的类成员 (静态变量)。\n- 实例字段\n- 实例方法\n\n\t> 实例字段、实例方法：关联在类的单个实例 (对象) 身上的实例成员。\n\t\n\t```Java\n\tpublic class Circle {\n\t    // 类字段\n\t    public static final double PI = 3.14159; \n\t    \n\t    // 类方法\n\t    public static double radiusToDegrees(double radius) {\n\t        return radius * 180 / PI;\n\t    }\n\t    \n\t    // 实例字段，即实例化后获得参数\n\t    public double r; \n\t    \n\t    // 实例方法\n\t    public double area() { \n\t        return PI * r * r;\n\t    }\n\t}\n\t```\n\t\n- this 引用的工作方式\n\n\t只要 Java 方法在类中访问 `实例字段`，都默认方法 this 参数指向的对象中的字段。\n\n\t```Java\n\tdouble radius;\n\n\tpublic void setRadius(double radius) {\n\t    this.radius = radius; // 把参数赋值给类字段\n\t}\n\t```\n\n\t- 一般地，若实参变量名称与类字段不一致，可省略 this，例如形参为 `double r`，即  `radius = r` 。在该例子中省略会让编译器报错，即无法理解值是谁赋给谁。\n\t- 实例方法可以使用 this 关键字，相反类方法不能使用。\n\n### 创建和初始化对象\n\n- 定义构造方法\n\n\t```Java\n\tpublic class Circle {\n        protected double r;\n        public Circle(double r) {\n            this.r = r;\n        }\n\t}\n\t```\n\n\t- 构造放方法的成名始终和类名一样。\n\t- 声明构造方法时不指定返回值类型，连 void 都不用。\n\n- 定义多个构造方法\n\n\t只要构造方法的参数列表不同，为一个类定义多个构造方法是可以的。\n\n\t```Java\n\tpublic class Circle {\n\t    protected double r;\n\t    public Circle() {\n\t        r = 1.0;\n\t    }\n\t    public Circle(double r) {\n\t        this.r = r;\n\t    }\n\t}\n\t```\n\n- 字段的默认值和初始化程序\n\n\t类中的字段不一定要初始化，因为字段自己使用默认值初始化。\n\t\n\t> 良好的编程习惯，或字段的默认值不适合情景。建议显式提供初始值。\n\t\n### 子类的继承\n\n#### 扩展类\n\n```Java\npublic  class PlanCircle extends Circle { // 自动继承了 Circle 类的字段和方法\n    private final double x, y;\n    public PlanCircle(double r, double x, double y) {\n    \n        // 调用超类的构造方法 Circle()\n        super(r);\n        \n        this.cx = x;\n        this.cy = y;\n    }\n}\n```\n\n#### 构造方法链和默认构造方法\n\n- 创建类的实例，Java 保证会调用这个类的构造方法。\n- 创建任何子类的实例，Java 保证会调用超类的构造方法。\n- 若构造方法没有调用超类的构造方法，Java 会隐式调用。\n- 若类没有声明构造方法，Java 会为类隐式添加一个构造方法。\n\n\t> 若超类没有声明无参数的构造方法，这种隐式调用会导致编译出错。所以，若类中没有定义任何构造方法，默认会为其提供一个无参数的构造方法。\n\t\n#### 覆盖超类的方法\n\n> 注意，覆盖不是遮盖\n\n类中定义的某个实例方法和超类的某个方法有相同 `名称`、`返回类型`、`参数`，那么这个方法会覆盖，即 `@Override`。\n\n### 数据隐藏和封装\n\n- 封装：把数据隐藏在类中，只能通过方法获取。\n\t- 隐藏类的内部细节。\n\t- 保护类，如一些相互依赖的字段。\n- 访问控制\n\t- 访问包  \n\t1) 访问控制一般在类和类的成员这些层级完成。  \n\t2) 访问其他包，import 导入相关包即可。  \n\t- 访问类：默认情况，顶层类在定义它的包中可以访问。\n\t- 访问成员：类的成员在类的主体里始终可以访问。\n\t\n\t> public、private、protected (default) 作为修饰符，修饰类的成员。  \n\t> public => 类的任何地方都可访问这个成员。  \n\t> private => 除了类内部能访问。  \n\t> protected => 包里的所有类都能访问这个成员，只限制在同一包内进行访问。  \n\t\n\t- 访问控制和继承\n\t\t- 使用 `private` 声明的字段和方法绝不会被继承，类字段和类方法也一样。\n\t\t- 构造方法不会被继承，而不是链在一起调用。\n\t\t- 子类和超类  \n\t\t1) 同一包中，子类继承所有没使用 `private` 声明的实例字段和方法。  \n\t\t2) 不同包中，子类继承所有使用 `protected` 和 `public` 声明的实例字段和方法。\n\t\t\n\t\t> 不继承类字段、类方法。\n\n### 抽象类和方法\n\n- 类中有一 abstract 方法，则该类为 abstract，若是 final 关键字声明的类不能有任何 abstract 方法。\n- abstract 类无法实例化。\n\n#### 转换引用类型\n- 对象不能转换不相关的类型。\n\n\t> String 对象 -> Point 对象\n\t\n- 对象可以转成超类类型，或任何祖先类型。即放大转换，因此不需要校正。\n- 对象可以转换成子类型，缩小转换，但需确保转换有效。\n\n#### 修饰符总结\n\n| 修饰符 | 用于 | 意义 |\n| :---- | :-- | :--- |\n| abstract | 类 | 这个类不能实例化，且可能包含未实现的方法 |\n|  | 接口 | 所有接口都是抽象的，声明接口时这个修饰符是可选的 |\n|  | 方法 | 这个方法没有主体，主体由子类提供，签名后面紧接一个分号。所在的类必须也是抽象的 |\n| default | 方法 | 这个接口方法的实现是可选的。 |\n| final | 类 | 不能创建这个类的子类 |\n|  | 方法 | 不能覆盖这个方法 |\n|  | 字段 | 这个字段的值不能改变 |\n|  | 变量 | 值不能改变的局部变量、方法参数或异常参数 |\n| 无(包) | 类 | 包级私有：没有声明 public 的类只能在包中访问 |\n|  | 接口 | 包级私有：没有声明 public 的接口只能在包中访问 |\n|  | 成员 | 包级私有：没有声明 public、private 或 protected 的成员只能在包中访问 |\n| private | 成员 | 该成员只在定义它的类中可以访问 |\n| protected | 成员 | 该成员只在定义它的包中和子类中可以访问 |\n| public | 类 | 能访问所在包的地方都能访问这个类 |\n|  | 接口 | 能访问所在包的地方都能访问这个接口 |\n|  | 成员 | 能访问所在类的地方都能访问这个成员 |\n| static | 类 | 使用 static 声明的内部类是顶层类，而不是所在类的成员 |\n|  | 方法 | static 方法是类方法，不隐式传入 this 对象引用，可通过类名调用 |\n|  | 字段 | static 字段是类字段，不管创建多少类实例，这个字段只有一个实例，可通过类名访问 |\n|  | 初始化程序 | 这个初始化程序在加载类时运行，而不是创建实例时运行 |\n| synchronized | 方法 | 这个方法对类或实例执行非原子操作，故得确保不能让两个线程同时修改类或实例。对 static 方法来说，执行方法前先为类获取一个锁；对非 static 方法来说，会为具体的对象实例获取一个锁 |\n| volatile | 字段 | 该字段能被异步线程访问，因此必须对其做些特定的优化 |\n\n## 肆 Java 类型系统\n\nJava 是一种静态语言，如果把不兼容型的值赋给变量，会导致编译出错。而在运作时检查类型兼容性的语言叫做动态类型语言，如 Javascript。  \n\n> 在 [第壹章：Java 和其他语言比较](#Java-和其他语言比较) 中有对语言类型的深入了解。\n\n\n### 接口\n- 接口的作用只是描述 API，接口提供类型的描述信息，以及实现这个 API 的类应提供的方法 (和签名)。\n- Java 的接口不为它描述的方法提供实现代码，这些方法是强制要实现的。\n\n#### 定义接口\n\n```Java\ninterface Centered {\n    void setCenter(double x, double y);\n    double getCenterX();\n    double getCenterY();\n}\n```\n\n- 特别说明\n\t- 接口中所有强制方法都隐式使用 abstract 声明，不能有方法主体，以分号结束。\n\t- 接口定义公开的 API，接口所有成员都隐式使用了 public 声明。\n\n\t> 使用 protected 或 private 定义方法，将会编译出错。\n\t\n\t- 接口不能实例化，因此不定义构造方法。\n\t- 接口中可包含嵌套类型。\n\t- 接口中可包含静态方法。\n\n#### 扩展接口\n继承父接口的所有方法和常量，且可定义新方法和常量。接口的 extends 子句可包含多个父接口。\n\n```Java\ninterface Transformable extends Scalable, Translateble, rotalable {\n    // 忽略细节\n}\n```\n注意：实现这个接口的类必须实现这个 `接口直接定义` 的抽象方法，包括所有 `父接口` 中继承的全部抽象方法。\n\n#### 实现接口\n\n实现多个接口：一个类即可实现一个接口，也可实现多个接口，后者表明的这个类要实现所有接口中的全部抽象方法 (强制方法)。\n\n```Java\npublic class SuperDuperSquare extends Shape \n    implements Centered, UpperRightCornered, Scalable {\n    // 忽略细节\n}\n```\n\n#### 默认方法\n\n- 向后兼容性：前一版平台编写 (或已编译) 的代码在最新版平台中必须能继续使用。\n- 实现默认方法：若升级某一接口，重新定义接口后，尝试在为旧接口编写的代码中使用这个新接口，不会成功。  \n\t即抛出 `NoClassDefError` 异常，如下例中添加新的强制方法。\n\t\n\t```Java\n\tinterface Positionable extends Centered {\n\t    void setUpperRightCorner(double x, double y);\n\t    double getUpperRightX();\n\t    double getUpperRightY();\n\t\t\n\t    // 在此接口增加以下强制方法，是不会成功的。后续的解决办法是使用抽象类\n\t    void setLowerLeftCorner(double x, double y);\n\t    double getowerLeftX();\n\t    double getowerLeftY();\n\t}\n\t```\n\n### Java 泛型\n\n#### 介绍泛型\n- 使用泛型增强程序的安全性，使编译时信息避免简单的类型错误。具体以下述的引例展开学习。\n\n\t```Java\n\tList shapes = new ArrayList();\n\tshapes.add( new CenteredCircle(1.0, 1.0, 1.0) );\n\tshapes.add( new CenteredSquare(2.5, 2, 3) );\n\n\t// list::get() 返回 Object 对象，想得到 CenteredCircle 对象必须校正\n\tCenteredCircle circle0 = (CenteredCircle) shapes.get(0);\n\n\t// 运行此代码时会导致运行失败\n\tCenteredCircle circle1 = (CenteredCircle) shapes.get(1);\n\t```\n\n\t`CenteredCircle circle1 = (CenteredCircle) shapes.get(1);` 运行失败的原因，即把不同类型的对象放在同一容器中，一切正常运行。但若做了不合法的校正，程序就会崩溃。\n\n\t为了解决此类问题，Java 提供了一种句法，即指明某中类型是一个容器，这个容器中保存着其他引用类型的实例。容器中保存的 `负载类型` 在尖括号中指定：\n\n\t```Java\n\tList<CenteredCircle> shapes = new ArrayList<CenteredCircle>();\n\tshapes.add( new CenteredCircle(1.0, 1.0, 1.0) );\n\tshapes.add( new CenteredCircle(2.5, 2, 3) );\n\t```\n\n- 容器类型，一般叫泛型\n\n\t```Java\n\tinterface Box<T> {\n\t    void box(T t);\n\t    T unbox();\n\t}\n\t```\n\n#### 泛型和类型参数\n- `<T> 句法`，也称 `类型参数`，因此泛型还有一个名称 `参数化类型`。\n- 定义有参数的类型，要使用一种不对类型参数做任何假设的方式指定具体的值。且类型参数可在方法的签名和主体中使用，就像真正的类型一样。\n\n\t```Java\n\tinterface List<E> extends Collection<E> {\n\t    boolean add(E e);\n\t    E get(int index);\n\t}\n\t```\n\n#### 菱形句法\n使用菱形句法创建一个由 CenteredCircle 对象组成的 List。\n\n```Java\n// 后一个 <> 内为空，但编译器能推导出类型参数的值\nList<CenteredCircle> shapes = new ArrayList<>(); \n```\n\n#### 类型擦除\n\n- Java 平台十分看重向后兼容性，问题的关键是，如果让类型系统既能使用旧的非泛型集合类又能使用新的泛型集合类，则设计者们选择 `校正` 的解决方案。\n\n\t```Java\n\tList someThings = getSomeThing();\n\t// 这种校正不安全，即使 someThings 的内容确定是字符串\n\tList<String> myStrings = (List<String>) SomeThings;\n\t```\n\t上述代码表明，`List` 与 `List<String>` 是兼容的，Java 通过类型擦除实现这种兼容性。\n\n- 类型擦除机制还能禁止使用某些其他定义方式。\n\n\t```Java\n\tinterface OrderCounter {\n\t    int totalOrder( Map<String, List<String>> orders );\n\t    int totalOrder( Map<String, Integer> orders );\n\t}\n\t```\n\t上述代码看似合法，其实是无法编译的。其实当擦除类型后，两方法的签名变成 `int totalOrder(Map);`，Java 语言规范把这种句法列为不合法的句法。\n\t\n#### 通配符\n\n- 受限通配符，限制类型参数的值能使用哪些类型。\n\t- 类型协变：表示`容器类型之间` 和 `负载类型之间` 具有 `相同` 的关系，这种关系通过 `extends` 关键字表示。\n\t- 类型逆变：表示`容器类型之间` 和 `负载类型之间` 具有 `相反` 的关系，这种关系通过 `super` 关键字表示。\n\t\n\t[实例] 例如，Cat 类 扩展 Pet 类，`List<Cat>` 是 `List<? extends Pet>` 的子类型。List 是 Cat 对象的制造者，应使用关键字 extends。\n\n\t> [Joshua Bloch](https://baike.baidu.com/item/Josh%20Bloch/4419184?fr=aladdin) 把这种用法总结为 PECS. `Producer Extends, Consumer Super` 原则，即使用者使用 super，制造者使用 extends。\n\t\n- 使用和设计泛型\n\t- 使用者：理解类型擦除的基本知识。\n\t- 设计者：泛型更多功能。如通配符、\"Capture of\" 错误信息等。\n\n### 枚举和注解\n\n#### 枚举\n\n```Java\npublic enum RegularPolygon {\n    // 带参数的枚举必须使用分号\n    TRIANGLE(3), SQUARE(4), PENTAGON(5), HEXAGON(6);\n    \n    private Shape shape; \n    \n    public Shape getShape {\n        return this.shape;\n    }\n    \n    // 因枚举实例在 Java 运行时创建，在外部不能实例化，故把构造方法声明为私有。\n    // 只能有一个私有的构造方法 (或默认访问权限，即不写)。\n    private RegularPolygon(int sides) {\n        switch(sides) {\n            case 3: // 三角形\n                shape = new Triangle(1, 1, 1, 60, 60, 60);\n                break;\n            case 4: // 矩形\n                shape = new Rectangle(1, 1);\n                break;\n            case 5: // 五边形\n                shape = new Pentagon(\n                    1, 1, 1, 1, 1, 108, 108, 108, 108, 108);\n                break;\n            case 6: // 六边形\n                shape = new Hexagon(\n                    1, 1, 1, 1, 1, 1, 120, 120, 120, 120, 120, 120);\n                break;\n        }\n    }\n}\n\n// 实际使用\nRegularPolygon polygon = \n    new RegularPolygon( RegularPolygon.TRIANGLE );\n```\n\n- 注意\n\t- 枚举不能泛型化，不能被扩展；\n\t- 可以实现接口；\n\t- 只能有一个私有的构造方法 (或使用默认访问权限，不写).\n\n#### 注解\n\n- 注解是一种特殊的接口，其作用是注解 Java 程序的某个部分。\n- 能为编译器和集成环境 (IDE) 提供有用的提示。\n- 注解没有直接作用，例如 `@Override` 为注解的方法提供额外信息，注明这个方法覆盖了超类中的方法。\n- Java 平台中常见的基本注解：\n\t- `@Override` - 注明方法是覆盖的。\n\t- `@Deprecated` - 注明方法已经废弃了。\n\t- `@SuppressWarnings` - 注明编译器生成的警告。\n\t- `@SafeVarargs` - 为变长参数方法提供增强的警告静态方法、默认方法功能\n\t- `@FunctionalInterface` - 接口是一正确的函数式接口，注解能够更好地让编译器进行检查。\n\n#### 自定义注解\n使用 `@interface` 关键字定义新的注解类型，与定义类和接口的方式差不多。\n\n自定义注解的关键是使用 `元注解`，他们是用来注解新注解类型的定义，必须使用两个基本元注解 `@Target` 和 `@Retention`。\n\n- `@Target`：指明自定义的新注解能在 Java 源码的什么地方使用。可用的值在枚举 `ElementType` 中定义，其中包括：\n\t- TYPE - 类、接口 (包括注解类型) 或 Enum 声明\n\t- FIELD - 域声明 (包括 Enum 实例)\n\t- METHOD - 方法声明\n\t- PARAMETER - 参数声明\n\t- CONSTRUCTOR - 构造器声明\n\t- LOCAL_VARIABLE - 局部变量声明\n\t- ANNOTATION_TYPE - 注解\n\t- PACKAGE - 包声明\n- `@Retention`：指明 Javac 和 Java 运行时如何处理自定义的注解类型。可用的值得在枚举 `RetentionPolicy` 中定义，其中包括：\n\t- SOURCE - 表示注解将被编译器丢弃。\n\t- CLASS - 表示注解会出现在类文件中，但运行时 JVM 无法访问。\n\t- RUNTIME - JVM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。\n- `@Documented`：将此注解包含在 Javadoc 中。\n- `@Inherited`：允许子类继承父类中的注解。\n\n\t便于理解，这里定义一个名为 @Nickname 的注解，使用这个注解为方法指定一个昵称，运行时使用反射可以找到这个方法。\n\n\t```Java\n\t@Target(ElementType.METHOD)\n\t@Retention(RetentionPolicy.RUNTIME)\n\tpublic @interface Nickname {\n\t    String[] value() default {};\n\t}\n\t```\n\t\n#### 嵌套类型\n- 顶层类型：诸如类、接口和枚举类型都定义为顶层类型，即都是包中的直接成员。\n- 嵌套类型：也称为 `内部类`，不能作为完全独立的实体真实存在，类型通过四种不同方式嵌套在其他类型中。\n- 四种嵌套方式：\n\t- 静态成员类型：嵌套的接口，枚举和注解 (既使不使用 static 关键字)。\n\t- 非静态成员类型：没有 static 关键字声明，只有类才能作为非静态成员类型。\n\t- 局部类：Java 代码块中定义的类，只是这个块可见。\n\t- 匿名类：局部类，匿名类是不能有名字的类，在创建 new 语句来声明它们。\n\n\t```Java\n\tRunnable runnable = new Runnable() {\n\t    public void run() {\n\t        // 忽略细节\n\t    }\n\t}\n\t\n\tThread thread = new Thread();\n\trunnable.start();\n\t```\n- 嵌套类型的运作方式\n\n\t对于 Java 解析器而言，并没有所谓的嵌套类型，`所有类型都是普通的顶层类`。为了实现嵌套类型，Javac 把每个嵌套类型编译为 `单独类文件`，得到的类文件使用 `特殊命名约定`。\n\n\t- 静态 / 非静态成员类型：以 `EnclosingType$Member.class` 格式命名成员类型的类文件。\n\n\t> 例如在 LinkedStack 类中，定义一个 Linkable 的静态成员接口。  \n\t> 在编译这个 LinkedStack 类时，编译器会生成两个类文件，分别是 LinkedStack.class 和 LinkedStack$Linkable.class。\n\t\n\t- 匿名类：类文件的名称由实现细节决定，例如 Oracle 或 OpenJDK 中 Javac 使用数字表示匿名类的名称，即 `EnclosingType$1.class`.\n\t- 局部类：综合使用前两种方式命名，例如 `EnclosingType$1Member.class`。\n\n#### Lambda 表达式\n列出目录中文件名以 \".java\" 结尾的文件。\n\n```Java\nFile dir = new File(\"/src\");\n\n// 调用 list() 方法，参数的值是匿名类实现的 FilenameFilter\nString[] fileList = dir.list( new FilenameFilter() {\n    public boolean accept(File file, String str) {\n        return str.endsWith(\".java\");\n    }\n});\n\n// Lambda 表达式\nString[] fileList = dir.list( \n    (file, str) -> {return str.endsWith(\".java\"); }\n);\n```\n\n- 转换 lambda 表达式：必须满足以下条件才算是合法的 Java 代码。 \n\t- 必须出现在期望使用接口类型实例的地方；\n\t- 期望使用接口类型必须只有一个强制方法；\n\t- 该强制方法的签名要完全匹配 lambda 表达式).\n- 方法引用\n\n\t```Java\n\t// 该接口只有一个非默认方法：\n\t// 该方法接受一个 MyObject 类型的参数，返回类型为 String\n\t(MyObject myobject) -> { myobject.toString(); }\n\t\n\t// 方法引用：Java 8 提供了更简洁的句法\n\tMyObject::toString;\n\t```\n\n## 伍 Java 的面向对象设计\n\n### Java 的值\nJava 的值有两种类型，基本值和对象引用，只有这两种值才能赋值给变量。\n\n- 基本值：基本值不能改，2永远是2。\n- 对象引用：对象引用的内容一般能修改，一般为对象内容的变化。\n\n\t[说明] Java 不是 \"引用传递\" 的语言。\n\t\n\t```Java\n\tpublic void manipulate(Circle circle) {\n\t    circle = new Circle(3);\n\t}\n\t\n\tCircle circle = new Circle(2);\n\tmanipulate(circle);\n\t\n\t// 还是输出 => Radius:2\n\tSystem.out.println(\"Radius:\" + circle.getRadius() ); \n\t```\n\n#### 面向对象的设计要略\n\n- 常量：实现某个接口的任何类都会继承这个接口中定义的常量。特别是在多给类中使用的一组常量。\n- 高度抽象：选择接口还是抽象类\n\t- 在已定义的接口添加一个新的强制方法，那么已经实现这个接口的所有类都会出现问题，即接口中添加新方法必须为默认方法，并提供实现。\n\t- 抽象类，可放心添加非抽象方法。子类必须实现抽象方法，但非抽象方法不要求。\n- 实例方法还是类方法\n\t- 类方法：static 声明的静态方法。\n\t- 实例方法：关联在类的单个实例 (对象) 身上的实例成员。\n\n\t> 选择实例方法还是类方法，视设计方式决定，哪个方便来哪种。\n- 合成还是继承：可参考 `装饰模式`。\n- 字段继承和访问器\n\t- `protected` 修饰字段，允许子类直接访问这些字段。\n\t- 提供访问器，即字段声明为私有，对外隐藏细节。\n\n\t```Java\n\tprivate double radius;\n\tpublic double getRadius() {\n\t    return radius;\n\t}\n\t```\n- 单例 -- 单例模式 -- 只需要为类创建一个实例。更多设计模式可参考：\n\n\t[Android 设计模式之实践与案例 ( 笔记 + 速记手册 )](https://www.kofes.cn/2018/01/Design-Pattern-Based-on-Android.html)\n\n#### 异常和异常处理\n- 设计异常机制，应遵循下述良好的做法：\n\t- 异常也是对象，即考虑要在异常中存储什么额外状态；\n\t- Exception 类有四个公开构造。一般情况，自定义异常类需要实现这四个构造方法，可用于初始化额外的状态，定制异常消息；\n\t- 不要捕获异常而不处理；  \t\n\t- 不要捕获异常，记录日志后再次抛出异常.  \n\t\n\t```Java\n\t// 不要捕获异常而不处理\n\ttry {\n\t    SomeMethodThatMightThrow();\n\t} catch(Exception e) {\n\t    // 处理异常的细节\n\t}\n\t\n\t// 不要捕获异常，记录日志后再次抛出异常\n\ttry {\n\t    SomeMethodThatMightThrow();\n\t} catch(SpecificException e) {\n\t    log(e);\n\t    throw e; // 不要再异常处理中再抛出异常\n\t}\n\t```\n\t\n## 参考资料\n[[1] 周志明. 深入理解 Java 虚拟机(第2版)[M]. 机械工业出版社, 2013](https://book.douban.com/subject/24722612/)  ","tags":["java"],"categories":["Programme"]},{"title":"数据结构复习框架 ( 应试篇 )","url":"/2017/04/Data-Struct-vs-C-learning.html","content":"\n## 序言\n\n既管学习的目的不全为了考试，编程也不仅是为了验证题目结果的正确性，然而在应试教育当中，论分数高低和正确解答却成为了验收学习效果和评判个人编程水平的有效方法。在教育资源有限的环境下，似乎不是最佳方案，但我们也得武装自身，适应规则，适应这“合情合理”的游戏规则。\n\n作为编程体系当中，重要的必修课程之一「数据结构与算法」，对于课程体系要求掌握程度相信在你心里也有度量。而针对于应试层面而言，学习方法因人而异，但也可有参考性的应对策略。个人的方法 **「脑图 - 细化 - 比较 - 刻意练习」**，也是本系列文章中时刻强调的内容，既一定要建立正确的、宏观的认识后，通过做题巩固，从而达到再认识知识体的效果。宁缺毋滥，不要为了刷题而刷题。\n\n<!-- more -->\n\n再者，对于「数据结构与算法」该门课程，这里分享一些自己的心得见解，以便与朋友共同探讨、学习。 \n \n- 熟知每章节的知识框架 (最好形成脑图)，构建章节间的联系 (第1、2章大部分内容是为后面章节服务的)，再对细枝末节的知识点填充；\n- 由刷题模式向探索模式转变，即复习时尽可能地设想问题。始于心践于行，针对不同类型的问题要有相应的答题思路和解题步骤。\n- 算法的题目千变万化，尤其是一些限制条件、不同角度去探讨问题，故对题目背后的知识点，自己要有 **「定位 - 分析 - 总结」** 的能力 (属于哪个知识模块，具体章节的内容，考点背后的意义，再遇同类型问题的解决方案等)。\n\n当然，少不了的配套学习的参考书目：\n  \n- [教材]《数据结构(C语言版)》. 严蔚敏,吴伟民. 清华大学出版社\n> 经典教程之一，作用不言而喻。可作为应试复习中的参考书目。\n- [教材]《数据结构》. 陈越. 高等教育出版社  \n> 最初，购买本书的最大动机是拥有一本可以同步MOOC「数据结构」课堂的教材。然而，后知后觉地发现本书对数据结构的代码描述明朗，特别是面对较抽象的数据操作，书中运用了大量生动的示意图，辅助你阅读代码，达到透彻理解的效果。\n- [习题]《数据结构考研复习指导》. 王道论坛. 电子工业出版社  \n> 备战考研时期，除了所考学校的专业课真题之外，课后习题的题量还是太少了。在应试层面中学习该门课程，光说不练是非常避忌的。此时，我选择一本联考的习题书，我相信经历了多少年的迭代、积淀，题目是非常经典的，值得你花时间练习。\n\n## 总览\n\n- [壹 绪论](#)\n- [贰 线性表](#)\n- [叁 栈与队](#)\n- [肆 串](#)\n- [伍 数组](#)\n- [陆 广义表](#)\n- [柒 树](#)\n- [捌 图](#)\n- [玖 查找](#)\n- [拾 内部排序](#)\n\n\n## 壹 绪论\n### 什么是数据结构\n**特定关系** 的 **数据元素** 的集合。\n\n- 特定关系 ( 逻辑结构和存储结构 )\n - 逻辑结构  \n 线性结构：线性表，栈，队列  \n 非线性结构：树，图，集合  \n - 存储结构  \n 顺序存储结构 --> 顺序映像 --> 借助元素在存储器相对位置表“关系”。  \n 链式存储结构 --> 非顺序映像 --> 借助指示元素存储地址的指针表示数据元素之间的逻辑关系。\n  \n\t> [附] 顺序 / 链式存储结构的优劣比较\n\n\t- 顺序存储结构\n\t - 优：实现随机存取，既通常借助数组形式来描述 (C/C++)。\n\t - 劣：  \n\t 1.只能使用相邻的一整块存储单元；  \n\t 2.插入和删除操作需移动元素；\n\t- 链式存储结构\n\t\t- 优：  \n\t\t1.存储密度小；  \n\t\t2.逻辑相邻的节点物理位置不必相邻，不会出现碎片；  \n\t\t- 劣：   \n\t\t1.顺序存储；  \n\t\t2.元素因存储指针而占用额外存储空间；\n\n- 数据元素  \n即一定数量的数据项组成一数据元素，再有许多的数据元素组成一个数据对象。其中数据对象为数据的子集。\n\n```C\n数据项 1 } 数据元素\n数据项 2\n...\t\t\n数据项 n (最小单位)\t\n\n数据元素 1 } 数据对象 (数据的子集)\n数据元素 2\n...\t\n数据元素 n\n```","tags":["数据结构"],"categories":["Reading"]},{"title":"C语言复习框架 ( 应试篇 )","url":"/2017/04/C-Programming-Design-Learning.html","content":"\n## 序言\n\n从标题中透漏的信息可知，本系列文章是围绕 “C语言” 展开学习的笔记总结，且目的很明确，笔记内容偏应试，适用于计算机等级考试、考研专业课(C语言)等的复习使用。文章推崇总结性、比对性的学习方法，对于模糊的知识模块需自行查阅参考书目，深化理解或可达到理想的效果。\n\n<!-- more -->\n\n针对C语言程序，推荐几本辅导复习的书目：\n\n> 基础篇\n\n- 《谭浩强:C语言程序设计》: 必不可少的经典教程，权威性的标准答案源。( 因讨论条件而异，如编译系统不同，部分题目的答案就具有了争议性 )\n- 《明解C语言》: 入门基础教学。值得称赞的是，每个知识模块都符有实例，且实例的源码结构清晰，代码规范及注释到位，非常适合入门使用。\n\n> 进阶篇\n\n- 《征服C指针》: C语言的学习过程中，指针的运用是最大的难关。无论是在实际应用、应试中都是不可忽视的。对于作者前桥和弥，其一针见血的文风，在掌握一定基础之后，是深入了解C语言的一位不可多得 “良师益友” ( 书中有不少作者交谈式的独白，别有一番阅读风味 )。\n\n\n## 总览\n\n- [壹 程序设计和C语言](#1-壹-程序设计和C语言)\n- [贰 程序之魂：算法](#2-贰-程序之魂：算法)\n- [叁 简单的C语言程序设计](#3-叁-简单的C语言程序设计)\n- [肆 选择结构程序设计](#4-肆-选择结构程序设计)\n- [伍 循环结构程序设计](#5-伍-循环结构程序设计)\n- [陆 数组](#6-陆-数组)\n- [柒 函数](#7-柒-函数)\n- [捌 指针](#8-捌-指针)\n- [玖 构造类型：用户自己建立数据结构](#9-玖-构造类型：用户自己建立数据结构)\n- [拾 文件处理](#10-拾-文件处理)\n\n\n## 1 壹 程序设计和C语言\n### 1.1 计算机程序与语言\n程序：计算机能识别和执行的指令。  \n语言：人和计算机交流、人和计算机能识别的语言。\n计算机语言发展阶段：   \n \n| 机器语言 | 符号语言 | 高级语言 ( 面向过程、面向对象 ) |\n| :----: | :----: | :----: |\n| 0和1指针 | 英文、数字表示指令 | 人类自然语言和数字语言 |\n\n### 1.2 C语言\n- 特点\n\t- 语言简洁、紧凑，使用方便、灵活\n\t- 运算符丰富 ( 单目、双目、三目运算符 )\n\t- 数据类型丰富 ( 整型、浮点型、字符型、数组类型、指针类型、结构体类型、共用体类型、枚举型 )\n\t- 结构体控制语句\n\t- 直接访问物理地址 ( 对硬件直接操作 )\n\t- 可移植性好\n\n- 结构\n\t- 以程序由一个或着多个 `源文件` 组成。 \n\t\n\t> 源文件中包括：  \n\t> 预处理命令 ( #include、#define、#typedef等 )  \n\t> 全局声明 ( 全局变量、局部变量 )  \n\t> 函数定义 ( 参考函数原型 )\n\t\n\t- 函数是C程序的主要组成部分。\n\t- 一函数包括 `函数首部` 和 `函数体`。  \n\t\n\t> 函数体包括：  \n\t> 声明部分和执行部分。\n\t \n\t- 程序总是从main函数开始执行的。  \n\t\n\t> main函数有且仅有一个。\n\t\n\t- C程序对计算机的操作有C语言完成。\n\t- 数据声明和语句必须有分号 ( 作为结束 )。\n\t- C本身不提供输入输出语句。\n\n### 1.3 程序设计的任务\n1. 问题分析  \n2. 设计算法  \n3. 编写程序  \n4. 对源文件编辑、编译 ( \\*.obj ) 和连接 ( \\*.exe )  \n5. 运行程序并分析结果  \n6. 编写程序文档 \n\n\t[注] 对于编译，预编译和连接的概念及比对： \n\n\t- 编译：检索语言错误；把源程序转为二进制形式的目标程序。\n\t- 预编译：通过预处理得到的信息与程序其他部分一起，组成完整的、可以正式编译的源程序。\n\t- 连接：与函数库相连接。\n \n \n## 2 贰 程序之魂：算法\n### 2.1 引入\n- 对数据的描述：所用数据的类型和数据的 `组织形式`。 \n \n\t> 组织形式：数据结构 -- 特定关系的数据元素的集合\n\n- 对操作的描述：计算机进行操作的步骤 -- 算法\n\n- 从简理解：`数据结构 + 算法 = 程序`\n\n\n### 2.2 算法\n- 概念：对特定问题求解的方法和描述。\n\n- 特征  \n\t- 有穷性：`有穷时间` 执行结束；\n\t- 确定性：算法 `唯一执行路径`，既相同输入执行相同路径；\n\t- 可行性：`有限次`；\n\t- 零或一个以上的 `输入`；\n\t- 一个或以上的 `输出`；\n\n- 要求  \n\t- 正确性；\n\t- 可读性；\n\t- 健壮性；\n\t- 效率与低存储量需求 ( 时间复杂度和空间复杂度 )  \n\n- 时间复杂度\n\t- 时间复杂度：也称渐进时间复杂度，即算法执行时间的增长率和 f(n) 的增长率相同。  \n\t- 渐进时间复杂度：`T(n) = Big O(f(n))`  \n\t- f(n)为问题规模n的某个函数。  \n\t- 算法中的基本运算( 最深层循环内的语句 )的频度与T(n)同数量级。  \n\n- 空间复杂度\n\t- 空间复杂度：算法所需存储空间的量度。  \n\t- 渐进空间复杂度：`S(n) = Big O(f(n))`  \n\t- 原地工作：额外空间相对输入的数据量来说是常数。\n\t\n### 2.3 三种基本结构和改进流程图\n- 三种基本结构\n\t- 顺序结构；\n\t- 选择结构；\n\t- 循环结构：当型循环结构 / 直到型循环结构；\n- 改进的流程图：N-S流程图\n\n### 2.4 结构化程序设计方法\n- 自顶向下；\n- 逐步细化；\n- 模块化设计：`分而治之`；\t`注意模块独立性`\n- 结构化编码；\n\n\n## 3 叁 简单的C语言程序设计\n### 3.1 数据的表现形式及运算\n#### 3.1.1 常量\n- 概念：程序运行期间，其值不能改变。\n- 类型    \n\t- 整型常量  \n\t- 字符常量 ( 与常变量作比对 **[注释1]** )\n\t\t- 普通字符  \n\t\t- 转移字符：\\n, \\t, \\012 (8进制), \\x41 (16进制)\n\t\t- 符号常量：`#define PI 3.14159`\n\t- 实型常量\n\t\t- 10进制小数形式：3.14L\n\t\t- 指数形式(科学计数法):  \n\t\t8.7e-25(正确);  \n\t\t8.7e-2.5(错误)；  \n\t\t87e+25(正确);  \n\n#### 3.1.2 变量\t\n\n> 先定义，后使用\n\n- 包含属性\n\t- 数据类型 ( 整型、浮点型、字符型 )  \n\t- 存储类别 ( 自动变量，静态变量 )  \n- 概念：程序运行期间，其值可以改变。\n- 类型\n\t- 常变量：变量存在期间其值不能改变。 `const int a = 10`  \n\t- 自动变量与静态变量  \n\t- 全局变量与局部变量  \n\t\n\t> 从存储位置、生存周期、作用区域讨论差异性。**[注释2]**\n\t\t\n- 标识符  \n一个对象的名称。除关键字外，字符、数字和下划线组成。且要求只能是字母或下划线开头。\t\n\n> [注释1] 符号常量与常变量的比较。\n\n| 符号常量 | 常变量 |\n| :---- | :---- |\n| 不占内存单元，预编译后符号不复存在 | 占存储单元 |\n| 不能重新赋值 | 不能改变其值 |\n\n> [注释2] 局部变量与全局变量，自动变量与静态变量，内部函数与外部函数的比较。\n\n| 局部变量 | 全局变量 |  |\n| :---- | :---- | :---- |\n| 存放于动态存储区 | 存放于静态存储区 | 位置 |\n| 在定义函数内起作用 | 自定义位置开始，本文件起作用 | 作用域 |\n| 函数调用完释放内存 | 程序结束时释放内存 | 生存期 |\n\n- 静态的局部变量，存放于静态存储区，程序结束时释放内存。\n- 静态的全局变量，不是因声明static，而误解全局变量才存放于静态存储区。\n- 局部变量，声明存储类型指变量存储区以及产生的生存期问题。  \n- 全局变量，声明存储类型指变量作用域的扩展问题。\n\t\n| 自动变量 | 静态变量 |\n| :---- | :---- |\n| 1. 声明该变量的语句块被执行结束释放内存(**栈**) | 1. 程序结束时才释放内存 |\n| 2. 每次函数调用时赋值 | 2. 保留上一步的赋值 |\n|  | 3. 在编时赋予初值0或'\\0' | \n\n[注] 对比malloc()函数分配的内存，需调用free()函数释放内存。(**堆**)\n\n| 内部函数 | 外部函数 (default) |\n| :---- | :---- |\n| 本文件内使用(不限位置) | 可供其他文件使用(不限位置) |\n| 定义：static 函数类型 函数名 | 定义：(extern) 函数类型 函数名 |\n\t\n#### 3.1.3 数据类型\n\n- 基本类型\n\n|  | 关键字 | 字节 | 取值范围 |\n| :---- | :---- | :---- | :---- |\n| 整型 | int | 2/4 | $-2^{15}$ ~ $-2^{15}-1$ / $-2^{31}$ ~ $2^{31}-1$ |\n|      | unsigned int | 2/4 | 0 ~ $-2^{16}-1$ / 0 ~ $-2^{32}-1$ |\n| 字符型 | char | 1 | $-2^7$ ~ $2^7-1$ |\n|  | unsigned char | 1 | 0 ~ $2^8-1$ |\n| 单浮点 | float (有效小数：6) | 4 | -- |\n| 双浮点 | double (有效小数：15) | 8 | -- |\n\n- 关于基本类型的特别说明： \n\t- 字符是按其ASCII形式存储的。\n\t- 单浮点定义：float a = 3.14f\n\t- 双浮点定义：double a = 3.14\n\t- 长浮点定义：long double a = 3.14L\n\n- 派生类型\n\t- 指针类型：指向函数的指针、多重指针\n\t- 数组类型：指针数组\n\n- 构造类型\n\t- 结构体类型\n\t- 共同体类型\n\t- 枚举类型  \n\t\n\t> [详情见第玖章：构造类型](#9-玖-构造类型：用户自己建立数据结构)\n\t\n- 类型转换：  \n\t- 低精度向高精度转换；  \n\t- 强制转换括号加类型；   `int a = (int)3.14`  \n\t- 多类型变量混合运算，取最高精度的类型；\n  \n\n## 4 肆 选择结构程序设计\n### 4.1 关系运算符及其优先次序\n- 各类运算符的优先级：\n\t- 单目运算符 > 双目运算符 (算术、关系、逻辑) > 三目运算符\n\t\n\t- 优先级由高到低排序：  \n\t初等运算符：`()，[]，->，.`  \n\t单目运算符：`!，++，--，~`  \n\t算术运算符：`*，/，%`，`+，-`  \n\t关系运算符：`>，<，>=，<=`，`!=，==`  \n\t逻辑运算符：`&&，||`  \n\t条件运算符：`a > b : a : b`  \n\t赋值运算符：`a += 1`  \n\t逗号运算符：`(a,b)`  \t\n\t\n\t- 结合方式  \n\t自左向右：`初等、单目、关系、逻辑、逗号运算符`\n\t自右向左：`条件、赋值运算符`  \n\t\n\t> 同一级的运算符，由结合方式决定优先级。\n\n### 4.2 表达式\n- 算术表达式：先乘除模，后加减，再由“自左向右”原则运算。\n\n- 混合运算\n\t- 优先级：遵循各运算符的优先次序。\n\t- 结合性：算术运算符 (自左向右)；赋值运算符 (自右向左)。\n\t- 不同类型的混合运算：结果的类型为**最高精度**的数据类型。\n\n### 4.3 运算符与表达式\n- 关系运算符和关系表达式 ( a+b>c ) -> True or False?  \n\n\t> 0表示假，!0表示真。\n\n- 逻辑运算符和逻辑表达式\n\t- 逻辑运算：5 && 4 => 1；5 && 0 => 0；  \n\t- 按位逻辑：5 & 4 => 4；  \n\t\n\t> [注] 关于逻辑运算与按位逻辑的比较  \n\t> \n\t> * 优先级：按位逻辑运算 > 逻辑运算  \n\t> * max = a & b；min = a | b    \n\n- 条件运算符和条件表达式：a > b ? a : b\n\n### 4.4 选择结构的嵌套 \n- if语句只有两个分支可供选择，else总是与它上面最近的未配对的if()配对。\n\n\t```C\n\tif(express1){\n\t\tif(express2){\n\t\t\t...\n\t\t} else {\n\t\t\t...\n\t\t}\n\t} else {\n\t\tif(express3){\n\t\t\t...\n\t\t} else {\n\t\t\t...\n\t\t}\n\t}\n\t```\n\t\n- switch语句实现多分支选择结构\n\n\t```C\n\tswitch(express1){ // 整型、字符型\n\t\tcase 常量/常量表达式:语句1；break; // break为拦截作用\n\t\tcase 常量/常量表达式:语句2；break;\n\t\tdefault: 语句3;\n\t}\n\t```\n\n## 5 伍 循环结构程序设计\n### 5.1 while 语句实现\n```C\nexpress1;\nwhile(express2){\n\texpress3;\n\t...\n}\n```\n### 5.2 for 语句实现循环\n```C\nfor(express1; express2; express3){\n\t...\n}\n```\n### 5.3 do...while() 语句实现循环\n```C\nexpress1;\n\ndo{\n\texpress3;\n} while(express2);\n```\n### 5.4 break、continue与goto语句\n- break：从循环体内跳出循环体。多层嵌套循环，跳出相邻一层循环。\n- continue：提前结束本次循环。\n- goto：跳出多层循环。\n\n\n## 6 陆 数组\n### 6.1 概念\n- 一组有序数据的集合。\n- 数组中每一元素同属一个数据类型。\n- sname[0] <=> *(p+0) <=> 第一个数组元素。  \n\n### 6.2 定义\n#### 6.2.1 一维数组\n- 定义  \n类型符 数组名[常量表达式]\t --> 正确  \n类型符 数组名[变量] --> 错误，不能为变量\n \n- 初始化  \n\n\t```C\n\tint array[] = {1, 2, 3, 4, 5};  \n\tin array[5] = {0}; // 5个元素都为0。\n\t```\n\n- 引用 \n \n\t```C\n\tint *p = &array[0];\t// 等同于 int *p = array;\n\tp++;\t// 指针运算\n\t*(p+i);\t// 取第i位元素\n\t```\n\n#### 6.2.2 二维数组\n- 定义：类型符 数组名[常量表达式][常量表达式]\n\n- 初始化\n \n\t```C\n\tint array[2][2] = { {1, 2}, {3, 4} };\n\tint array[2][2] = { 1, 2, 3, 4 };\n\tint array[][2] = { {1, 2}, {3, 4} };\t// 既只允许最外层元素个数定义时为空\n\t\n\tint array[][2] = { {0}, {3, 4} };\t// 正确 \n\tint array[][2] = { {}, {3, 4} };\t// 错误\t```\n\t\n- 引用\n\n\t```C\n\tint num = array[1][1];\n\tint *p = array;\n\t*(*(p+j)+j); // 等同于array[i][j];\n\t```\n\n#### 6.2.3 字符数组\n- 定义：char array[10]; <=> int array[10];\n\n\t> 字符型数组是以整型形式存放的 (ASCII)。\n  \t\n- 初始化  \n\t- 字符串常量不可以数组形式取具体位置进行元素修改。\n\t- ( array == \"Hello\" ) => True or False ? \n\t\n\t> False，array 与字符串常量比较的是内存地址。\n\n\t```C\n\tchar array[0] = 'A';\n\n\tchar array[] = {\"Hello\"};\n\t// 字符数组的存储情况：| H | e | l | l | o | \\0 |\n\t// sizeof() -- 6\n\t// strlen() -- 5\n\n\tchar array[] = {'H', 'e', 'l', 'l', 'o'};\n\t// sizeof() -- 5\n\t// strlen() -- 5\n\t\t\n\tint array[] = {\"Hello\"};\n\t// sizeof() -- 4\n\t// strlen() -- 1\n\t\t\n\tint array[] = {'H', 'e', 'l', 'l', 'o'};\n\t// sizeof() -- 20\n\t// strlen() -- 4\n\t\t\n\tchar *array = \"Hello\"; // 字符串常量\n\t```\n \n- 引用 \n\t- 若字符数组中，存在'\\0'两个或以上，系统则以第一次出现的位置提前终止字符输出。  \n\t- stdin 和 gets() 搭配，可获得换行符、空格等字符。 (需结束标记符来终止输入)\n  \n\t```C\n\tscanf(\"%c\", &array[0]);\n\tprintf(\"%c\", array[0]);\n\n\tscanf(\"%s\", array);\n\tprintf(\"%s\", array);\n\t```\n\n- 应用  \n\t- gets(字符数组) -- 输入一字符串到字符数组中\n\t- puts(字符数组) -- 输出一字符串到终端\n\t- strlen(字符数组) -- 测一字符串的实际长度\n\t- strcat(char \\*src1, const char \\*src2);\n\t\n\t> 数组src2后接于src1，src1中的'\\0'被覆盖。且数组src1必须足够大，以容纳数组src2。\n\t\n\t- strcpy(char \\*src1, const char \\*src2);\n\t\n\t> 数组src1必须足够大，以容纳数组src2。\n\t\n\t- strcmp(const char \\*src1, const char \\*src2);\n\t\n\t> 实际为ASCII的比较，其返回值为 <0、==0，>0 的情况。\n\t\n\t- strlwr(字符串) -- 将字符串中大写字母转为小写字母\n\t- strupr(字符串) -- 将字符串中小写字母转为大写字母\n\t- atoi(字符串) -- 字符串转int型\n\t- atol(字符串) -- 字符串转long型\n\t- atof(字符串) -- 字符串转double型   \n\n\t> [注]  \n\t> 1) 字符串处理函数需加入头文件：`#include <string.h>`.   \n\t> 2) 需掌握字符串函数自定义方法实现。  \n\t> 3) 大部份字符串处理函数多数以标记量'\\0'为临界点，若字符数组中含两个或或以上，需注意实际的结果。  \n\t> 4) 引用atoi()、atol()、atof()函数需引用`#include <stdlib.h>`\n\n## 7 柒 函数\n### 7.1 为什么要用函数\n- 模块化程序设计：每一函数实现一特定的功能，函数的名称既反映功能。\n- 更好地代码复用：使用库函数；使用自己编写的函数。 \n \n\t> 代码复用：减少重复编码程序段的工作量。 \n\t>  \n\t> [说明]  \n\t> \n\t> 对于所有完成相同功能的组件，应抽象出一个接口，它们都实现该接口。  \n\t> 具体在Java中，所有完成相同功能的组件都 `实现该接口` 或 `从该抽象类中的继承`。\n\t\n### 7.2 定义函数  \n\n> 建立存储空间的声明\n\n- 定义函数：`函数返回类型` `函数名` `函数参数` `函数体` (变量定义、声明，执行语句)\n\t- 函数返回类型：基本数据类型 / void型；  \n\t- 函数名：驼峰式命名法；  \n\t- 函数参数：实参、形参.  \n\n### 7.3 函数声明\n\n> 不需要建立存储空间的声明\n\n- 函数原型 (Prototype)：函数返回类型、函数名、参数类型、参数个数、参数顺序\n\n- 函数声明的方法\n\t- 使用函数原型；\n\t- 同一源文件，在调用该函数的前面定义 (可打包到自定义头文件中).\n\n### 7.4 函数调用\n- 嵌套调用、递归调用 (直接或间接调用该函数本身)\n- 实参和形参\n\t- 概念  \n\t实参：常量、变量或表达式、函数 (返回值)  \n\t形参：函数调用期间临时分配内存，值从实参中获得，调用结束后释放内存空间。\n\t- 实质：值传递、地址传递\n\n\n## 8 捌 指针\n### 8.1 指针是什么\n- 指针变量：保存变量地址的变量。\n- 指针类型\n\t- 指针类型的变量：存放地址\n\t- 指针类型的值：对应内存地址存放的值\n\t  \n\t> 在 swap(int \\*a, int \\*b); 的案例中可以形象说明两者的区别。\n\n### 8.2 指针移动 (运算：加、减)\n对指针加一、减一运算，即地址会增加或减少一单位长度。单位长度具体具体指当前指针所指向数据类型的所占空间大小。\n\n### 8.3 指针类型\n#### 8.3.1 空指针\n确保没有指向任何一个对象的指针。通常以宏定义NULL(0)表示空指针的常量值。\n\n关于NULL、0和'\\0'，大部分情况都为零。特别地，  \n\n```C\nint *p = 0;\t// 正确，编译器将指针指向内存地址为0处。 \nint *p = 3;\t// 错误，赋值的数据类型不相符。\n```\n\n#### 8.3.2 指针类型的派生\n- 指向函数的指针  \n\n\t```C\n\tvoid (*func(int));\n\t```\n\n- 指向数组的指针(多重指针)  \n\n\t```C\n\tint (*p)[5];\n\t```\n\n#### 8.3.3 数组类型的派生\n- 指针数组\n\n\t```C\n\tint *p[5]; // 存放5个指向int类型的指针。\n\t```\n\n- 用英语解读各种各样的C语言声明\n\n| C语言 | 英语表示 | 中文表示 |\n| :---- | :---- | :---- |\n| int huge; | huge is int | hoge是int型 |\n| int huge[10]; | huge is array[10] of int | hoge是int型的数组 |\n| int huge[2][4]; | huge is array[2] of array[4] of int | hoge是int型的数组的数组 |\n| int \\*huge[10]; | huge is array[10] of point to int | hoge是指向int型的指针的数组(存放指针变量) |\n| int (\\*huge)[10]; | hoge is pointer to array[10] of int | hoge是指向int型的数组的指针 |\n| int func(int a); | func is function(int a) returning int | func是返回int型的函数 |\n| int (*func)(int a); | func is pointer to function(int a) returning int | func是指向返回int型值的函数的指针 |\n\n\n### 8.4 指针的应用\n#### 8.4.1 指针与数组\n- 一维  \n\n\t```C\n\tp[i]\t// 等同于 *(p+i)\n\ti[p]\t// 等同于 *(i+p)\n\t&p[i]\t// 等同于 (p+i)，即第i个元素的地址\n\t```\n- 二维  \n\n\t```C\n\thuge[i]\t\t// 等同于 *(huge+i)，即第i行的首地址\n\t*(huge+i)[j]\t// 等同于 *(*(p+j)+j)，即 huge[i][j]\n\t```\n\n#### 8.4.2 指针与字符串\n##### 8.4.2.1 字符指针变量\n- 定义\n\n\t```C\n\tchar *array = \"World\";\n\tarray = \"hello\";\t// 改变指向\n\t\t\n\tchar array[] = \"Hello\";\n\tarray = \"World\";\t// 错误的做法\n\t\n\tchar *array = \"Hello World\";\n\tarray += 6;\t\t// 改变指向 (首地址改变)\n \t```\n \n##### 8.4.2.2 字符数组\n- 定义: int array[] = \"Hello\";\n\n- 使用：printf(\"%c\", array[0]);\n\n\t> 字符指针变量的值是不能改变的，即已是字符串常量。\n\n\t```C\n\tchar *array = \"Hello\";\n\tarray[0] = 'W';\n\t```\n\n#### 8.4.3 指针与函数\n##### 8.4.3.1 作为参数\n即传递的是指向初始元素的指针。\n\n- 数组名作函数参数\n\t- int func( int array[] ); \n\t- int func( int \\*array );\n- 多维数组作函数参数\n\t- int func( int (\\*huge)[10] );\n\t- int func( int huge[2][4] );\n- 指向函数的指针作函数参数\n\t- int func( int (\\*p)(int) ); \n- 指针数组作main函数形参\n\t- int func( int argc, char \\*argv[] );\n\t   \n\t> argv: 文件名 + 其他参数\n\t\n- 字符指针作函数参数\n\n##### 8.4.3.2 作为返回值\n返回指针值的函数，即返回的是地址。\n\n> [如] 返回的指针指向结构体变量、字符变量等。\n\n\n## 9 玖 构造类型：用户自己建立数据结构\n### 9.1 结构体类型\n- 定义\n\n\t```C\n\tstruct Name {\n\t\tint num;\n\t\tchar word[59];\n\t} *p, name[5];\n\t```\n\n- 初始化：所有成员一起赋值。\n\n- 使用\n\n\t```C\n\tname[i].num;\n\tp->word[i];\n\t(*p).num;\n\t\n\tstruct Name *tmp;\n\ttmp = name;\n\t(tmp++)->num;\t// 先'++'操作，后'->'操作\n\t```\n\t\n- 大小：成员变量所占内存长度总和。\n\n### 9.2 共用体类型\n- 定义\n\n\t```C\n\tunion Name {\n\t\tint num;\n\t\tdouble digital;\n\t\tchar word;\n\t} *p, name[5];\n\t```\n\n- 初始化：只允许给一个成员变量赋值。\n\n\t```C\n\tunion Name tmp = {10};\n\tunion Name tmp = {.word = 'Y'};\n\tt.digital = 2.0;\n\tt.word = 'N';\t// 最终的赋值\n\t```\n\n- 使用\n\n\t```C\n\tname[i].num;\n\tp->word[i];\n\t(*p).num;\n\t```\n\t\n- 大小：成员变量所占内存长度最大者。\n\n> [注] 关于结构体、共用体类型的内存长度问题，遵循4字节倍数的原则进行内存布局对齐。  \n> [如]  \n> sizeof(struct Name) = 64 (63)  \n> sizeof(union Name) = 4 (4)\n\n### 9.3 枚举类型\n- 定义\n\t\n\t```C\n\tenum Week {\n\t\tsun, mon, tue, wed, thu, fir, sat // 默认参数从0开始\n\t} week;\n\t```\n\t\n- 初始化\n\n\t```C\n\tenum Week {\n\t\tmon = 1, tue = 2, wed = 3, thu = 4, fir = 5, sat = 6，sun = 7 // 默认参数从0开始\n\t} week;\n\t```\n\n- 使用：week.mon;\n\n### 9.4 Typedef 声明新类型名\n- 含义：引入变量别名，而不是另外地给变量分配空间。\n- 使用\n\t\n\t```C\n\ttypedef int Integer;\n\ttypedef long Integer;\t// 若编译器中，int为2字节，满足移值需求可以long型替换。\n\tInterger num = 1;\n\t```\n\n- 与 #define 宏定义的区别  \n\t- \\#typedef：编译阶段处理  \n\t- \\#define：预编译阶段处理，实质是字符串替换 \n\t\n## 10 拾 文件处理\n### 10.1 文件与流\n- stdin -- 标准输入流 -- 用于读取普通输入的流，在大多数环境中为键盘输入。scanf()与getchar()等函数会从这个流中读取字符。\n\n- stdout - 标准输入流 -- 用于写入普通输入的流，在大多数环境中为输出至显示器界面。printf()、puts()与putchar()等函数会向这个流写入字符。\n\n- stderr -- 标准错误流 -- 用于写出错误的流，在大多数环境中为输出至显示器界面。\n\n### 10.2 文件分类\n- ASCII文件 (文本文件)：每一字节存放一字符的ASCII代码。\n- 二进制文件\n\t- 优：节约存储空间\n\t- 劣：精度有限\n\n\t> [如] 整数10000  \n\t> ASCII形式存储空间为 5 字节   \n\t> 二进制形式存储空间为 4 字节  \n\t\n### 10.3 文件类型指针：FILE型\n- 需引用 `#include <stdio.h>`\n\n> [注] 指向文件的指针变量并不是指向外部介质上的数据文件开头，而是指向内存中的文件信息区的开头。\n\n### 10.4 打开文件\n- 原型：FILE \\*fopen(const char \\*filename, const char \\*mode);\n- 定义：FILE \\*fp = fopen(\"example.txt\", \"r\");\n\n| 文件类型 | 文本文件 | 二进制文件 |\n| :---- | :---- | :---- |\n| 模式 | r   w   a | rb   wb   ab |\n|  | 只读；只写(文件存在，则长度清零)；追加 | 只读；只写(文件存在，则长度清零)；追加 |\n|  | r+   w+   a+ | rb+   wb+   ab+ |\n|  | 读和写(打开文件)；读和写(建立文件；文件存在，则长度清零)；读和写(打开文件) | 读和写(打开文件；文件存在，则长度清零)；读和写(建立文件)；读和写(打开文件) |\n\n### 10.5 关闭文件\n- 原型：int fclose(FILE *stream);\n\t- 返回值 ( True：0；False：EOF(-1) )  \n\t- 数据存储的过程：数据 --> 缓存区 (充满) --> 文件\n\t- 若不关闭文件，将会造成数据丢失。 \n\t- 若突然关闭文件，缓存区传输到文件的过程给中断，造成数据丢失。\n\n### 10.6 顺序读写数据文件\n- 格式化读取文件\n\n\t```C\n\tint fscanf(FILE *stream, const char *format, ...);\n\t// 返回值：\n\t// Ture - 返回成功赋值的输入项数\n\t// False - 返回文件结束标记EOF(-1)\n\t\n\t// 使用实例\n\tfscanf(fp, \"%s%lf%lf\", name, &height, &weight);\n\t```\n\t\n- 格式化写入文件\n\n\t```C\n\tint fprintf(FILE *stream, const char *format, ...);\n\t// 返回值：\n\t// Ture - 返回发送的字符数\n\t// False - 返回文件结束标记EOF(-1)\n\t\n\t// 使用实例：获得当前运行时间，并存入文本中\n\ttime_t current = time(NULL);\n\tstruct tm *timer = Localtime(&current);\n\t\n\t// 将日历时间time_t型的值转换为分解时间tm结构体类型的值\n\t// 其中，tm结构体为：\n\tstruct tm {\n\t\tint tm_sec;\t// 秒(0 - 61)\n\t\tint tm_min;\t// 分 (0 - 59)\n\t\tint tm_hour;\t// 时 (0 - 24)\n\t\tint tm_mday;\t// 日 (1 - 31)\n\t\tint tm_mon;\t// 月 (0 - 11)\n\t\tint tm_year;\t// 从1900至今，经历了多少年\n\t\tint tm_wday;\t// 星期 (0 - 6)\n\t\tint tm_yday;\t// 经历天数 (从1月1日计起)\n\t\tint tm_tm_isdst;\t// 夏时令 (夏季时间将提前1小时)\n\t};\n\t\n\tfprintf(fp, \"%d %d %d %d %d\", \n\t\ttimer->tm_year + 1900, timer->tm_mon + 1,\n\t\ttimer->tm_day, timer->tm_hour, \n\t\ttimer->tm_min, timer->tm_sec);\n\tfclose(fp);\n\t```\n\n- 读入／写入一个字符\n\n\t```C\n\tint fgetc(FILE *stream);\t// 读入一个字符\n\t\n\tint fputc(FILE *stream);\t// 写入一个字符\n\t// 返回值：\n\t// Ture - 返回所读的字符数\n\t// False - 返回文件结束标记EOF(-1)\n\t```\n\t\n- 用二进制方式向文件读写一组数据\n\n\t```C\n\tsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);\n\t// 从ptr指向的数组中将最多nmemb个长度为size的元素写入stream指向的流中。\n\t\n\tsize_t fread(const void *ptr, size_t size, szie_t nmemb, FILE *stream);\n\t// 从stream流中读取nmemb个长度为size的元素写入到ptr数组。\n\t```\n\n### 10.7 随机读写数据文件\n#### 10.7.1 文件位置标记及其定位\n- 文件位置标记：文件头、读写当前位置、文件尾\n\n- 文件位置标记的定位：fseek(文件类型指针, 位移量, 起始点);\n\t- 文件开始位置 -> SEEK_SET -> 0  \n\t- 文件当前位置 -> SEEK_CUR -> 1  \n\t- 文件末尾位置 -> SEEK_END -> 2  \n\n#### 10.7.2 随机读写\n结合fseek()与fread()函数实现。\n\n> [如] 读取第1，3，5，7，9个学生数据并输出。\n\n```C\nfor(i = 0; i<10; i+=2){\n\tfseek(fp, i*sizeof(struct Student), 0);\n\tfread(&student[i], sizeof(struct Student), 1, fp);\n}\n```","tags":["考试"],"categories":["Programme"]}]