<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kofe</title>
  
  <subtitle>Reading / Project / Paper</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kofes.cn/"/>
  <updated>2018-08-30T01:12:53.198Z</updated>
  <id>http://www.kofes.cn/</id>
  
  <author>
    <name>Kofe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目 - SVN 环境搭建与使用</title>
    <link href="http://www.kofes.cn/2018/08/building-a-svn-server.html"/>
    <id>http://www.kofes.cn/2018/08/building-a-svn-server.html</id>
    <published>2018-08-27T08:24:20.000Z</published>
    <updated>2018-08-30T01:12:53.198Z</updated>
    
    <content type="html"><![CDATA[<p>最近有机会接触到公司的新项目，对于多人参与的项目，充分感受到 <code>源代码的版本控制</code> 的重要性。为了深刻理解和复用起见，本文将从 <code>搭建</code>、<code>配置</code> 和 <code>使用</code> 多方面总结 SVN。</p><p>当然，版本控制的工具有很多，譬如 CVS、GIT、SVN，CVS 几乎淘汰；GIT 适合开源软件项目；SVN 适合企业内部由项目经理统一协调的多个并行项目的开发。选择哪款版本控制工具视具体情况而定。</p><a id="more"></a><h2 id="源代码管理"><a href="#源代码管理" class="headerlink" title="源代码管理"></a>源代码管理</h2><blockquote><p>介绍参考了资料 [1]。 </p></blockquote><h3 id="管理意义"><a href="#管理意义" class="headerlink" title="管理意义"></a>管理意义</h3><ul><li>目的：为了解决在软件开发过程中，由源代码引发的各种繁琐的问题。</li><li>作用：<ul><li>能追踪一个项目从诞生一直到定案的过程；</li><li>记录一个项目的所有内容变化，方便地查阅特定版本的修订情况.</li></ul></li><li>常见问题：<ul><li>无法后悔：做错了一个操作后，没有后悔药可以吃；</li><li>版本备份：费空间、费时间；</li><li>版本混乱：因版本备份过多造成混乱，难于找回正确的想要的版本；</li><li>代码冲突：多人操作同一个文件 ( 团队开发中的常见问题 )；</li><li>权限控制：无法对源代码进行精确的权限控制；</li><li>追究责任：出现了严重的 BUG，无法得知是谁干的，容易耍赖.</li></ul></li></ul><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><ul><li>CVS：历史悠久，现在几乎没人使用。</li><li>SVN：<ul><li>集中式版本控制的代表；</li><li>CVS 的接班人，速度和功能比 CVS 有很大幅度提升.</li></ul></li><li>GIT：<ul><li>分布式源代码管理工具；</li><li>目前被大多数开源项目使用。</li></ul></li></ul><h2 id="概念概述"><a href="#概念概述" class="headerlink" title="概念概述"></a>概念概述</h2><ul><li>Subversion 的简称为 SVN，是一个开放源代码的版本控制系统；</li><li>SVN 用于多个人共同开发同一个项目，目的是为了资源共享共用；</li><li>SVN 服务器有 2 种 <code>运行方式</code>：独立服务器和借助 Apache。两种方式各有利弊，可自行选择。</li><li>SVN <code>存储版本数据</code> 也有 2 种方式：<code>Berkeley DB</code> ( 事务安全型表类型 ) 和 <code>FSFS</code> ( 不需要数据库的存储系统 )。因为 Berkeley DB 方式在服务器中断时，有可能锁住数据，故选择 FSFS 的存储方式会更安全一点。</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="SVN-服务器"><a href="#SVN-服务器" class="headerlink" title="SVN 服务器"></a>SVN 服务器</h3><ul><li><p>安装 SVN Server For Windows：<a href="https://www.visualsvn.com/server/download/" target="_blank" rel="noopener">VisualSVN Server</a> </p><p>  具体安装流程就不阐述了，可参考引用文章完成配置 $^{[1,2]}$。</p><blockquote><p>Tips.01. 安装过程中，其中 SVN 服务器端口配置推荐使用HTTPS 的 <code>8443</code> 端口，因为 HTTPS 安全性比較高，尽管 <code>443</code> 是标准 HTTPSport。<br>Tips.02. 还有就是用于验证的身份配置：Windows 验证和 Subversion 身份验证，默认是 Subversion 身份验证。</p></blockquote></li><li><p>安装 SVN Server For MacOS：自带了 SVN 的服务器端和客户端功能。参考引用文章完成配置即可 $^{[3,4]}$。</p></li></ul><h3 id="SVN-客户端"><a href="#SVN-客户端" class="headerlink" title="SVN 客户端"></a>SVN 客户端</h3><ul><li>Windows Client：<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">TortoiseSVN</a></li><li><p>MacOS Client：<a href="https://cornerstone.assembla.com/" target="_blank" rel="noopener">Cornerstone</a></p><blockquote><p>在 Mac 上可利用 SVN 图形界面工具来管理源代码，可以大大减小使用命令行的痛苦 $^{[5]}$。</p></blockquote></li></ul><h3 id="SVN-配置与使用"><a href="#SVN-配置与使用" class="headerlink" title="SVN 配置与使用"></a>SVN 配置与使用</h3><p>Windows 端配置和使用 SVN 可通过图形界面工具即可完成操作，详细的步骤在 [1]、[2] 中也有提及。<br>故在本章节主要讲述 Mac 环境下搭建和配置 SVN。</p><h4 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h4><ul><li>Step.01. 新建一个 <code>svn</code> 目录，例如 <code>/Users/kofe/svn</code>，以后可在 <code>svn</code> 目录下创建多个仓库目录。</li><li><p>Step.02. 打开终端，创建一个名为 <code>idea</code> 仓库，输入指令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指令执行成功后，会发现硬盘上多了个 /Users/kofe/svn/idea 目录</span></span><br><span class="line">svnadmin create /Users/apple/svn/idea</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h4><p>主要是修改 <code>/svn/idea/conf</code> 目录下的三个文件：<code>svnserve.conf</code>、<code>Passwd</code> 文件和 <code>Authz</code> 文件。</p><ul><li><p>svnserve.conf</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anon-access = read 代表匿名访问的时候是只读的</span></span><br><span class="line"><span class="comment"># anon-access = none 代表禁止匿名访问，需要帐号密码才能访问</span></span><br><span class="line">anon-access = <span class="built_in">read</span></span><br><span class="line">auth-access = write</span><br><span class="line">password-db = passwd</span><br><span class="line">authz-bd = authz</span><br></pre></td></tr></table></figure></li><li><p>Passwd 文件：在 <code>[users]</code> 下面添加账号和密码。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line"><span class="comment"># 格式：账号 = 密码</span></span><br><span class="line">kofe = 123456</span><br><span class="line">lucy = 123456</span><br></pre></td></tr></table></figure></li><li><p>Authz 文件：配置用户组和权限我们可以将在 Passwd 里添加的用户分配到不同的用户组里。以后就可对不同用户组设置不同的权限，没有必要对每个用户进行单独设置权限。即在 <code>[groups]</code> 下面添加组名和用户名，多个用户之间用逗号 <strong>,</strong> 隔开。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[groups] </span><br><span class="line">usergroup = kofe, lucy <span class="comment"># 格式：组名 = 用户1, 用户2, ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 [/] 代表 SVN 服务器中的所有资源库</span></span><br><span class="line"><span class="comment"># 某个组有读写权限</span></span><br><span class="line">[/]</span><br><span class="line">@usergroup = rw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 [/] 代表 SVN 服务器中的所有资源库</span></span><br><span class="line"><span class="comment"># 某个用户有读写权限</span></span><br><span class="line"><span class="comment"># lucy = rw</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="启动关闭服务"><a href="#启动关闭服务" class="headerlink" title="启动关闭服务"></a>启动关闭服务</h4><ul><li><p>在终端输入下列指令：若没有任何提示，恭喜你启动成功。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /Users/kofe/svn</span><br><span class="line"><span class="comment"># 或输入: svnserve -d -r /User/kofe/svn/idea</span></span><br></pre></td></tr></table></figure></li><li><p>当然，会启用也要会关闭 SVN 服务器，特别是首次配置完 SVN 服务器需要重启。<br>  Case.01. 在 <code>活动监视器</code> 中搜索 <code>svn</code>, 在列表中找到进程 <code>svnserve</code>, 点击左上角的<code>强制退出进程</code>。<br>  Case.02. 或者可通过 shell 脚本实现一键关闭。  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Current Process List:"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"= = = = = = = = = = ="</span></span><br><span class="line">ps -A | grep svn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"= = = = = = = = = = ="</span></span><br><span class="line"><span class="built_in">kill</span> `pgrep <span class="string">"svn"</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Kill successfully!"</span> Current Process Status:</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"= = = = = = = = = = = = = = = = = = = = = ="</span></span><br><span class="line">ps -A | grep svn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"= = = = = = = = = = = = = = = = = = = = = ="</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="代码版本控制"><a href="#代码版本控制" class="headerlink" title="代码版本控制"></a>代码版本控制</h4><blockquote><p>当然，充分利用 SVN 图形界面工具 ( <a href="https://cornerstone.assembla.com/" target="_blank" rel="noopener">Cornerstone</a> ) 来管理源代码，可大大减小使用命令行的痛苦，提升使用效率。</p></blockquote><ul><li><p>首次导入工程文件到 SVN 服务器：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /Users/kofe/procedure/idea/SSM_DEMO，指的是需要导入的工程文件</span></span><br><span class="line"><span class="comment"># svn://localhost/idea 指把工程文件上传到 idea 目录下</span></span><br><span class="line"><span class="comment"># --username=admin --password=123456 指的是校验用户名和密码</span></span><br><span class="line"><span class="comment"># -m "初始化导入" 指的是提交的信息注释</span></span><br><span class="line">svn import /Users/kofe/procedure/idea/SSM_DEMO svn://localhost/idea --username=kofe --password=123456 -m <span class="string">"初始化导入"</span></span><br></pre></td></tr></table></figure></li><li><p>从 SVN 服务器下载工程文件到本地 ( Checkout )：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn checkout svn://localhost/idea --username=kofe --password=123456 /Users/kofe/procedure/idea</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>二次提交代码到服务器：二次提交是有一个前提的, 那就是你首先需要在 SVN服务器上下载代码到本地，然后再去修改这一份代码, 才能够二次提交。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/kofe/procedure/idea</span><br><span class="line">svn commit -m <span class="string">"修改部分代码 (注释修改的内容)"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>SVN 基本操作原理：</p><ul><li><code>svn checkout</code>：将服务器代码完整下载到本地。</li><li><code>svn update</code>：将服务器最新的代码下载到本地。</li><li><p><code>svn commit</code>：将本地修改的内容提交到服务器。</p><p><img src="/images/illustration/Project/2018/08/building-a-svn-server_3-1.png" alt="图3-1SVN 基本操作原理"></p><center>图 3-1 SVN 基本操作原理</center></li></ul></li></ul><h4 id="代码版本冲突"><a href="#代码版本冲突" class="headerlink" title="代码版本冲突"></a>代码版本冲突</h4><ul><li><p>版本冲突原因：</p><p>  假设 A、B 两用户都在版本号为 100 时更新了 <code>sample.txt</code> 文件，A 用户在修改完成之后提交 sample.txt 到服务器，这个时候提交成功，这个时候 sample.txt 文件的版本号已经变成 101 了。同时 B 用户在版本号为 100 的 sample.txt 文件上作修改，修改完成之后提交到服务器时，由于不是在当前最新的 101 版本上作的修改，所以导致提交失败。</p></li><li><p>版本冲突现象：</p><p>  冲突发生时，SVN 会在当前工作目录中保存所有的目标文件版本 [ 上次更新版本、当前获取的版本 ( 即别人提交的版本 )、自己更新的版本、目标文件 ]。  假设文件名是 <code>sample.txt</code> ，对应的文件名分别是 ( 同时在目标文件中标记来自不同用户的更改 )：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sample.txt.r101</span><br><span class="line">sample.txt.r102</span><br><span class="line">sample.txt.mine</span><br><span class="line">sample.txt</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>手工合并</code> SVN 冲突 $^{[6]}$，开始的时候让人觉得害怕，但有规律可循。例如有以下文本：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Mayonnaise</span><br><span class="line">Lettuce</span><br><span class="line">Tomato</span><br><span class="line">Provolone</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;.mine</span><br><span class="line">Salami</span><br><span class="line">Mortadella</span><br><span class="line">Prosciutto</span><br><span class="line">=======</span><br><span class="line">Sauerkraut</span><br><span class="line">GrilledChicken</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;.r2</span><br></pre></td></tr></table></figure><p>  一连串的大于、小于、等于号是 SVN 冲突标记，这些数据得全部删除才可以提交。在 SVN 冲突区中，或许你需要和你的同事沟通来安排冲突区的文本内容，待所有冲突区得到合理的解决之后方可再提交文件。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是你在冲突区里面做的修改</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;.mine</span><br><span class="line">Salami</span><br><span class="line">Mortadella</span><br><span class="line">Prosciutto</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是别人在冲突区做的修改</span></span><br><span class="line">Sauerkraut</span><br><span class="line">GrilledChicken</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;.r2</span><br></pre></td></tr></table></figure></li></ul><ul><li>如何降低冲突解决的复杂度：<ul><li>在提交时写上明确的 Message ( 注释 )，方便以后查找用户更新的原因。</li><li>养成良好的使用习惯，使用 SVN 时每次都是先提交，后更新。每天 <code>早上</code> 打开后，首先要从版本库 <code>获取最新版本</code>，每天 <code>下班前</code> 必须将已经编辑过的文档都 <code>提交</code> 到版本库。</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://www.jianshu.com/p/96f2db36044b" target="_blank" rel="noopener">PhelanGeek. SVN 服务器搭建教程. jianshu.com. 2016</a><br>[2] <a href="https://juejin.im/post/5b0e50f5f265da08ec33b74e" target="_blank" rel="noopener">RealLiuNing. Windows 10 搭建独立 SVN 服务器. jianshu.com. 2018</a><br>[3] <a href="https://juejin.im/post/58209be1a0bb9f0058c08452" target="_blank" rel="noopener">CainLuo. 搭建 MacOS 本地 SVN 服务器. juejin.im. 2016</a><br>[4] <a href="https://www.jianshu.com/p/66f085556fb2" target="_blank" rel="noopener">Sunny Fight. iOS 版本控制 SVN (Mac 环境下 SVN 的使用). jianshu.com. 2016</a><br>[5] <a href="https://www.jianshu.com/p/650342b0a0ce" target="_blank" rel="noopener">天蓝. SVN 在 Mac 上使用 Xcode+Cornerstone. jianshu.com. 2017</a><br>[6] <a href="https://www.cnblogs.com/aaronLinux/p/5521844.html" target="_blank" rel="noopener">aaronGao. svn conflict 冲突解决. cnbologs.com. 2016</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有机会接触到公司的新项目，对于多人参与的项目，充分感受到 &lt;code&gt;源代码的版本控制&lt;/code&gt; 的重要性。为了深刻理解和复用起见，本文将从 &lt;code&gt;搭建&lt;/code&gt;、&lt;code&gt;配置&lt;/code&gt; 和 &lt;code&gt;使用&lt;/code&gt; 多方面总结 SVN。&lt;/p&gt;
&lt;p&gt;当然，版本控制的工具有很多，譬如 CVS、GIT、SVN，CVS 几乎淘汰；GIT 适合开源软件项目；SVN 适合企业内部由项目经理统一协调的多个并行项目的开发。选择哪款版本控制工具视具体情况而定。&lt;/p&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.kofes.cn/categories/Project/"/>
    
    
      <category term="svn" scheme="http://www.kofes.cn/tags/svn/"/>
    
      <category term="mac" scheme="http://www.kofes.cn/tags/mac/"/>
    
      <category term="git" scheme="http://www.kofes.cn/tags/git/"/>
    
      <category term="版本控制" scheme="http://www.kofes.cn/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>框架 - Java EE 之 SSM 框架配置与使用</title>
    <link href="http://www.kofes.cn/2018/08/J2EE-SSM-1.html"/>
    <id>http://www.kofes.cn/2018/08/J2EE-SSM-1.html</id>
    <published>2018-08-13T02:16:05.000Z</published>
    <updated>2018-08-26T14:20:00.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本文章主要围绕 J2EE 中 SSM ( Spring、Spring MVC、MyBatis ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。</p><h2 id="更新进度"><a href="#更新进度" class="headerlink" title="更新进度"></a>更新进度</h2><ul><li>2018.08.13：完成初稿，梳理 SSM 框架初识章节；</li><li>2018.08.20：框架内容，梳理 SSM 框架基本内容；</li><li>2018.08.24：框架内容，修正 SSM 框架部分内容；</li><li>2018.08.26：框架内容，整合 Spring 和 MyBatis；</li></ul><h2 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h2><ul><li><p><a href="https://www.bilibili.com/video/av20394903" target="_blank" rel="noopener">黑马程序员. J2EE 进阶. MyBatis 框架由浅入深. 2017. bilibili.com</a></p><blockquote><p>本框架的学习笔记是基于此系列教学视频所得的。</p></blockquote></li></ul><a id="more"></a><h2 id="IDE-搭建"><a href="#IDE-搭建" class="headerlink" title="IDE 搭建"></a>IDE 搭建</h2><p>IDE 搭建以 <a href="https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html#IDE-搭建">Java EE 之 SSH 框架配置与使用</a> 为参考。</p><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>框架版本：<ul><li>Spring MVC：4.3.x</li><li>Spring：4.3.x</li><li>MyBatis：3.4.x</li></ul></li><li>其他组件：<ul><li>MySQL：5.7.x / SQL Server：2008 R2</li><li>Tomcat：9.0.x</li><li>Maven：3.3.9</li><li>JDK：1.8</li></ul></li><li>构建框架，还需要相关依赖库 ( Jar 包 )，为便于你下载 Jar 包或校对依赖是否齐全，具体地，以下列举了 SSM 框架所需要的依赖库。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">Spring</th><th style="text-align:left">MyBatis</th></tr></thead><tbody><tr><td style="text-align:left">spring-core</td><td style="text-align:left">mybatis</td></tr><tr><td style="text-align:left">spring-beans</td><td style="text-align:left">mybatis-spring ( Spring 整合 Mybatis )</td></tr><tr><td style="text-align:left">spring-context</td><td style="text-align:left">pagehelper ( 分页助手 )</td></tr><tr><td style="text-align:left">spring-webmvc</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-web</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-aop ( 整合 Aop )</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">aopalliance ( 整合 Aop )</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-aspect ( 整合 Aop )</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">aspectjweaver ( 整合 Aop )</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-tx ( 整合事务 )</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-jdbc</td><td style="text-align:left">&nbsp;</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">其他依赖库 ( Jar 包 )</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">log4j</td><td style="text-align:left">日志支持</td></tr><tr><td style="text-align:left">log4j-core、log4j-api</td><td style="text-align:left">日志支持</td></tr><tr><td style="text-align:left">slf4j-api、slf4j-log4j12</td><td style="text-align:left">日志支持</td></tr><tr><td style="text-align:left">junit</td><td style="text-align:left">Junit 单元测试</td></tr><tr><td style="text-align:left">c3p0</td><td style="text-align:left">c3p0 数据库连接池</td></tr><tr><td style="text-align:left">mysql-connector-java</td><td style="text-align:left">添加 MySQL 数据库支持</td></tr><tr><td style="text-align:left">jackson-databind</td><td style="text-align:left">Json 数据转化为类对象</td></tr><tr><td style="text-align:left">jsp-api</td><td style="text-align:left">JSP</td></tr><tr><td style="text-align:left">javax.servlet-api</td><td style="text-align:left">Servlet</td></tr><tr><td style="text-align:left">jstl</td><td style="text-align:left">JSTL 标签库</td></tr><tr><td style="text-align:left">taglibs-standard-impl</td><td style="text-align:left">JSP 标准标签库</td></tr></tbody></table></div><h2 id="框架初识"><a href="#框架初识" class="headerlink" title="框架初识"></a>框架初识</h2><ul><li><p>SSM 框架集由 Spring、SpringMVC、MyBatis 三个开源框架整合而成，是继 SSH (Spring、Struts2、Hibernate ) 之后，目前比较主流的 Java EE 企业级框架，适用于搭建各种大型的企业级应用系统。 </p><blockquote><p>SSM 与 SSH 都有各自的优缺点，而根据你的项目特点而选择合适的框架即可。关于 SSH 框架的配置与使用，感兴趣的可参考本博客的文章：<a href="https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html">Java EE 之 SSH 框架配置与使用</a></p></blockquote></li></ul><h3 id="ORM-框架"><a href="#ORM-框架" class="headerlink" title="ORM 框架"></a>ORM 框架</h3><ul><li>对象关系映射（Object Relational Mapping，O/R Mapping，ORM）是通过使用描述对象和数据库之间映射的 <code>元数据</code>，将面向对象语言程序中的 <code>对象</code> 自动 <code>持久化</code> 到 <code>关系数据库</code> 中。本质上就是将数据从一种形式转换到另外一种形式。 </li><li>让 <code>实体类</code> 和 <code>数据库表</code> 进行一一对应关系 (映射关系)，<code>实体类属性</code> 和 <code>表里面的字段</code> 对应。操作表对应实体类对象，而不需操作数据库表。</li></ul><h3 id="SSM-框架"><a href="#SSM-框架" class="headerlink" title="SSM 框架"></a>SSM 框架</h3><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><h5 id="原生-Jdbc-操作数据库"><a href="#原生-Jdbc-操作数据库" class="headerlink" title="原生 Jdbc 操作数据库"></a>原生 Jdbc 操作数据库</h5><p>在引入 MyBatis ( 或 Hibernate ) 前，一般通过原生 Jdbc 来操作数据库，而这种方式存在很多问题 $^{[2]}$：</p><ul><li><p>程序创建数据库连接，即需求时创建，用完后关闭。若频繁的创建、关闭数据库连接，显然存在问题。 ( 可以通过数据库连接池来处理这个问题 )</p></li><li><p>硬编码的地方太多了。例如，数据库连接相关信息，SQL相关信息等。( 可通过使用 XML 配置文件，来避免这个问题 )</p></li><li><p>实质上，我们编写JDBC是有步骤可循的，即先得到数据库连接对象，传入SQL、输入参数、设置参数，再去执行SQL，然后遍历结果集将数据库 SQL 执行的结果对象转化为 JAVA 对象，然后再去业务处理，最后释放资源。</p><p>  那么这个过程，实际上是个 <code>模板方法</code>，能不能抽离出来，更好的去完成这个过程呢？</p></li></ul><h5 id="框架比较"><a href="#框架比较" class="headerlink" title="框架比较"></a>框架比较</h5><ul><li>Hibernate<ul><li>优点：<br>1) Hibernate 这个纯粹的 ORM 框架，以面向对象的方式来完成数据库的操作。<br>2) Hibernate 不需要编写 SQL 即可完全映射，且可通过 HQL (Hibernate Query Language) 语言对 POJO 操作。<br>3) Hibernate 提供了日志、缓存、级联等特性。  </li><li>缺点：<br>1) Hibernate 可自由编写 SQL，但非常繁琐，则优化 SQL 实现高性能数据库操作有限制，在互联网项目快速迭代开发中显得过于笨重。<br>2) Hibernate 的 <code>级联会造成太多性能的丢失</code>。<br>3) Hibernate 不支持存储过程。</li></ul></li><li>MyBatis<ul><li>优点：自由书写 SQL、支持动态 SQL、处理列表、动态生成表名、支持存储过程。</li><li>缺点：需要编写 SQL 和映射规则，工作量相对较大。</li></ul></li></ul><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ul><li><p>MyBatis 前身是 Apache 的开源项目 <code>iBatis</code>，<code>iBatis</code> 一词源于 internet 和 abatis 的组合，是一个基于 Java 的持久层框架。</p></li><li><p>MyBatis 是一款持久层框架，它支持定制化 SQL (不屏蔽 SQL)、存储过程以及高级映射。</p></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li><p>MyBatis 可使用 XML配置文件形式或注解形式来配置和映射原生信息，将接口和 POJOs ( Plain Ordinary Java Object，普通 Java 对象 / 实体类 ) 映射成数据库中的记录。</p><blockquote><p>我们把 POJO 对象和数据库表相互映射的框架称为对象关系映射框架 ( Object Relational )。</p></blockquote></li></ul><h5 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h5><p><img src="/images/illustration/Project/2018/08/J2EE-SSM-1_6-1.png" alt="图6-1SSM架构原理图"></p><center>图 6-1 SSM架构原理图</center><ul><li><p><code>SqlMapConfig.xml</code>：MyBatis 全局配置文件，配置数据源、事务等运行环境相关信息；SQL文件即是 <code>Mapper.xml</code>。</p></li><li><p><code>SqlSessionFactory</code>：会话工厂，用于创建 SqlSession。</p></li><li><p><code>SqlSession</code>：即操作数据库的接口，其内部借助 <code>Executor</code> 执行器完成对数据库的操作。</p></li><li><p><code>MappedStatement</code>：底层封装对象，对操作数据库储存封装，其中包括 SQL 语句 ( Mapper.xml )、输入对象和输出结果类型。</p></li></ul><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><ul><li><p>全局配置文件：在 Src 根目录下建立并配置 <code>SqlMapConfig.xml</code>  </p><p>  与 Spring 整合 Hibernate 一样，后期 Spring 整合 MyBatis 后此配置文件可省略。当然，学习阶段代码还是得提供。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Java 的配置文件或者声明属性信息 ( 详细见本项目源码 ) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"c3p0.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局参数配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;settings&gt;&lt;/settings&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单个别名定义</span></span><br><span class="line"><span class="comment">        &lt;typeAlias type="cn.kofes.ssm.pojo.Sample" alias="Sample"/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 批量别名定义 ( 推荐 )</span></span><br><span class="line"><span class="comment">         | package：指定包名称来为该包下的 pojo 类声明别名，默认的别名就是类名 ( 首字母大小写都可 )</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.kofes.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 MyBatis 的环境信息，与 Spring 整合，该信息由spring来管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置 Jdbc 事务控制，由 MyBatis 进行管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源，采用 MyBatis 连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.user&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单个映射文件添加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/SampleMapper.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 批量加载映射文件：mapper.java 与 mapper.xml 同名，且在同一目录下</span></span><br><span class="line"><span class="comment">        &lt;package name="cn.kofes.ssm.mapper" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Mapper 映射文件：例如 <code>SampleMapper.xml</code></p><ul><li><p>创建实体类对象 ( POJOs )：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cn.kofes.pojo.Sample.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件中配置 SQL 语句，如建立 <code>SampleMapper.xml</code> ( 便于管理，把映射文件统一放置 mapper 文件夹下 )：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapper/SampleMapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace 用于绑定 Mapper 代理开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.kofes.mapper.SampleMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 配置 SQL 语句：例如查找某一元组</span></span><br><span class="line"><span class="comment">     | - id 属性：唯一标识映射文件中的 SQL</span></span><br><span class="line"><span class="comment">     | - parameterType 属性：指定输入参数的类型</span></span><br><span class="line"><span class="comment">     | - resultType 属性：指定输出参数的类型</span></span><br><span class="line"><span class="comment">     |   SQL 语句会封装到 MappedStatement 对象中，故 ID 又称为 Statement 的 ID</span></span><br><span class="line"><span class="comment">     | - #&#123;&#125;：表示一个占位符号</span></span><br><span class="line"><span class="comment">     | - #&#123;id&#125;：id 表示接收输入的参数，参数名称就是 id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCertianTupleById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.kofes.bean.Sample"</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_sample WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 插入元组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertOneTuple"</span> <span class="attr">parameterType</span>=<span class="string">"cn.kofes.pojo.Sample"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于自增 ID 的情况，在完成插入后将 ID 返回 user 对象中</span></span><br><span class="line"><span class="comment">        &lt;selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer"&gt;</span></span><br><span class="line"><span class="comment">            SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 用于非自增 ID 的情况，先产生 ID 放入 user 对象中，再执行保存</span></span><br><span class="line"><span class="comment">        &lt;selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"&gt;</span></span><br><span class="line"><span class="comment">            SELECT UUID()</span></span><br><span class="line"><span class="comment">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">        INSERT INTO t_sample (id, name) VALUES (#&#123;id&#125;, #&#123;name&#125;)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        INSERT TO t_sample(id, name) value(#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 删除一条元组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOneTupleById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        DELETE FROM t_sample WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新一条元组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOneTupleById"</span> <span class="attr">parameterType</span>=<span class="string">"cn.kofes.pojo.Sample"</span>&gt;</span></span><br><span class="line">        UPDATE t_sample SET id = #&#123;id&#125;, name = #&#123;name&#125;</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h5><ul><li><p>单独使用 MyBatis 框架，根据 id 查询指定用户：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 便于检验效果，这里以单元测试类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBOperatorTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoSomethingInDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载 MyBatis 配置文件</span></span><br><span class="line">        String resource  = <span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        <span class="comment">// 得到配置文件流</span></span><br><span class="line">        InputStream inputStream = Resource.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">// 创建会话工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder()</span><br><span class="line">            .build(inputStream);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 通过会话工厂，得到 SqlSession 对象</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过 SqlSession 操作数据库</span></span><br><span class="line">        <span class="comment">// 第一个参数：namespace + statement id</span></span><br><span class="line">        <span class="comment">// 第二个参数：指定和映射文件中所匹配的 parameterType 相同属性类型的参数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 根据 ID 查询元组</span></span><br><span class="line"><span class="comment">        Sample sample = sqlSession.selectOne(</span></span><br><span class="line"><span class="comment">            "cn.kofes.mapper.SampleMapper.findCertainTupleById", 1);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 插入一条元组</span></span><br><span class="line"><span class="comment">        Sample sample = new Sample();</span></span><br><span class="line"><span class="comment">        sample.setName("邯郸");</span></span><br><span class="line"><span class="comment">        sqlSession.insert(</span></span><br><span class="line"><span class="comment">            "cn.kofes.mapper.SampleMapper.insertOneTuple", sample);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 根据 ID 修改元组</span></span><br><span class="line"><span class="comment">        Sample sample = new Sample();</span></span><br><span class="line"><span class="comment">        sample.setId(14);</span></span><br><span class="line"><span class="comment">        sample.setName("阿斗");</span></span><br><span class="line"><span class="comment">        sqlSession.update(</span></span><br><span class="line"><span class="comment">            "cn.kofes.mapper.SampleMapper.updateOneTupleById", sample);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>案例总结：</p><ul><li><code>namespace</code>：命名空间，作用是隔离 SQL。在 MyBatis 和 Spring 结合使用时具有特殊的意义，这里暂且使用全限定类名。</li><li><code>&lt;select&gt;</code> 等 SQL Command 标签需要一个 ID，还需要输入参数 parameterType，输出参数映射 resultType 等。在 MyBatis 底层封装成了一个 MappedStatement 对象，使用时以 <code>namespace.id</code> 的方式引用即可。</li><li><code>#{}</code> 和 <code>${}</code>：<ul><li><code>#{}</code>：表示一个占位符号，用于接收输入参数，类型可以是简单类型，也可是 POJO、HashMap 等。( 通过 <code>OGNL 表达式</code> 读取对象的属性值 )</li><li><code>${}</code>：表示一个拼接符号，会引入 <code>SQL注入</code>，故不建议使用。</li></ul></li></ul></li><li><p>思考问题：</p><ul><li>我们重点关注的是 SqlSession，它其实是一个 interface，定义了很多操作数据库的接口，其中实现了 Closeable 接口，很明确是使用完毕后需要 <code>close()</code> 的。  </li><li>它的实现类 DefaultSqlSession 中有一些数据域，比如说 autoCommit，在默认情况下是不开启自动提交的；且方法也并不是 Synchronized 的，这说明 SqlSession 并不是线程安全的，因此我们应该是局部使用 SqlSession，且在使用完毕后 <code>close()</code> 关闭 sqlSession。</li></ul></li></ul><h5 id="MyBatis-原始方法"><a href="#MyBatis-原始方法" class="headerlink" title="MyBatis 原始方法"></a><del>MyBatis 原始方法</del></h5><blockquote><p>这种方式，重复的代码太多，现阶段基本弃用，目前使用最多的就是 Mapper 代理开发。</p></blockquote><ul><li>在开始 Mapper 代理开发前，可了解一种 MyBatis 的原始 Dao 开发方法：<ul><li>Step.01.提供 Dao 接口，有增、删、改、查的方法。</li><li>Step.02.提供 Dao 的实现类，在实现类中利用 Spring 注入 SqlSessionFactory，然后在各个方法中得到 SqlSession，进行操作后，关闭 SqlSession 即可。</li></ul></li><li><p>便于理解，放上实现代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DAO 层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOneTuple</span><span class="params">(User user)</span> throw Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOneTupleById</span><span class="params">(<span class="keyword">int</span> id)</span>  throw Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTupleById</span><span class="params">(User user)</span>  throw Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findCertainById</span><span class="params">(<span class="keyword">int</span> id)</span> throw Exception</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DAO 层实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleDaoImpl</span> <span class="keyword">implements</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span></span><br><span class="line"><span class="function">        throw Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findCertainById</span><span class="params">(<span class="keyword">int</span> id)</span> throw Exception </span>&#123; </span><br><span class="line">        <span class="comment">// 省略实现逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOneTupleById</span><span class="params">(<span class="keyword">int</span> id)</span>  throw Exception </span>&#123; </span><br><span class="line">        <span class="comment">// 省略实现逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTupleById</span><span class="params">(User user)</span>  throw Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 省略实现逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findCertainById</span><span class="params">(<span class="keyword">int</span> id)</span> throw Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 省略实现逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStream inputStream = </span><br><span class="line">            Resource.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = </span><br><span class="line">            <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCertainById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BaseDao sampleDao = <span class="keyword">new</span> SampleDaoImpl(sqlSessionFactory);</span><br><span class="line">        User user = sampleDao.findCertainById(<span class="number">5</span>);</span><br><span class="line">        System.out.println( user.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Mapper-代理开发"><a href="#Mapper-代理开发" class="headerlink" title="Mapper 代理开发"></a>Mapper 代理开发</h5><ul><li><p>Mapper 映射文件：上一节配置的映射文件 <code>SampleMapper.xml</code></p></li><li><p>Mapper 接口：</p><ul><li>在 SampleMapper.xml 中 namespace 等于 Mapper 的接口地址 ( <code>全路径地址</code> )；</li><li>在 Mapper 接口中的 <code>方法名</code> 和 SampleMapper.xml 中 Statement 的 <code>ID</code> 名称一致；</li><li>在 Mapper 接口中的方法 <code>输入参数类型</code> 和 SampleMapper.xml 中 Statement 的 <code>parameterType</code> 指定的类型一致。</li><li>在 Mapper 接口中的 <code>方法返回值类型</code> 和 SampleMapper.xml 中 Statement 的 <code>resultType</code> 指定的类型一致。</li></ul></li><li><p>关于规范的启示：故我们进行 Mapper 的开发应该遵循一些规范，这样 MyBatis 方可自动生成 <code>XXXMapper</code> 类的代理实现类。</p><ul><li>保证 XXXMapper.xml 中的 <code>namespace</code> 同 XXXMapper.java 的 <code>全限定名称</code> 一致；</li><li>保证 XXXMapper.xml 中的 <code>Statement ID</code> 同 XXXMapper.java 的 <code>方法名称</code> 一致；</li><li><p>保证 XXXMapper.xml 中的 Statement 的输入参数的类型 ( <code>parameterType</code> )、输出参数的类型 ( <code>resultType</code> ) 同 <code>XXXMapper.java</code> 的保持一致.</p><p><img src="/images/illustration/Project/2018/08/J2EE-SSM-1_6-2.png" alt="图6-2Mapper代理开发规范"></p><center>图6-2 Mapper 代理开发规范</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOneTuple</span><span class="params">(Sample sample)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOneTupleById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTupleById</span><span class="params">(Sample sample)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sample <span class="title">findCertainTupleById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 加载 MyBatis 配置文件，得到配置文件流</span></span><br><span class="line">        InputStream inputStream =</span><br><span class="line">            Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 创建会话工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory =</span><br><span class="line">            <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">// 通过会话工厂，得到 SqlSession 对象</span></span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCertainTupleById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SampleMapper sampleMapper = sqlSession.getMapper(SampleMapper.class);</span><br><span class="line">        System.out.println( sampleMapper.findCertainTupleById(<span class="number">15</span>).toString() );</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>当然不要忘记在全局配置文件 <code>SqlMapConfig.xml</code> 中加载映射文件 ( 参考上述配置文件 )。</p></li></ul><h5 id="POJO-包装类型查询"><a href="#POJO-包装类型查询" class="headerlink" title="POJO 包装类型查询"></a>POJO 包装类型查询</h5><h6 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h6><ul><li><p>输入映射：通过 parameterType 指定输入参数的类型，类型可以是 <code>简单类型</code>，也可以是  <code>POJO</code>、<code>HashMap</code> 类型。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义包装类型 POJO：自定义所需要的查询条件，实现多表查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POJOCollection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为更加形象、理解，这里引入用户和部门的实体类</span></span><br><span class="line"><span class="comment">     * 一个用户对应一个部门，一个部门包含多个用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> User user; <span class="comment">// User 实体类</span></span><br><span class="line">    <span class="keyword">private</span> Department department; <span class="comment">// Department 实体类</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">POJOCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        user = <span class="keyword">new</span> User();</span><br><span class="line">        department = <span class="keyword">new</span> Department();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Setter 和 Getter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123; <span class="keyword">this</span>.user = user; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> user; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartment</span><span class="params">(Department department)</span> </span>&#123; <span class="keyword">this</span>.department = department; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> department; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件 <code>SampleMapper.xml</code> 中配置 SQL 语句：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  自定义所需要的查询条件，实现多表查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPOJOList"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">parameterType</span>=<span class="string">"cn.kofes.ssm.pojo.POJOCollection"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultType</span>=<span class="string">"cn.kofes.ssm.pojo.User"</span>&gt;</span></span><br><span class="line">    SELECT * FROM t_user as u, t_department as d</span><br><span class="line">    WHERE u.uid = #&#123;user.uid&#125; and d.depart_id = #&#123;department.depart_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mapper 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sample&gt; <span class="title">findPOJOList</span><span class="params">(POJOCollection pojoCollection)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindPOJOList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mapper 接口代理</span></span><br><span class="line">        SampleMapper sampleMapper =</span><br><span class="line">            sqlSession.getMapper(SampleMapper.class);</span><br><span class="line"></span><br><span class="line">        POJOCollection pojoCollection = <span class="keyword">new</span> POJOCollection();</span><br><span class="line">        pojoCollection.getUser().setUid(<span class="number">50</span>);</span><br><span class="line">        pojoCollection.getDepartment().setDepart_id(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list =</span><br><span class="line">            sampleMapper.findPOJOList(pojoCollection);</span><br><span class="line">        System.out.println( list.get(<span class="number">0</span>).toString() );</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h6><ul><li><p>输出映射：使用 resultType 进行输出映射，查询列名和 POJO 中的属性名一致，该列才会成功映射。</p><blockquote><p>若查询出来的列名 ( 通过 AS 自定义的列名 ) 和 POJO 的属性名不一致，通过定义一个 resultMap 对列名和属性名之间作一个映射关系。</p></blockquote></li><li><p>定义 resultMap：在映射文件 <code>SampleMapper.xml</code> 中定义；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | id：resultMap 唯一标识</span></span><br><span class="line"><span class="comment"> | type：</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"sampleResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.kofes.ssm.pojo.Sample"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | id 表示查询结果集中的唯一标识</span></span><br><span class="line"><span class="comment">     | colum：查询出来的列名 ( AS 自定义列名 )</span></span><br><span class="line"><span class="comment">     | property：type 指定的 POJO 类型中的属性名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id_"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | result 对非 ID 的属性进行映射定义</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name_"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 resultMap 作为 Statement 的输出映射类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listCustomView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"sampleResultMap"</span>&gt;</span></span><br><span class="line">    SELECT id as id_, name as name_</span><br><span class="line">    FROM t_sample</span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mapper 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mapper 接口：cn.kofes.ssm.mapper.SampleMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sample <span class="title">listCustomView</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListCustomView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mapper 接口代理</span></span><br><span class="line">        SampleMapper sampleMapper = </span><br><span class="line">            sqlSession.getMapper(SampleMapper.class);</span><br><span class="line">           </span><br><span class="line">        System.out.println( sampleMapper.listCustomView(<span class="number">15</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="映射对比"><a href="#映射对比" class="headerlink" title="映射对比"></a>映射对比</h6><ul><li><code>resultType</code> 查询出来的列名 ( 通过 AS 自定义的列名 ) 和 POJO 的属性名需一致，该列才会成功映射。<br>  <code>resultMap</code> 可根据查询出来的列名指定 POJO 类型中的应的属性名。</li><li><code>resultType</code> 返回的是 User 对象，适应较简单的输出结果映射，MyBatis 其实还提供了<code>resultMap</code> 作为复杂输出结果映射。在 <a href="#高级映射">高级映射</a> 章节将对比阐述。</li></ul><h5 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h5><p>MyBatis 核心是对 SQL 语句进行灵活操作，通过表达式进行判断，对 SQL 进行灵活拼接、组装。</p><ul><li>SQL 语句 <code>拼接</code>，例如 <code>&lt;where&gt;</code> 和 <code>&lt;if&gt;</code> 标签的组合使用；</li><li>SLQ 语句 <code>抽离</code>，例如 <code>&lt;sql&gt;</code> 和 <code>&lt;include&gt;</code> 标签的组合使用； </li><li><p>Foreach：向 SQL 传递数组或 List 集合，MyBatis 使用 <code>&lt;foreach&gt;</code> 标签解析。例如，我们需要查询多个 ID 值；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将通用的 SQL 语句抽离，例如：属性名、表名等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"t_sample"</span>&gt;</span>t_sample<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPOJOList"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">parameterType</span>=<span class="string">"cn.kofes.ssm.pojo.POJOCollection"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultType</span>=<span class="string">"cn.kofes.ssm.pojo.Sample"</span>&gt;</span></span><br><span class="line">    SELECT * FROM <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"t_sample"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 自动去掉条件中第一个 AND 或者 OR  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Case.01.注意下面这种写法只适用于 id 类型为 String  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">" sample.id != null and sample.id != '' "</span>&gt;</span></span><br><span class="line">            AND sample.id = #&#123;sample.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">" other.id != null and other.id  != '' "</span>&gt;</span></span><br><span class="line">            AND other.id = #&#123;other.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!-- Case.02.若 id 类型为 Integer 需要以下写法 </span></span><br><span class="line"><span class="comment">        &lt;if test="_parameter!=null and _parameter &gt; 0"&gt;</span></span><br><span class="line"><span class="comment">            AND id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- Case.03.查询多个 ID 值 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--  拼接效果：AND(id = ? OR id = ? OR id = ?) </span></span><br><span class="line"><span class="comment">        &lt;if test="ids != null"&gt;</span></span><br><span class="line"><span class="comment">            &lt;foreach collection="ids" item="id" </span></span><br><span class="line"><span class="comment">                open="AND (" close=")" separator="OR"&gt;</span></span><br><span class="line"><span class="comment">                id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">            &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--  拼接效果：IN(1, 3, 5)</span></span><br><span class="line"><span class="comment">        &lt;if test="ids != null"&gt;</span></span><br><span class="line"><span class="comment">            &lt;foreach collection="ids" item="id" </span></span><br><span class="line"><span class="comment">                open="IN (" close=")" separator=","&gt;</span></span><br><span class="line"><span class="comment">                id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">            &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">        &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="高级映射"><a href="#高级映射" class="headerlink" title="高级映射"></a>高级映射</h5><p>为便于后续章节的学习，这里以用户表、商品表、订单表和订单明细表的实例来阐述问题：</p><p><img src="/images/illustration/Project/2018/08/J2EE-SSM-1_6-3.png" alt="图6-3用户购物清单ER图"></p><center>图 6-3 用户购物清单 ER 图</center><ul><li>用户表 ( User )：购买商品的用户信息；</li><li>商品表 ( Item )：商品的明细信息；</li><li>订单表 ( Order )：用户所创建的订单；</li><li><p>订单明细表 ( OrderDetail )：每一张订单记录购买的商品信息；</p><blockquote><p>为便于理解，数据表与 POJO ( 实体类 ) 的名称统一命名为相同名称。</p></blockquote></li></ul><h6 id="一对一映射"><a href="#一对一映射" class="headerlink" title="一对一映射"></a>一对一映射</h6><p>便于理解，我们可以确立一需求：查询订单表，关联查询 <code>创建订单的用户信息</code>。</p><p>User 和 Order 的关联查询，关键是查询出来的结果如何映射？是用 resultType，还是用 resultMap？</p><p>1) <code>resultType</code>  </p><p>显然我们的实体类 ( User 仅仅包含用户信息，Order 仅仅包含订单信息，Order 中没有 User 的引用 ) 并不能接受关联查询的结果集，那么我们可以考虑使用 OrderVoUser 映射类，即让它 <code>extends Orders</code>，然后在加上一些 User 的属性作为输出结果类型。</p><blockquote><p>OrdersVoUser 映射类的创建原理与上述的 POJOCollection 映射类一样。</p></blockquote><p>2) <code>resultMap</code>  </p><p>可满足复杂输出结果映射，例如数据库字段名称与查询的字段名称 ( 或通过 AS 声明了别名 ) 不一致的映射；延迟加载；一对一，一对多，多对多等高级映射特性。</p><blockquote><p>这里引用实例说明，即使用 resultMap 将查询结果中的订单信息映射到 Other 对象中，在 Order 类中添加 User 属性，将关联查询出来的用户信息映射到 Other 对象中的 User 属性中。 </p></blockquote><ul><li><p>配置映射文件 Mapper.xml </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 订单查询映关联查询用户信息的 resultMap  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrderUserResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.kofes.ssm.pojo.Order"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 配置映射的订单信息</span></span><br><span class="line"><span class="comment">     | colum：订单信息的列名</span></span><br><span class="line"><span class="comment">     | property：订单信息的列名所映射到 POJO 中的属性名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"order_id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 配置映射的关联用户信息</span></span><br><span class="line"><span class="comment">     | association 标签中 javaType 必须要明确指明类型</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.kofes.ssh.pojo.User"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SQL 语句：查询订单表，关联查询创建订单的用户信息  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderUserResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"OrderUserResultMap"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        u.uid, u,username, u.age, u.phone, </span><br><span class="line">        o.order_id</span><br><span class="line">    FROM</span><br><span class="line">        Order AS o, User AS u</span><br><span class="line">    WHERE</span><br><span class="line">        o.id = u.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Mapper 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SampleMapper 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrderUserResultMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrderUserResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mapper 接口代理</span></span><br><span class="line">        SampleMapper sampleMapper = </span><br><span class="line">            sqlSession.getMapper(SampleMapper.class);</span><br><span class="line">           </span><br><span class="line">        List&lt;Order&gt; list = sampleMapper.findOrderUserResultMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h6><p>确立一需求：查询订单及订单明细的信息。</p><ul><li><p>实体类配置</p><blockquote><p>为了满足二级缓存需求，所有实体类实现 <code>Serializablle</code> 接口，实现序列化。</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer order_id;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 把订单所对应的订单明细映射到 orderDetail 属性中</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetail;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDetail</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer orderdetail_id;</span><br><span class="line">    <span class="keyword">private</span> Integer item_id;</span><br><span class="line">    <span class="keyword">private</span> Integer order_id;</span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer item_id;</span><br><span class="line">    <span class="keyword">private</span> String itemname;</span><br><span class="line">    <span class="keyword">private</span> String itemprice;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置映射文件 Mapper.xml </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询订单及关联查询订单明细的 resultMap  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"OrderAndOrderDetailResultMap"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"cn.kofes.ssm.pojo.Order"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">extend</span>=<span class="string">"OrderUserResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置映射的订单信息 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 配置映射的用户信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过继承免去重复配置：extend="Objective ResultMap ID" --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 配置映射的订单明细信息：使用 Collection 对关联查询的多条记录</span></span><br><span class="line"><span class="comment">     | 映射到一个 List 集合属性中</span></span><br><span class="line"><span class="comment">     | ofType：指定映射到集合属性中 POJO 的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderDetail"</span> <span class="attr">ofType</span>=<span class="string">"cn.kofe.ssm.pojo.OrderDetail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"item_id"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"amount"</span> <span class="attr">property</span>=<span class="string">"amount"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SQL：查询订单及订单明细的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"findOrderAndOrderDetailResultMap"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultMap</span>=<span class="string">"OrderAndOrderDetailResultMap"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        o.order_id, o.createtime, </span><br><span class="line">        od.item_id, od.amount,</span><br><span class="line">        i.itemname</span><br><span class="line">    FROM</span><br><span class="line">        Order AS o, Item AS i, OrderDetail As od</span><br><span class="line">    WHERE </span><br><span class="line">        od.order_id = o.order_id AND </span><br><span class="line">        od.item_id = i.item_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Mapper 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SampleMapper 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findOrderAndOrderDetailResultMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrderAndOrderDetailResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mapper 接口代理</span></span><br><span class="line">        SampleMapper sampleMapper = </span><br><span class="line">            sqlSession.getMapper(SampleMapper.class);</span><br><span class="line">           </span><br><span class="line">        List&lt;Order&gt; list = sampleMapper.findOrderAndOrderDetailResultMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="多对多映射"><a href="#多对多映射" class="headerlink" title="多对多映射"></a>多对多映射</h6><p>确立一需求：查询用户及用户购买的商品信息。</p><p>在多对多映射中，具体的映射思路是：<br>1) 在 User 实体类中添加订单列表属性 <code>List&lt;Order&gt; orderList</code>，将用户创建的订单映射到 orderList。<br>2) 在 Order 实体类中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetail</code>，将订单的明细映射到 orderDetail。<br>3) 在 OrderDetail 实体类中添加 <code>Item</code> 属性，将订单明细所对应的商品映射到 item。  </p><ul><li><p>实体类配置</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将用户创建的订单映射到 orderList</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer order_id;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将订单所对应的订单明细映射到 orderDetail 属性中</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetail;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDetail</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer orderdetail_id;</span><br><span class="line">    <span class="keyword">private</span> Integer item_id;</span><br><span class="line">    <span class="keyword">private</span> Integer order_id;</span><br><span class="line">    <span class="keyword">private</span> Integer amount;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Item item;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer item_id;</span><br><span class="line">    <span class="keyword">private</span> String itemname;</span><br><span class="line">    <span class="keyword">private</span> String itemprice;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Getter 和 Setter 方法要实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置映射文件 Mapper.xml </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询用户及关联查询用户购买的商品信息的 resultMap  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"UserAndItemResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.kofes.ssm.pojo.User"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 配置映射的订单信息：使用 Collection 对关联查询的多条记录</span></span><br><span class="line"><span class="comment">     | 映射到一个 List 集合属性中</span></span><br><span class="line"><span class="comment">     | ofType：指定映射到集合属性中 POJO 的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"cn.kofe.ssm.pojo.Order"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"order_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 配置映射的订单明细信息：一个订单包含多个订单明细 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderDetail"</span> <span class="attr">ofType</span>=<span class="string">"cn.kofe.ssm.pojo.OrderDetail"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"item_id"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"amount"</span> <span class="attr">property</span>=<span class="string">"amount"</span> /&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 配置映射的商品信息：一个订单明细对应一个商品 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"item"</span> <span class="attr">javaType</span>=<span class="string">"cn.kofes.ssm.pojo.Item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"item_id"</span> <span class="attr">property</span>=<span class="string">"item_id"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"itemname"</span> <span class="attr">property</span>=<span class="string">"itemname"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"itemprice"</span> <span class="attr">property</span>=<span class="string">"itemprice"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- SQL：查询用户信息和用户购买过的商品信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserAndItemResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"UserAndItemResultMap"</span>&gt;</span></span><br><span class="line">    SELECT </span><br><span class="line">        u.uid, u.username, </span><br><span class="line">        o.order_id,</span><br><span class="line">        od.item_id, od.amount</span><br><span class="line">        i.itemname, i.itemprice</span><br><span class="line">    FROM</span><br><span class="line">        Order AS o, User AS u, Item AS i, OrderDetail As od</span><br><span class="line">    WHERE</span><br><span class="line">        o.user_id = u.uid AND</span><br><span class="line">        od.order_id = o.order_id AND</span><br><span class="line">        od.item_id = i.item_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Mapper 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SampleMapper 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserAndItemResultMap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span>  SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserAndItemResultMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mapper 接口代理</span></span><br><span class="line">        SampleMapper sampleMapper = </span><br><span class="line">            sqlSession.getMapper(SampleMapper.class);</span><br><span class="line">           </span><br><span class="line">        List&lt;User&gt; list = sampleMapper.findUserAndItemResultMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="高级映射总结"><a href="#高级映射总结" class="headerlink" title="高级映射总结"></a>高级映射总结</h6><ul><li>一对一映射：在 <code>Order</code> 实体对象中引入 <code>User</code> 属性，且在配置文件 Mapper.xml 中，通过 <code>&lt;association&gt;</code> 标签关联用户信息。</li><li>一对多映射：在 <code>Order</code> 实体对象中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetails</code>，且在配置文件 Mapper.xml 中，通过 <code>&lt;collection&gt;</code> 标签关联订单明细信息。</li><li>多对多映射：<ul><li>在 User 实体对象中添加订单列表属性 <code>List&lt;Order&gt; orderList</code>，将用户创建的订单映射到 orderList。  </li><li>在 Order 实体对象中添加订单明细列表属性 <code>List&lt;OrderDetail&gt; orderDetail</code>，将订单的明细映射到 orderDetail。  </li><li>在 OrderDetail 实体对象中添加 <code>Item</code> 属性，将订单明细所对应的商品映射到 item。</li></ul></li></ul><h5 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h5><ul><li><p>延迟加载，即需要时才发出 SQL 查询请求。Hibernate 中有延迟加载，MyBatis 同样提供了这个功能，具体以 <code>&lt;resultMap&gt;</code> 标签的属性完成配置。当然，我们可具体分析 MyBatis 的延迟加载。</p></li><li><p>MyBatis是默认开启延迟加载的么？如果不是，那么显然应该进行延迟加载配置。</p><p>  在 MyBatis 的全局核心配置文件 SqlMapConfig.xml 的 <code>&lt;settings&gt;</code> 标签中可设置 lazyLoadingEnabled 以及 aggressiveLazyLoading 属性值。</p><ul><li><p><code>lazyLoadingEnabled</code>：全局性设置懒加载，默认值为 flase，即所有相关联的都会被初始化加载。</p></li><li><p><code>aggressiveLazyLoading</code>：默认值为 ture，懒加载的对象可能被任何懒属性全部加载。否者，每个属性按需加载。</p></li></ul></li><li><p>要实现延迟加载，就得进行 SQL 拆分 ( 若我们的SQL都写在一起，DB要么执行，要么不执行，根本做不到按需查询，所以要延迟加载就得拆分 SQL ) 那么怎么进行拆分呢？</p><p>  在 resultMap 中的 <code>&lt;collection&gt;</code> 以及 <code>&lt;association&gt;</code> 标签中有 <code>select</code> 属性，也就是说当使用到了 <code>&lt;collection&gt;</code> 或者 <code>&lt;association&gt;</code> 时才发出 <code>select</code> 属性对应的 SQL。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 映射文件 Mapper.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 延迟加载的 resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"OrderUserLazyLoadingResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.kofes.ssm.pojo.Order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"order_id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实现对用户信息进行延迟加载</span></span><br><span class="line"><span class="comment">     | select 属性：指定延迟加载需要执行的 Statement 的 ID，</span></span><br><span class="line"><span class="comment">     | 即根据 user_id 查询用户信息的 Statement</span></span><br><span class="line"><span class="comment">     | column 属性：订单信息中关联查询用户信息得到的列，</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"cn.kofes.ssh.pojo.User"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">select</span>=<span class="string">"findUserById"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Step.01.查询订单管理查询用户信息，用户信息需要延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"finOrderUserLazyLoading"</span> <span class="attr">resultMap</span>=<span class="string">"OrderUserLazyLoadingResultMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM Order</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Step.02.关联查询用户信息：根据订单信息中的 user_id 去关联查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"cn.kofes.ssm.pojo.User"</span>&gt;</span></span><br><span class="line">    SELECT * FROM User WHERE user_id = #&#123;user_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> | 执行顺序：即先执行 finOrderUserLazyLoading，</span></span><br><span class="line"><span class="comment"> | 当需要查询用户时在再执行 findUserById</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>我们其实可以借助 MyBatis 去完成延迟加载，也可以自己实现延迟加载。怎么做呢？即有需求时，我们自己调用相应的 Statement 完成即可。</li></ul><h5 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h5><p><img src="/images/illustration/Project/2018/08/J2EE-SSM-1_6-4.png" alt="图6-4MyBatis的一级缓存和二级缓存"></p><center>图 6-4 MyBatis 的一级缓存和二级缓存 $^{[3]}$</center><ul><li>MyBatis 提供一级缓存和二级缓存：<ul><li>一级缓存是 sqlSession 级别的缓存。在操作数据库时需要构造 sqlSession 对象，在对象中有一个数据结构 ( HashMap，KEY 主要就是 SqlSession + StatementId 构成 ) 用于存储缓存数据。不同的 sqlSession 之间的缓存数据区域是互不影响的；</li><li>二级缓存是 Mapper 级别的缓存 ( <code>按 Namespace 划分</code> )。多个 sqlSession 去操作同一个 Mapper 的 SQL 语句，多个 sqlSession 去操作数据库得到数据的数据会存到二级缓存中。二级缓存区域是共享的。</li></ul></li></ul><h6 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h6><ul><li>一级缓存的工作原理：<ul><li>如图 6-3 所示，当 sqlSession 发起 <code>查询</code> 操作，查询结果会 <code>写入</code> 到一级缓存中，待二次 <code>读取</code> 直接从一次缓存中读取即可；若 sqlSession 发起 <code>插入、更新、删除</code> 操作，则会 <code>清空</code> 一级缓存区域中的信息，以避免脏读。</li><li>当 sqlSession 关闭时，sqlSession 缓存也随之失效。</li></ul></li><li>MyBatis 是默认支持一级缓存的，无需配置开启。</li></ul><h6 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h6><ul><li><p>二级缓存是需要配置开启的：</p><ul><li>在全局配置文件 <code>SqlMapConfig.xml</code> 中指明，即在 <code>&lt;setting&gt;</code> 标签中的 <code>cacheEnabled</code> 属性，开启全局性缓存开关；</li><li><p>其次在需要开启二级缓存的 <code>XXXMapper.xml</code> 中指明 <code>&lt;cache&gt;</code> 标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.kofes.mapper.SampleMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 开启本 Mapper namespace 下的二级缓存</span></span><br><span class="line"><span class="comment">     | type 属性：指定 cache 接口的实现类的类型，默认使用 PerpetualCache</span></span><br><span class="line"><span class="comment">     | </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 当然也可使用分布式缓存：Ehcache</span></span><br><span class="line"><span class="comment">    &lt;cache type="org.mybatis.caches.ehcache.EhcacheCache"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>所有 POJO 实现序列化接口：若开启二级缓存，其存储介质可在内存、磁盘等，即为了将缓存数据取出执行反序列化操作。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">/* 省略细节 */</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; <span class="comment">/* 省略细节 */</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>二级缓存的局限性：</p><p>  例如，我们仅仅更新了其中一个信息，那么意味着二级缓存的清空。而我们真正想要的是刷新该商品的缓存信息而不要影响其他商品的缓存信息。</p></li></ul><h5 id="整合-ehcache"><a href="#整合-ehcache" class="headerlink" title="整合 ehcache"></a>整合 ehcache</h5><ul><li><code>ehcache</code> 是一个分布式缓存框架，当然还有 <code>redis</code>、<code>memached</code> 等。</li><li>分布式缓存，系统为了提高系统并发、性能，一般对系统进行分布式部署 ( 集群部署方式 )。</li><li><p>整合方法：MyBatis 提供的 Cache 接口，实现缓存逻辑即实现 Cache 接口即可。</p><ul><li>提供 ehcache 以及 ehcache 与 MyBatis 整合的依赖 ( 或者 Jar 包 )；</li><li>在 <code>&lt;cache&gt;</code> 标签中，type 属性指明 ehcache 实现 Cache 接口的实现类，既有：<br><code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</code>；</li><li><p>提供相关的 ehcache 配置文件.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyBatis 提供的 Cache 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object var1, Object var2)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">getObject</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">removeObject</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h5><ul><li>MyBatis 官方提供逆向工程，可针对单表自动生成 MyBatis 执行所需要的代码 ( mapper.java，mapper.xml，pojo 等 )。</li><li>企业实际开发中，常用的逆向工程方式：由数据库表生成 Java 代码。</li><li>添加依赖或添加 Jar 包：<a href="http://mvnrepository.com/artifact/org.mybatis.generator/mybatßis-generator-core" target="_blank" rel="noopener">MyBatis-Generator</a> ( Maven 中央仓库 )</li></ul><h6 id="运行逆向工程"><a href="#运行逆向工程" class="headerlink" title="运行逆向工程"></a>运行逆向工程</h6><ul><li>参考官方指南 <a href="http://www.mybatis.org/generator/running/running.html" target="_blank" rel="noopener">MyBatis Generator</a>，运行逆向工程有如下方式：<ul><li>使用命令提示符读取 XML 配置文件；</li><li>使用 Maven 插件；</li><li>使用 Java 程序读取 XML 配置文件 ( 推荐，即不依赖 IDE )；</li><li>使用 IDE 插件 ( Eclipse )；</li></ul></li></ul><h6 id="代码配置文件"><a href="#代码配置文件" class="headerlink" title="代码配置文件"></a>代码配置文件</h6><ul><li><p>MyBatis 官方提供了配置文档的范例：<a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" target="_blank" rel="noopener">MyBatis GeneratorXML Configuration File Reference</a></p><p>  当然，你可以参考下文 $^{[5]}$，搭配注释，互相补充：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- generatorConfig.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释：true / false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- ( 必填 ) 数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 连接 MySQL 数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/db_testdb?characterEncoding=utf-8"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 连接 Oracle 数据库</span></span><br><span class="line"><span class="comment">        &lt;jdbcConnection driverClass="oracle.jdbc.OracleDriver"</span></span><br><span class="line"><span class="comment">            connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:db_testdb" </span></span><br><span class="line"><span class="comment">            userId="kofe" password="123456"&gt;</span></span><br><span class="line"><span class="comment">        &lt;/jdbcConnection&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | false ( 默认 )，把 Jdbc Decimal 和 Numeric 类型解析为 Integer</span></span><br><span class="line"><span class="comment">         | true，把 Jdbc Decimal 和 Numeric 类型解析为 java.math.BigDecimal</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：生成 PO 类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.kofes.ssm.pojo"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper 映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.kofes.ssm.mapper"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">&lt;!-- targetPackage:mapper 接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetPackage</span>=<span class="string">"cn.kofes.ssm.mapper"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages 是否让 schema 作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"Item"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"Orderdetail"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"User"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName="sys_user"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName="sys_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName="sys_permission"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName="sys_user_role"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName="sys_role_permission"&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 有些表的字段需要指定 Java 类型</span></span><br><span class="line"><span class="comment">        &lt;table schema="" tableName=""&gt;</span></span><br><span class="line"><span class="comment">            &lt;columnOverride column="" javaType="" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/table&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="执行逆向工程生成代码"><a href="#执行逆向工程生成代码" class="headerlink" title="执行逆向工程生成代码"></a>执行逆向工程生成代码</h6><ul><li><p>配置文件配置完成后，执行以下程序即可生成代码，细节如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//指定逆向工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>); </span><br><span class="line">        </span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">            callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用 generator() 执行逆向工程生成代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GeneratorSqlmap generatorSqlmap = <span class="keyword">new</span> GeneratorSqlmap();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>值得注意的是，除了生成基本的 POJO 类还多了一个类，就是 <code>xxxExample.java</code>。这个类是给用户自定义 SQL 使用的。到这里就生成好了，下面我们就把生成的代码 <code>拷贝</code> 到自己的工程即可。</p></li></ul><hr><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><ul><li>Spring 框架是 Java 应用最广的框架，其成功源于它的理念，即 <code>控制反转</code> ( Inversion of Control，IoC ) 和 <code>面向切面编程</code> ( Aspect Oriented Programming，AOP )。</li><li>Spring 框架也可理解为一个轻量级的 IoC 和 AOP 的容器框架。</li><li><p>Spring 框架在 <a href="https://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html#Spring">SSH 部分</a> 有阐述，在本章节就不具体展开探讨，笔记以补充和整合部分内容为主。</p><blockquote><p>在 SSH Spring 章节中，要求导入相关 Jar 包，而本文的 SSM 框架要求导入的 Jar 包 ( 或者 Maven 依赖 ) 以 <code>版本信息</code> 的为标准。</p></blockquote></li></ul><h5 id="Spring-整合-MyBatis"><a href="#Spring-整合-MyBatis" class="headerlink" title="Spring 整合 MyBatis"></a>Spring 整合 MyBatis</h5><p>Spring 整合 MyBatis 是通过 <code>MyBatis-Spring</code> 的类库实现的，具体配置和使用信息可参考 <a href="http://www.mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">MyBatis-Spring 官方使用文档</a> $^{[4]}$。</p><h6 id="原始-DAO-开发"><a href="#原始-DAO-开发" class="headerlink" title="原始 DAO 开发"></a>原始 DAO 开发</h6><p>首先要向 DAO 的实现类中注入 SqlSessionFactory ( 交由 Spring 管理，即 Spring 声明式注入 SqlSessionFactory )，然后在各个方法中得到 SqlSession 进行数据库操作。</p><blockquote><p><code>诉求</code>：在 Spring 运作中，首先加载 Spring 核心配置文件，再创建对象 ( SqlSessionFactory )。而创建对象可通过 New 的方式创建 ( <a href="#MyBatis-原始方法">原始方法</a> )，但效率太低，则我们可以把加载配置文件和创建对象过程，在服务器启动时完成。故引入 Spring 声明式注入 SqlSessionFactory。</p></blockquote><ul><li>使用封装的方法，即让 Dao 的实现类继承 <code>SqlSessionDaoSupport</code>，而 SqlSessionDaoSupport 类中已经存在 <code>setSqlSessionFactory()</code> 方法，因此我们可以直接向 Dao 的实现类注入 SqlSessionFactory。</li><li><p>另外 SqlSessionDaoSupport 中有 SqlSession，因此使得操作更加简单；而且都交给 Spring 管理，我们自然不必担心忘记关闭 SqlSession。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下述实现是通过 XML 配置方式加载配置和 Bean ( 注解方式也是可行的，但写法有区别 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sample&gt; <span class="title">findSampleById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dao 层实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleDaoImpl</span><span class="params">()</span> <span class="keyword">throws</span> Expection </span>&#123;</span><br><span class="line">        sqlSession = <span class="keyword">this</span>.getSqlSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sample <span class="title">findSampleById</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.selectOne(</span><br><span class="line">            <span class="string">"cn.kofes.ssm.mapper.SampleMapper.findSampleById"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaseDao baseDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        applicationContext = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring.xml"</span>);</span><br><span class="line">        baseDao = (BaseDao) applicationContext.getBean(<span class="string">"baseDao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCertainById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println( baseDao.findSampleById(<span class="number">15</span>).toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="Mapper-代理开发-1"><a href="#Mapper-代理开发-1" class="headerlink" title="Mapper 代理开发"></a>Mapper 代理开发</h6><ul><li><p>Mapper 代理开发的具体思路：</p><ul><li><p>SqlSessionFactory 交给 Spring 管理 ( 单例模式 )。</p><p>注意到 SqlSessionFactory 的创建显然需要数据库连接相关的信息，因此需要 <code>数据库连接池 (c3p0)</code>；除此之外还需要 MyBatis 的主配置文件 <code>SqlMapConfig.xml</code>。</p></li><li><p>Spring 和 MyBatis 整合生成代理对象，使用 SqlSessionFactory 创建 SqlSession ( Spring 和 MyBatis 整合后自动完成此过程 )。</p></li><li><p>若采用 Mapper 代理的方式开发，我们需要 Spring 管理 Mapper 动态代理实现。</p></li></ul></li><li><p>在 Spring 配置文件下配置数据库信息，并整合 MyBatis。后者将 SessionFacotry 交由 Spring 管理：</p><blockquote><p>c3p0.properties 配置文件位于 Src 根目录下，键值分离以便修改配置。</p></blockquote>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring.xml --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包下注解，并注册为 Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.kofes.ssm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">    <span class="comment">&lt;!-- 在根目录下新建文件 c3p0.properties，存储数据连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:c3p0.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Dao 层的配置，即 Mybatis 的配置 ( 分模块开发思想 ) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring/mybatis-spring.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis-spring.xml --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 1. 数据源 : DriverManagerDataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 c3p0.properties 的键值对即可，格式如 $&#123;key.value&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.minPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.initialPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxIdleTime&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxStatements&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.acquireIncrement&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.checkoutTimeout&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.idleConnectionTestPeriod&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置和 MyBatis 的整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置一个可以执行批量的 SqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 4. MyBatis 自动扫描加载 Sql 映射文件: MapperScannerConfigurer</span></span><br><span class="line"><span class="comment">     | 自动扫描出的 Mapper Bean 的 ID 名称为首字母小写的类名</span></span><br><span class="line"><span class="comment">     | 且效果与 SqlMapConfig.xml 中配置批量加载映射文件相同，即 &lt;package name="cn.kofes.ssm.mapper"/&gt;</span></span><br><span class="line"><span class="comment">     | 1) 批量加载映射文件：mapper.java 与 mapper.xml 同名，且在同一目录下</span></span><br><span class="line"><span class="comment">     | 2) 当然，你可以建立同样的文件夹目录 (cn/kofes/ssm/mapper)，把 mapper.xml 单独放置资源目录下</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.kofes.ssm.mapper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码实现：注解方式实现 Mapper 类的调用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下述实现是通过注解方式加载配置和 Bean ( XML 方式也是可行的，但写法有区别 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SampleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sample <span class="title">findCertainTupleById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SampleMapper sampleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindCertainTupleById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println( </span><br><span class="line">            sampleMapper.findCertainTupleById(<span class="number">15</span>).toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><ul><li>MVC ( Model-View-Controller ) 模式把应用程序 ( 输入逻辑、业务逻辑和 UI 逻辑 ）分成不同的方面，同时提供这些元素间的松耦合。<ul><li>Model：模型，封装了应用程序的 <code>数据</code> 和由它们组成的 <code>POJO</code>。</li><li>View：视图，负责把模型数据 <code>渲染到视图</code> 上，将数据以一定形式展现给用户。</li><li>Controller：负责 <code>处理用户请求</code>，并建立适当的模型把它传递给视图渲染。</li></ul></li><li>Spring MVC 把 <code>模型</code>、<code>视图</code> 和 <code>控制器</code> 分层，组合成一个有机灵活的系统。</li><li>Spring MVC 中可定义逻辑视图，通过其提供的解析器找到对应的视图渲染；或在 Controller 的方法内加入注解 ( <code>@ResponseBody</code> )，通过消息转换系统将数据转换为 JSON，提供给前端 Ajax 请求使用。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>[1] <a href="https://book.douban.com/subject/27090950/" target="_blank" rel="noopener"> 杨开振. Java EE 互联网轻量级框架整合开发 [M]. 电子工业出版社. 2017</a></li><li>[2] <a href="https://www.jianshu.com/p/91a32e3d4b26" target="_blank" rel="noopener">张丰哲. MyBatis + Spring MVC 开发指南 (一). 简书. 2017</a></li><li>[3] <a href="https://www.jianshu.com/p/48b78ee24fa3" target="_blank" rel="noopener">张丰哲. MyBatis + Spring MVC 开发指南 (二). 简书. 2017</a></li><li>[4] <a href="http://www.mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">MyBatis. MyBatis-Spring 官方使用文档. mybatis.org</a></li><li>[5] <a href="https://blog.csdn.net/yerenyuan_pku/article/details/71909325" target="_blank" rel="noopener">李阿昀. MyBatis 逆向工程自动生成代码. csdn.net. 2017</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;本文章主要围绕 J2EE 中 SSM ( Spring、Spring MVC、MyBatis ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。&lt;/p&gt;
&lt;h2 id=&quot;更新进度&quot;&gt;&lt;a href=&quot;#更新进度&quot; class=&quot;headerlink&quot; title=&quot;更新进度&quot;&gt;&lt;/a&gt;更新进度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2018.08.13：完成初稿，梳理 SSM 框架初识章节；&lt;/li&gt;
&lt;li&gt;2018.08.20：框架内容，梳理 SSM 框架基本内容；&lt;/li&gt;
&lt;li&gt;2018.08.24：框架内容，修正 SSM 框架部分内容；&lt;/li&gt;
&lt;li&gt;2018.08.26：框架内容，整合 Spring 和 MyBatis；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;教学视频&quot;&gt;&lt;a href=&quot;#教学视频&quot; class=&quot;headerlink&quot; title=&quot;教学视频&quot;&gt;&lt;/a&gt;教学视频&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av20394903&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员. J2EE 进阶. MyBatis 框架由浅入深. 2017. bilibili.com&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本框架的学习笔记是基于此系列教学视频所得的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.kofes.cn/categories/Project/"/>
    
    
      <category term="J2EE" scheme="http://www.kofes.cn/tags/J2EE/"/>
    
      <category term="JSP" scheme="http://www.kofes.cn/tags/JSP/"/>
    
      <category term="Spring" scheme="http://www.kofes.cn/tags/Spring/"/>
    
      <category term="SSM" scheme="http://www.kofes.cn/tags/SSM/"/>
    
      <category term="MyBatis" scheme="http://www.kofes.cn/tags/MyBatis/"/>
    
      <category term="Spring MVC" scheme="http://www.kofes.cn/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>彩蛋 -  MacOS VMware 安装 OpenWrt ( 从软路由到硬路由的过渡 )</title>
    <link href="http://www.kofes.cn/2018/07/Vmware-OpenWrt.html"/>
    <id>http://www.kofes.cn/2018/07/Vmware-OpenWrt.html</id>
    <published>2018-07-26T06:52:45.000Z</published>
    <updated>2018-07-30T01:45:00.133Z</updated>
    
    <content type="html"><![CDATA[<p>配置一台 VMware 上运作的路由系统，启发式从软路由到硬路由的进阶之旅。</p><a id="more"></a><h2 id="更新进度"><a href="#更新进度" class="headerlink" title="更新进度"></a>更新进度</h2><ul><li>2018.07.25：完成初稿；</li><li>2018.07.26：安装 OpenWrt 系统，配置 MySQL、FTP 插件，并形成文档；</li><li>2018.07.27：购置路由开发板，了解系统版本支持信息；</li><li>2018.07.29：鉴于之前的理解有偏差，修正固件系统章节的内容；</li></ul><h2 id="固件系统"><a href="#固件系统" class="headerlink" title="固件系统"></a>固件系统</h2><h3 id="OpenWrt"><a href="#OpenWrt" class="headerlink" title="OpenWrt"></a>OpenWrt</h3><h4 id="支持文档"><a href="#支持文档" class="headerlink" title="支持文档"></a>支持文档</h4><ul><li><a href="https://openwrt.org/" target="_blank" rel="noopener">官方使用指南 (英文)</a> | <a href="https://openwrt.org/zh/start" target="_blank" rel="noopener">官方使用指南 (中文)</a></li><li><p><a href="https://openwrt.org/toh/views/toh_fwdownload" target="_blank" rel="noopener">硬件支持表格</a>：查阅硬件支持表格，若您的硬件已被支持，可参考官方的 OpenWrt <a href="https://openwrt.org/docs/guide-quick-start/begin_here" target="_blank" rel="noopener">安装教程</a>，开始安装。 </p><blockquote><p>在表格顶部的白色区域可以输入筛选标准进行条件筛选。若找到目标型号后， <code>Firmware OpenWrt Install URL</code> 列中存放的是固件的最新版本下载地址。</p></blockquote></li><li><p><a href="https://openwrt.org/faq/start" target="_blank" rel="noopener">常见问题解答</a>：包含常见问题，安装前、安装后问题，无线网络问题等。</p></li></ul><h4 id="固件版本"><a href="#固件版本" class="headerlink" title="固件版本"></a>固件版本</h4><p>固件版本：每种型号的路由一般会提供多种版本的固件 $^{[8]}$。</p><ul><li><code>XXX-factory</code> / <code>XXX-kernel</code>：对应于内核的固件，必须把它刷入一个OEM (原厂) 固件。</li><li><code>XXX-jffs2</code> / <code>XXX-squashfs</code>：对应于文件系统的固件。这两种不同格式的固件区别在于 $^{[9]}$：<ul><li><code>Squashfs</code>：安装后占用一定空间来存放系统的一些必要文件，这些文件都只是可读的，其作用是帮助恢复系统；</li><li><code>Jffs2</code>：而 Jffs2 则不会存储这些文件，好处在于节省了空间。一般推荐使用 Squashfs 格式的固件，以方便恢复系统到初始状态。</li></ul></li><li><code>XXX-sysupgrade</code>：对应于完整的固件，用于固件升级，要求您的设备必须已安装较旧的 LEDE 或 OpenWrt 固件。</li></ul><blockquote><p>固件的后缀名也有很多种，例如 <code>xxx.img</code>、<code>xxx.bin</code>、<code>xxx.trx</code> 等，虽然整体内容是相同的，但它们的文件头的信息是有差异的 $^{[10]}$。</p></blockquote><h4 id="烧写方式"><a href="#烧写方式" class="headerlink" title="烧写方式"></a>烧写方式</h4><p>烧写方式：根据不同的路由硬件环境，选择不同的方式将固件烧写进路由。</p><ul><li>OEM (原厂) 管理界面：完整安装 OpenWrt / LEDE / Padavan 设备。</li><li><a href="https://openwrt.org/docs/guide-quick-start/sysupgrade.luci" target="_blank" rel="noopener">LUCI ( Web 管理界面 )</a>：升级现有的 OpenWrt / LEDE 设备。(Pavadan 有自己的 Web 管理界面)</li><li>Bootloader 引导加载器：路由系统里常见有 Breed、U-Boot。即开机初始化时加载的最小系统，用于识别基础硬件和设置环境信息，以引导方式烧写固件 ( 集成 HTTP、TFTP 协议 )。</li></ul><h3 id="Padavan"><a href="#Padavan" class="headerlink" title="Padavan"></a>Padavan</h3><h4 id="支持文档-1"><a href="#支持文档-1" class="headerlink" title="支持文档"></a>支持文档</h4><ul><li>Padavan：<a href="http://p4davan.80x86.io/" target="_blank" rel="noopener">荒野无灯.Padavan</a> | <a href="https://bitbucket.org/padavan/rt-n56u/overview" target="_blank" rel="noopener">Bitbucket.Padavan</a></li></ul><h2 id="软路由篇"><a href="#软路由篇" class="headerlink" title="软路由篇"></a>软路由篇</h2><p>了解了相关路由系统的事宜后，找准定位，你是配置用来开发 ( 推荐 OpenWrt ) 的，还是家用 ( 推荐 Pavadan ) 等，即选择一款迎合需求的路由开始你的 “改造旅程”。</p><p>软路篇即以 VMware 为例展开实践，而本文主要是记录实践过程中的基本过程和要点。</p><h3 id="固件信息"><a href="#固件信息" class="headerlink" title="固件信息"></a>固件信息</h3><ul><li><p>系统版本：<a href="http://archive.openwrt.org/chaos_calmer/15.05.1/x86/" target="_blank" rel="noopener">OpenWrt-15.05.1-x86</a></p><blockquote><p>虚拟机上运行的，我们选择 x86 架构的即可 ( x64 架构也是可以的 )。</p></blockquote></li><li><p>固件版本：<a href="http://archive.openwrt.org/chaos_calmer/15.05.1/x86/generic/openwrt-15.05.1-x86-generic-combined-squashfs.img" target="_blank" rel="noopener">openwrt-15.05.1-x86-generic-combined-squashfs</a></p></li></ul><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>此章节是基于 MacOS 的 VMware 展开实践的，WIndows 版本可自行百度、谷歌，或者参考下述文章 $^{[1,2]}$。</p><p>当然，OpenWrt 安装步骤可参考引用文章 $^{[1,2,7]}$，这里不详细阐述，仅对核心的配置部分进行说明。 </p><ul><li><p>本机 VMware 得配置两张虚拟网卡，暂且命名为：</p><ul><li>网络适配器 1 (MAC 地址)：<code>00:50:56:28:EF</code></li><li><p>网络适配器 2 (MAC 地址)：<code>00:50:56:3B:0E:CD</code></p><blockquote><p>MAC 地址可让我们判断 OpenWrt 中外网接口 <code>WAN</code> 和内网接口 <code>LAN</code> 口的映射情况。</p></blockquote></li></ul></li><li><p>在 OpenWrt 默认配置中，外网接口 WAN 对应于 Eth1，内网接口 LAN 对应于 Eth0，即：</p><ul><li>外网接口 WAN：<code>Eth1</code></li><li><p>内网接口 LAN：<code>Eth0</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 如何查看虚拟主机的网卡与外网、内外接口的关系：</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span> OpenWrt 下执行下述代码：</span><br><span class="line"><span class="meta">#</span> 查看网卡的具体信息，即可以查到虚拟机网卡 MAC 地址</span><br><span class="line">ifconfig | more</span><br><span class="line"><span class="meta">#</span> 查看网络配置信息，即可查看外网、内外接口 (Ethx) 与虚拟主机的网卡的绑定情况</span><br><span class="line">cat /etc/config/network</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 OpenWrt 中，配置外网、内外接口 (Ethx) 信息：</p><blockquote><p>提示：使用 WAN 口的网卡桥接到宿主机的网卡即可访问外网。</p></blockquote>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 环路地址，不用配置</span><br><span class="line">config interface 'loopback'</span><br><span class="line">   option ifname 'lo'</span><br><span class="line">option ipaddr '127.0.0.1'</span><br><span class="line">option netmask '255.255.255.0'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 内网接口</span><br><span class="line">config interface 'lan'</span><br><span class="line">option ifname 'eth0'</span><br><span class="line">option type 'bridge'</span><br><span class="line">option proto 'static'</span><br><span class="line">option ipaddr '192.168.1.1'</span><br><span class="line">option netmask '255.255.255.0'</span><br><span class="line">option ip6assign '60'</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span> 外网接口</span><br><span class="line">config interface 'wan'</span><br><span class="line">option ifname 'eth1'</span><br><span class="line">option proto 'dhcp'</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span> 其他配置默认，不作修改</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>关于配置中的一些批注：</p></blockquote><ul><li>Note.01：配置完成后，记得重启下网络服务 <code>./etc/init.d/network restart</code> 。</li><li><p>Note.02：若需要让宿主机访问本 OpenWrt 系统，你可以配置 (关闭) 防火墙。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 让防火墙开机不自启</span><br><span class="line">./etc/init.d/firewall disable</span><br><span class="line"><span class="meta">#</span> 关闭防火墙服务</span><br><span class="line">./etc/init.d/firewall stop</span><br></pre></td></tr></table></figure></li></ul><ul><li>本机 OpenWrt 信息：<ul><li>本机地址：<code>192.168.0.100</code></li><li>路由地址：<code>192.168.0.x (192.168.0.161)</code> — 与宿主机在同一局域网就对了。</li><li>路由管理用户：<code>root</code></li><li>路由管理密码：<code>123321</code></li></ul></li></ul><h2 id="硬路由篇"><a href="#硬路由篇" class="headerlink" title="硬路由篇"></a>硬路由篇</h2><p>选择一款合适的路由器很重要。这里瞎折腾太久，很多产品不太满意 ( 价格贵 )，最后选择了定制的产品。路由开发板：基于 Newifi D1 板件定制 ( 芯片：MT7621A / 闪存：32M / 内存：256MB )。</p><p>当然，你对路由器刷固件，固件版本一定要配对你的设备，具体细节请查阅：<a href="https://openwrt.org/toh/views/toh_fwdownload" target="_blank" rel="noopener">设备支持信息表单</a></p><blockquote><p>值得注意的是，你需要对下载的固件文件进行 <a href="https://openwrt.org/docs/guide-quick-start/verify_firmware_checksum" target="_blank" rel="noopener">MD5/SHA256 验证</a>，以防止文件破损或其他原因，使得你的路由器 <code>变砖</code> ！</p></blockquote><h3 id="固件信息-1"><a href="#固件信息-1" class="headerlink" title="固件信息"></a>固件信息</h3><ul><li>OpenWrt<ul><li>系统版本：<a href="http://downloads.openwrt.org/releases/17.01.5/targets/ramips/mt7621/" target="_blank" rel="noopener">LEDE 17.01.5 Ramips MT7621</a></li><li>固件版本：基于 Breed / Uboot 刷完整固件：<a href="http://downloads.openwrt.org/releases/17.01.5/targets/ramips/mt7621/lede-17.01.5-ramips-mt7621-newifi-d1-initramfs-kernel.bin" target="_blank" rel="noopener">newifi-d1-initramfs-kernel.bin</a></li></ul></li><li>Padavan<ul><li>固件版本：<a href="http://p4davan.80x86.io/download/" target="_blank" rel="noopener">荒野无灯.Padavan.NEWIFI-D1</a></li></ul></li></ul><h3 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h3><p>此章节是基于 <code>Newifi D1 (MT7621A)</code>  板件定制的路由开发板展开实践的，采用 Breed 形式引导刷固件。</p><h2 id="拓展功能"><a href="#拓展功能" class="headerlink" title="拓展功能"></a>拓展功能</h2><ul><li><p>关于插件的批注：</p><ul><li>默认情况，插件会安装在：<code>/etc/init.d/</code> 目录下；</li><li><p>其相应的配置文件放置在： <code>/etc/config/</code> 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">etc</span><br><span class="line">├── config# 配置目录</span><br><span class="line">└── init.d# 插件目录</span><br><span class="line">└── xxx.cnf# 有些插件的配置文件在根目录下</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="安装-FTP-服务"><a href="#安装-FTP-服务" class="headerlink" title="安装 FTP 服务"></a>安装 FTP 服务</h3><ul><li><p>快速引导：<a href="https://wiki.openwrt.org/doc/howto/ftp.overview" target="_blank" rel="noopener">官方指南</a></p><ul><li>可通过 Web 交互界面安装或者命令行安装 <code>VSFTPD</code>。</li><li>安装完成后，即可使用；<code>ftp://Your route IP adress</code>。</li><li><p>配置文件位于 <code>/etc/vsftpd.conf</code>，配置可参考：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">chown_uploads=YES       # 上传后更改文件所属权</span><br><span class="line">chown_username=root     # 上传后更改文件所属权</span><br><span class="line">ftp_username=nobody     # 定义匿名用户名</span><br><span class="line">anonymous_enable=YES            # 允许匿名用户访问</span><br><span class="line">anon_upload_enable=YES          # 允许匿名上传</span><br><span class="line">anon_mkdir_write_enable=YES     # 允许匿名创建目录</span><br><span class="line">anon_root=/mnt/anymous          # 匿名用户根目录</span><br><span class="line">anon_max_rate=512000            # 匿名用户限速</span><br><span class="line">local_enable=YES    # 允许本地用户登录 (必须)</span><br><span class="line">local_root=/mnt/ftp # 本地用户的默认访问路径 (必须)</span><br><span class="line">write_enable=YES    # 允许上传</span><br><span class="line">local_umask=022     # 允许上传</span><br><span class="line">check_shell=NO</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>命令操作细节如下：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第一次使用 opkg 需更新资源</span><br><span class="line">opkg update</span><br><span class="line">opkg install vsftpd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> FTP 服务操作</span><br><span class="line">/etc/init.d/vsftpd start        # Start the service</span><br><span class="line">/etc/init.d/vsftpd stop         # Stop the service</span><br><span class="line">/etc/init.d/vsftpd restart      # Restart the service</span><br><span class="line">/etc/init.d/vsftpd reload       # Reload configuration files or restart if that fails</span><br><span class="line">/etc/init.d/vsftpd enable       # Enable service autostart)</span><br><span class="line">/etc/init.d/vsftpd disable      # Disable service autostart)</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span> 附：修改文件权限</span><br><span class="line">chown root /mnt/ftp</span><br><span class="line">chmod 666 /mnt/ftp</span><br></pre></td></tr></table></figure></li></ul><ul><li>当然，除了 FTP 服务外，还有 Samba 服务，具体配置可参考 [4] 。</li></ul><h3 id="安装-Samba-服务"><a href="#安装-Samba-服务" class="headerlink" title="安装 Samba 服务"></a>安装 Samba 服务</h3><h3 id="安装-Shadowsocks"><a href="#安装-Shadowsocks" class="headerlink" title="安装 Shadowsocks"></a>安装 Shadowsocks</h3><blockquote><p>科学上网 (FQ)，践行社会主义核心价值观。</p></blockquote><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><ul><li><p>通过命令行安装：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第一次使用 opkg 需更新资源</span><br><span class="line">opkg update</span><br><span class="line">opkg install mysql-server</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置数据库数据存储目录：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 配置 Mysql 数据库的存储目录</span><br><span class="line">cd /mnt</span><br><span class="line">mkdir -p /mysql/data /mysql/tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 当然也可把数据放到 U 盘或 SD 卡上</span><br><span class="line"><span class="meta">#</span> 详细教程可查看 USB 挂载相关教程，参考 [6]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置 MySql：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="meta">#</span> 找到 datadir 和 tmpdir 字段，并修改其值</span><br><span class="line">datadir = /mnt/mysql/data</span><br><span class="line">tmpdir = /mnt/mysql/tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 给文件夹赋予权限</span><br><span class="line">chmod 750 -R mysql/data mysql/tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 找到 bind-address，修改为 0.0.0.0，以允许远程访问</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>  记得保存再退出</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 初始化建库 ( Database )</span><br><span class="line">/usr/bin/mysql_install_db --force</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>启动 MySQL 数据库：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动 mysql 守护进程</span><br><span class="line">/etc/init.d/mysqld enable# 开启自启动</span><br><span class="line">/etc/init.d/mysqld start# 启动 MySQL 服务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 当重新修改配置时，需要重启 Mysql 服务，可这样处理</span><br><span class="line"><span class="meta">#</span> killall mysqld</span><br><span class="line"><span class="meta">#</span> /etc/init.d/mysqld start</span><br><span class="line"><span class="meta">#</span> 或者重新加载配置信息</span><br><span class="line"><span class="meta">#</span> /etc/init.d/mysqld reload</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用 MySQL 数据库和修改账户密码：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 提示输入密码，进入即可数据库操作</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 当然，刚配置的 MySQL 用户名账号密码不是还没有配置么？</span><br><span class="line"><span class="meta">#</span> 故我们需要以非授权的方式进入 MySQL 进行权限设置</span><br><span class="line">/etc/init.d/mysqld --skip-grant &amp;</span><br><span class="line">mysql -u root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 注意：命名行里面的形式已经变成【mysql&gt;】提示符，即可继续下步操作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示数据库，选择 mysql 数据库</span><br><span class="line">SHOW databases;</span><br><span class="line">USE mysql;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改账户连接权限：</span><br><span class="line">UPDATE user </span><br><span class="line">SET host = '%', password = PASSWORD("Your Password")</span><br><span class="line">WHERE user = 'root';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> (非必要操作) 当你的数据库需要远程访问时，你还需要建立一个新用户</span><br><span class="line"><span class="meta">#</span> grant all privileges on *.* to  kofe@"%"</span><br><span class="line"><span class="meta">#</span> identified by "pwd123"</span><br><span class="line"><span class="meta">#</span> with grant option;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Grant 是授权命令</span><br><span class="line"><span class="meta">#</span> 其中 kofe 是我们连接用的用户名、pwd123 是连接密码</span><br><span class="line"><span class="meta">#</span> @ 后接的 “%” 通用符表示允许各 host 操作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 清理数据库缓存</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 退出 mysql</span><br><span class="line">quit;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启 Mysql 服务</span><br><span class="line">/etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 此时重新执行 mysql -u root -p</span><br><span class="line"><span class="meta">#</span> 输入你修改过后的密码能进入 【mysql&gt;】模式即成功。</span><br></pre></td></tr></table></figure></li><li><p>MySQL 数据库管理软件推荐： <a href="http://www.sequelpro.com/" target="_blank" rel="noopener">Sequel Pro</a> 或者 <a href="https://dbeaver.io/download/" target="_blank" rel="noopener">Dbeaver</a>。</p></li></ul><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>[1] <a href="https://www.cnblogs.com/codeinsight/p/openwrt_vmware.html" target="_blank" rel="noopener">Code Insight. HowTo 虚拟机上尝试 OpenWrt 开源路由. cnblogs.com</a></li><li>[2] <a href="https://github.com/luoqeng/OpenWrt-on-VMware" target="_blank" rel="noopener">luoqeng. OpenWrt-on-VMware. github.com</a></li><li>[3] <a href="https://blog.csdn.net/whatday/article/details/78920494" target="_blank" rel="noopener">whatday. 路由、交换机等嵌入设备软件包管理 OPKG. csdn.net</a></li><li>[4] <a href="http://www.cnblogs.com/double-win/p/3848797.html" target="_blank" rel="noopener">Double WIn. Samba 服务 &amp; vsFTP 服务. cnblogs.com</a></li><li>[5] <a href="http://www.cnblogs.com/double-win/p/3866189.html" target="_blank" rel="noopener">Double Win. MySQL配置. cnblogs.com</a></li><li>[6] <a href="http://www.cnblogs.com/double-win/p/3841801.html" target="_blank" rel="noopener">Double Win. USB挂载 &amp; U盘启动. cnblogs.com</a></li><li>[7] <a href="http://www.cnblogs.com/double-win/p/3888399.html" target="_blank" rel="noopener">Double Win. Openwrt 项目开发笔记. cnblogs.com</a></li><li>[8] <a href="https://openwrt.org/zh-cn/doc/howto/obtain.firmware.download" target="_blank" rel="noopener">OpenWrt. Howtos 下载固件中文说册. openwrt.org</a></li><li>[9] <a href="https://blog.csdn.net/qinpeng_zbdx/article/details/8570488" target="_blank" rel="noopener">Keep Silence. TP-LINK WR703N 刷 OpenWrt 及配置、安装插件. csdn.net</a></li><li>[10] <a href="https://openwrt.org/start?id=docs/techref/header" target="_blank" rel="noopener">OpenWrt. TRX vs. TRX2 vs. BIN. openwrt.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置一台 VMware 上运作的路由系统，启发式从软路由到硬路由的进阶之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://www.kofes.cn/categories/Technique/"/>
    
    
      <category term="MAC" scheme="http://www.kofes.cn/tags/MAC/"/>
    
      <category term="OpenWrt" scheme="http://www.kofes.cn/tags/OpenWrt/"/>
    
      <category term="Vmware" scheme="http://www.kofes.cn/tags/Vmware/"/>
    
      <category term="mysql" scheme="http://www.kofes.cn/tags/mysql/"/>
    
      <category term="python" scheme="http://www.kofes.cn/tags/python/"/>
    
      <category term="路由器" scheme="http://www.kofes.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>框架 - Java EE 之 SSH 框架配置与使用</title>
    <link href="http://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html"/>
    <id>http://www.kofes.cn/2018/07/J2EE-SSH-SSI-1.html</id>
    <published>2018-07-24T06:48:22.000Z</published>
    <updated>2018-08-26T14:08:14.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本文章主要围绕 J2EE 中 SSH ( Spring、Struts、Hibernate ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。</p><h2 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h2><ul><li><a href="https://www.bilibili.com/video/av14626440" target="_blank" rel="noopener">黑马程序员. J2EE 进阶. 4 天精通 Hibernate 框架. 2017. bilibili.com</a></li><li><a href="https://www.bilibili.com/video/av14839030" target="_blank" rel="noopener">黑马程序员. J2EE 进阶. 60 集精通 Spring 框架. 2017. bilibili.com</a></li><li><p><a href="https://www.bilibili.com/video/av13748042" target="_blank" rel="noopener">黑马程序员. J2EE 进阶. Struts2 框架精品教程. 2017. bilibili.com</a></p><blockquote><p>本框架的学习笔记是基于此系列教学视频所得的。</p></blockquote></li></ul><a id="more"></a><h2 id="更新进度"><a href="#更新进度" class="headerlink" title="更新进度"></a>更新进度</h2><ul><li>2018.07.17：完成初稿，IDE 搭建、框架初识章节；</li><li>2018.07.20：更新 SSH 框架 Hibernate 的内容；</li><li>2018.07.31：更新 SSH 框架 Spring 的内容；</li><li>2018.08.03：整合 SSH 框架 ( 输出基本框架 )；</li><li>2018.08.08：补充 SSH 框架 Struts 部分的内容；</li><li>2018.08.15：重新整理 SSH 框架项目，见版本信息；</li></ul><h2 id="IDE-搭建"><a href="#IDE-搭建" class="headerlink" title="IDE 搭建"></a>IDE 搭建</h2><ul><li>Step.01：安装 JDK；</li><li>Step.02：安装 IDE ( <code>IntelliJ Idea</code> / Eclipse / MyEclipse )；</li><li><p>Step.03：配置 Tomcat 环境；</p><ul><li><p>让 Tomcat 可同时运行多个 Module，即在菜单栏 <code>Run &gt; Run Configurations &gt; Deployment &gt; Application context</code> 下配置目录访问路径即可 ( 一般规范填写项目名 )。</p><p><img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_4-1.jpg" alt="Tomcat 9.0.x Deployment"></p><center>图 4-1 Tomcat 9.0.x Deployment</center></li><li><p>紧接着，在菜单栏 <code>File &gt; Project Structure &gt; Artifacts</code> 下配置，把对应的 module 的 Available Elements <code>Put into Output Root</code> 到 <code>xxx:war_exploded</code> 下。</p><p><img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_4-2.jpg" alt="Project Structure Artifacts"></p><center>图 4-2 Project Structure Artifacts</center></li></ul></li><li><p>Step.04：配置 MySQL / SQL Server 数据库；</p><ul><li>命名规范：数据库 <code>db_dbname</code>；数据表 <code>t_tablename</code>；属性 <code>attribute</code></li><li><p>访问外网：若在虚拟机或者本机测试，让数据库允许外网访问，注意得关闭防火墙或添加规则允许某端口的访问权限。</p><blockquote><p>Case.01：本机和服务器端互相 <code>Ping</code> 对方 IP，以检验网络是否畅通、是否拒绝访问。<br>Case.02：若网络畅通、没有拒绝访问，还要留意对应端口是否有权限访问，通过 <code>nc -vz IP 端口</code>  检验，返回 <code>Succeeded</code> 即成功。  </p></blockquote></li><li><p>数据库权限：若 MySQL 通过命令安装，需特别注意的权限问题，即账号和密码是默认配置的，用户可自行修改，具体修改细节见参考 [6] - [8] 中的方法 ( 可能实操过程中还会遇到其他问题，推荐翻阅下参考文章，也许对你有帮助 )。</p><blockquote><p>若有需求远程连接数据库，我们需要创建一个新用户，并赋予访问权限 (当然，你可让你的 root 账户也赋予远程连接数据库的权限)。具体地：<br><code>grant all privileges on *.* to  kofe@&quot;%&quot; identified by &quot;123321&quot; with grant option;</code>.<br>授权完成后，刷新下账户权限即可：<code>flush privileges;</code>。  </p></blockquote></li></ul></li><li><p>Step.05：以 IntelliJ Idea IDE 为参考搭建框架，参考 [1] - [3] 中的方法；</p><ul><li>[1] 中 <code>全注解方式的 SSH 基础框架</code> 的框架整合的思想不错，推荐在你搭建框架时参详。</li><li>[2] - [3] 的搭建方法都是 <code>导 Jar 包形式</code>，但千万要注意相对应的 Jar 包是否已经下载到本地。</li><li>当然，推荐 <code>Maven</code> 管理项目，即它是添加依赖库的方式配置环境的，下述的内容也是基于 Maven 构建框架。</li></ul></li></ul><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li><p>基于以下版本，打包的 SSH 框架 ( Maven )：<a href="https://pan.baidu.com/s/11czZlhOzSLNX7gB16t1AtQ" target="_blank" rel="noopener">SSHFrameComposition.2018.08.15</a></p></li><li><p>框架版本：</p><ul><li>Struts：2.5.16</li><li>Spring：4.3.x</li><li>Hibernate：5.2.x</li></ul></li><li>其他组件：<ul><li>MySQL：5.7.x / SQL Server：2008 R2</li><li>Tomcat：9.0.x</li><li>Maven：3.3.9</li><li>JDK：1.8</li></ul></li><li><p>构建框架，还需要相关依赖库 ( Jar 包 )，详细请参阅 <a href="#ioC-入门案例">ioC 入门案例</a>。</p><blockquote><p>为便于你下载 Jar 包或校对依赖是否齐全，具体地，以下列举了 SSH 框架所需要的依赖库。</p></blockquote></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">Spring</th><th style="text-align:left">Struts2</th><th style="text-align:left">Hibernate</th></tr></thead><tbody><tr><td style="text-align:left">spring-core</td><td style="text-align:left">asm</td><td style="text-align:left">antlr</td></tr><tr><td style="text-align:left">spring-beans</td><td style="text-align:left">asm-commons</td><td style="text-align:left">stax2-api</td></tr><tr><td style="text-align:left">spring-context</td><td style="text-align:left">asm-tree</td><td style="text-align:left">geronimo-jta_1.1_spec</td></tr><tr><td style="text-align:left">spring-expression</td><td style="text-align:left">commons-fileupload</td><td style="text-align:left">hibernate-commons-annotation</td></tr><tr><td style="text-align:left">spring-web ( 整合 Web )</td><td style="text-align:left">commons-io</td><td style="text-align:left">hibernate-core</td></tr><tr><td style="text-align:left">spring-aop ( 整合 Aop )</td><td style="text-align:left">commons-lang3</td><td style="text-align:left">hibernate-jpa</td></tr><tr><td style="text-align:left">aopalliance ( 整合 Aop )</td><td style="text-align:left">freemarker</td><td style="text-align:left">jandex</td></tr><tr><td style="text-align:left">spring-aspect ( 整合 Aop )</td><td style="text-align:left">javassist</td><td style="text-align:left">javassist</td></tr><tr><td style="text-align:left">aspectjweaver ( 整合 Aop )</td><td style="text-align:left">log4j-api</td><td style="text-align:left">jboss-logging</td></tr><tr><td style="text-align:left">spring-orm</td><td style="text-align:left">log4j-core</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-tx ( 整合事务 )</td><td style="text-align:left">ognl</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">spring-jdbc ( 整合 Hibernate )</td><td style="text-align:left">struts-core</td><td style="text-align:left">&nbsp;</td></tr><tr><td style="text-align:left">c3p0 ( 数据库连接池 )</td><td style="text-align:left">&nbsp;</td><td style="text-align:left">&nbsp;</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">其他依赖库 ( Jar 包 )</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left">junit</td><td style="text-align:left">Junit 单元测试</td></tr><tr><td style="text-align:left">mysql-connector-java</td><td style="text-align:left">添加 MySQL 数据库支持</td></tr><tr><td style="text-align:left">struts2-spring-plugin</td><td style="text-align:left">Struts 整合 Spring 插件</td></tr><tr><td style="text-align:left">struts2-junit-plugin</td><td style="text-align:left">便于浏览项目中所有 action 及其与 Jsp View 的映射</td></tr><tr><td style="text-align:left">jstl</td><td style="text-align:left">JSTL 标签库</td></tr><tr><td style="text-align:left">taglibs-standard-impl</td><td style="text-align:left">标签库</td></tr></tbody></table></div><h2 id="框架初识"><a href="#框架初识" class="headerlink" title="框架初识"></a>框架初识</h2><h3 id="ORM-框架"><a href="#ORM-框架" class="headerlink" title="ORM 框架"></a>ORM 框架</h3><ul><li>对象关系映射（Object Relational Mapping，O/R Mapping，ORM）是通过使用描述对象和数据库之间映射的 <code>元数据</code>，将面向对象语言程序中的 <code>对象</code> 自动 <code>持久化</code> 到 <code>关系数据库</code> 中。本质上就是将数据从一种形式转换到另外一种形式。 </li><li>让 <code>实体类</code> 和 <code>数据库表</code> 进行一一对应关系 (映射关系)，<code>实体类属性</code> 和 <code>表里面的字段</code> 对应。操作表对应实体类对象，而不需操作数据库表。</li></ul><h3 id="SSH-框架"><a href="#SSH-框架" class="headerlink" title="SSH 框架"></a>SSH 框架</h3><p>SSH 框架：<a href="http://spring.io/" target="_blank" rel="noopener">Spring</a>、<a href="http://struts.apache.org/" target="_blank" rel="noopener">Struts2</a>、<a href="http://hibernate.org/" target="_blank" rel="noopener">Hibernate</a> </p><p>集成 SSH 框架的系统从职责上分为四层：<code>表示层</code>、<code>业务逻辑层</code>、<code>数据持久层</code> 和 <code>域模块层</code>，以帮助开发人员在短期内搭建结构清晰、可复用性好、维护方便的 Web 应用程序。其中使用 <code>Struts</code> 作为 <code>系统的整体基础架构</code>，负责 MVC 的分离，在 Struts 框架的模型部分，控制业务跳转，利用 <code>Hibernate</code> 框架对 <code>持久层</code> 提供支持，<code>Spring</code> 做管理，<code>管理 Struts 和 Hibernate</code>。</p><p>具体做法是：用面向对象的分析方法根据需求提出一些模型，将这些模型实现为基本的 Java 对象，然后编写基本的 DAO (Data Access Objects) 接口，并给出 Hibernate 的 DAO 实现，采用 Hibernate 架构实现的 DAO 类来实现 Java 类与数据库之间的转换和访问，最后由 Spring 做管理，管理 Struts 和 Hibernate。</p><hr><h4 id="Struts"><a href="#Struts" class="headerlink" title="Struts"></a>Struts</h4><p>主要是用来做 <code>表示层</code>，也就所谓的 <code>界面</code>，和用户直接打交道，用来处理用户的请求和请求后返回给用户的模型数据。 Struts 对 Model，View 和 Controller 都提供了对应的组件。</p><h5 id="Struts2-入门"><a href="#Struts2-入门" class="headerlink" title="Struts2 入门"></a>Struts2 入门</h5><h6 id="Struts2-概述"><a href="#Struts2-概述" class="headerlink" title="Struts2 概述"></a>Struts2 概述</h6><ul><li>Struts2 框架应用在 Java EE 三层结果中的 Web 层框架；</li><li><p>Struts2 解决的问题：</p><p>  <img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-1.png" alt="Struts2解决的问题"></p><center>图 6-1 Struts2 解决的问题</center></li></ul><h6 id="Struts2-案例"><a href="#Struts2-案例" class="headerlink" title="Struts2 案例"></a>Struts2 案例</h6><ul><li><p>创建 Action：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseAction.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 每次访问 action ，默认执行名称 execute() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置 Action 类访问路径：需在 Src 根目录下创建核心配置文件 struts.xml，其名称和位置是固定的。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">    "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | Name 属性值填写 action 访问的名称，例如 BaseAciton.action</span></span><br><span class="line"><span class="comment">         | Class 属性值填写目标 Action 的全路径</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"BaseAction"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span>&gt;</span>/</span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/jsp/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>配置过滤器：在 web.xml 中添加过滤器</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="Struts2-底层执行过程"><a href="#Struts2-底层执行过程" class="headerlink" title="Struts2  底层执行过程"></a>Struts2  底层执行过程</h6><p>如图 6-2 所示，为 Struts 底层执行过程图示。</p><p><img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-2.png" alt="Struts底层执行过程"></p><center>图 6-2 Struts 底层执行过程</center><h6 id="Struts2-配置"><a href="#Struts2-配置" class="headerlink" title="Struts2 配置"></a>Struts2 配置</h6><ul><li><p>Struts 核心配置文件 ( Struts2.5.x 版本 )</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Struts 2.5.x 版本的约束 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">    "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单的编码/乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定Struts2处于开发阶段，可以进行调试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Name 属性：唯一标识 Package</span></span><br><span class="line"><span class="comment">     | Extends 属性：属性固定的的，即 Package 中配置的类具有 action 功能</span></span><br><span class="line"><span class="comment">     | Namespace 属性：与 action 标签名构成访问路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">strict-method-invocation</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Struts2.5.x 版本特征，提升安全性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | Name 属性：唯一标识，与 namespace 构成访问访问路径</span></span><br><span class="line"><span class="comment">         | Class 属性：Action 类的全路径</span></span><br><span class="line"><span class="comment">         | Method 属性：除了 execute() 方法，若绑定 Action 类其他方法则用此属性</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"baseAction"</span> <span class="attr">class</span>=<span class="string">"cn.kofe.action.baseAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             | 根据 Action 类中方法的返回值，配置到不同的路径里面</span></span><br><span class="line"><span class="comment">             | Name 属性：与 Action 类对应的方法的返回值一样</span></span><br><span class="line"><span class="comment">             | Type 属性：配置如何到路径中 ( 转发或者重定向 )，默认值为转发</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Add actions here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="Struts2-Action-创建"><a href="#Struts2-Action-创建" class="headerlink" title="Struts2 Action 创建"></a>Struts2 Action 创建</h6><ul><li><p>创建普通类，不继承任何类，不实现任何接口；</p></li><li><p><del>创建类，实现 Action 接口</del>；</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String execute <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> NONE; <span class="comment">// SUCCESS、ERROR ( 也可自定义字符串 ) ... </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建类，继承 ActionSupport；</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String execute <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> NONE; <span class="comment">// SUCCESS、ERROR ( 也可自定义字符串 ) ... </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> SUCCESS; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="Struts2-Action-方法访问"><a href="#Struts2-Action-方法访问" class="headerlink" title="Struts2 Action 方法访问"></a>Struts2 Action 方法访问</h6><ul><li><p>使用 action 标签中的 method 属性，在属性里写执行的 action 的方法名称；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">strict-method-invocation</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span> <span class="attr">method</span>=<span class="string">"login"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用通配符方式实现；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">strict-method-invocation</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 例如，访问路径为 http://192.168.x.x/action_login.action --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"action_*"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>动态访问实现；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 动态方法访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- strict-method-invocation：是否允许使用通配符 ( 默认开启，不需要关闭 ) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">strict-method-invocation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可以限制具体哪些方法可以动态访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span> <span class="attr">method</span>=<span class="string">"login"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>常见错误：</p><ul><li>若 action 方法有返回值，在配置文件中没有配置，会出现无法找到页面的错误 (404)。</li><li>action 的名称，action 方法的返回值常量，规范使用 <code>驼峰式命名</code> 定义。</li></ul></li></ul><h5 id="Struts2-数据操作"><a href="#Struts2-数据操作" class="headerlink" title="Struts2 数据操作"></a>Struts2 数据操作</h5><h6 id="结果页面配置"><a href="#结果页面配置" class="headerlink" title="结果页面配置"></a>结果页面配置</h6><ul><li><p>全局结果页面：若多个 Action，方法的返回值相同，到达页面也是相同，则可使用全局结果页面配置。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>局部结果页面：若配置了全局和局部结果页面，以局部为准。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span> <span class="attr">method</span>=<span class="string">"login"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Result 标签 的 Type 属性 (值)：</p><ul><li><code>dispatcher</code>：默认值，转发操作。</li><li><code>redirect</code>：重定向操作。</li><li><code>redirectAction</code>：重定向到 action。</li><li><del><code>chain</code>：转发到 action ( 缓存问题 )</del>。</li></ul></li></ul><h6 id="表单数据操作"><a href="#表单数据操作" class="headerlink" title="表单数据操作"></a>表单数据操作</h6><ul><li><p>先构造一个表单：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>SSH_FRAME_COMP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/form.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            Username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Age：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Email：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Phone：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- struts.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"FormOperator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.FormOperator"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 若返回 "success"，则重定向到另一个 action，即执行登录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>action 获取表单提交数据</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> throw Exception </span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Case.01.使用 ActionContext 类获取</span></span><br><span class="line">        ActionContext context = ActionContext.getContext();</span><br><span class="line">        <span class="comment">// key 时表单输入项 Name 的属性值，Value 时输入的值 </span></span><br><span class="line">        Map&lt;String, Object&gt; map = context.getParameters();</span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keys) &#123;</span><br><span class="line">            <span class="comment">// 数组形式，考虑有复选框的情况</span></span><br><span class="line">            Object[] obj = (Object[]) map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Case.02.使用 ServletActionContext 类获取</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        String username = request.getParamter(<span class="string">"username"</span>);</span><br><span class="line">        </span><br><span class="line">        rerun NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Case.03.使用接口注入方式获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overrride</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> throw Exception </span>&#123;</span><br><span class="line">        String username = request.getParamter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>action 操作域对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> throw Exception </span>&#123; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 操作域对象</span></span><br><span class="line">        <span class="comment">// Request 域</span></span><br><span class="line">        HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">        request.setAttribute(<span class="string">"requestKey"</span>, <span class="string">"requestValue"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Session 域</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"sessionKey"</span>, <span class="string">"sessionValue"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ServletContext 域</span></span><br><span class="line">        ServletContext context = ServletActionContext.getServletContext();</span><br><span class="line">        context.setAttribute(<span class="string">"contextKey"</span>, <span class="string">"contextValue"</span>);</span><br><span class="line">        </span><br><span class="line">        rerun NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>struts2 提供获取表单数据方式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始方式获取表单数据，再封装数据到实体类对象中</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">user.setUsername( request.getParamter(<span class="string">"username"</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性封装：获取表单数据到属性中  ( Setter 和 Getter 方法补全即可 )</span></span><br><span class="line"><span class="comment">// 在 action 的成员变量位置定义变量 ( 变量名称和表单输入项的 Name 属性值一样 )</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123; <span class="keyword">this</span>.username = username &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> username; &#125;</span><br><span class="line"><span class="comment">// 以此类推...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型驱动封装</span></span><br><span class="line"><span class="comment">// Step.01. 实现接口 ModelDriven</span></span><br><span class="line"><span class="comment">// Step.02. 实现接口的方法 getModel()，再把创建对象返回</span></span><br><span class="line"><span class="comment">// Step.03. 在 action 里『创建』实体类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sring <span class="title">execute</span><span class="params">()</span> throw EXception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式封装</span></span><br><span class="line"><span class="comment">// Step.01.在 action 中『声明』实体类；</span></span><br><span class="line"><span class="comment">// Step.02.生成实体类变量的 Setter 和 Getter 方法</span></span><br><span class="line"><span class="comment">// Step.03.再表单输入项的 Name 属性值中填写表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式：&lt;input type="text" name="user.username" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123; <span class="keyword">this</span>.user = user; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> user; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sring <span class="title">execute</span><span class="params">()</span> throw EXception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>使用模型驱动和属性封装是注意事项：在同一个 action 中，获取表单数据可以是模型驱动合作和属性封装，但不能同时使用二者。<code>同时使用只会执行模型驱动</code>。  </p></blockquote><ul><li><p><code>表达式封装</code> 和 <code>模型驱动</code> 比较：  </p><ul><li>相同点：使用表达式封装和模型驱动封装都可把数据封装到实体类对象里。</li><li>不同点：使用模型驱动只能把数据封装到一个实体类对象里。而表达式封装没有限制，即通过表达式封装可把数据封装到多个、不同的实体类对象里面。</li></ul></li><li><p>struts2 获取数据封装到集合：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 封装数据到 List 集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[0].username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[0].age"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[1].username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"list[1].age"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 封装数据到 Map 集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['Lucy'].username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['Lucy'].age"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['Mark'].username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"map['Mark'].age"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在实现类中声明 --&gt;</span></span><br><span class="line">public class FormOperator extends ActionSupport &#123;</span><br><span class="line">    private List<span class="tag">&lt;<span class="name">User</span>&gt;</span> list;</span><br><span class="line">    public void setList(List<span class="tag">&lt;<span class="name">User</span>&gt;</span> list) &#123; this.list = list; &#125;</span><br><span class="line">    public List<span class="tag">&lt;<span class="name">User</span>&gt;</span> list getUser() &#123; return list; &#125;</span><br><span class="line">     </span><br><span class="line">    // private Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">User</span>&gt;</span> map;</span><br><span class="line">    // public void setMap(Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">User</span>&gt;</span> map) &#123; this.map = map &#125;</span><br><span class="line">    // public Map<span class="tag">&lt;<span class="name">String,</span> <span class="attr">User</span>&gt;</span> getMap() &#123; return map; &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Sring execute() throw EXception &#123;</span><br><span class="line">        return NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="案例实操展示"><a href="#案例实操展示" class="headerlink" title="案例实操展示"></a>案例实操展示</h6><ul><li><p>新建表单操作页面 <code>form.jsp</code> 和数据展示页面 <code>info.jsp</code>：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- form.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>SSH_FRAME_COMP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/form.action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            Username：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.username"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Age：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Email：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.email"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            Phone：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.phone"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- info.jsp --&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 struts.xml 配置文件中添加 action：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- struts.xml --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</span></span><br><span class="line"><span class="meta">    "http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单的编码/乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态方法访问 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">strict-method-invocation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global-allowed-methods</span>&gt;</span>regex:.*<span class="tag">&lt;/<span class="name">global-allowed-methods</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 使用注解创建 FormOperator 对象，直接引用标签值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">class</span>=<span class="string">"formOperator"</span> <span class="attr">method</span>=<span class="string">"saveInfo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"getinfo"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 插入数据后加载数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"info"</span> <span class="attr">class</span>=<span class="string">"formOperator"</span> <span class="attr">method</span>=<span class="string">"getInfo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"listinfo"</span>&gt;</span>/jsp/info.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 Action 中实现逻辑处理类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FormOperator.java</span></span><br><span class="line"><span class="comment">// Action 层：界面交互层</span></span><br><span class="line"><span class="meta">@Controller</span>(value=<span class="string">"formOperator"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Service 处理业务逻辑</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"sampleService"</span>)</span><br><span class="line">    <span class="keyword">private</span> BaseService service;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sring <span class="title">execute</span><span class="params">()</span> throw EXception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.saveUserInfo(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"info"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从数据库中加载数据</span></span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SampleServiceImpl.java</span></span><br><span class="line"><span class="comment">// Servie 层：业务逻辑层</span></span><br><span class="line"><span class="meta">@Service</span>(value = <span class="string">"sampleService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleServiceImpl</span> <span class="keyword">implements</span> <span class="title">BaseService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"sampleDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> BaseDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserInfo</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">null</span> != dao.queryOneTuple(user.getClass(), user.getUid()) ) &#123;</span><br><span class="line">            dao.updateOneTuple(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dao.insertOneTuple(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SampleDaoImpl.java</span></span><br><span class="line"><span class="comment">// Dao 层：数据持久层</span></span><br><span class="line"><span class="meta">@Repository</span>(value = <span class="string">"sampleDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleDaoImpl</span> <span class="keyword">implements</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"hibernateTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> HibernateTemplate hibernateTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertOneTuple</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">        hibernateTemplate.save(entity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTuple</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">        hibernateTemplate.update(entity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">queryOneTuple</span><span class="params">(Class&lt;T&gt; entityClass, Serializable id)</span> </span>&#123;</span><br><span class="line">        T temporary = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != entityClass) &#123;</span><br><span class="line">            temporary = hibernateTemplate.get(entityClass, id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temporary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Struts2-值栈"><a href="#Struts2-值栈" class="headerlink" title="Struts2 值栈"></a>Struts2 值栈</h5><h6 id="值栈概念"><a href="#值栈概念" class="headerlink" title="值栈概念"></a>值栈概念</h6><ul><li><p>什么是值栈：</p><ul><li>Struts 里本身提供一种存储机制，类似于 <code>域对象</code>。即值栈，可存储数据也可读取数据。</li><li>Striuts 把数据放到值栈里，在 Jsp 页面中获取到值栈数据。</li></ul></li><li><p>Ognl：Web 阶段，EL 表达在 Jsp 中获取域对象中的值。而 Ognl 也是一种表达式。</p><ul><li>Struts 中操作值栈数据，和 <code>Struts 标签</code> 一起使用、操作值栈。</li><li>Ognl 不是 Struts 的一部分，可以单独使用。</li></ul></li><li><p>Struts 标签：虽然标签封装了样式，方便操作，但故样式上会有限制。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在对应的 jsp 页面中引入标签库  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查看值栈结构和数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:debug</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 Ognl + Struts 标签，实现计算字符串长度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"'str'.length()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html 表单标签</span></span><br><span class="line"><span class="comment"> | 1) form：action、method、enctype</span></span><br><span class="line"><span class="comment"> | 2) 输入项：大部分在 input 中封装 type 值实现各种输入项，例如：</span></span><br><span class="line"><span class="comment"> |    text，普通文本输入项</span></span><br><span class="line"><span class="comment"> |    password，密码输入项</span></span><br><span class="line"><span class="comment"> |    radio，单选输入项</span></span><br><span class="line"><span class="comment"> |    checkbox，复选输入项</span></span><br><span class="line"><span class="comment"> |    file，文件上传项</span></span><br><span class="line"><span class="comment"> |    hidden，隐藏项</span></span><br><span class="line"><span class="comment"> |    button，普通按钮</span></span><br><span class="line"><span class="comment"> |    submit，提交按钮</span></span><br><span class="line"><span class="comment"> |    image，图片提交</span></span><br><span class="line"><span class="comment"> |    reset，重置</span></span><br><span class="line"><span class="comment"> | 3) select：下拉输入项</span></span><br><span class="line"><span class="comment"> | 4) textarea：文本域</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">name</span>=<span class="string">"signupForm"</span> <span class="attr">action</span>=<span class="string">"form.action' method="</span><span class="attr">POST</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通输入项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">label</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码输入项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:password</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">label</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:radio</span> <span class="attr">list</span>=<span class="string">"#&#123;'male':'男', 'female':'女'&#125;"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">label</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:checkboxlist</span> <span class="attr">list</span>=<span class="string">"&#123;'sleep', 'eat'&#125;"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">label</span>=<span class="string">"interest"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:select</span> <span class="attr">list</span>=<span class="string">"&#123;'str1', 'str2', 'str3'&#125;"</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">label</span>=<span class="string">"sample"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:file</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">label</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textarea</span> <span class="attr">row</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">value</span>=<span class="string">"description"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  隐藏项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:hidden</span> <span class="attr">name</span>=<span class="string">"hiddenContent"</span> <span class="attr">value</span>=<span class="string">"hidden content is here"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Servlet 和 Action 区别：</p><ul><li>Servlet：默认在第一次访问时创建，仅创建一次。( 单实例 )</li><li>Action：访问时候创建，且每次访问时都会创建 action 对象。( 多实例 )</li></ul></li></ul><h6 id="获取值栈对象"><a href="#获取值栈对象" class="headerlink" title="获取值栈对象"></a>获取值栈对象</h6><ul><li><p>使用 ActionContext 类的方法获取值栈对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormOperator</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sring <span class="title">execute</span><span class="params">()</span> throw EXception </span>&#123;</span><br><span class="line">        ActionContext context = ActionContext().getContext();</span><br><span class="line">        ValueStack stack = context.getValueStack();</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="值栈内部结构"><a href="#值栈内部结构" class="headerlink" title="值栈内部结构"></a>值栈内部结构</h6><p>值栈主要分为两部分：</p><ul><li><p>Root：List 集合 <code>Class Compoundroot extends ArrayList { ... }</code></p></li><li><p>Context：Map 集合 <code>Class Compoundroot extends Object implements Map { ... }</code></p><p>  <img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-3.png" alt="Context 存储的对象引用"></p>  <center>图 6-3 Context 存储的对象引用</center></li></ul><h6 id="向值栈存数据"><a href="#向值栈存数据" class="headerlink" title="向值栈存数据"></a>向值栈存数据</h6><blockquote><p>结合 <code>&lt;s:debug /&gt;</code> 标签，可浏览值栈的传值情况。</p></blockquote><p>向值栈存数据的多种方式：</p><ul><li>获取值栈对象，调用值栈对象的 set 方法。</li><li>获取值栈对象，调用值栈对象的 push 方法。</li><li><p>在 action 定义变量，生产变量的 get 方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取值栈对象</span></span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line">ValueStack stack = context.getValueStack();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向值栈放字符串</span></span><br><span class="line"><span class="comment">// Case.01</span></span><br><span class="line">stack.set(<span class="string">"username"</span>, <span class="string">"AttrSet"</span>);</span><br><span class="line"><span class="comment">// Case.02</span></span><br><span class="line">stack.push(<span class="string">"PushMethod"</span>);</span><br><span class="line"><span class="comment">// Case.03.声明变量，生成 Getter 方法</span></span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> str; &#125;</span><br><span class="line">str = <span class="string">"SetStrAttr"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向值栈放对象</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> user; &#125;</span><br><span class="line"><span class="comment">// user.setXXX();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向值栈放 List 集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> list; &#125;</span><br><span class="line">list = getAllUserInfo(User.class);</span><br></pre></td></tr></table></figure></li></ul><h6 id="从值栈取数据"><a href="#从值栈取数据" class="headerlink" title="从值栈取数据"></a>从值栈取数据</h6><ul><li><p>从值栈获取数据</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在对应的 jsp 页面中引入 struts 标签库  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 Jsp 页面中获取属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"str"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jsp 页面中获取对象的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"user.username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"user.email"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jsp 页面中获取 List 集合：方式 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Jsp 页面中获取 List 集合：方式 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"list"</span> <span class="attr">var</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#user.username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#user.age"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#user.email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#user.phone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p><code>业务逻辑层</code>，是一个轻量级的控制反转 (IoC) 和面向切面 (AOP) 的容器框架。</p><h5 id="Spring-概念"><a href="#Spring-概念" class="headerlink" title="Spring 概念"></a>Spring 概念</h5><ul><li>一站式轻量级开源框架，在 Java EE 三层结构中，每一层提供不同的解决技术。<ul><li><code>Web 层</code>：Spring MVC</li><li><code>Service 层</code>：ioC</li><li><code>DAO 层</code>：Spring 的 JdbcTemplate</li></ul></li><li>AOP：<code>面向切面编程</code>，扩展功能不是通过修改源码实现的，即通过 <code>动态代理技术</code>，把各类通知 / 增强织入到它所约定的流程当中。事实上，是通过引入其他类的方法来实现的。</li><li>ioC：<code>控制反转</code>，例如：对象的创建不通过 new 方式实现，而是通过 Spring 配置创建类对象。</li></ul><h5 id="Spring-ioC"><a href="#Spring-ioC" class="headerlink" title="Spring ioC"></a>Spring ioC</h5><p>控制反转 (ioC)，是一种通过描述 (在 Java 中可以是 XML 或者注解) 并通过第三方去产生或获取特定对象的方式。</p><h6 id="ioC-底层原理"><a href="#ioC-底层原理" class="headerlink" title="ioC 底层原理"></a>ioC 底层原理</h6><ul><li>使用技术：<ul><li>XML 配置文件；</li><li>Dom4j 解析 XML；</li><li>工厂设计模式；</li><li>类的反射.</li></ul></li><li>代码实现：<ul><li>创建 XML 配置文件，配置要创建对象类。</li><li>创建工厂类，使用 Dom4j 解析配置文件，通过反射创建类对象。</li></ul></li></ul><h6 id="ioC-入门案例"><a href="#ioC-入门案例" class="headerlink" title="ioC 入门案例"></a>ioC 入门案例</h6><ul><li><p>Maven 中添加依赖库 ( 对应导入 Jar 包 )：</p><blockquote><p>下载 Jar 包：到 <a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Pository</a> 中搜索目标 Jar 包，在具体页面中的 Files 一栏可下载。例如：<a href="http://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/2.11.0" target="_blank" rel="noopener">log4j-core.2.11.0</a></p></blockquote>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- porm.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Version Control of Jar Dependency  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.18.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.2.17.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">struts2.version</span>&gt;</span>2.5.16<span class="tag">&lt;/<span class="name">struts2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Foundation of SSH ( Spring、Struts 2、Hibernate ) --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="comment">&lt;!-- 以下依赖包为下文所需要的，为方便起见这里统一配置 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- struts2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ow2.asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm-tree<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.22.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- config-browser-plugin 插件方便浏览项目中的所有 Action 及其与 Jsp View 的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-junit-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Hibernate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-commons-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-jpa-2.1-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jandex<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jboss-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.woodstox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stax2-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.geronimo.specs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>geronimo-jta_1.1_spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Combining with SSH ( Spring、Struts 2、Hibernate ) framework --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring 整合 Hibernate 和事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring 整合 AOP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib-nodep<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring 整合 Web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sturts 2 整合 Spring 框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Others --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加对 MySQL 数据库的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加对数据源的支持 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c3p0数据库连接池的辅助包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志系统 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建 Spring 配置文件：在 Src 目录下 (建议)，创建 Spring 核心配置文件 applicationContext.xml。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;bean id="</span><span class="attr">operator</span>" <span class="attr">class</span>=<span class="string">"cn.entity.UserOperator"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>再配置创建类，对象创建 (方便演示，以单元测试形式呈现)：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">ioCTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Step.01.加载 Spring 配置文件</span></span><br><span class="line">        ApplicationContext context  = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// Step.02. 得到配置创建的对象</span></span><br><span class="line">        UserOperator operator = </span><br><span class="line">            (UserOperator) context.getBean(<span class="string">"operator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-Bean-管理-XML"><a href="#Spring-Bean-管理-XML" class="headerlink" title="Spring Bean 管理 (XML)"></a>Spring Bean 管理 (XML)</h5><h6 id="Bean-标签常用属性"><a href="#Bean-标签常用属性" class="headerlink" title="Bean 标签常用属性"></a>Bean 标签常用属性</h6><ul><li>ID 属性：Bean 标签的名称，要求只含数字和大小写英文字母。</li><li>Class 属性：常见对象所在类的全路径。</li><li>Name 属性：功能和 ID 属性一样，Name 属性可包含特殊字符值。</li><li>Scope 属性：<ul><li><code>singleton</code>：单例的 ( 默认值 )。</li><li><code>prototype</code>：多例的。</li></ul></li></ul><h6 id="Bean-实例化的方式"><a href="#Bean-实例化的方式" class="headerlink" title="Bean 实例化的方式"></a>Bean 实例化的方式</h6><ul><li><p>使用类的无参数构造创建对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserOperator</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用静态工厂创建对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserOperator <span class="title">getOperator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String className = <span class="string">"classValue"</span>; <span class="comment">// cn.entity.UserOperator</span></span><br><span class="line">        Class clz = Class.forName(className);</span><br><span class="line">        <span class="keyword">return</span> clz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>上述实例化方法在 applicationContext.xml 中的配置：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperator"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 静态工厂创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getOperator"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="属性注入方式"><a href="#属性注入方式" class="headerlink" title="属性注入方式"></a>属性注入方式</h6><ul><li><p>Set() 方法注入</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String operationType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String operationType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.operationType = operationType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有参数构造注入</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String operationType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserOperator</span><span class="params">(String operationType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.operationType = operationType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注入 <code>对象属性</code> 类型：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> User user;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.user = user;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserOperator operator = (UserOperator) context.getBean(<span class="string">"operator"</span>);</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注入 <code>复杂类型</code> 属性：</p><ul><li>数组</li><li>List 集合</li><li>Map 集合</li><li><p>Properties 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorXML</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String arrs;<span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;<span class="comment">// List 集合</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;<span class="comment">// Map 集合</span></span><br><span class="line">    <span class="keyword">private</span> Properties properties;<span class="comment">// Properties 类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter() 方法此处省略...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserOperatorXML operator =</span><br><span class="line">         (UserOperatorXML) context.getBean(<span class="string">"operator"</span>);</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>上述 <code>注入方法</code> 在 applicationContext.xml 中的配置：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- -- 有参数构造注入属性 -- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorXML"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"operationType"</span> <span class="attr">value</span>=<span class="string">"modify"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- -- Set 方法注入属性 -- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorXML"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"operationType"</span> <span class="attr">value</span>=<span class="string">"modify"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -- 注入 对象属性 类型 -- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorXML"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | Name 属性值：类里面的定义属性的名称</span></span><br><span class="line"><span class="comment">     | Ref 属性：定义属性在 Bean 标签中的 ID 值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">ref</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- -- 注入 复杂类型 属性 -- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"complex"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorXML"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组、List 集合适用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lsit</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>Arrs0<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">lsit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lsit</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>Arrs1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">lsit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lsit</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>Arrs2<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">lsit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Map 集合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"seq1"</span> <span class="attr">value</span>=<span class="string">"str1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"seq2"</span> <span class="attr">value</span>=<span class="string">"str2"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"seq3"</span> <span class="attr">value</span>=<span class="string">"str3"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Properties：例如我们要配置数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverclass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="Spring-DI"><a href="#Spring-DI" class="headerlink" title="Spring DI"></a>Spring DI</h6><p>ioC 与 DI 的区别</p><ul><li><code>ioC</code>：<code>控制反转</code>，把对象创建交给 Spring 进行配置。</li><li><p><code>DI</code>：<code>依赖注入</code>，向类中的属性设置属性值。</p><blockquote><p>关系：依赖注入不能单独存在，需在 ioC 基础之上完成操作。</p></blockquote></li></ul><h5 id="Spring-Bean-管理-注解"><a href="#Spring-Bean-管理-注解" class="headerlink" title="Spring Bean 管理 (注解)"></a>Spring Bean 管理 (注解)</h5><ul><li>注解格式：<code>@注解名称(value=&quot;属性值&quot;)</code> 或者 <code>@注解名称(&quot;属性值&quot;)</code> </li><li><p><code>@Component(&quot;user&quot;)</code> 相当于 <code>&lt;bean id=&quot;user&quot; class=&quot;&quot; /&gt;</code>，其三个衍生注解为：</p><ul><li>@Controller：Web 层，相当于 Struts 中的 Action 层。</li><li>@Service：业务层 ，业务逻辑处理。</li><li><p>@Repository：持久层，标注数据访问组件，即 DAO 组件。</p><blockquote><p>功能目前来说是一致的，即创建对象。</p></blockquote></li></ul></li><li><p><code>@Scope(&quot;prototype&quot;)</code> 或 <code>@Scope(&quot;singleton&quot;)</code>：即配置的对象是单实例还是多实例。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"BaseAction"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h6><ul><li>使用注解创建对象</li><li>使用注解注入对象</li><li>xml 和注解方式混合使用</li></ul><h6 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h6><ul><li><p>创建类和方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; <span class="comment">/* 省略实体类的属性 */</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123; <span class="comment">/* 省略实体类的属性 */</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Firm</span> </span>&#123; <span class="comment">/* 省略实体类的属性 */</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 Spring 配置文件，并引入约束 (在上述 applicationContext.xml 中追加)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 注解扫描：扫描属性上面的注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 注解扫描：到包里扫描类、方法、属性上面的注解，</span></span><br><span class="line"><span class="comment">     | 即使用 Annotation 自动注册 Bean</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.kofes"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.kofes.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注解中创建对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此方式相当于 &lt;bean id="user" class="cn.kofes.entity.User" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"user"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 省略实体类的属性...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorAnn</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        System.out.println(user); <span class="comment">// 直接调用 user 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注解注入属性</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体操作类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorAnn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于 Set 方法注入属性：</span></span><br><span class="line">    <span class="comment">// @Autowired 或者 @Resource(name = "user") </span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        System.out.println(firm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>XML 配置文件和注解混合使用</p><ul><li>创建对象操作使用 XML 配置文件方式实现；</li><li><p>注入属性的操作使用注解方式实现.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Start：applicationContext.xml */</span></span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.kofes.entity.User"</span> /&gt;</span><br><span class="line">&lt;bean id=<span class="string">"customer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.kofes.entity.Customer"</span> /&gt;</span><br><span class="line">&lt;bean id=<span class="string">"firm"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.kofes.entity.Firm"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* End：applicationContext.xml */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorAnn</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注解方式注入属性</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"user"</span>) </span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"customer"</span>) </span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"firm"</span>) </span><br><span class="line">    <span class="keyword">private</span> Firm firm;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = </span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        System.out.println(firm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h5><h6 id="AOP-概述"><a href="#AOP-概述" class="headerlink" title="AOP 概述"></a>AOP 概述</h6><p>面向切面编程 (Aspect Oriented Programing，AOP)，扩展功能不通过修改代码实现。AOP 采取 <code>横向抽取机制</code> 取代传统 <code>纵向继承体系</code> 重复性代码。</p><ul><li>纵向继承体系：通过继承获得父类的功能 (方法)。</li><li><p>横向抽取机制：动态代理方式。</p><ul><li>针对有接口的情况，使用 JDK 动态代理。</li><li><p>针对没有接口情况，使用 Cglib 动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 具体逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="AOP-相关术语"><a href="#AOP-相关术语" class="headerlink" title="AOP 相关术语"></a>AOP 相关术语</h6><p>便于理解，引入实体类进行说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>连接点 (Join Point)：指那些被拦截到的点，在 Spring 这些点指的是方法，因 Spring 只支持方法类型的连接点。</p><blockquote><p>类中有哪些方法可被增强，这些方法称为连接点。</p></blockquote></li><li><p><code>切入点 (Pointcut)</code>：指我们要对哪些 <code>Join Point</code> 进行拦截的定义。</p><blockquote><p>类中有很多方法被增强，例如实际操作中，只是增强了类中的 add() 和 update() 方法，即称为切入点。</p></blockquote></li><li><p>引介 (Introduction)：一种特殊的通知在不修改类代码的前提下， Introduction 可为类动态地添加一些方法或 Field。</p></li><li><p><code>通知/增强 (Advice)</code>：指拦截到 <code>Join Point</code> 之后要做的事情就是通知。通知分为前置通知、后置通知、异常通知、最终通知、环绕通知 (切面要完成的功能)。</p><blockquote><p>增强的逻辑称为增强，例如扩展日志功能，这个日志功能称为增强。<br>前置通知，在方法之前执行；后置通知，在方法之后执行；<br>异常通知，方法出现异常；最终通知，在后置之后执行；<br>环绕通知，在方法之前和之后执行.  </p></blockquote></li><li><p>目标对象 (Target)：代理的目标对象 (要增强的类)。</p></li><li><p>织入 (Weaving)：把增强应用到目标的过程，即把 Advice 应用到 Target 的过程。</p></li><li><p><code>切面 (Aspect)</code>：切入点和通知 (引介) 的结合。</p><blockquote><p>把增强应用到具体方法上，此过程称为切面。例如把日志功能写进 add() 方法中。</p></blockquote></li><li><p>代理 (Proxy)：一个类被 AOP 织入增强后，产生一个结果代理类。</p></li></ul><h6 id="Spring-AOP-操作"><a href="#Spring-AOP-操作" class="headerlink" title="Spring AOP 操作"></a>Spring AOP 操作</h6><blockquote><p>(1) 基于 AspectJ 的 Spring AOP 操作。</p></blockquote><p>ASpectJ：面向切面的框架，其扩展了 Java 语言。AspectJ 定义了 AOP 语法，故它有一个专门的编译器来生成遵守 Java 字节编码规范的 Class 文件。 </p><p>AspectJ 并不是 Spring 一部分，和 Spring 一起使用进行 AOP 操作。</p><p>使用 AspectJ 实现 AOP 有两种方式：1) 基于 AspectJ 的 XML 配置；2) 基于 AspectJ 的注解方式。</p><blockquote><p>(2) 操作基本流程 ( XML 方式 )：</p></blockquote><ul><li><p>使用表达式配置切入点</p><ul><li><p>execution( &lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)(异常) )</p><blockquote><p>execution( * cn.kofes.UserOpertor.add(..) )  — UserOperator 类中 add() 方法增强<br>execution( * cn.kofes.UserOperator.*(..) )  — UserOperator 类中所有方法增强<br>execution( * *.*(..) )  — 所有类中所有方法增强<br>execution( * save*(..) ) — 所有 save 开头的方法增强</p></blockquote></li></ul></li><li><p>代码实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strengthenUserOperator.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">strengthenUserOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">strengthenUserOperator</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This's an aspect inserting to the method() the front.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listBeforeOperatorType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the front."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This's an aspect inserting to the method() the front and latter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 执行被增强的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listArroundOperatorType</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the front."</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the latter."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserOperatorXML.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOperatorXML</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123; <span class="keyword">this</span>.user = user; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> user; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operatorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserOperatorXML operator = (UserOperatorXML) context.getBean(<span class="string">"operator"</span>);</span><br><span class="line">        <span class="comment">// 会在用户信息之前输出 “前置增强” 的信息。</span></span><br><span class="line">        System.out.println( operator.getUser() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 Spring 配置文件，并引入约束 (在上述 applicationContext.xml 中追加)</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"operator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.UserOperatorXML"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"strengthenoperator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.strengthenUserOperator"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置 AOP 操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点：匹配 UserOperator 类中所有方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcutA"</span> <span class="attr">expression</span>=<span class="string">"execution( * cn.kofes.UserOperatorXML.*(..))"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面：把增强用到方法上面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"strengthenoperator"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置增强类型</span></span><br><span class="line"><span class="comment">             | Aop：增强类型有 before、after、arroud 等</span></span><br><span class="line"><span class="comment">             | Method：增强类里面使用哪个方法作为前置</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"listAllOperatorType"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcutA"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>(3) 操作基本流程 ( 注解方式 )：</p></blockquote><ul><li><p>创建 Spring 配置文件 (在上述 applicationContext.xml 中追加)，XML 配置创建对象，并开启 AOP 操作：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无参数构造创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"strengthenoperator"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.entity.strengthenUserOperator"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启 AOP 操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在增强类上面使用注解完成 AOP 操作：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strengthenUserOperator.java</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">strengthenUserOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">strengthenUserOperator</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This's an aspect inserting to the method() the front.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listBeforeOperatorType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the front."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This's an aspect inserting to the method() the front and latter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 执行被增强的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(value=<span class="string">"execution( * cn.kofes.entity.UserOperatorXML.*(..) )"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listArroundOperatorType</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the front."</span>);</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"Inserting to the method() the latter."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-整合-Web-项目"><a href="#Spring-整合-Web-项目" class="headerlink" title="Spring 整合 Web 项目"></a>Spring 整合 Web 项目</h5><p><code>诉求</code>：在 Spring 运作中，首先加载 Spring 核心配置文件，再创建对象。而创建对象可通过 New 的方式创建，但效率太低，则我们可以把加载配置文件和创建对象过程，在服务器启动时完成。</p><h6 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h6><ul><li>Action 调用 Service，Service 调用 Dao。而每次 Action 时都会加载 Spring 配置文件，影响性能。</li></ul><h6 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h6><ul><li>ServletContext 对象</li><li>监听器 (观察者模式)</li></ul><h6 id="操作简叙"><a href="#操作简叙" class="headerlink" title="操作简叙"></a>操作简叙</h6><ul><li>在服务器启动时，为每个项目创建一 ServletContext 对象；</li><li>在 ServletContext 对象创建时，使用监听器监听 ServletContext 对象在什么时创建；</li><li>监听到 ServletContext 对象创建时，加载 Spring 配置文件，把配置文件配对象创建；</li><li>把创建的对象放置 ServletContext 域对象里；</li><li>到 ServletContext 域中，通过 getAttribute() 方法获取对象。</li></ul><h6 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h6><ul><li><p>在 <code>web.xml</code> 配置文件中添加监听器，并指定 Spring 配置文件 的位置。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定 Spring 配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- 监听器模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-JdbcTemplate-操作"><a href="#Spring-JdbcTemplate-操作" class="headerlink" title="Spring JdbcTemplate 操作"></a>Spring JdbcTemplate 操作</h5><ul><li>Spring 对不同的持久化层技术都进行了封装：<ul><li><code>Jdbc</code></li><li><code>Hibernate 5.x</code></li><li><code>iBatis / MyBatis</code></li><li><code>JPA</code></li></ul></li><li>JdbcTemplate 对 Jdbc 进行了封装，以下为实际操作介绍。</li></ul><h6 id="JdbcTemplate-增删改查"><a href="#JdbcTemplate-增删改查" class="headerlink" title="JdbcTemplate 增删改查"></a>JdbcTemplate 增删改查</h6><ul><li>Step.01.创建对象，设置数据库信息</li><li>Step.02.创建 jdbcTemplate 对象，设置数据源</li><li><p>Step.03.调用 jdbcTemplate 对象，实现其中的方法实现增、删、改、查操作。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jdbc 模板依赖连接池获得数据库连接，所以必须先构造连接池</span></span><br><span class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://192.168.x.x/db_testdb"</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Jdbc 模板</span></span><br><span class="line">JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建表 SQL 语句</span></span><br><span class="line">String sql_create = <span class="string">"CREATE TABLE "</span> + </span><br><span class="line"><span class="string">"t_user(id int primary key auto_increment, username varchar(20), password varchar(20))"</span>;</span><br><span class="line">String sql_insert = <span class="string">"INSERT INTO t_user VALUES(?, ?, ?)"</span>;</span><br><span class="line">String sql_update = <span class="string">"UPDATE t_user password = ? WHERE username = ?"</span>;</span><br><span class="line">String sql_delete = <span class="string">"DELETE FROM t_user WHERE username = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JdbcTemplate 实现增、删、改操作</span></span><br><span class="line">jdbcTemplate.execute(sql_create); </span><br><span class="line">jdbcTemplate.update(sql_insert, <span class="string">"Lucy"</span>, <span class="string">"123456"</span>); </span><br><span class="line">jdbcTemplate.update(sql_update, <span class="string">"Lucy"</span>, <span class="string">"abc123"</span>);</span><br><span class="line">jdbcTemplate.update(sql_delete, <span class="string">"Lucy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JdbcTemplate 实现查询操作，使用 RowMapper 接口，</span></span><br><span class="line"><span class="comment"> * 但 JdbcTemplate 没有针对这个接口提供实现类，得到不同的类型数据需要进行数据封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询返回某一个值 </span></span><br><span class="line">sql_select_certain = <span class="string">"SELECT count(*) FROM t_user"</span>;</span><br><span class="line"><span class="comment">// args0：SQL 语句，args1：返回类型 Class</span></span><br><span class="line">jdbcTemplate.queryForObject(sql_select_certain, Integer.class);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查询返回 list 集合</span></span><br><span class="line">sql_select_all = <span class="string">"SELECT * FROM t_user"</span>;</span><br><span class="line">List&lt;User&gt; list = jdbcTemplate.query( sql_select_all, <span class="keyword">new</span> MyRowMapper() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询返回 list 集合，需要创建类实现 RowMapper 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> num)</span> <span class="keyword">throws</span> SQLExpection </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername( rs.getString(<span class="string">"username"</span>) );</span><br><span class="line">        user.setPassword( rs.getString(<span class="string">"password"</span>) );</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-配置连接池"><a href="#Spring-配置连接池" class="headerlink" title="Spring 配置连接池"></a>Spring 配置连接池</h5><ul><li><p>创建 Spring 配置文件，配置连接池：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为便于修改配置，可在根目录下新建文件 c3p0.properties，填写格式如下：</span></span><br><span class="line"><span class="comment"> | datasource.driverClass=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"> | datasource.jdbcUrl=jdbc:mysql://192.168.x.x:3306/db_testdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment"> | datasource.user=root</span></span><br><span class="line"><span class="comment"> | ...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:c3p0.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Data Connection Setting --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用 c3p0.properties 的键值对即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.user&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.minPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.initialPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxIdleTime&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxStatements&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.acquireIncrement&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.checkoutTimeout&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.idleConnectionTestPeriod&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate 类中封装了 DataSource 类，以 XML 配置形式注解关系即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码引用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"jdbcTemplate"</span>)</span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"SELECT * FROM t_user"</span>;</span><br><span class="line">    List&lt;User&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> MyRowMapper());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h5><h6 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h6><p>此部分省略。</p><h6 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h6><ul><li><p>创建 Service 类和 Dao 类，再添加注入关系：<br>  1) Service 层，又称业务逻辑层；<br>  2) Dao 层，数据持久层，单纯对数据库进行操作.  </p></li><li><p>引入问题：ServiceTest 类中制造的异常，即造成了转账的不一致问题，细节如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServiceTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DaoTest daotest;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDaotest</span><span class="params">(DaoTest daotest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.daotest = daotest;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* @Transactional 注解方式时填写 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeUpdateInDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GrowUp();</span><br><span class="line">        <span class="keyword">int</span> exception = <span class="number">10</span> / <span class="number">0</span>;<span class="comment">// 人为制造异常</span></span><br><span class="line">        Dealth();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GrowUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        daotest.updateOneTuple(<span class="string">"UPDATE t_user SET age=age+1 where username = ?"</span>,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">"诸葛亮"</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Types.VARCHAR&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dealth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        daotest.updateOneTuple(<span class="string">"UPDATE t_user SET age=0 where username = ?"</span>,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="string">"诸葛亮"</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Types.VARCHAR&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DaoTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 插入元组的 SQL 语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 插入的属性值，与 SQL 中填写属性名的顺序相同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> types 对应属性值的数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTuple</span><span class="params">(String sql, Object[] obj, <span class="keyword">int</span>[] types)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(sql, obj, types);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于 XML 配置文件形式实现 ( AOP 的思想 )</p><blockquote><p>目前为止，Spring 配置文件中约束添加完毕，以后配置复制此段即可。</p></blockquote>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目前为止，Spring 配置文件中约束添加完毕，以后的程序复制此段即可 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- set 方法注入属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"service"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.service.ServiceTest"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"daotest"</span> <span class="attr">ref</span>=<span class="string">"dao"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dao"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.dao.DaoTest"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用上例的 jdbcTemplate bean 即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入 dataSource  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 做事务操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             | 事务操作方法的匹配规则，若事务操作的方法有规范命名，可以简写为：</span></span><br><span class="line"><span class="comment">             | &lt;tx:method name="execute*" /&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"executeTrading()"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置 AOP 操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"poitncutB"</span> <span class="attr">expression</span>=<span class="string">"execution( * cn.kofes.service.ServiceTest.executeTrading(..) )"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcutB"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于注解形式实现</p><p>  在需要事务操作的类上配置注解 <code>@Transactional</code>，再配置 applicationContext.xml：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 applicationContext.xml 中配置事务管理器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 dataSource  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启注解事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h4><p><code>数据持久层</code>，Hibernate 是一个开放源码的 <code>ORM</code> 持久层框架。简单的说，Hibernate 只是一个将持久化类与数据库表相映射的工具，<code>每个持久化类实例均对应于数据库表中的一个数据行而已</code>。用户只需直接使用面向对象的方法操作此持久化类实例，即可完成对数据库表数据的插入、删除、修改、读取等操作。</p><h5 id="Hibernate-配置"><a href="#Hibernate-配置" class="headerlink" title="Hibernate 配置"></a>Hibernate 配置</h5><ul><li><p>使用配置文件将映射关系对应起来；</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件命名规范：*.hbm.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 配置类和表相对应：Class 标签</span></span><br><span class="line"><span class="comment">     | name 属性：实体类全路径</span></span><br><span class="line"><span class="comment">     | table 属性：数据库表名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.entity.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span>          </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | 配置实体类 ID 与表 ID 对应：ID 标签</span></span><br><span class="line"><span class="comment">         | Hibernate 要求实体类有一个属性唯一值，且要求表有字段作为唯一值</span></span><br><span class="line"><span class="comment">         | name 属性：实体类的 id 属性名称</span></span><br><span class="line"><span class="comment">         | column 属性：生产的表字段名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库表 id 增长策略：Class 标签</span></span><br><span class="line"><span class="comment">             | 属性有：increment、hilo、squence、identity、native、uuid、guid 等。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">        <span class="comment">&lt;!-- 配置其他属性和表字段对应：Property 标签 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 若使用的是 SQL Server 数据库系统，Property 映射对的顺序要和数据库中列 (属性) 的顺序相对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>关于映射配置的一些批注：</p></blockquote><ul><li>Note.01：就映射配置来说，这里千万要记住，若访问的是 SQL Server 数据库系统，则 <strong><property> 映射对的顺序要和数据库中列 (属性) 的顺序相对应</property></strong>。( 其他数据库系统没有出现此类问题，鉴于阅读与编程的规范，则不管使用哪种数据库系统驱动，都以此种方式编辑 Property 映射对 )</li><li>Note.02：关于配置中实体类的主键生成策略有多种形式，详细见参考 [4]。</li><li><p>Note.03：User 实体类对象的状态：</p><ul><li><code>瞬时态</code>：对象没有 ID 值，且其与 Session 没有关联。</li><li><code>持久态</code>：对象有 ID 值，且其与 Session 有关联。</li><li><p><code>托管态</code>：对象有 ID 值，但其与 Session 没有关联。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下述代码只列举了细节不同的部分，其他细节见源代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">           </span><br><span class="line"><span class="comment">// 瞬时态：即插入元组</span></span><br><span class="line">user.setUserName(<span class="string">"Sample"</span>);</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">session.saveOrUpdate(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 托管态：对数据表中具体 ID 的元组进行数据修改，即更新元祖</span></span><br><span class="line">user.setUid(attr_id);</span><br><span class="line">user.setUserName(<span class="string">"Sample"</span>);</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">session.saveOrUpdate(user);</span><br><span class="line"><span class="comment">// session.save(user); // 注意：此操作为新增元组，但不是全部属性都修改，会引入空值</span></span><br><span class="line">           </span><br><span class="line"><span class="comment">// 持久态：对数据表中具体 ID 的元组进行数据修改，即更新元祖</span></span><br><span class="line">user = session.get(User.class, attr_id);</span><br><span class="line">user.setUserName(<span class="string">"Sample"</span>);</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">session.saveOrUpdate(user);</span><br><span class="line">           </span><br><span class="line"><span class="comment">// 启示：从持久态和托管态态的实验结果可知，修改元组，先查再改，防止空值。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建 Hibernate 的核心配置文件；</p><p>  核心配置文件格式是 XML，且核心配置文件名称和位置是 <code>固定的</code> ( Src 根目录下，且名称为 <code>hibernate.cfg.xml</code> )。Hibernate 操作过程中，仅加载核心配置文件。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件命名规范：hibernate.cfg.xml --&gt;</span></span><br><span class="line">               </span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (必填) 配置数据库信息：从 hibernate.property 中获取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="comment">&lt;!-- SQL Server 数据库管理系统的 Driver </span></span><br><span class="line"><span class="comment">        &lt;property name="hibernate.connection.driver_class"&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="hibernate.connection.url"&gt;</span></span><br><span class="line"><span class="comment">            jdbc:sqlserver://192.168.0.133:1433;DatabaseName=testDB</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="comment">&lt;!-- MySQL 数据库管理系统的 Driver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">            jdbc:mysql://192.168.0.163:3306/testDB?serverTimezone=UTC</span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>sa<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>pztech753<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">        <span class="comment">&lt;!-- (可选) 配置 Hibernate 信息：从 hibernate.property 中获取 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 操作数据库时，向控制台输出 SQL 语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 操作数据库时，向控制台输出格式化的 SQL 语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Hibernate 配置自动建表：Update，有表更新没表建立 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         | 例如，实现分页功能：</span></span><br><span class="line"><span class="comment">         | MySQL 里面使用 LIMIT 关键字，Oracle 中使用 ROWNUM 关键字</span></span><br><span class="line"><span class="comment">         | 让 Hibernate 识别不同数据库中特有的语句</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">        <span class="comment">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/entity/User.hbm.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>关于核心配置的一些批注：</p><p>面对不同的数据库管理系统，对应的配置属性也存在差异，详细见参考 [5]。</p></blockquote><ul><li><p>通过 Session 保存实体类数据到数据库表中；</p><p>  简单演示，详细见下一章节：<a href="#Hibernate-使用">Hibernate 使用</a></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"Lucy"</span>);</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">Session.save(user);</span><br></pre></td></tr></table></figure></li></ul><h5 id="Hibernate-使用"><a href="#Hibernate-使用" class="headerlink" title="Hibernate 使用"></a>Hibernate 使用</h5><ul><li><p>以下代码为 Hibernate 最基本的使用方法，后续将通过优化 Configuration，以及规范事务来优化 Hibernate。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step.01：加载 Hibernate 核心配置文件 hibernate.cfg.xml</span></span><br><span class="line">Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">cfg.configure();</span><br><span class="line">   </span><br><span class="line"><span class="comment">// Step.02：创建 SessionFactory 对象；</span></span><br><span class="line"><span class="comment">// 在此过程中，根据映射关系在数据库中把表创建起来</span></span><br><span class="line">SessionFactory sessionFactory = cfg.buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step.03：使用 SessionFactory 创建 Session 对象；</span></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step.04：手动开始事务；</span></span><br><span class="line">Transaction trans = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step.05：写具体逻辑，例如：增删改查；</span></span><br><span class="line"><span class="comment">// 例如添加操作 ( 不操作数据表，而操作实体类 )</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"Lucy"</span>);</span><br><span class="line">user.setAge(<span class="number">25</span>);</span><br><span class="line">session.save(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step.06：提交事务；</span></span><br><span class="line">trans.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step.07：关闭资源；</span></span><br><span class="line">session.close();</span><br><span class="line">sessionFactory.close();</span><br></pre></td></tr></table></figure></li><li><p>Configuration</p><ul><li>到 Src 目录下加载核心配置文件 <code>hibernate.cfg.xml</code>；</li></ul></li><li><p>SessionFactory</p><ul><li>根据核心配置文件中数据库配置、映射配置，且根据映射关系，到数据库中把表创建起来。</li><li><p>创建 SessionFactory 过程中，特别消耗资源，故应该采取优化措施：</p><p>在 Hibernate 操作中，建议一个项目创建一个 SessionFacotry 对象，以静态的工具类形式封装使用。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Configuration cfg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory = <span class="keyword">null</span>;            </span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">    cfg.configure();</span><br><span class="line">    sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sessionFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Session</p><ul><li>类似 Jdbc 中的 Connection，可调用 Session 中的不同方法实现 <code>增、删、改、查</code> 操作。 <ul><li>增加：save()；</li><li>修改：update()；</li><li>删除：delete()；</li><li>查询：get()；</li></ul></li><li><p>Session 为单线程对象，即不能共用，仅自己使用。</p><ul><li><p>Hibernate 已实现本地线程与 Session 的绑定：在 Hibernate 的核心配置文件中，再调用 sessionFactory 的方法得到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 HibernateUtils 静态工具类中追加静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回与本地线程绑定的 Session</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSessionObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sessionFactory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="comment">/* 在其他类中调用该方法 */</span></span><br><span class="line">Session session = HibernateUtils.getSessionObject();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Transaction</p><ul><li>事务概念；</li><li><p>事务特性：原子性、一致性、隔离性、持久性；</p><blockquote><p>隔离性：不考虑隔离性会产生的问题，如脏读、不可重复读和虚读。当然，可以设置隔离的级别来解决问题。</p></blockquote></li><li><p>Hibernate 使用 Transaction 创建事务对象；</p></li><li><p>事务的 commit() 与 rollback() 方法 ( <code>规范用法</code> )；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SessionFactory sessionFactory = <span class="keyword">null</span>;</span><br><span class="line">Session session = <span class="keyword">null</span>;</span><br><span class="line">Transaction trans = nu</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    sessionFactory = HibernateUtils.getSessionFactory()</span><br><span class="line">    session = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    trans = session.beginTransaction();</span><br><span class="line">           </span><br><span class="line">    <span class="comment">// 人为制造异常，被除数不能为零</span></span><br><span class="line">    User user = <span class="function">ne0w <span class="title">User</span><span class="params">()</span></span>;</span><br><span class="line">    user.setAge(<span class="number">50</span>/<span class="number">0</span>);</span><br><span class="line">    session.save(user);</span><br><span class="line">           </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    trans.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">    <span class="comment">// 发生异常</span></span><br><span class="line">    trans.rollback();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    session.close();</span><br><span class="line">    sessionFactory.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Hibernate-优化"><a href="#Hibernate-优化" class="headerlink" title="Hibernate 优化"></a>Hibernate 优化</h5><h6 id="Hibernate-缓存机制"><a href="#Hibernate-缓存机制" class="headerlink" title="Hibernate 缓存机制"></a>Hibernate 缓存机制</h6><ul><li>一级缓存：默认是打开的，其使用的范围为 Session 创建到关闭的范围，且存储数据必须为持久态数据。</li><li><p>一级缓存的特性：持久态的数据会自动更新数据库 ( 不用 session.update(user)、session.save(user) )，过程细节如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get() 操作后，将返回持久态对象 user 存于一级缓存中，</span></span><br><span class="line"><span class="comment">// 及存一份到缓存中的快照区 (副本)。</span></span><br><span class="line">user = session.get(User.class, attr_id);</span><br><span class="line"><span class="comment">// setXXX() 操作，同时修改持久态对象的值和一级缓存中的内容。</span></span><br><span class="line">user.setUserName(<span class="string">"Sample"</span>);</span><br><span class="line"><span class="comment">// 当提交事务时，会比较一级缓存和快照区，</span></span><br><span class="line"><span class="comment">// 若不相同，会触发更新数据库操作。</span></span><br><span class="line">trans.commit();</span><br></pre></td></tr></table></figure></li></ul><ul><li>二级缓存 (替代技术：<code>redis</code> )：默认关闭，SessionFactroy 的使用范围。</li></ul><h5 id="Hibernate-查询"><a href="#Hibernate-查询" class="headerlink" title="Hibernate 查询"></a>Hibernate 查询</h5><blockquote><p>在 <code>Hibernate 查询方式</code> 小节将详细阐述。</p></blockquote><h6 id="Query-对象"><a href="#Query-对象" class="headerlink" title="Query 对象"></a>Query 对象</h6><blockquote><p>推荐使用</p></blockquote><ul><li><p>使用 Query 对象，不需要写 SQL 语句，以 HQL 替代。</p><blockquote><p>HQL：Hibernate Query Language，有别于 SQL 语句，即：SQL 操作表和表字段，而 HQL 操作实体类和属性。</p></blockquote></li><li><p>Query 对象的使用：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Query 对象</span></span><br><span class="line">Query query = session.createQuery(<span class="string">"from User"</span>);</span><br><span class="line"><span class="comment">// 调用 query 对象的方法得到结果</span></span><br><span class="line">List&lt;User&gt; list = query.list();</span><br></pre></td></tr></table></figure></li></ul><h6 id="Criteria-对象"><a href="#Criteria-对象" class="headerlink" title="Criteria 对象"></a>Criteria 对象</h6><ul><li><p>Ceiteria 对象的使用： </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Criteria 对象　</span></span><br><span class="line">Criteria criteria = session.createCriteria(User.class);</span><br><span class="line"><span class="comment">// 调用 criteria 对象的方法得到结果</span></span><br><span class="line">List&lt;User&gt; list = criteria.list();</span><br></pre></td></tr></table></figure></li></ul><h6 id="SQLQuery-对象"><a href="#SQLQuery-对象" class="headerlink" title="SQLQuery 对象"></a><del>SQLQuery 对象</del></h6><ul><li><p>SQLQuery 对象的使用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 SQLQuery 对象</span></span><br><span class="line">String sql = <span class="string">"SELECT * FROM t_user t WHERE t.username= ? AND t.age = ?"</span>;</span><br><span class="line">SQLQuery sqlQuery = session.createSQLQuery(sql)</span><br><span class="line">    .setParameter(<span class="number">0</span>, <span class="string">"ABC"</span>).setParameter(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// Case.01. 以数组形式接收结果</span></span><br><span class="line"><span class="comment">// List&lt;Object []&gt; list = sqlQuery.list();</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// Case.02. 返回目标的 User 对象 </span></span><br><span class="line">sqlQuery.addEntity(User.class);</span><br><span class="line">List&lt;User&gt; list = sqlQuery.list();</span><br></pre></td></tr></table></figure></li></ul><h5 id="Hibernate-多表操作"><a href="#Hibernate-多表操作" class="headerlink" title="Hibernate 多表操作"></a>Hibernate 多表操作</h5><ul><li>数据库的多表查询<ul><li>外键<ul><li>指定外键关键字： Foreign Key(列名)</li><li>引用外键关键字： References &lt;主表名&gt;(主表主键)</li></ul></li><li>关系<ul><li>一对一</li><li>一对多</li><li>多对多</li></ul></li></ul></li></ul><h6 id="一对多操作"><a href="#一对多操作" class="headerlink" title="一对多操作"></a>一对多操作</h6><ul><li><p>一对多映射配置：<code>实体类配置</code></p><ul><li>创建两个实体类，例如：公司和客户 ( 公司是一，客户是多 )；</li><li><p>让两个实体类间互相表示；  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 省略其他属性</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在客户实体类中表示所属公司，一个客户只属于一个公司</span></span><br><span class="line">    <span class="keyword">private</span> Firm firm;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirm</span><span class="params">(Firm firm)</span> </span>&#123; <span class="keyword">this</span>.frim = firm; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Firm <span class="title">getFirm</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> firm; &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 公司实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Firm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他属性</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set 集合：无序，元素不可重复</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Customer&gt; customerSet = <span class="keyword">new</span> HashSet&lt;Customer&gt;();    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Customer&gt; <span class="title">getCustomerSet</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> customerSet; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomerSet</span><span class="params">(Set&lt;Customer&gt; customerSet)</span> </span>&#123; <span class="keyword">this</span>.customerSet = customerSet; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>一对多映射配置：<code>XML 配置文件</code>，一个实体类对应一个映射文件，除了映射文件的基本配置之外，且要在映射文件中配置一对多的关系。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Firm"</span> <span class="attr">table</span>=<span class="string">"t_firm"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     | 表示公司的所有客户</span></span><br><span class="line"><span class="comment">     | Name 属性：属性值写公司实体类里表示客户 Set 集合的对象名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"customerSet"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | 一对多关系建表，有外键</span></span><br><span class="line"><span class="comment">         | Hibernate 机制，双向维护外键，即在一和多方都配置外键</span></span><br><span class="line"><span class="comment">         | Column 属性：属性值为外键的名称，名称可自定义</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"f_fid"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 公司的所有客户，即 Class 里写客户实体类全路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.entity.Customer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- customer.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Customer"</span> <span class="attr">table</span>=<span class="string">"t_customer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 表示客户所属公司</span></span><br><span class="line"><span class="comment">     | Name 属性：客户实体类中使用 firm 对象表示</span></span><br><span class="line"><span class="comment">     | Class 属性：Firm 实体类的全路径</span></span><br><span class="line"><span class="comment">     | Column 属性：外键名称，名称可自定义</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"firm"</span> <span class="attr">class</span>=<span class="string">"cn.entity.Firm"</span> <span class="attr">column</span>=<span class="string">"c_fid"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>核心配置文件中，加入 customer.bhm.xml 和 firm.bhm.xml。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/entity/firm.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/entity/customer.hbm.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>一对多级联的操作实现</p><blockquote><p>在原生数据库中，对包含外键的元组直接删除，是无法成功执行的。正确操作方式为：先删除外键约束，再删除对应元组。但在 Hibernate 中，不用考虑此类问题，因为内置封装了相关功能组件。</p></blockquote><ul><li><p>一对多级联的保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step.01.建立公司对象和客户对象的关系</span></span><br><span class="line">Firm firm = <span class="keyword">new</span> Firm();</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"><span class="comment">// Step.02.把客户对象放到公司对象的 Set 集合里</span></span><br><span class="line">firm.getCustomerSet().add(customer);</span><br><span class="line"><span class="comment">// Step.03.把公司对象放到客户对象里</span></span><br><span class="line">customer.setFirm(firm);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联保存：即一方和多方都需配置数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   </span><br><span class="line">session.save(customer);</span><br><span class="line">session.save(firm);</span><br></pre></td></tr></table></figure></li><li><p>一对多级联的删除：在一方 ( 与多方对立 ) 即公司对象，修改其配置文件。</p><p>最后，直接在代码中进行删除操作即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Firm"</span> <span class="attr">table</span>=<span class="string">"t_firm"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对 Set 标签的 casade 值为 delete --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"customerSet"</span> <span class="attr">cascade</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>优化步骤之 <code>Inverse 属性</code></p><blockquote><p>因为 Hibernate 是双向维护外键，在公司和客户里面都需维护外键 ( 从级联删除的执行过程中可体验出来 )。故我们可以设置其中的一方 <code>放弃</code> 维护外键，以优化性能。</p></blockquote>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Firm"</span> <span class="attr">table</span>=<span class="string">"t_firm"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | Inverse 属性</span></span><br><span class="line"><span class="comment"> | Flase，表示不放弃关系维护</span></span><br><span class="line"><span class="comment"> | True，表示放弃关系维护</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"customerSet"</span> <span class="attr">cascade</span>=<span class="string">"save-update, delete"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="多对多操作"><a href="#多对多操作" class="headerlink" title="多对多操作"></a>多对多操作</h6><ul><li><p>多对多映射配置：实体类配置</p><ul><li>创建两个实体类，例如：用户和角色 ( 一个用户可扮演多个角色，一个角色可由多个用户扮演 )；</li><li><p>让两个实体类间互相表示；  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> User &#123;</span><br><span class="line"><span class="comment">// 省略其他属性</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roleSet = <span class="keyword">new</span> HashSet&lt;Role&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Role&gt; <span class="title">getRoleSet</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> roleSet; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleSet</span><span class="params">(Set&#123;Role&#125; roleSet)</span> </span>&#123; <span class="keyword">this</span>.roleSet = roleSet; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Role &#123;</span><br><span class="line"><span class="comment">// 省略其他属性</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;User&gt; userSet = <span class="keyword">new</span> HashSet&lt;User&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;User&gt; <span class="title">getUserSet</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> userSet; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserSet</span><span class="params">(Set&lt;User&gt; userSet &#123; <span class="keyword">this</span>.userSet = userSet; &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>多对多映射配置：<code>XML 配置文件</code>，一个实体类对应一个映射文件，除了映射文件的基本配置之外，且要在映射文件中配置多对多的关系。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 在用户中，表示所有的角色</span></span><br><span class="line"><span class="comment">     | Name 属性：属性值写用户实体类里表角色 Set 集合的对象名称</span></span><br><span class="line"><span class="comment">     | Table 属性：填写多对多时，两实体的联系转化成表 ( 第三张表 )</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roleSet"</span> <span class="attr">table</span>=<span class="string">"t_user_role"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | 多对多关系建表，有外键</span></span><br><span class="line"><span class="comment">         | Column 属性：当前用户实体，在第三张表中的外键名称 </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"u_fid"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         | Class 属性：填写角色实体类全路径</span></span><br><span class="line"><span class="comment">         | Column 属性：角色实体，在第三张表中的外键名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"cn.entity.Role"</span> <span class="attr">column</span>=<span class="string">"r_fid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- role.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Role"</span> <span class="attr">table</span>=<span class="string">"t_role"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | 在角色中，表示所有的用户</span></span><br><span class="line"><span class="comment">     | Name 属性：属性值写角色实体类里表示用户 Set 集合的对象名称</span></span><br><span class="line"><span class="comment">     | Table 属性：填写多对多时，两实体的联系转化成表 ( 第三张表 )</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"userSet"</span> <span class="attr">table</span>=<span class="string">"t_user_role"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | 多对多关系建表，有外键</span></span><br><span class="line"><span class="comment">         | Column 属性：当前角色实体，在第三张表中外键的名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"r_fid"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">         | Class 属性：填写用户实体类全路径</span></span><br><span class="line"><span class="comment">         | Column 属性：用户实体，在第三张表中外键的名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"cn.entity.User"</span> <span class="attr">column</span>=<span class="string">"u_fid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>核心配置文件中，加入 customer.bhm.xml 和 firm.bhm.xml。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- (必填) 把映射文件放到核心配置文件中 ( 填 Src 之后的路径 ) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/entity/user.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/entity/role.hbm.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多对多级联的操作实现</p><ul><li><p>多对多级联保存</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和一对多级联操作一样，在用户配置文件 user.hbm.xml 中，</span></span><br><span class="line"><span class="comment">// 对 Set 标签的 casade 值为 save-update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多对多级联保存</span></span><br><span class="line">User user_1 = <span class="keyword">new</span> User();</span><br><span class="line">User user_2= <span class="keyword">new</span> User();</span><br><span class="line">Role role_1 = <span class="keyword">new</span> Role();</span><br><span class="line">Role role_2 = <span class="keyword">new</span> Role();</span><br><span class="line">Role role_3 = <span class="keyword">new</span> Role();</span><br><span class="line"></span><br><span class="line"><span class="comment">// user_1 拥有角色 1、2，user_2 拥有角色 2、3</span></span><br><span class="line">user_1.getRoleSet().add(role_1);</span><br><span class="line">user_1.getRoleSet().add(role_2);</span><br><span class="line">user_2.getRoleSet().add(role_2);</span><br><span class="line">user_2.getRoleSet().add(role_3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存用户即可 ( 对应于配置文件中设置了 casade 值的实体 )</span></span><br><span class="line">session.save(user_1);</span><br><span class="line">session.save(user_2);</span><br></pre></td></tr></table></figure></li><li><p>多对多级联删除 ( 不推荐 )：配置文件；最后，直接在代码中进行删除操作即可。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 和一对多级联操作一样，在用户配置文件 user.hbm.xml 中，</span><br><span class="line">// 对 Set 标签的 casade 值为 delete ( 可以与保存的属性共存 )</span><br><span class="line"><span class="comment">&lt;!-- user.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roleSet"</span> <span class="attr">table</span>=<span class="string">"t_user_role"</span> <span class="attr">casade</span>=<span class="string">"save-update, delete"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>维护多对多的关系，通过维护 <code>第三张表</code> ( 两实体的联系转化成的表 ) 实现。</p></li></ul></li></ul><h5 id="Hibernate-HQL-查询详解"><a href="#Hibernate-HQL-查询详解" class="headerlink" title="Hibernate HQL 查询详解"></a>Hibernate HQL 查询详解</h5><ul><li><code>OID</code> 查询和 <code>对象导航</code> 查询 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单元测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionFactory sessionFactory = <span class="keyword">null</span>;</span><br><span class="line">        Session session = <span class="keyword">null</span>;</span><br><span class="line">        Transaction trans = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sessionFactory = HibernateUtils.getSessionFactory();</span><br><span class="line">            session = sessionFactory.openSession();</span><br><span class="line">            trans = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 需求：根据 ID 查询某个公司，再查询这个公司的所有客户</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// OID 查询：查询 ID 为 1 的公司</span></span><br><span class="line">            Firm firm = session.get(Firm.class, <span class="number">1</span>); <span class="comment">// </span></span><br><span class="line">            <span class="comment">// 对象导航查询：根据某条记录的 ID，返回对象 (公司的客户)</span></span><br><span class="line">            Set&lt;Customer&gt; customer = firm.getCustomerSet();</span><br><span class="line">            System.out.print( customer.toString() );</span><br><span class="line"></span><br><span class="line">            trans.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            sessionFactory.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="HQL-查询"><a href="#HQL-查询" class="headerlink" title="HQL 查询"></a>HQL 查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step.01.创建 Query 对象，写 HQL 语句实现查询</span></span><br><span class="line"><span class="comment">// Step.02.调用 query 对象的方法得到结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">Query query = session.createQuery(<span class="string">"FROM t_user"</span>);</span><br><span class="line">List&lt;User&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line">String sql_obscure = <span class="string">"FROM t_user WHERE username LIKE ?"</span>; <span class="comment">// 模糊查询</span></span><br><span class="line">String sql_accurate = <span class="string">"FROM t_user WHERE age = ? AND username = ?"</span>; <span class="comment">// 精确查询</span></span><br><span class="line">Query query = session.createQuery(sql_accurate);</span><br><span class="line"><span class="comment">// arg0 为占位符位置，arg1 为参数</span></span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">25</span>).setParameter(<span class="number">1</span>, <span class="string">"Lucy"</span>);</span><br><span class="line">List&lt;User&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序查询：ASC，升序 / DESC，降序</span></span><br><span class="line">String sql = <span class="string">"FROM t_user ORDER BY uid ASC"</span>; </span><br><span class="line">Query query = session.createQuery(sql);</span><br><span class="line">List&lt;User&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询：LIMIT 关键字</span></span><br><span class="line">String sql = <span class="string">"FROM t_user"</span>;</span><br><span class="line">Query query = session.createQuery(sql);</span><br><span class="line">query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">query,.setMaxResults(<span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 投影查询</span></span><br><span class="line">String sql = <span class="string">"SELECT username, age FROM t_user"</span>;</span><br><span class="line">Query query = session.createQuery(sql);</span><br><span class="line">List&lt;Object&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚集函数</span></span><br><span class="line"><span class="comment">// COUNT()、SUM()、MAX()、MIN()...</span></span><br><span class="line">String sql = <span class="string">"SELECT COUNT(*) FROM t_user"</span>;</span><br><span class="line">Query query = session.createQuery(sql);</span><br><span class="line"><span class="comment">// 将结果以对象形式返回</span></span><br><span class="line">Object obj = query.uniqueResult();</span><br></pre></td></tr></table></figure><h6 id="HQL-多表查询"><a href="#HQL-多表查询" class="headerlink" title="HQL 多表查询"></a>HQL 多表查询</h6><ul><li><p>内连接：连接两个表有关联的数据，忽略两个表中对应不起来的数据。</p><ul><li>SQL：SELECT * FROM t_user AS u, t_role AS r ON  u.uid = r.uid;<ul><li>或者：SELECT * FROM t_user u INNER JOIN t_role r ON  u.uid = r.uid;</li></ul></li></ul></li><li><p>左外链接：左边表所有元组，右边表关联数据。</p><ul><li>若左表与右表没有关联数据，则右边表数据补 NULL 值，多了则删除</li><li>SQL：SELECT * FROM t_user u LEFT OUTER JOIN t_role r ON  u.uid = r.uid;</li></ul></li><li>右外链接：与左外链接同理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HQL 内连接 ( 左、右外链接同理 )</span></span><br><span class="line">String sql_inner_join = <span class="string">"FROM t_user u INNER JOIN u.roleSet"</span>;</span><br><span class="line">Query query = session.createQuery(sql_inner_join);</span><br><span class="line">List list = query.list(); <span class="comment">// list 返回的每部分都是数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HQL 迫切内连接</span></span><br><span class="line">String sql_inner_join_fetch = <span class="string">"FROM t_user u INNER JOIN FETCH u.roleSet"</span>;</span><br><span class="line">Query query = session.createQuery(sql_inner_join_fetch);</span><br><span class="line">List list = query.list();  <span class="comment">// list 返回的每部分都是对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HQL 迫切左外连接  ( 没有迫切右外连接 )</span></span><br><span class="line">String sql_inner_join_fetch = <span class="string">"FROM t_user u LEFT OUTER JOIN FETCH u.roleSet"</span>;</span><br></pre></td></tr></table></figure><h5 id="Hibernate-检索策略"><a href="#Hibernate-检索策略" class="headerlink" title="Hibernate 检索策略"></a>Hibernate 检索策略</h5><h6 id="立即查询"><a href="#立即查询" class="headerlink" title="立即查询"></a>立即查询</h6><p>根据 ID 查询，调用 get() 方法，则马上发送语句查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Debug 方式可检验，即执行代码马上发送 SQL 语句</span></span><br><span class="line">User user = session.get(User.class, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h6 id="延迟查询"><a href="#延迟查询" class="headerlink" title="延迟查询"></a>延迟查询</h6><p>根据 ID 查询，调用 load() 方法，不会马上发送语句查询数据库，只有得到对象的值时，才发送语句查询数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 load() 方法之后，并不会马上发送 SQL 语句</span></span><br><span class="line">User user = session.load(User.class, <span class="number">1</span>);</span><br><span class="line">System.out.println( user.getUid() );</span><br><span class="line"><span class="comment">// 当得到对象里其他值时，即非 ID 值，才发送 SQL 语句进行查询</span></span><br><span class="line">System.out.println( user.getUsername() );</span><br></pre></td></tr></table></figure><ul><li>类级别延迟：例如，根据 ID 查询返回实体类对象，调用 load() 方法不会马上发送 SQL 语句。 </li><li><p>关联级别查询：例如上述 <code>对象导航查询</code>，查询某个公司后，再查询这间公司的所有客户，查询公司所有客户的过程是否需要延迟，则称其为关联级别延迟。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> | 在配置文件中实现关联级别延迟</span></span><br><span class="line"><span class="comment"> | fetch 属性：select</span></span><br><span class="line"><span class="comment"> | lazy 属性：true / false / extra</span></span><br><span class="line"><span class="comment"> | - True，当得到对象里其他值时，即非 ID 值，才发送 SQL 语句进行查询。</span></span><br><span class="line"><span class="comment"> | - False，反之，会多执行一次查询 ( getUid() )。</span></span><br><span class="line"><span class="comment"> | - Extra，需要什么属性，查询什么属性 ( 仅需少量属性时推荐使用 )</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roleSet"</span> <span class="attr">table</span>=<span class="string">"t_user_role"</span> <span class="attr">fetch</span>=<span class="string">"select"</span> <span class="attr">lazy</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="批量抓取"><a href="#批量抓取" class="headerlink" title="批量抓取"></a>批量抓取</h6><ul><li><p>例如，我们需要查询所有公司的所有客户，代码实现如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">List&lt;Firm&gt; list = criteria.list();</span><br><span class="line"><span class="keyword">for</span>(Firm firm : list) &#123;</span><br><span class="line">    System.out.println( firm.getId() + <span class="string">":"</span> + firm.getName() );</span><br><span class="line">    Set&lt;Customer&gt; customerSet = firm.getCustomerSet();</span><br><span class="line">    <span class="keyword">for</span>(Customer customer : customerSet) &#123;</span><br><span class="line">        System.out.println( customer.getUid() + <span class="string">":"</span> + customer.getUsername() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但在执行过程中，暴露的问题时：每次循环都执行一次查询，拖沓性能</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>故我们只需要在实体映射配置文件中，对 Set 标签进行设置属性即可：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firm.bhm.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.entity.Firm"</span> <span class="attr">table</span>=<span class="string">"t_firm"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- batch-size 的值为整数即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"customerSet"</span> <span class="attr">batch-size</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="SSH-框架总结"><a href="#SSH-框架总结" class="headerlink" title="SSH 框架总结"></a>SSH 框架总结</h4><h5 id="Struts-1"><a href="#Struts-1" class="headerlink" title="Struts"></a>Struts</h5><ul><li>Action 操作<ul><li>Action 创建 (三种方式)：继承 <code>ActionSupport</code> 类。</li><li>Action 访问路径：创建 <code>struts.xml</code> 配置文件，文件名称和位置 ( Src 目录 ) 固定。</li><li>访问 Action 的多个方法：使用 <code>通配符方式</code> 配置。</li><li>Action 获取表单提交数据：<ul><li>获取 Request 对象 ( 使用 <code>ServletAction</code> 类 )；</li><li>属性封装；</li><li>模型驱动；</li></ul></li><li>Action 操作域对象：使用 <code>ServletAction</code> 类。</li><li>配置 Struts2 过滤器。</li></ul></li><li>值栈<ul><li>向值栈放数据：<ul><li>Set 方法；</li><li>Push 方法；</li><li>定义变量，生成 Get 方法.</li></ul></li><li>从值栈获取数据：在 JSP 中使用 Struts2 标签 + Ognl 获取<ul><li><code>&lt;s:property /&gt;</code></li><li><code>&lt;s:iterator /&gt;</code></li></ul></li></ul></li><li>拦截器<ul><li>AOP 和责任链模式；</li><li>自定义拦截器：<ul><li>继承 <code>MethodFilterInterceptor</code> 类，并重写类方法；</li><li>配置拦截器和 Action 关联.</li></ul></li></ul></li></ul><h5 id="Spring-1"><a href="#Spring-1" class="headerlink" title="Spring"></a>Spring</h5><ul><li>Spring 核心配置文件：<ul><li>名称和位置没有固定要求；</li><li>在 Spring 核心配置文件中引入 Schema 约束.</li></ul></li><li>创建对象：<ul><li>XML 配置方式：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; /&gt;</code>；</li><li>注解方式：<code>@Component</code> 或 <code>@Controller</code> (Web层)、<code>@Service</code> (业务层)、<code>@Repository</code> (持久层).</li></ul></li><li>注入属性:<ul><li>XML 配置方式：<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;property name=&quot;&quot; ref=&quot;&quot; /&gt;&lt;/bean&gt;</code>；</li><li>注解方式：<code>@autowired</code>、<code>@Resource(name=&quot;value&quot;)</code>.</li></ul></li><li>使用 ServletContext 对象和监听器实现<ul><li>在服务器启动时，加载 Spring 配置文件，创建对象；</li><li>配置 Spring 的监听器；</li><li>指定 Spring 配置文件位置.</li></ul></li><li>Spring JdbcTemplate </li><li>Spring 事务配置：<ul><li>XML 配置方式；</li><li>注解方式：<code>@Transational</code></li></ul></li></ul><h5 id="Hibernate-1"><a href="#Hibernate-1" class="headerlink" title="Hibernate"></a>Hibernate</h5><ul><li>ORM 思想：<code>对象关系映射</code>，参考 <a href="#ORM-框架">ORM 框架</a>；</li><li>数据库信息配置：MySQL / SQL Server 2008 R2；</li><li><p>Hibernate 信息配置：即配置 Hibernate 核心配置文件 ( <code>hibernate.cfg.xml</code> )。</p><blockquote><p>Hibernate 和 Spring 整合时，配置文件的名称和位置是没有固定要求的。</p></blockquote></li><li><p>映射关系配置：即配置 Hibernate 映射配置文件 ( <code>xxx.hbm.xml</code> )，实体类和数据表映射关系 ( 使用 ORM 思想 )。</p></li><li>Hibernate 操作步骤：Spring 框架对 Hibernate 框架也有封装，即 <code>HibernateTemplate</code> 类。</li></ul><h4 id="SSH-框架整合"><a href="#SSH-框架整合" class="headerlink" title="SSH 框架整合"></a>SSH 框架整合</h4><p><img src="/images/illustration/Project/2018/08/J2EE-SSH-SSI-1_6-4.png" alt="SSH框架整合思想"></p><center>图 6-4 SSH 框架整合思想</center><ul><li><p>Spring 与 Struts 2 框架的整合</p><p>  把 Struts 2 的 Action 对象创建交给 Spring 进行管理。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring 与 Hibernate 框架的整合</p><p>  把 Hibernate 的核心配置文件里的数据库配置，直接写在 Spring 配置文件中。且把 SessionFactory 对象创建交给 Spring 管理。</p></li></ul><h4 id="SSH-整合演示"><a href="#SSH-整合演示" class="headerlink" title="SSH 整合演示"></a>SSH 整合演示</h4><h5 id="Spring-与-Struts-2-整合"><a href="#Spring-与-Struts-2-整合" class="headerlink" title="Spring 与 Struts 2 整合"></a>Spring 与 Struts 2 整合</h5><ul><li><p>Action 代码实现：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cn.kofes.dao.BaseAction.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The portion of action has deployed successfully."</span>);</span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在 Spring  配置文件下整合 Struts：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合 Struts：Action 对象的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BaseAction"</span> <span class="attr">class</span>=<span class="string">"cn.kofes.action.BaseAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>整合 Web，当服务器启动时加载 Spring 配置即初始化，我们需要在 web.xml 下配置监听器：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 加载 Spring 的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 监听器模块：作用就是启动 Web 容器时,自动装配 spring.xml 文件的配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>最后，struts.xml 填入以下配置即可：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">    "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"sample"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | Class 属性值不写目标 Action 的全路径，原因是防止二次创建对象</span></span><br><span class="line"><span class="comment">         | 引入 Spring 相对应  Action 的 Bean 标签 ID</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"BaseAction"</span> <span class="attr">class</span>=<span class="string">"BaseAction"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-与-Hibernate-整合"><a href="#Spring-与-Hibernate-整合" class="headerlink" title="Spring 与 Hibernate 整合"></a>Spring 与 Hibernate 整合</h5><ul><li><p>在 Spring  配置文件下配置数据库信息，及整合 Hibernate。后者即将 SessionFacotry 交由 Spring 管理：</p><blockquote><p><code>c3p0.properties</code> 和 <code>hibernate.properties</code> 配置文件位于 Src 根目录下，键值分离以便以后修改配置。</p></blockquote>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在根目录下新建文件 c3p0.properties，存储数据库连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:c3p0.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Data Connection Settings --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用 c3p0.properties 的键值对即可，格式如 $&#123;key.value&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.minPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的初始化连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.initialPoolSize&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库连接池的连接最大空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxIdleTime&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0缓存Statement的数量数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.maxStatements&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当连接池的连接用完的，从 C3p0 下获取新的连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.acquireIncrement&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.checkoutTimeout&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;datasource.idleConnectionTestPeriod&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 整合 Hibernate：SessionFactory 对象的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (必填信息) 指定数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (可选信息) 配置 Hibernate 信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span> <span class="attr">value</span>=<span class="string">"classpath:hibernate.properties"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (必填信息) 把映射文件放到核心配置文件中 ( 现直接加载到 LocalSessionFactoryBean 类中即可 )  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapper/sample.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Employee.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建实体类映射文件 ( 文件位置没有固定要求，建议统一文件夹存储 )：</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/resource/HbmCollection/sample.hbm.xml --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     | name 属性：实体类全路径</span></span><br><span class="line"><span class="comment">     | table 属性：数据库表名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.kofes.bean.Sample"</span> <span class="attr">table</span>=<span class="string">"t_sample"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         | Hibernate 要求实体类有一个属性唯一值，且要求表有字段作为唯一值</span></span><br><span class="line"><span class="comment">         | name 属性：实体类的 id 属性名称</span></span><br><span class="line"><span class="comment">         | column 属性：数据表字段名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库表 id 增长策略：Class 标签</span></span><br><span class="line"><span class="comment">             | 属性值：increment、hilo、squence、identity、native、uuid、guid 等。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置其他属性和表字段对应：Property 标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>核心配置文件</code> 中引入 <code>映射配置文件</code>：</p><blockquote><p>在 Spring 配置文件中已引入映射配置文件，故不需要再单独配置 <code>hibernate.cfg.xml</code>。</p></blockquote></li><li><p>事务配置：在 spring.xml 配置文件中配置并开始事务注解，再到 Service 层添加注解 <code>@Transactional</code>： </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  开始事务注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Spring-分模块开发"><a href="#Spring-分模块开发" class="headerlink" title="Spring 分模块开发"></a>Spring 分模块开发</h5><ul><li>在 Spring 里配置多个内容，容易造成配置混乱，不利于维护。</li><li><p>把 Spring 核心配置文件中，将一部分配置放到单独的配置文件中，再在 Spring 核心配置文件中引入单独配置文件。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> | 将原 Spring 中的部分配置放置到独立 xml 中，</span></span><br><span class="line"><span class="comment"> | 例如我把 Dao 层的配置独立出来，再到 spring.xml 中引入配置文件 dao.xml 即可。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:dao.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="SSH-框架使用演示"><a href="#SSH-框架使用演示" class="headerlink" title="SSH 框架使用演示"></a>SSH 框架使用演示</h5><p>SSH 整合工作告一段落，当然你可通过 Maven 打包工程，以便以后复用。</p><h3 id="SSM-框架"><a href="#SSM-框架" class="headerlink" title="SSM 框架"></a>SSM 框架</h3><blockquote><p>当然，随着框架技术的迭代更新，更加科学、合理的新框架也逐渐在项目中使用起来，如 SSM 框架。具体细节可参考：<a href="https://www.kofes.cn/2018/08/J2EE-SSM-1.html">Java EE 之 SSM 框架配置与使用</a></p></blockquote><ul><li><p><code>SSM 框架</code>：Spring MVC、Spring、MyBatis</p><p>  SSM ( Spring + SpringMVC + MyBatis ) 框架集由 Spring、SpringMVC、MyBatis 三个开源框架整合而成，常作为数据源较简单的 Web 项目的框架。</p></li><li><p><code>Spring</code>：是一个轻量级的控制反转 (IoC) 和面向切面 (AOP) 的容器框架。</p><blockquote><p>与本文的 Spring 章节内容相同。</p></blockquote></li><li><p><code>SpringMVC</code>：分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。</p></li><li><code>Mybatis</code>：<a href="http://blog.mybatis.org/" target="_blank" rel="noopener">Mybatis</a> 是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs (Plain Old Java Objects，普通的 Java对象 ) 映射成数据库中的记录。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>[1] <a href="https://blog.csdn.net/u012377333/article/details/50037825" target="_blank" rel="noopener"> 一枪尽骚 · 魂. 基于全注解方式的SSH基础框架. csdn.net</a></li><li>[2] <a href="http://blog.lunhui.ren/archives/225" target="_blank" rel="noopener">刻下岁月. IntelliJ IDEA 2016.1.2 + Spring + Struts2 + Hibernate ( SSH ). lunhui.ren</a> </li><li>[3] <a href="https://www.cnblogs.com/xieyupeng/p/7108141.html" target="_blank" rel="noopener">kent. JavaEE SSH 三大框架整合 ( Spring + Struts2 + Hibernate ). cnblogs.com</a></li><li>[4] <a href="https://www.cnblogs.com/hoobey/p/5508992.html" target="_blank" rel="noopener">Starskyhu. Hibernate 各种主键生成策略与配置详解. cnblogs.cn</a></li><li>[5] <a href="https://blog.csdn.net/chentiefeng521/article/details/58775415" target="_blank" rel="noopener">陈铁锋. Hibernate 连接三种数据库的配置 ( SQL Server、Oracle、MySQL ). csdn.net</a></li><li>[6] <a href="https://www.cnblogs.com/roadofstudy/p/7446690.html" target="_blank" rel="noopener">RoadOfStudy. MySQL 5.7版本的root用户重置密码问题. cnbolgs.com</a></li><li>[7] <a href="https://blog.csdn.net/time_tries_all/article/details/78571984" target="_blank" rel="noopener">Time Tries All. MySQL 重置密码出现的一系列问题. csdn.net</a></li><li>[8] <a href="http://www.souvc.com/?p=915" target="_blank" rel="noopener">Souvc. 连接虚拟机 (Ubuntu16.04) 的 MySQL 服务器. souvc.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;本文章主要围绕 J2EE 中 SSH ( Spring、Struts、Hibernate ) 框架的配置以及使用问题展开学习的，最终目的是输出可复用的版本，以供后续的项目复用。当然，学习和配置的过程难免有不恰当或错误之处，还望朋友指出、斧正。&lt;/p&gt;
&lt;h2 id=&quot;教学视频&quot;&gt;&lt;a href=&quot;#教学视频&quot; class=&quot;headerlink&quot; title=&quot;教学视频&quot;&gt;&lt;/a&gt;教学视频&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av14626440&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员. J2EE 进阶. 4 天精通 Hibernate 框架. 2017. bilibili.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av14839030&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员. J2EE 进阶. 60 集精通 Spring 框架. 2017. bilibili.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av13748042&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黑马程序员. J2EE 进阶. Struts2 框架精品教程. 2017. bilibili.com&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本框架的学习笔记是基于此系列教学视频所得的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.kofes.cn/categories/Project/"/>
    
    
      <category term="J2EE" scheme="http://www.kofes.cn/tags/J2EE/"/>
    
      <category term="JSP" scheme="http://www.kofes.cn/tags/JSP/"/>
    
      <category term="SSH" scheme="http://www.kofes.cn/tags/SSH/"/>
    
      <category term="Hibernate" scheme="http://www.kofes.cn/tags/Hibernate/"/>
    
      <category term="Spring" scheme="http://www.kofes.cn/tags/Spring/"/>
    
      <category term="Struts" scheme="http://www.kofes.cn/tags/Struts/"/>
    
  </entry>
  
  <entry>
    <title>论文 - 从商用车队的 GPS 数据中归类车辆停留意图信息</title>
    <link href="http://www.kofes.cn/2018/06/Stop-purpose-classification-from-GPS-data-of-commercial-vehicle-fleets.html"/>
    <id>http://www.kofes.cn/2018/06/Stop-purpose-classification-from-GPS-data-of-commercial-vehicle-fleets.html</id>
    <published>2018-06-11T16:58:25.000Z</published>
    <updated>2018-07-08T09:09:15.693Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>原文：Stop purpose classification from GPS data of commercial vehicle fleets<br>作者：Sarti L, Bravi L, Sambo F.<br>来源：Data Mining Workshops, 2017 IEEE International Conference on. IEEE, 2017: 280-287.  </p></div><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>从原始 GPS (全球定位系统) 数据中提取 <code>汽车停靠意图数据</code> 是大多数位置感知应用程序中的关键任务，且随着从移动设备收集 GPS 数据的不断增长，这项任务变得越来越有趣。近期很多研究都集中在行人 (手机) 数据上 (可理解为红海市场)，而商用车领域几乎没有探索 (蓝海市场)。</p><p>在本论文中，针对车辆 GPS 数据的汽车停靠意图的 <code>识别</code> 和 <code>分类</code> 问题 (利用来自不同行业的商业车队的大型异构数据集)。按照意图分类，旨在把汽车停靠点分为：<code>工作相关</code> 和 <code>非工作相关</code>，以挖掘相关商业价值。</p><p>且还对每个汽车停靠点计算一组含 100 个不同特征的集合，特征可分为四个主要类别：<code>汽车停靠点特征</code>，<code>兴趣点特征</code>，<code>汽车停靠点集群特征</code> 和 <code>序列特征</code>。并通过随机森林分类模型，评估四组特征中每个特征对停靠点的相对重要性，以处理不同类型的问题。</p><p>实验结果表明，本论文的方法显着地超越了现有商业车辆背景下用于汽车停靠意图的分类模型。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>在过去的十年中，GPS 设备的巨大推广，使得人们越发关注 <code>数据挖掘算法</code> 在 <code>时空数据</code> (GPS 产生的数据) 中的应用。而许多实际应用需要使用关于用户行为和地理位置的语义信息。例如，下述的两个实例：</p><ul><li>基于用户的历史位置以衡量用户之间的相似度 $^{[1]}$；</li><li>基于位置的兴趣地点推荐系统 $^{[2]}$。</li></ul><p>语义标记 GPS 数据，目标旨在 <code>识别</code> 和 <code>归类</code> GPS 沿途轨迹上的位置信息，即具体工作有 <code>语义位置的侦察</code> 和 <code>汽车停靠或出游的意图识别</code>。尽管上述问题不是同一类型的问题，但却是强相关的。例如，对多个用户而言具有相同意图的共同定位点，可能是语义上相关联的地方，因为知道某个地方的语义对分类每个汽车停靠点意图有很大的帮助。</p><p>通常，对于上述 <code>识别</code> 和 <code>归类</code> 问题的解决方法分两个阶段执行：</p><ul><li><p><code>侦查兴趣地点</code>：通常以非监督的方式实现位置侦查 $^{[3,4]}$，而作者提出了基于 <code>DBSCAN</code> $^{[5\,or\,6]}$ 的修改版本的聚类算法，即利用层次聚类从汽车停靠位置中提取访问点。</p><blockquote><p>当要处理非常大的数据集时需要考虑计算性能的问题，可参考其他论文中的扩展方法，例如对地点坐标进行哈希散列法 $^{[7,8]}$。</p></blockquote></li><li><p><code>对侦查到的地点分类</code>：对有关地点或汽车停靠点进行分类，可以在文献中找到两种主要方法：</p><ul><li>基于规则的系统 $^{[9,10]}$，其主要依赖于活动的位置、土地利用的数据以及机器学习方法，即活动本身提取特征；</li><li><p>利用 SVM 分类器来区分标识位置内的活动停靠点和非活动停靠点。分类器 (SVM，随机森林或逻辑回归) 利用时间和空间特征 $^{[6]}$，以及隐马尔可夫模型 (HMM) 利用时序特征把这些汽车停靠点分类为预定义类型。</p><blockquote><p>1) SVM 提取三个主要特征：停车驻留时间，每个汽车停靠地段周围的点到质心的平均距离。<br>2) 地点的语义分类是基于GPS数据和卫星图像的组合而定的 $^{[8]}$。  </p></blockquote></li></ul></li></ul><p>最后说明，本论文解决了与参考文献 [7] 的同样问题，即利用四个不同的特征集，使用一个随机森林分类器，对商业车队的汽车停靠意图数据进行分类。且本文的主要贡献如下：</p><ul><li>描述了一种方法，即从 GPS Pings (GPS 定位仪) 中提取汽车停靠点信息，并从工作状态停车点一览表 (已知的地点信息) 中給它们分配地面实况标签 (贴标签);</li><li>基于带标签的数据集，建立了一个模型，可以自动分类汽车停靠点，即工作状态和非工作状态的停靠点;</li><li>提供了严格评估的多类型特征集，便于我们处理不同问题，其中包括：<ul><li>汽车停靠点特征 (Stop-wise features，SWF)；</li><li>兴趣点特征 (Points of interest features，POIF)；</li><li>停靠点集群特征 (Stop Cluster，CF)；</li><li>序列特征 (Sequential features，SeqF).</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="GPS和工单数据"><a href="#GPS和工单数据" class="headerlink" title="GPS和工单数据"></a>GPS和工单数据</h4><ul><li>本论文采用的数据集由 Fleetmatics 公司 (车队情报公司) 提供。</li><li>采集的数据有两种类型，分别是<code>原始 GPS pings 数据</code> 和 <code>工单数据</code>。<ul><li>原始 GPS Pings 数据<ul><li>提供有关车辆位置的信息，工单状态的信息，有关司机执行的工作进度及进度信息；</li><li>设定有一系列的 GPS Pings $\{P_i\}_{i=1}^n = \{P_1, …, P_n\}$ 分别描述每辆车行驶的路线。</li><li>每一个 GPS Ping $P_i$ 包含每辆车的状态信息，即有车辆 ID $v_i$，经度和纬度 (位置信息 $p_i$)，里程表 $d_i$，时间戳 $t_i$ 和 事件代码 $e_i$。</li></ul></li><li>工单数据<ul><li>设定有一系列的工单 $\{W_i\}_{i=1}^n = \{W_1, …, W_n\}$。</li><li>每一个工单包含的信息有：车辆 ID $v_i$，经度和纬度 (位置 $p_i$)，时间戳 $t_i$ 和 状态代码 $c_i$ (例如：挂起，启动，完成)。</li></ul></li></ul></li></ul><h4 id="车辆停靠侦查技术"><a href="#车辆停靠侦查技术" class="headerlink" title="车辆停靠侦查技术"></a>车辆停靠侦查技术</h4><p>正如上述所描述的，关于瞬时车辆位置的原始数据是由 GPS Ping 组成的，将它们汇集起来以描述车辆的活动。为此本论文开发了一个 <code>时空聚类程序</code>。</p><ul><li>首先得为每个 GPS 信息分配一种状态类型 (Engine off，iDling，Journey)，然后把它们聚集成 GPS Ping 群组，并把这个 GPS Ping 群组称为 <code>汽车停靠点集</code>。</li><li>GPS Ping 的状态可分为三种类型：<ul><li><code>Engine Off (发动机关闭状态)</code>：发动机关闭事件。即这些 Ping 在发动机关闭的瞬间产生的 (当发动机处于关闭状态时不发送 Ping);</li><li><code>iDling (空转/怠速状态)</code>：发动机处于开启状态，但车辆静止或车辆在小区域内仍然缓慢行驶。对于后者，我们还需要作一些约束，设定 $H(p_i,p_{i-1})$ 表示两点间的半正定距离。然后，对于给定车辆给予一对连续的 Ping $P_{i-1}\,and\,P_i$，且满足以下约束，则可定义为怠速：<ul><li>$s_i = H(p_i,p_{i-1})\,/\,(t_i - t_{i-1}) \leq 1.4\,m/s\,(5km/h)$，确定速度接近零；</li><li>$H(p_i,p_{i-1}) \leq 150\,m$，确保 $P_{i-1}\,and\,P_i$ 足够接近，且避免了由于丢失数据而产生的 <code>伪影</code>。</li></ul></li><li><code>Journey (行驶状态)</code>：即不是发动机关闭状态，也不是怠速状态。</li></ul></li><li>当 Ping 被分类后，以每辆车为单位，按时间顺序排序；并把所有连续的怠速状态和发动机关闭状态的 Ping 聚集成集群 (并不会被其中 Journey 状态的 Ping 給分割开来)。</li><li><p>由于丢失数据，导致一组连续的怠速状态 Ping 彼此相对较远地分布开来。故我们得重新执行 <code>时间-空间</code> 的约束条件 ($s_i \leq 1.4\,m/s$ and $H(p_i,p_{i-1}) \leq 150\,m$)。</p><blockquote><p>无法满足约束条件：即一组连续的怠速状态 Ping 将被分隔得很远，其中的 Journey 状态的 Ping 都给丢失了。 </p></blockquote></li><li><p>以这种方式创建的 <code>Pings 集群</code> 代表我们想要分类的 <code>已识别的汽车停靠点</code>。综上所述，汽车停靠点被定义为按时间顺序排序的 Ping  集群 (包含怠速状态或发动机关闭状态的 Ping，并且满足进一步的 <code>时间-空间</code> 得约束条件。</p></li><li>每个 <code>汽车停靠点</code> 都有几个特性 (通过计算其中的 Ping)：Ping 的数量，停靠点的起点和终点 (属于该停靠点的 Ping 的第一个和最后一个时间戳)，驻留时间 (属于该停靠点的起始时间和结束时间) 和形状 (由GPS消息的最大 (最小) 纬度/经度坐标定义)。</li><li>所有这些信息对于在第二阶段提取特征工作至关重要，即汽车停靠点意图的分类。</li></ul><h4 id="贴标签"><a href="#贴标签" class="headerlink" title="贴标签"></a>贴标签</h4><ul><li>首先，对上述程序中获得的汽车停靠点分配 <code>地面实况标签</code>；再者，将它们与 <code>工单数据</code> 进行匹配。一般来说，若车辆停留点在时间上和空间上与工单数据 $W_i$ 相匹配，则可认为该汽车停靠点即为某一工单数据。<ul><li>对于只包含 idling 和 engine off Pings 的停靠点，我们认为它满足空间上的匹配。</li><li>对于任何工单，空间上匹配了停留点；如果停留点的驻留时间与工单的时间项 (指示作业已启动的时间和指示服务已结束的时间) 间隔相交，时间的匹配也随着满足。</li></ul></li></ul><h4 id="分类特征"><a href="#分类特征" class="headerlink" title="分类特征"></a>分类特征</h4><p>在 <code>车辆停靠侦查技术</code> 章节中描述的，从一系列的 GPS Pings 提取汽车停靠点，并从中提取 100 个不同的特征用于训练随机森林模型，随之将这些特征划分为 4 个不同的组：</p><ul><li>汽车停靠点特征 ( Stop-wise features，SWF )：<ul><li>驻留时间：(汽车) 停靠点第一个和最后一个 Ping 的时间差。</li><li>开始时间特征：一天中的小时，一周中的某天，某月某日，某年某日。</li><li>关闭引擎所花费的时间：对于每一个引擎关闭事件，我们计算当前 Ping 与前一个非引擎关闭状态的 Ping 之间的时间差，以表示引擎启动的时间。由于每个停靠点包含多个引擎关闭状态的 Ping，我们需要使用几个聚合函数聚合取得结果。</li><li>形状：停靠点的宽度、高度、面积、比例。</li><li>停靠点类型：发动机关闭状态。</li><li>停靠点中发动机关闭状态 Ping 的数量。</li><li>里程表距离：从第一次 Ping 到最后一次 Ping。</li><li>停靠点内 Ping 的总数。</li><li>平均速度 (根据停留点中第一次和最后一次 Ping 之间的里程差除以驻留时间计算所得)。</li></ul></li><li>兴趣点特征 ( Points of interest features，POIF)：利用 <code>PTV xLocate Server</code> 中提取以下 POI 类型：<ul><li>银行;</li><li>大学;</li><li>酒店;</li><li>餐厅;</li><li>休息区;</li><li>杂货店;</li><li>学校;</li><li>购物中心;</li><li>汽油;</li><li>开放式停车场;</li></ul></li><li><p>汽车停靠点集群特征 ( Stop cluster features，CF )：其原理是存在一些工单数据和非工单数据趋向于聚类成簇，类似于 [7] 中提出的熵度量方法：对于每个停靠点，查看并收集 250 米半径内的周边环绕的停靠点数据。</p><ul><li><p>车辆熵，计算公式为：</p><script type="math/tex; mode=display">E_v = - \sum_{\nu \in V}   \frac{n_{\nu}}{N} ln(\frac{n_{\nu}}{N})  \tag{1}</script><blockquote><p>$V$ 是车队中的车辆集合， $N$ 是 250 米半径范围内车队所有车辆的总停留点数，$n_{\nu}$ 是车辆 $\nu$ 在同一区域停靠的总次数。这个熵度量给出了一个区域内同一车队车辆的多样性。</p></blockquote></li><li><p>簇中汽车停靠点的平均，总和，最大和最小驻留时间。</p></li><li>邻近汽车停靠点的数量 (在其质心250米半径以内)。</li></ul></li><li><p>序列特征 (Sequential features，SeqF).</p></li></ul><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>在车辆停靠点侦查技术章节中，使用的是非监督方式的算法，即基于密度的 DBSCAN 聚类算法。其中涉及密度阈值的设定多少问题，就需要对具体样本量进行考究才能决定。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Horozov T, Narasimhan N, Vasudevan V. Using location for personalized POI recommendations in mobile environments [C]//Applications and the internet, 2006. SAINT 2006. International symposium on. IEEE, 2006: 6 pp.-129.<br>[2] Jiang K, Yin H, Wang P, et al. Learning from contextual information of geo-tagged web photos to rank personalized tourism attractions [J]. Neurocomputing, 2013, 119: 17-25.<br>[3] Palma A T, Bogorny V, Kuijpers B, et al. A clustering-based approach for discovering interesting places in trajectories [C]//Proceedings of the 2008 ACM symposium on Applied computing. ACM, 2008: 863-868.<br>[4] Gong L, Sato H, Yamamoto T, et al. Identification of activity stop locations in GPS trajectories by density-based clustering method combined with support vector machines [J]. Journal of Modern Transportation, 2015, 23(3): 202-213.<br>[5] Ester M, Kriegel H P, Sander J, et al. A density-based algorithm for discovering clusters in large spatial databases with noise [C]//Kdd. 1996, 96(34): 226-231.<br>[6] Lv M, Chen L, Xu Z, et al. The discovery of personally semantic places based on trajectory data mining [J]. Neurocomputing, 2016, 173: 1142-1153.<br>[7] Gingerich K, Maoh H, Anderson W. Classifying the purpose of stopped truck events: An application of entropy to GPS data [J]. Transportation Research Part C: Emerging Technologies, 2016, 64: 17-27.<br>[8] Sambo F, Salti S, Bravi L, et al. Integration of GPS and satellite images for detection and classification of fleet hotspots [C]//Intelligent Transportation Systems (ITSC), 2017 IEEE 20th International Conference on. IEEE, 2017: 1-6.<br>[9] Wolf J, Guensler R, Bachman W. Elimination of the travel diary: Experiment to derive trip purpose from global positioning system travel data [J]. Transportation Research Record: Journal of the Transportation Research Board, 2001 (1768): 125-134.<br>[10] Bohte W, Maat K. Deriving and validating trip purposes and travel modes for multi-day GPS-based travel surveys: A large-scale application in the Netherlands [J]. Transportation Research Part C: Emerging Technologies, 2009, 17(3): 285-297.  </p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;原文：Stop purpose classification from GPS data of commercial vehicle fleets&lt;br&gt;作者：Sarti L, Bravi L, Sambo F.&lt;br&gt;来源：Data Mining Workshops, 2017 IEEE International Conference on. IEEE, 2017: 280-287.  &lt;/p&gt;&lt;/div&gt;
&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;从原始 GPS (全球定位系统) 数据中提取 &lt;code&gt;汽车停靠意图数据&lt;/code&gt; 是大多数位置感知应用程序中的关键任务，且随着从移动设备收集 GPS 数据的不断增长，这项任务变得越来越有趣。近期很多研究都集中在行人 (手机) 数据上 (可理解为红海市场)，而商用车领域几乎没有探索 (蓝海市场)。&lt;/p&gt;
&lt;p&gt;在本论文中，针对车辆 GPS 数据的汽车停靠意图的 &lt;code&gt;识别&lt;/code&gt; 和 &lt;code&gt;分类&lt;/code&gt; 问题 (利用来自不同行业的商业车队的大型异构数据集)。按照意图分类，旨在把汽车停靠点分为：&lt;code&gt;工作相关&lt;/code&gt; 和 &lt;code&gt;非工作相关&lt;/code&gt;，以挖掘相关商业价值。&lt;/p&gt;
&lt;p&gt;且还对每个汽车停靠点计算一组含 100 个不同特征的集合，特征可分为四个主要类别：&lt;code&gt;汽车停靠点特征&lt;/code&gt;，&lt;code&gt;兴趣点特征&lt;/code&gt;，&lt;code&gt;汽车停靠点集群特征&lt;/code&gt; 和 &lt;code&gt;序列特征&lt;/code&gt;。并通过随机森林分类模型，评估四组特征中每个特征对停靠点的相对重要性，以处理不同类型的问题。&lt;/p&gt;
&lt;p&gt;实验结果表明，本论文的方法显着地超越了现有商业车辆背景下用于汽车停靠意图的分类模型。&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="http://www.kofes.cn/categories/Paper/"/>
    
    
      <category term="数据挖掘" scheme="http://www.kofes.cn/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="聚类" scheme="http://www.kofes.cn/tags/%E8%81%9A%E7%B1%BB/"/>
    
      <category term="机器学习" scheme="http://www.kofes.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="分类" scheme="http://www.kofes.cn/tags/%E5%88%86%E7%B1%BB/"/>
    
      <category term="特征提取" scheme="http://www.kofes.cn/tags/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    
  </entry>
  
</feed>
