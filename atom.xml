<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KOFE&#39;S BLOG</title>
  
  <subtitle>Reading / Project / Research</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.kofes.cn/"/>
  <updated>2018-01-21T19:03:44.571Z</updated>
  <id>http://www.kofes.cn/</id>
  
  <author>
    <name>Kofe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 Hexo 框架在 Github 上搭建博客</title>
    <link href="http://www.kofes.cn/2018/01/Hexo-Installation-Guide.html"/>
    <id>http://www.kofes.cn/2018/01/Hexo-Installation-Guide.html</id>
    <published>2018-01-19T10:46:03.000Z</published>
    <updated>2018-01-21T19:03:44.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Hexo\(^{[1]}\)，一个快速、简洁且高效的博客框架，若以个人博文为主导需求，它的强大毋庸置疑。    </p><p>Hexo 支持 GitHub Flavored Markdown 的所有功能；且基于 Node.Js 所带来的超快生成速度，百页博文秒级渲染；开放性 API 以及丰富的插件等，即功能来得纯粹，不失个性化定制，上手容易且操作便捷。更重要的一点，它是开源的、免费的博客框架，数据保存在本地以及 Github 上，相信在众多博客产品中选择、博弈，相信 Hexo 的表现不会令你失望。</p><p>若想了解详情可访问「<a href="https://hexo.io/" target="_blank" rel="noopener">hexo.io</a>」。</p><a id="more"></a><h2 id="壹-搭建环境"><a href="#壹-搭建环境" class="headerlink" title="壹 搭建环境"></a>壹 搭建环境</h2><ul><li>Mac OS、Windows 环境下的配置流程和步骤大同小异，而搭建环境的大致流程为：  <ul><li>Git 环境配置 ( Windows )</li><li>Node.Js 环境配置</li><li>Github 账号注册和配置</li><li>Hexo 的安装和配置</li></ul></li><li>考虑到是流程操作类的文章，为简单起见，则我们以 MacOS 和 Windows 版本分别说明情况：<ul><li><a href="#MacOS-版本">MacOS 版本</a></li><li><a href="#Windows-版本">Windows 版本</a></li></ul></li></ul><h3 id="MacOS-版本"><a href="#MacOS-版本" class="headerlink" title="MacOS 版本"></a>MacOS 版本</h3><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul><li>Xcode: Hexo的编译依赖于 Xcode<ul><li>Xcode 可自行到 Apple App Store 下载</li></ul></li><li><p>Node.Js: Hexo 是基于 Node.Js 开发的</p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noopener">官方下载</a></li><li>本地安装，文件包为「Node-Vx.x.x.pkg」</li><li><p>检测是否安装成功，当然返回版本信息即成功安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端下输入命令:  </span></span><br><span class="line">node -v  </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>Github Account ( <strong>已有账号、项目可忽略</strong> )</p><ul><li>注册账号「<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>」</li><li><p>创建代码库 </p><div class="note default"><p>具体操作步骤:  </p><ol><li>Add ( 右上角「+」图标 ) &gt; New Repository；  </li><li>Repository Name，填写<code>yourname.github.io</code>；        </li><li>Repository Description，填写<code>简单描述</code>；</li></ol></div></li><li><p>配置代码库</p><div class="note default"><p>具体操作步骤:  </p><ol><li>进入项目「yourname.github.io」；  </li><li>Settings &gt; GitHub Pages，开启<code>GH-Pages</code>功能；  </li><li>点击「Launch Automatic Page Generator」；</li></ol><p>第三步说明:<br>Github 将会自动替你创建出一个 GH-Pages 的页面。若配置没有问题，约15分钟后，yourname.github.io 就可以正常访问了，配置结束。</p></div></li></ul></li></ul><h4 id="安装-HEXO"><a href="#安装-HEXO" class="headerlink" title="安装 HEXO"></a>安装 HEXO</h4><h5 id="安装-HEXO-1"><a href="#安装-HEXO-1" class="headerlink" title="安装 HEXO"></a>安装 HEXO</h5><ul><li><p>本地选择安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo-site</span><br></pre></td></tr></table></figure></li><li><p>在线安装 HEXO ( <a href="http://npm.taobao.org/" target="_blank" rel="noopener">NPM淘宝源</a> )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g  </span><br><span class="line">hexo init  </span><br><span class="line">hexo install</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>检测是否安装成功，当然返回版本信息即成功安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ul><h5 id="运作-HEXO"><a href="#运作-HEXO" class="headerlink" title="运作 HEXO"></a>运作 HEXO</h5><ul><li><p>本地运作 HEXO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server<span class="comment"># 或简写 hexo s</span></span><br></pre></td></tr></table></figure></li><li><p>当终端提示以下信息，则本地配置工作基本完成。</p>  <div class="note default"><p>Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop. </p></div>##### 使用 HEXO<div class="note warning"><p>[注意] 此项操作，需要确保在 Hexo 安装目录下执行。 </p></div></li><li><p>新建一篇博文 ( 当然，更新过往的文章只需修改「Hexo &gt; Source &gt; _Posts」目录下相应的 MarkDown 文件 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">"Article Title"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>生成博文 ( 生成静态网页 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li></ul><h5 id="部署至-GitHub"><a href="#部署至-GitHub" class="headerlink" title="部署至 GitHub"></a>部署至 GitHub</h5><ul><li><p>部署至 Git 的准备工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在部署前，还需要安装「Git部署插件」:  </span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若没有安装该插件，会出现情况：</span></span><br><span class="line"><span class="comment"># deloyer not found:git</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>再者，与 Github 连接前需要获得授权，不然会出现以下情况 ( 本机没有配置 Public Key ):</p>  <div class="note default"><p>Permission denied (publickey).<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p></div></li><li><p>配置「SSH KEY / Public KEY」</p>  <div class="note info"><p>[注意] 若之前机器上配置了 Git 的信息，请跳过该步骤。 </p></div>   undefined- 配置「_config.yml」文件   - 在 Hexo 安装目录下找到 _config.yml 文件，如「~/你的安装目录/Hexo/_config.yml」。找到「deploy」字段，修改配置。<div class="note default"><p>deploy:<br>type: git<br>repo: <a href="https://github.com/yourname/yourname.github.io.git" target="_blank" rel="noopener">https://github.com/yourname/yourname.github.io.git</a><br>branch: master  </p></div><ul><li><p>注意: 冒号后面含一个空格；使用 Github 不用 branch 字段；若使用多个 deployer，则有：</p><div class="note default"><p>deploy:</p><ul><li>type: git<br>repo:</li><li>type: heroku<br>repo:</li></ul></div></li></ul></li><li><p>部署至 Git</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy  </span><br><span class="line">hexo d -g<span class="comment"># 即在部署之前先生成</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Windows-版本"><a href="#Windows-版本" class="headerlink" title="Windows 版本"></a>Windows 版本</h3><h4 id="配置环境-1"><a href="#配置环境-1" class="headerlink" title="配置环境"></a>配置环境</h4><div class="note default"><p>Github 账号注册和配置和 Hexo 的安装和配置，在 Windows 与 MacOS 上是通用的。因此，在 Windows 版本中，主要阐述 Node.Js和 Git 的安装和配置即可。 </p></div>- Node.Js 的安装和准备 - 下载并安装「[Node.Js for Windows x86/x64 bit](https://nodejs.org/en/download/)」 - 检测是否安装成功，当然返回版本信息即成功安装undefined- Git 的安装和准备 - 下载并安装「[Git for Windows x86/x64 bit](https://git-scm.com/download/win)」 - 检测是否安装成功，当然返回版本信息即成功安装undefined## 贰 优化拓展至此，Hexo 的安装以及 GitHub 的配置工作暂告一段落。能正常运行使用 Hexo 是没问题的，而下面的章节则是对 Hexo 的扩展和个性化定制，根据自己的需求挑选阅读、实践。### 套用一款主题Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。在 Hexo 中有两份主要的配置文件，其名称都是「_config.yml」。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为「`站点配置文件`」， 后者称为「`主题配置文件`」。具体以 NexT\\(^{[2]}\\) 为例说明，安装步骤如下。#### 下载主题  如果你熟悉 Git， 建议你使用`克隆最新版本`的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。undefined#### 启用主题  - 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到`theme`字段，并将其值更改为`next`。 > theme: next- 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 undefined#### 主题设定- 选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：  - Muse - 默认 Scheme，黑白主调，大量留白   - Mist - Muse 的紧凑版本，整洁有序的单栏外观   - Pisces - 双栏 Scheme，小家碧玉似的清新  undefined> Scheme 的切换通过更改`主题配置文件`，搜索「scheme」关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。- 设置语言编辑`站点配置文件`， 将`language`设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下 ( 更多请语言配置请参考下述表格 )： > language: zh-Hans  | 语言 | 代码 | 设定示例 || :---- | :---- | :---- || English | en | language: en || 简体中文 | zh-Hans| language: zh-Hans || Français | fr-FR | language: fr-FR || Português | pt | language: pt or pt-BR || 繁體中文 | zh-hk | language: zh-hk || Русский | языкru | language: ru || Deutsch | de | language: de || 日本語 | ja | language: ja || Indonesian | id | language: id || Korean | ko | language: ko |- 设置菜单菜单配置包括三个部分，第一是菜单项 ( 名称和链接 )，第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 [Font Awesome](http://fontawesome.io/)\\(^{[3]}\\) 提供的图标，600+ 的图标可满足大部分需求，且适配 Retina 屏幕。 编辑`主题配置文件`，修改以下内容：  <div class="note warning"><p>请注意键值（如 home）的大小写要严格匹配。 </p></div><ul><li><p>设定菜单内容，对应的字段是<code>menu</code>，菜单内容的设置格式是：<code>item name: link</code>。其中<code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives</span><br><span class="line"><span class="comment">#about: /about</span></span><br><span class="line"><span class="comment">#categories: /categories</span></span><br><span class="line">tags: /tags</span><br><span class="line"><span class="comment">#commonweal: /404.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若你的站点运行在子目录中，请将链接前缀的/去掉</span></span><br></pre></td></tr></table></figure><p>  NexT 默认的菜单项有( 标注 <code>*</code> 的项表示需要手动创建这个页面 )：</p></li></ul><table><thead><tr><th style="text-align:left">键值</th><th style="text-align:left">设定值</th><th style="text-align:left">显示文本(简体中文)</th></tr></thead><tbody><tr><td style="text-align:left">home</td><td style="text-align:left">home: /</td><td style="text-align:left">主页</td></tr><tr><td style="text-align:left">archives</td><td style="text-align:left">archives: /archives</td><td style="text-align:left">归档页</td></tr><tr><td style="text-align:left">categories</td><td style="text-align:left">categories: /categories</td><td style="text-align:left">分类页 <code>*</code></td></tr><tr><td style="text-align:left">tags</td><td style="text-align:left">tags: /tags</td><td style="text-align:left">标签页 <code>*</code></td></tr><tr><td style="text-align:left">about</td><td style="text-align:left">about: /about</td><td style="text-align:left">关于页面 <code>*</code></td></tr><tr><td style="text-align:left">commonweal</td><td style="text-align:left">commonweal: /404.html</td><td style="text-align:left">公益 404 <code>*</code></td></tr></tbody></table><ul><li><p>设置菜单项的显示文本，在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用这个名称查找对应的语言翻译，并提取显示文本。</p><p>  这些翻译文本放置在 NexT 主题目录下的<code>languages/{language}.yml</code> （ {language} 为你所使用的语言 )。</p><p>  以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在<code>menu</code>字段下添加一项：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: 首页</span><br><span class="line">archives: 归档</span><br><span class="line">categories: 分类</span><br><span class="line">tags: 标签</span><br><span class="line">about: 关于</span><br><span class="line">search: 搜索</span><br><span class="line">commonweal: 404</span><br><span class="line">something: 有料</span><br></pre></td></tr></table></figure></li><li><p>设定菜单项的图标，对应的字段是<code>menu_icons</code>。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment"># Icon Mapping.</span></span><br><span class="line">home: home</span><br><span class="line">about: user</span><br><span class="line">categories: th</span><br><span class="line">tags: tags</span><br><span class="line">archives: archive</span><br><span class="line">commonweal: heartbeat</span><br><span class="line"></span><br><span class="line"><span class="comment">#  此设定格式是「item name: icon name」</span></span><br><span class="line"><span class="comment"># 「item name」与上一步所配置的菜单名字对应</span></span><br><span class="line"><span class="comment"># 「icon name」是 Font Awesome 图标的名字</span></span><br><span class="line"><span class="comment"># 「enable」用于控制是否显示图标，你可以设置成「false」来去掉图标</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置侧栏 </p><p>  可以通过修改<code>主题配置文件</code>中的<code>sidebar</code>字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p><ul><li><p>设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：</p><blockquote><p>left - 靠左放置<br>right - 靠右放置  </p></blockquote><p> 目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:  </span><br><span class="line">position: left</span><br></pre></td></tr></table></figure></li><li><p>设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：</p> <div class="note info"><p>post - 默认行为，在文章页面（ 拥有目录列表 ）时显示<br>always - 在所有页面中都显示<br>hide - 在所有页面中都隐藏（ 可以手动展开 ）<br>remove - 完全移除</p></div>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">display: post</span><br></pre></td></tr></table></figure><p> 已知侧栏在 use motion: false 的情况下不会展示。影响版本5.0.0及更低版本。</p></li></ul></li><li><p>设置头像</p><p>  编辑<code>主题配置文件</code>， 修改字段<code>avatar</code>，值设置成头像的链接地址。其中，头像的链接地址可以是：</p><ul><li><p>站外链接</p><blockquote><p>avatar: <a href="http://example.com/avatar.png" target="_blank" rel="noopener">http://example.com/avatar.png</a></p></blockquote></li><li><p>站内资源 </p><blockquote><p>放置在「source/images/」目录下，images 为自建目录<br>avatar: avatar: /images/avatar.png</p></blockquote></li></ul></li></ul><h3 id="揽收实用插件"><a href="#揽收实用插件" class="headerlink" title="揽收实用插件"></a>揽收实用插件</h3><h2 id="叁-参考资料"><a href="#叁-参考资料" class="headerlink" title="叁 参考资料"></a>叁 参考资料</h2><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">[1] HexoJs.使用文档.2018</a><br><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">[2] NexT.使用文档.2018</a><br><a href="http://fontawesome.io/accessibility/" target="_blank" rel="noopener">[3] Dave Gandy.Font Awesome Accessibility</a><br><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">[4] 徐俊.手把手教你搭建属于自己的博客.CSDN.2017</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;Hexo\(^{[1]}\)，一个快速、简洁且高效的博客框架，若以个人博文为主导需求，它的强大毋庸置疑。    &lt;/p&gt;
&lt;p&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能；且基于 Node.Js 所带来的超快生成速度，百页博文秒级渲染；开放性 API 以及丰富的插件等，即功能来得纯粹，不失个性化定制，上手容易且操作便捷。更重要的一点，它是开源的、免费的博客框架，数据保存在本地以及 Github 上，相信在众多博客产品中选择、博弈，相信 Hexo 的表现不会令你失望。&lt;/p&gt;
&lt;p&gt;若想了解详情可访问「&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo.io&lt;/a&gt;」。&lt;/p&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.kofes.cn/categories/Project/"/>
    
    
      <category term="hexo" scheme="http://www.kofes.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>C语言程序设计 ( 应试篇 )</title>
    <link href="http://www.kofes.cn/2017/04/C-Programming-Design-Learning.html"/>
    <id>http://www.kofes.cn/2017/04/C-Programming-Design-Learning.html</id>
    <published>2017-04-08T17:36:28.000Z</published>
    <updated>2018-01-21T17:27:53.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从标题中透漏的信息可知，本系列文章是围绕 “C语言程序设计” 展开学习的笔记总结，且目的很明确，笔记内容偏应试，适用于计算机等级考试、考研专业课(C语言)等的复习使用。文章推崇总结性、比对性的学习方法，对于模糊的知识模块需自行查阅参考书目，深化理解或可达到理想的效果。</p><a id="more"></a><p>针对C语言程序，推荐几本辅导复习的书目：</p><blockquote><ul><li>基础篇 :<ul><li>《谭浩强:C语言程序设计》: 必不可少的经典教程，权威性的标准答案源。( 因讨论条件而异，如编译系统不同，部分题目的答案就具有了争议性 )</li><li>《明解C语言》: 入门基础教学。值得称赞的是，每个知识模块都符有实例，且实例的源码结构清晰，代码规范及注释到位，非常适合入门使用。</li></ul></li><li>进阶篇 :<ul><li>《征服C指针》: C语言的学习过程中，指针的运用是最大的难关。无论是在实际应用、应试中都是不可忽视的。对于作者前桥和弥，其一针见血的文风，在掌握一定基础之后，是深入了解C语言的一位不可多得 “良师益友” ( 书中有不少作者交谈式的独白，别有一番阅读风味 )。</li></ul></li></ul></blockquote><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><ul><li><a href="#1-壹-程序设计和C语言">壹 程序设计和C语言</a></li><li><a href="#2-贰-程序之魂：算法">贰 程序之魂：算法</a></li><li><a href="#3-叁-简单的C语言程序设计">叁 简单的C语言程序设计</a></li><li><a href="#4-肆-选择结构程序设计">肆 选择结构程序设计</a></li><li><a href="#5-伍-循环结构程序设计">伍 循环结构程序设计</a></li><li><a href="#6-陆-数组">陆 数组</a></li><li><a href="#7-柒-函数">柒 函数</a></li><li><a href="#8-捌-指针">捌 指针</a></li><li><a href="#9-玖-构造类型：用户自己建立数据结构">玖 构造类型：用户自己建立数据结构</a></li><li><a href="#10-拾-文件处理">拾 文件处理</a></li></ul><h2 id="1-壹-程序设计和C语言"><a href="#1-壹-程序设计和C语言" class="headerlink" title="1 壹 程序设计和C语言"></a>1 壹 程序设计和C语言</h2><h3 id="1-1-计算机程序与语言"><a href="#1-1-计算机程序与语言" class="headerlink" title="1.1 计算机程序与语言"></a>1.1 计算机程序与语言</h3><p> 程序：计算机能识别和执行的指令。<br> 语言：人和计算机交流、人和计算机能识别的语言。<br> 计算机语言发展阶段：   </p><table><thead><tr><th style="text-align:center">机器语言</th><th style="text-align:center">符号语言</th><th style="text-align:center">高级语言 ( 面向过程、面向对象 )</th></tr></thead><tbody><tr><td style="text-align:center">0和1指针</td><td style="text-align:center">英文、数字表示指令</td><td style="text-align:center">人类自然语言和数字语言</td></tr></tbody></table><h3 id="1-2-C语言"><a href="#1-2-C语言" class="headerlink" title="1.2 C语言"></a>1.2 C语言</h3><ul><li><p>特点</p><ul><li>语言简洁、紧凑，使用方便、灵活</li><li>运算符丰富 ( 单目、双目、三目运算符 )</li><li>数据类型丰富 ( 整型、浮点型、字符型、数组类型、指针类型、结构体类型、共用体类型、枚举型 )</li><li>结构体控制语句</li><li>直接访问物理地址 ( 对硬件直接操作 )</li><li>可移植性好</li></ul></li><li><p>结构</p><ul><li>以程序由一个或着多个 <strong>源文件</strong> 组成。  <blockquote><p>源文件中包括：<br>预处理命令 ( #include、#define、#typedef等 )<br>全局声明 ( 全局变量、局部变量 )<br>函数定义 ( 参考函数原型 )</p></blockquote></li><li>函数是C程序的主要组成部分。</li><li>一函数包括函数首部和 <strong>函数体</strong>。  <blockquote><p>函数体包括：<br>声明部分和执行部分。 </p></blockquote></li><li>程序总是从main函数开始执行的。  <blockquote><p>main函数有且仅有一个。</p></blockquote></li><li>C程序对计算机的操作有C语言完成。</li><li>数据声明和语句必须有分号 ( 作为结束 )。</li><li>C本身不提供输入输出语句。</li></ul></li></ul><h3 id="1-3-程序设计的任务"><a href="#1-3-程序设计的任务" class="headerlink" title="1.3 程序设计的任务"></a>1.3 程序设计的任务</h3><ol><li>问题分析  </li><li>设计算法  </li><li>编写程序  </li><li>对源文件编辑、编译 ( *.obj ) 和连接 ( *.exe )  </li><li>运行程序并分析结果  </li><li>编写程序文档 </li></ol><blockquote><p>[注] 对于编译，预编译和连接的概念及比对： </p><ul><li>编译：检索语言错误；把源程序转为二进制形式的目标程序。</li><li>预编译：通过预处理得到的信息与程序其他部分一起，组成完整的、可以正式编译的源程序。</li><li>连接：与函数库相连接。</li></ul></blockquote><h2 id="2-贰-程序之魂：算法"><a href="#2-贰-程序之魂：算法" class="headerlink" title="2 贰 程序之魂：算法"></a>2 贰 程序之魂：算法</h2><h3 id="2-1-引入"><a href="#2-1-引入" class="headerlink" title="2.1 引入"></a>2.1 引入</h3><ul><li><p>对数据的描述：所用数据的类型和数据的 <strong>组织形式</strong>。  </p><blockquote><p>组织形式：数据结构 – 特定关系的数据元素的集合</p></blockquote></li><li><p>对操作的描述：计算机进行操作的步骤 – 算法</p></li><li><p>从简理解：<strong>数据结构 + 算法 = 程序</strong></p></li></ul><h3 id="2-2-算法"><a href="#2-2-算法" class="headerlink" title="2.2 算法"></a>2.2 算法</h3><ul><li><p>概念：对特定问题求解的方法和描述。</p></li><li><p>特征  </p><ul><li>有穷性：有穷时间执行结束；</li><li>确定性：算法唯一执行路径，既相同输入执行相同路径；</li><li>可行性：有限次；</li><li>零或一个以上的输入；</li><li>一个或以上的输出；</li></ul></li><li><p>要求  </p><ul><li>正确性；</li><li>可读性；</li><li>健壮性；</li><li><p>效率与低存储量需求 ( 时间复杂度和空间复杂度 )  </p><blockquote><ul><li>时间复杂度 &lt;– 渐进时间复杂度 &lt;– 算法执行时间的增长率和f(n)的增长率相同。  </li></ul><blockquote><p>[说明]  </p><ol><li>渐进时间复杂度：<strong>T(n) = Big O(f(n))</strong>  </li><li>f(n)为问题规模n的某个函数。  </li><li>算法中的基本运算( 最深层循环内的语句 )的频度与T(n)同数量级。  </li></ol></blockquote><ul><li>空间复杂度 &lt;– 算法所需存储空间的量度。  </li></ul><blockquote><p>[说明]  </p><ol><li>渐进空间复杂度：<strong>S(n) = Big O(f(n))</strong>  </li><li>原地工作：额外空间相对输入的数据量来说是常数。</li></ol></blockquote></blockquote></li></ul></li></ul><h3 id="2-3-三种基本结构和改进流程图"><a href="#2-3-三种基本结构和改进流程图" class="headerlink" title="2.3 三种基本结构和改进流程图"></a>2.3 三种基本结构和改进流程图</h3><ul><li>三种基本结构<ul><li>顺序结构；</li><li>选择结构；</li><li>循环结构：当型循环结构 / 直到型循环结构；</li></ul></li><li>改进的流程图：N-S流程图</li></ul><h3 id="2-4-结构化程序设计方法"><a href="#2-4-结构化程序设计方法" class="headerlink" title="2.4 结构化程序设计方法"></a>2.4 结构化程序设计方法</h3><ul><li>自顶向下；</li><li>逐步细化；</li><li>模块化设计：<strong>分而治之</strong>；    <code>注意模块独立性</code></li><li>结构化编码；</li></ul><h2 id="3-叁-简单的C语言程序设计"><a href="#3-叁-简单的C语言程序设计" class="headerlink" title="3 叁 简单的C语言程序设计"></a>3 叁 简单的C语言程序设计</h2><h3 id="3-1-数据的表现形式及运算"><a href="#3-1-数据的表现形式及运算" class="headerlink" title="3.1 数据的表现形式及运算"></a>3.1 数据的表现形式及运算</h3><h4 id="3-1-1-常量"><a href="#3-1-1-常量" class="headerlink" title="3.1.1 常量"></a>3.1.1 常量</h4><ul><li>概念：程序运行期间，其值不能改变。</li><li>类型    <ul><li>整型常量  </li><li>字符常量 ( 与常变量作比对 <strong>[注释1]</strong> )<ul><li>普通字符  </li><li>转移字符：\n, \t, \012 (8进制), \x41 (16进制)</li><li>符号常量：<code>#define PI 3.14159</code></li></ul></li><li>实型常量<ul><li>10进制小数形式：3.14L</li><li>指数形式(科学计数法):<br>8.7e-25(正确);<br>8.7e-2.5(错误)；<br>87e+25(正确);  </li></ul></li></ul></li></ul><h4 id="3-1-2-变量"><a href="#3-1-2-变量" class="headerlink" title="3.1.2 变量"></a>3.1.2 变量</h4><p><code>先定义，后使用</code> </p><ul><li>包含属性<ul><li>数据类型 ( 整型、浮点型、字符型 )  </li><li>存储类别 ( 自动变量，静态变量 )  </li></ul></li><li>概念：程序运行期间，其值可以改变。</li><li><p>类型</p><ul><li>常变量：变量存在期间其值不能改变。 <code>const int a = 10</code>  </li><li>自动变量与静态变量  </li><li>全局变量与局部变量  <blockquote><p>从存储位置、生存周期、作用区域讨论差异性。<strong>[注释2]</strong></p></blockquote></li></ul></li><li><p>标识符<br>一个对象的名称。除关键字外，字符、数字和下划线组成。且要求只能是字母或下划线开头。    </p></li></ul><blockquote><p>[注释1] 符号常量与常变量的比较。</p></blockquote><table><thead><tr><th style="text-align:left">符号常量</th><th style="text-align:left">常变量</th></tr></thead><tbody><tr><td style="text-align:left">不占内存单元，预编译后符号不复存在</td><td style="text-align:left">占存储单元</td></tr><tr><td style="text-align:left">不能重新赋值</td><td style="text-align:left">不能改变其值</td></tr></tbody></table><blockquote><p>[注释2] 局部变量与全局变量，自动变量与静态变量，内部函数与外部函数的比较。</p></blockquote><table><thead><tr><th style="text-align:left">局部变量</th><th style="text-align:left">全局变量</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">存放于动态存储区</td><td style="text-align:left">存放于静态存储区</td><td style="text-align:left">位置</td></tr><tr><td style="text-align:left">在定义函数内起作用</td><td style="text-align:left">自定义位置开始，本文件起作用</td><td style="text-align:left">作用域</td></tr><tr><td style="text-align:left">函数调用完释放内存</td><td style="text-align:left">程序结束时释放内存</td><td style="text-align:left">生存期</td></tr></tbody></table><blockquote><ul><li>静态的局部变量，存放于静态存储区，程序结束时释放内存。</li><li>静态的全局变量，不是因声明static，而误解全局变量才存放于静态存储区。</li><li>局部变量，声明存储类型指变量存储区以及产生的生存期问题。<br>  全局变量，声明存储类型指变量作用域的扩展问题。</li></ul></blockquote><table><thead><tr><th style="text-align:left">自动变量</th><th style="text-align:left">静态变量</th></tr></thead><tbody><tr><td style="text-align:left">1. 声明该变量的语句块被执行结束释放内存(<strong>栈</strong>)</td><td style="text-align:left">1. 程序结束时才释放内存</td></tr><tr><td style="text-align:left">2. 每次函数调用时赋值</td><td style="text-align:left">2. 保留上一步的赋值</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">3. 在编时赋予初值0或’\0’</td></tr></tbody></table><blockquote><p>[注] 对比malloc()函数分配的内存，需调用free()函数释放内存。(<strong>堆</strong>)</p></blockquote><table><thead><tr><th style="text-align:left">内部函数</th><th style="text-align:left">外部函数 (default)</th></tr></thead><tbody><tr><td style="text-align:left">本文件内使用(不限位置)</td><td style="text-align:left">可供其他文件使用(不限位置)</td></tr><tr><td style="text-align:left">定义：static 函数类型 函数名</td><td style="text-align:left">定义：(extern) 函数类型 函数名</td></tr></tbody></table><h4 id="3-1-3-数据类型"><a href="#3-1-3-数据类型" class="headerlink" title="3.1.3 数据类型"></a>3.1.3 数据类型</h4><ul><li>基本类型</li></ul><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">关键字</th><th style="text-align:left">字节</th><th style="text-align:left">取值范围</th></tr></thead><tbody><tr><td style="text-align:left">整型</td><td style="text-align:left">int</td><td style="text-align:left">2/4</td><td style="text-align:left">$-2^{15}$ ~ $-2^{15}-1$ / $-2^{31}$ ~ $2^{31}-1$</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">unsigned int</td><td style="text-align:left">2/4</td><td style="text-align:left">0 ~ $-2^{16}-1$ / 0 ~ $-2^{32}-1$</td></tr><tr><td style="text-align:left">字符型</td><td style="text-align:left">char</td><td style="text-align:left">1</td><td style="text-align:left">$-2^7$ ~ $2^7-1$</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">unsigned char</td><td style="text-align:left">1</td><td style="text-align:left">0 ~ $2^8-1$</td></tr><tr><td style="text-align:left">单浮点</td><td style="text-align:left">float (有效小数：6)</td><td style="text-align:left">4</td><td style="text-align:left">–</td></tr><tr><td style="text-align:left">双浮点</td><td style="text-align:left">double (有效小数：15)</td><td style="text-align:left">8</td><td style="text-align:left">–</td></tr></tbody></table><blockquote><p>[注] 关于基本类型的特别说明  </p><ul><li>字符是按其ASCII形式存储的。</li><li>单浮点定义：float a = 3.14f</li><li>双浮点定义：double a = 3.14</li><li>长浮点定义：long double a = 3.14L</li></ul></blockquote><ul><li><p>派生类型</p><ul><li>指针类型：指向函数的指针、多重指针</li><li>数组类型：指针数组</li></ul></li><li><p>构造类型</p><ul><li>结构体类型</li><li>共同体类型</li><li>枚举类型  <blockquote><p>详情见第玖章：构造类型</p></blockquote></li></ul></li><li><p>类型转换：  </p><ul><li>低精度向高精度转换；  </li><li>强制转换括号加类型；   <code>int a = (int)3.14</code>  </li><li>多类型变量混合运算，取最高精度的类型；</li></ul></li></ul><h2 id="4-肆-选择结构程序设计"><a href="#4-肆-选择结构程序设计" class="headerlink" title="4 肆 选择结构程序设计"></a>4 肆 选择结构程序设计</h2><h3 id="4-1-关系运算符及其优先次序"><a href="#4-1-关系运算符及其优先次序" class="headerlink" title="4.1 关系运算符及其优先次序"></a>4.1 关系运算符及其优先次序</h3><ul><li><p>各类运算符的优先级：</p><ul><li><p>单目运算符 &gt; 双目运算符 (算术、关系、逻辑) &gt; 三目运算符</p></li><li><p>优先级由高到低排序：<br>初等运算符：<code>()，[]，-&gt;，.</code><br>单目运算符：<code>!，++，--，~</code><br>算术运算符：<code>*，/，%</code>，<code>+，-</code><br>关系运算符：<code>&gt;，&lt;，&gt;=，&lt;=</code>，<code>!=，==</code><br>逻辑运算符：<code>&amp;&amp;，||</code><br>条件运算符：<code>a &gt; b : a : b</code><br>赋值运算符：<code>a += 1</code><br>逗号运算符：<code>(a,b)</code>      </p></li><li><p>结合方式<br>自左向右：<code>初等、单目、关系、逻辑、逗号运算符</code><br>自右向左：<code>条件、赋值运算符</code>  </p><blockquote><p>同一级的运算符，由结合方式决定优先级。</p></blockquote></li></ul></li></ul><h3 id="4-2-表达式"><a href="#4-2-表达式" class="headerlink" title="4.2 表达式"></a>4.2 表达式</h3><ul><li><p>算术表达式：先乘除模，后加减，再由“自左向右”原则运算。</p></li><li><p>混合运算</p><ul><li>优先级：遵循各运算符的优先次序。</li><li>结合性：算术运算符 (自左向右)；赋值运算符 (自右向左)。</li><li>不同类型的混合运算：结果的类型为<strong>最高精度</strong>的数据类型。</li></ul></li></ul><h3 id="4-3-运算符与表达式"><a href="#4-3-运算符与表达式" class="headerlink" title="4.3 运算符与表达式"></a>4.3 运算符与表达式</h3><ul><li><p>关系运算符和关系表达式 ( a+b&gt;c ) -&gt; True or False?  </p><blockquote><p>0表示假，!0表示真。</p></blockquote></li><li><p>逻辑运算符和逻辑表达式</p><ul><li>逻辑运算：5 &amp;&amp; 4 =&gt; 1；5 &amp;&amp; 0 =&gt; 0；  </li><li><p>按位逻辑：5 &amp; 4 =&gt; 4；  </p><blockquote><p>[注] 关于逻辑运算与按位逻辑的比较  </p><ul><li>优先级：按位逻辑运算 &gt; 逻辑运算  </li><li>max = a &amp; b；min = a | b    </li></ul></blockquote></li></ul></li><li><p>条件运算符和条件表达式：a &gt; b ? a : b</p></li></ul><h3 id="4-4-选择结构的嵌套"><a href="#4-4-选择结构的嵌套" class="headerlink" title="4.4 选择结构的嵌套"></a>4.4 选择结构的嵌套</h3><ul><li><p>if语句只有两个分支可供选择，else总是与它上面最近的未配对的if()配对。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(express1)&#123;</span><br><span class="line"><span class="keyword">if</span>(express2)&#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(express3)&#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch语句实现多分支选择结构</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(express1)&#123; <span class="comment">// 整型、字符型</span></span><br><span class="line"><span class="keyword">case</span> 常量/常量表达式:语句<span class="number">1</span>；<span class="keyword">break</span>; <span class="comment">// break为拦截作用</span></span><br><span class="line"><span class="keyword">case</span> 常量/常量表达式:语句<span class="number">2</span>；<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: 语句<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-伍-循环结构程序设计"><a href="#5-伍-循环结构程序设计" class="headerlink" title="5 伍 循环结构程序设计"></a>5 伍 循环结构程序设计</h2><h3 id="5-1-while-语句实现"><a href="#5-1-while-语句实现" class="headerlink" title="5.1 while 语句实现"></a>5.1 while 语句实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">express1;</span><br><span class="line"><span class="keyword">while</span>(express2)&#123;</span><br><span class="line">express3;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-for-语句实现循环"><a href="#5-2-for-语句实现循环" class="headerlink" title="5.2 for 语句实现循环"></a>5.2 for 语句实现循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(express1; express2; express3)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-do…while-语句实现循环"><a href="#5-3-do…while-语句实现循环" class="headerlink" title="5.3 do…while() 语句实现循环"></a>5.3 do…while() 语句实现循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">express1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">express3;</span><br><span class="line">&#125; <span class="keyword">while</span>(express2);</span><br></pre></td></tr></table></figure><h3 id="5-4-break、continue与goto语句"><a href="#5-4-break、continue与goto语句" class="headerlink" title="5.4 break、continue与goto语句"></a>5.4 break、continue与goto语句</h3><ul><li>break：从循环体内跳出循环体。多层嵌套循环，跳出相邻一层循环。</li><li>continue：提前结束本次循环。</li><li>goto：跳出多层循环。</li></ul><h2 id="6-陆-数组"><a href="#6-陆-数组" class="headerlink" title="6 陆 数组"></a>6 陆 数组</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><ul><li>一组有序数据的集合。</li><li>数组中每一元素同属一个数据类型。</li><li>sname[0] &lt;=&gt; *(p+0) &lt;=&gt; 第一个数组元素。  </li></ul><h3 id="6-2-定义"><a href="#6-2-定义" class="headerlink" title="6.2 定义"></a>6.2 定义</h3><h4 id="6-2-1-一维数组"><a href="#6-2-1-一维数组" class="headerlink" title="6.2.1 一维数组"></a>6.2.1 一维数组</h4><ul><li><p>定义<br>类型符 数组名[常量表达式]     –&gt; 正确<br>类型符 数组名[变量] –&gt; 错误，不能为变量</p></li><li><p>初始化  </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;  </span><br><span class="line">in <span class="built_in">array</span>[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 5个元素都为0。</span></span><br></pre></td></tr></table></figure></li><li><p>引用  </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = &amp;<span class="built_in">array</span>[<span class="number">0</span>];<span class="comment">// 等同于 int *p = array;</span></span><br><span class="line">p++;<span class="comment">// 指针运算</span></span><br><span class="line">*(p+i);<span class="comment">// 取第i位元素</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-2-二维数组"><a href="#6-2-2-二维数组" class="headerlink" title="6.2.2 二维数组"></a>6.2.2 二维数组</h4><ul><li><p>定义：类型符 数组名[常量表达式][常量表达式]</p></li><li><p>初始化</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">2</span>][<span class="number">2</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;;<span class="comment">// 既只允许最外层元素个数定义时为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;;<span class="comment">// 正确 </span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[][<span class="number">2</span>] = &#123; &#123;&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125; &#125;;<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>引用</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="built_in">array</span>[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> *p = <span class="built_in">array</span>;</span><br><span class="line">*(*(p+j)+j); <span class="comment">// 等同于array[i][j];</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-3-字符数组"><a href="#6-2-3-字符数组" class="headerlink" title="6.2.3 字符数组"></a>6.2.3 字符数组</h4><ul><li><p>定义：char array[10]; &lt;=&gt; int array[10];</p><blockquote><p>字符型数组是以整型形式存放的 (ASCII)。</p></blockquote></li><li><p>初始化  </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">array</span>[<span class="number">0</span>] = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">array</span>[] = &#123;<span class="string">"Hello"</span>&#125;;</span><br><span class="line"><span class="comment">// 字符数组的存储情况：| H | e | l | l | o | \0 |</span></span><br><span class="line"><span class="comment">// sizeof() -- 6</span></span><br><span class="line"><span class="comment">// strlen() -- 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">array</span>[] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line"><span class="comment">// sizeof() -- 5</span></span><br><span class="line"><span class="comment">// strlen() -- 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="string">"Hello"</span>&#125;;</span><br><span class="line"><span class="comment">// sizeof() -- 4</span></span><br><span class="line"><span class="comment">// strlen() -- 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line"><span class="comment">// sizeof() -- 20</span></span><br><span class="line"><span class="comment">// strlen() -- 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">array</span> = <span class="string">"Hello"</span>; <span class="comment">// 字符串常量</span></span><br></pre></td></tr></table></figure><blockquote><p>[注]</p><ul><li>字符串常量不可以数组形式取具体位置进行元素修改。</li><li>( array == “Hello” ) =&gt; True or False ?<br>False，array与字符串常量比较的是内存地址。</li></ul></blockquote></li><li><p>引用 </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;<span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, <span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, <span class="built_in">array</span>);</span><br></pre></td></tr></table></figure><blockquote><p>[注]</p><ul><li>若字符数组中，存在’\0’两个或以上，系统则以第一次出现的位置提前终止字符输出。</li><li>stdin 也 gets() 搭配，可获得换行符、空格等字符。 (需结束标记符来终止输入)</li></ul></blockquote></li><li><p>应用  </p><blockquote><ul><li>字符串处理函数：<code>#include &lt;string.h&gt;</code></li><li>需掌握字符串函数自定义方法实现。</li><li>大部份字符串处理函数多数以标记量’\0’为临界点，若字符数组中含两个或或以上，需注意实际的结果。</li></ul></blockquote><ul><li>gets(字符数组) – 输入一字符串到字符数组中</li><li>puts(字符数组) – 输出一字符串到终端</li><li>strlen(字符数组) – 测一字符串的实际长度</li><li><p>strcat(char *src1, const char *src2);</p><blockquote><p>数组src2后接于src1，src1中的’\0’被覆盖。且数组src1必须足够大，以容纳数组src2。</p></blockquote></li><li><p>strcpy(char *src1, const char *src2);</p><blockquote><p>数组src1必须足够大，以容纳数组src2。</p></blockquote></li><li><p>strcmp(const char *src1, const char *src2);</p><blockquote><p>实际为ASCII的比较，其返回值为 <0、==0，>0 的情况。</0、==0，></p></blockquote></li><li><p>strlwr(字符串) – 将字符串中大写字母转为小写字母</p></li><li>strupr(字符串) – 将字符串中小写字母转为大写字母</li><li>atoi(字符串) – 字符串转int型</li><li>atol(字符串) – 字符串转long型</li><li>atof(字符串) – 字符串转double型  <blockquote><p>引用atoi()、atol()、atof()函数需引用<code>#include &lt;stdlib.h&gt;</code>  </p></blockquote></li></ul></li></ul><h2 id="7-柒-函数"><a href="#7-柒-函数" class="headerlink" title="7 柒 函数"></a>7 柒 函数</h2><h3 id="7-1-为什么要用函数"><a href="#7-1-为什么要用函数" class="headerlink" title="7.1 为什么要用函数"></a>7.1 为什么要用函数</h3><ul><li>模块化程序设计：每一函数实现一特定的功能，函数的名称既反映功能。</li><li><p>更好地代码复用：使用库函数；使用自己编写的函数。 </p><blockquote><p>代码复用：减少重复编码程序段的工作量。 </p><p>[说明]  </p><p>对于所有完成相同功能的组件，应抽象出一个接口，它们都实现该接口。<br>具体在Java中，所有完成相同功能的组件都<strong>实现该接口</strong>或<strong>从该抽象类中的继承</strong>。</p></blockquote></li></ul><h3 id="7-2-定义函数"><a href="#7-2-定义函数" class="headerlink" title="7.2 定义函数"></a>7.2 定义函数</h3><p><code>建立存储空间的声明</code>  </p><p>函数返回类型 函数名 函数参数 函数体 (变量定义、声明，执行语句)</p><blockquote><p>函数返回类型：基本数据类型 / void型<br>函数名：驼峰式命名法<br>函数参数：实参、形参  </p></blockquote><h3 id="7-3-函数声明"><a href="#7-3-函数声明" class="headerlink" title="7.3 函数声明"></a>7.3 函数声明</h3><p><code>不需要建立存储空间的声明</code></p><ul><li><p>函数原型 (Prototype)：函数返回类型、函数名、参数类型、参数个数、参数顺序</p></li><li><p>函数声明的方法</p><ul><li>使用函数原型；</li><li>同一源文件，在调用该函数的前面定义 (可打包到自定义头文件中)；</li></ul></li></ul><h3 id="7-4-函数调用"><a href="#7-4-函数调用" class="headerlink" title="7.4 函数调用"></a>7.4 函数调用</h3><ul><li>嵌套调用、递归调用 (直接或间接调用该函数本身)</li><li>实参和形参<ul><li>概念<br>实参：常量、变量或表达式、函数 (返回值)<br>形参：函数调用期间临时分配内存，值从实参中获得，调用结束后释放内存空间。</li><li>实质：值传递、地址传递</li></ul></li></ul><h2 id="8-捌-指针"><a href="#8-捌-指针" class="headerlink" title="8 捌 指针"></a>8 捌 指针</h2><h3 id="8-1-指针是什么"><a href="#8-1-指针是什么" class="headerlink" title="8.1 指针是什么"></a>8.1 指针是什么</h3><ul><li>指针变量：保存变量地址的变量。</li><li>指针类型<ul><li>指针类型的变量：存放地址</li><li>指针类型的值：对应内存地址存放的值  <blockquote><p>在 swap(int *a, int *b); 的案例中可以形象说明两者的区别。</p></blockquote></li></ul></li></ul><h3 id="8-2-指针移动-运算：加、减"><a href="#8-2-指针移动-运算：加、减" class="headerlink" title="8.2 指针移动 (运算：加、减)"></a>8.2 指针移动 (运算：加、减)</h3><p>对指针加一、减一运算，即地址会增加或减少一单位长度。单位长度具体具体指当前指针所指向数据类型的所占空间大小。</p><h3 id="8-3-指针类型"><a href="#8-3-指针类型" class="headerlink" title="8.3 指针类型"></a>8.3 指针类型</h3><h4 id="8-3-1-空指针"><a href="#8-3-1-空指针" class="headerlink" title="8.3.1 空指针"></a>8.3.1 空指针</h4><p>确保没有指向任何一个对象的指针。通常以宏定义NULL(0)表示空指针的常量值。</p><blockquote><p>关于NULL、0和’\0’，大部分情况都为零。特别地，  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="number">0</span>;<span class="comment">// 正确，编译器将指针指向内存地址为0处。 </span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="number">3</span>;<span class="comment">// 错误，赋值的数据类型不相符。</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-2-指针类型的派生"><a href="#8-3-2-指针类型的派生" class="headerlink" title="8.3.2 指针类型的派生"></a>8.3.2 指针类型的派生</h4><ul><li><p>指向函数的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (*func(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></li><li><p>指向数组的指针(多重指针)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-3-3-数组类型的派生"><a href="#8-3-3-数组类型的派生" class="headerlink" title="8.3.3 数组类型的派生"></a>8.3.3 数组类型的派生</h4><ul><li>指针数组<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[<span class="number">5</span>]; <span class="comment">// 存放5个指向int类型的指针。</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>[附] 用英语解读各种各样的C语言声明</p><table><thead><tr><th style="text-align:left">C语言</th><th style="text-align:left">英语表示</th><th style="text-align:left">中文表示</th></tr></thead><tbody><tr><td style="text-align:left">int huge;</td><td style="text-align:left">huge is int</td><td style="text-align:left">hoge是int型</td></tr><tr><td style="text-align:left">int huge[10];</td><td style="text-align:left">huge is array[10] of int</td><td style="text-align:left">hoge是int型的数组</td></tr><tr><td style="text-align:left">int huge[2][4];</td><td style="text-align:left">huge is array[2] of array[4] of int</td><td style="text-align:left">hoge是int型的数组的数组</td></tr><tr><td style="text-align:left">int *huge[10];</td><td style="text-align:left">huge is array[10] of point to int</td><td style="text-align:left">hoge是指向int型的指针的数组(存放指针变量)</td></tr><tr><td style="text-align:left">int (*huge)[10];</td><td style="text-align:left">hoge is pointer to array[10] of int</td><td style="text-align:left">hoge是指向int型的数组的指针</td></tr><tr><td style="text-align:left">int func(int a);</td><td style="text-align:left">func is function(int a) returning int</td><td style="text-align:left">func是返回int型的函数</td></tr><tr><td style="text-align:left">int (*func)(int a);</td><td style="text-align:left">func is pointer to function(int a) returning int</td><td style="text-align:left">func是指向返回int型值的函数的指针</td></tr></tbody></table></blockquote><h3 id="8-4-指针的应用"><a href="#8-4-指针的应用" class="headerlink" title="8.4 指针的应用"></a>8.4 指针的应用</h3><h4 id="8-4-1-指针与数组"><a href="#8-4-1-指针与数组" class="headerlink" title="8.4.1 指针与数组"></a>8.4.1 指针与数组</h4><ul><li><p>一维  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[i]<span class="comment">// 等同于 *(p+i)</span></span><br><span class="line">i[p]<span class="comment">// 等同于 *(i+p)</span></span><br><span class="line">&amp;p[i]<span class="comment">// 等同于 (p+i)，即第i个元素的地址</span></span><br></pre></td></tr></table></figure></li><li><p>二维  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">huge[i]<span class="comment">// 等同于 *(huge+i)，即第i行的首地址</span></span><br><span class="line">*(huge+i)[j]<span class="comment">// 等同于 *(*(p+j)+j)，即 huge[i][j]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-4-2-指针与字符串"><a href="#8-4-2-指针与字符串" class="headerlink" title="8.4.2 指针与字符串"></a>8.4.2 指针与字符串</h4><h5 id="8-4-2-1-字符指针变量"><a href="#8-4-2-1-字符指针变量" class="headerlink" title="8.4.2.1 字符指针变量"></a>8.4.2.1 字符指针变量</h5><ul><li><p>定义</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">array</span> = <span class="string">"World"</span>;</span><br><span class="line"><span class="built_in">array</span> = <span class="string">"hello"</span>;<span class="comment">// 改变指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">array</span>[] = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="built_in">array</span> = <span class="string">"World"</span>;<span class="comment">// 错误的做法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">array</span> = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">array</span> += <span class="number">6</span>;<span class="comment">// 改变指向 (首地址改变)</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="8-4-2-2-字符数组"><a href="#8-4-2-2-字符数组" class="headerlink" title="8.4.2.2 字符数组"></a>8.4.2.2 字符数组</h5><ul><li><p>定义: int array[] = “Hello”;</p></li><li><p>使用：printf(“%c”, array[0]);</p><blockquote><p>字符指针变量的值是不能改变的，既已是字符串常量。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="built_in">array</span> = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = <span class="string">'W'</span>;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="8-4-3-指针与函数"><a href="#8-4-3-指针与函数" class="headerlink" title="8.4.3 指针与函数"></a>8.4.3 指针与函数</h4><h5 id="8-4-3-1-作为参数"><a href="#8-4-3-1-作为参数" class="headerlink" title="8.4.3.1 作为参数"></a>8.4.3.1 作为参数</h5><p>即传递的是指向初始元素的指针。</p><ul><li>数组名作函数参数<ul><li>int func( int array[] ); </li><li>int func( int *array );</li></ul></li><li>多维数组作函数参数<ul><li>int func( int (*huge)[10] );</li><li>int func( int huge[2][4] );</li></ul></li><li>指向函数的指针作函数参数<ul><li>int func( int (*p)(int) ); </li></ul></li><li>指针数组作main函数形参<ul><li>int func( int argc, char *argv[] );   <blockquote><p>argv: 文件名 + 其他参数</p></blockquote></li></ul></li><li>字符指针作函数参数</li></ul><h5 id="8-4-3-2-作为返回值"><a href="#8-4-3-2-作为返回值" class="headerlink" title="8.4.3.2 作为返回值"></a>8.4.3.2 作为返回值</h5><p>返回指针值的函数，即返回的是地址。</p><blockquote><p>[如] 返回的指针指向结构体变量、字符变量等。</p></blockquote><h2 id="9-玖-构造类型：用户自己建立数据结构"><a href="#9-玖-构造类型：用户自己建立数据结构" class="headerlink" title="9 玖 构造类型：用户自己建立数据结构"></a>9 玖 构造类型：用户自己建立数据结构</h2><h3 id="9-1-结构体类型"><a href="#9-1-结构体类型" class="headerlink" title="9.1 结构体类型"></a>9.1 结构体类型</h3><ul><li><p>定义</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Name</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> word[<span class="number">59</span>];</span><br><span class="line">&#125; *p, name[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>初始化：所有成员一起赋值。</p></li><li><p>使用</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name[i].num;</span><br><span class="line">p-&gt;word[i];</span><br><span class="line">(*p).num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Name</span> *<span class="title">tmp</span>;</span></span><br><span class="line">tmp = name;</span><br><span class="line">(tmp++)-&gt;num;<span class="comment">// 先'++'操作，后'-&gt;'操作</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>大小：成员变量所占内存长度总和。</li></ul><h3 id="9-2-共用体类型"><a href="#9-2-共用体类型" class="headerlink" title="9.2 共用体类型"></a>9.2 共用体类型</h3><ul><li><p>定义</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> Name &#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">double</span> digital;</span><br><span class="line"><span class="keyword">char</span> word;</span><br><span class="line">&#125; *p, name[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>初始化：只允许给一个成员变量赋值。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> Name tmp = &#123;<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">union</span> Name tmp = &#123;.word = <span class="string">'Y'</span>&#125;;</span><br><span class="line">t.digital = <span class="number">2.0</span>;</span><br><span class="line">t.word = <span class="string">'N'</span>;<span class="comment">// 最终的赋值</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name[i].num;</span><br><span class="line">p-&gt;word[i];</span><br><span class="line">(*p).num;</span><br></pre></td></tr></table></figure></li></ul><ul><li>大小：成员变量所占内存长度最大者。</li></ul><blockquote><p>[注] 关于结构体、共用体类型的内存长度问题，遵循4字节倍数的原则进行内存布局对齐。<br>[如]<br>sizeof(struct Name) = 64 (63)<br>sizeof(union Name) = 4 (4)</p></blockquote><h3 id="9-3-枚举类型"><a href="#9-3-枚举类型" class="headerlink" title="9.3 枚举类型"></a>9.3 枚举类型</h3><ul><li><p>定义</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">sun, mon, tue, wed, thu, fir, sat <span class="comment">// 默认参数从0开始</span></span><br><span class="line">&#125; week;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>初始化</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">mon = <span class="number">1</span>, tue = <span class="number">2</span>, wed = <span class="number">3</span>, thu = <span class="number">4</span>, fir = <span class="number">5</span>, sat = <span class="number">6</span>，sun = <span class="number">7</span> <span class="comment">// 默认参数从0开始</span></span><br><span class="line">&#125; week;</span><br></pre></td></tr></table></figure></li><li><p>使用：week.mon;</p></li></ul><h3 id="9-4-Typedef-声明新类型名"><a href="#9-4-Typedef-声明新类型名" class="headerlink" title="9.4 Typedef 声明新类型名"></a>9.4 Typedef 声明新类型名</h3><ul><li>含义：引入变量别名，而不是另外地给变量分配空间。</li><li><p>使用</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Integer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> Integer;<span class="comment">// 若编译器中，int为2字节，满足移值需求可以long型替换。</span></span><br><span class="line">Interger num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>与 #define 宏定义的区别<br>#typedef：编译阶段处理<br>#define：预编译阶段处理，实质是字符串替换 </p></blockquote><h2 id="10-拾-文件处理"><a href="#10-拾-文件处理" class="headerlink" title="10 拾 文件处理"></a>10 拾 文件处理</h2><h3 id="10-1-文件与流"><a href="#10-1-文件与流" class="headerlink" title="10.1 文件与流"></a>10.1 文件与流</h3><ul><li><p>stdin – 标准输入流 – 用于读取普通输入的流，在大多数环境中为键盘输入。scanf()与getchar()等函数会从这个流中读取字符。</p></li><li><p>stdout - 标准输入流 – 用于写入普通输入的流，在大多数环境中为输出至显示器界面。printf()、puts()与putchar()等函数会向这个流写入字符。</p></li><li><p>stderr – 标准错误流 – 用于写出错误的流，在大多数环境中为输出至显示器界面。</p></li></ul><h3 id="10-2-文件分类"><a href="#10-2-文件分类" class="headerlink" title="10.2 文件分类"></a>10.2 文件分类</h3><ul><li>ASCII文件 (文本文件)：每一字节存放一字符的ASCII代码。</li><li><p>二进制文件</p><ul><li>优：节约存储空间</li><li><p>劣：精度有限</p><blockquote><p>[如] 整数10000<br>ASCII形式存储空间为5字节<br>二进制形式存储空间为4字节  </p></blockquote></li></ul></li></ul><h3 id="10-3-文件类型指针：FILE型"><a href="#10-3-文件类型指针：FILE型" class="headerlink" title="10.3 文件类型指针：FILE型"></a>10.3 文件类型指针：FILE型</h3><ul><li>需引用 <code>#include &lt;stdio.h&gt;</code><blockquote><p>[注] 指向文件的指针变量并不是指向外部介质上的数据文件开头，而是指向内存中的文件信息区的开头。</p></blockquote></li></ul><h3 id="10-4-打开文件"><a href="#10-4-打开文件" class="headerlink" title="10.4 打开文件"></a>10.4 打开文件</h3><ul><li>原型：FILE *fopen(const char *filename, const char *mode);</li><li>定义：FILE *fp = fopen(“example.txt”, “r”);</li></ul><table><thead><tr><th style="text-align:center">文件类型</th><th style="text-align:center">文本文件</th><th style="text-align:center">二进制文件</th></tr></thead><tbody><tr><td style="text-align:center">模式</td><td style="text-align:center">r   w   a</td><td style="text-align:center">rb   wb   ab</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">只读；只写(文件存在，则长度清零)；追加</td><td style="text-align:center">只读；只写(文件存在，则长度清零)；追加</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">r+   w+   a+</td><td style="text-align:center">rb+   wb+   ab+</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">读和写(打开文件)；读和写(建立文件；文件存在，则长度清零)；读和写(打开文件)</td><td style="text-align:center">读和写(打开文件；文件存在，则长度清零)；读和写(建立文件)；读和写(打开文件)</td></tr></tbody></table><h3 id="10-5-关闭文件"><a href="#10-5-关闭文件" class="headerlink" title="10.5 关闭文件"></a>10.5 关闭文件</h3><ul><li><p>原型：int fclose(FILE *stream);</p><blockquote><ul><li>返回值 ( True：0；False：EOF(-1) )  </li><li>[注]<br>若不关闭文件，将会造成数据丢失。<br>数据存储的过程：数据 –&gt; 缓存区 (充满) –&gt; 文件<br>若突然关闭文件，缓存区传输到文件的过程给中断，造成数据丢失。</li></ul></blockquote></li></ul><h3 id="10-6-顺序读写数据文件"><a href="#10-6-顺序读写数据文件" class="headerlink" title="10.6 顺序读写数据文件"></a>10.6 顺序读写数据文件</h3><ul><li><p>格式化读取文件</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// Ture - 返回成功赋值的输入项数</span></span><br><span class="line"><span class="comment">// False - 返回文件结束标记EOF(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用实例</span></span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s%lf%lf"</span>, name, &amp;height, &amp;weight);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>格式化写入文件</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// Ture - 返回发送的字符数</span></span><br><span class="line"><span class="comment">// False - 返回文件结束标记EOF(-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用实例：获得当前运行时间，并存入文本中</span></span><br><span class="line"><span class="keyword">time_t</span> current = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">timer</span> = <span class="title">Localtime</span>(&amp;<span class="title">current</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将日历时间time_t型的值转换为分解时间tm结构体类型的值</span></span><br><span class="line"><span class="comment">// 其中，tm结构体为：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tm_sec;<span class="comment">// 秒(0 - 61)</span></span><br><span class="line"><span class="keyword">int</span> tm_min;<span class="comment">// 分 (0 - 59)</span></span><br><span class="line"><span class="keyword">int</span> tm_hour;<span class="comment">// 时 (0 - 24)</span></span><br><span class="line"><span class="keyword">int</span> tm_mday;<span class="comment">// 日 (1 - 31)</span></span><br><span class="line"><span class="keyword">int</span> tm_mon;<span class="comment">// 月 (0 - 11)</span></span><br><span class="line"><span class="keyword">int</span> tm_year;<span class="comment">// 从1900至今，经历了多少年</span></span><br><span class="line"><span class="keyword">int</span> tm_wday;<span class="comment">// 星期 (0 - 6)</span></span><br><span class="line"><span class="keyword">int</span> tm_yday;<span class="comment">// 经历天数 (从1月1日计起)</span></span><br><span class="line"><span class="keyword">int</span> tm_tm_isdst;<span class="comment">// 夏时令 (夏季时间将提前1小时)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d %d %d %d %d"</span>, </span><br><span class="line">timer-&gt;tm_year + <span class="number">1900</span>, timer-&gt;tm_mon + <span class="number">1</span>,</span><br><span class="line">timer-&gt;tm_day, timer-&gt;tm_hour, </span><br><span class="line">timer-&gt;tm_min, timer-&gt;tm_sec);</span><br><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure></li><li><p>读入／写入一个字符</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetc</span><span class="params">(FILE *stream)</span></span>;<span class="comment">// 读入一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(FILE *stream)</span></span>;<span class="comment">// 写入一个字符</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">// Ture - 返回所读的字符数</span></span><br><span class="line"><span class="comment">// False - 返回文件结束标记EOF(-1)</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>用二进制方式向文件读写一组数据</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE *stream);</span><br><span class="line"><span class="comment">// 从ptr指向的数组中将最多nmemb个长度为size的元素写入stream指向的流中。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> fread(<span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">szie_t</span> nmemb, FILE *stream);</span><br><span class="line"><span class="comment">// 从stream流中读取nmemb个长度为size的元素写入到ptr数组。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="10-7-随机读写数据文件"><a href="#10-7-随机读写数据文件" class="headerlink" title="10.7 随机读写数据文件"></a>10.7 随机读写数据文件</h3><h4 id="10-7-1-文件位置标记及其定位"><a href="#10-7-1-文件位置标记及其定位" class="headerlink" title="10.7.1 文件位置标记及其定位"></a>10.7.1 文件位置标记及其定位</h4><ul><li><p>文件位置标记：文件头、读写当前位置、文件尾</p></li><li><p>文件位置标记的定位：fseek(文件类型指针, 位移量, 起始点);</p><blockquote><p>文件开始位置 -&gt; SEEK_SET -&gt; 0<br>文件当前位置 -&gt; SEEK_CUR -&gt; 1<br>文件末尾位置 -&gt; SEEK_END -&gt; 2  </p></blockquote></li></ul><h4 id="10-7-2-随机读写"><a href="#10-7-2-随机读写" class="headerlink" title="10.7.2 随机读写"></a>10.7.2 随机读写</h4><p>结合fseek()与fread()函数实现。</p><blockquote><p>[如] 读取第1，3，5，7，9个学生数据并输出。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">fseek(fp, i*<span class="keyword">sizeof</span>(struct Student), <span class="number">0</span>);</span><br><span class="line">fread(&amp;student[i], <span class="keyword">sizeof</span>(struct Student), <span class="number">1</span>, fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从标题中透漏的信息可知，本系列文章是围绕 “C语言程序设计” 展开学习的笔记总结，且目的很明确，笔记内容偏应试，适用于计算机等级考试、考研专业课(C语言)等的复习使用。文章推崇总结性、比对性的学习方法，对于模糊的知识模块需自行查阅参考书目，深化理解或可达到理想的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://www.kofes.cn/categories/Reading/"/>
    
    
      <category term="C Programming" scheme="http://www.kofes.cn/tags/C-Programming/"/>
    
  </entry>
  
</feed>
